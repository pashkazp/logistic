import { IterableX } from '../iterable';
/**
 * @ignore
 */
export function defaultCompare(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
/**
 * @ignore
 */
class ExtremaByIterable extends IterableX {
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    *[Symbol.iterator]() {
        let result = [], next;
        const it = this._source[Symbol.iterator]();
        if ((next = it.next()).done) {
            throw new Error('Sequence contains no elements');
        }
        let current = next.value, resKey = this._keyFn(current);
        result.push(current);
        while (!(next = it.next()).done) {
            let curr = next.value, key = this._keyFn(curr);
            const c = this._cmp(key, resKey);
            if (c === 0) {
                result.push(curr);
            }
            else if (c > 0) {
                result = [curr];
                resKey = key;
            }
        }
        yield* result;
    }
}
/**
 * @ignore
 */
export function extremaBy(source, keyFn, cmp) {
    return new ExtremaByIterable(source, keyFn, cmp);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL19leHRyZW1hYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV4Qzs7R0FFRztBQUNILE1BQU0seUJBQTRCLEdBQU0sRUFBRSxRQUFXO0lBQ25ELE1BQU0sQ0FBQyxHQUFHLEdBQUcsUUFBUSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0RCxDQUFDO0FBRUQ7O0dBRUc7QUFDSCx1QkFBdUMsU0FBUSxTQUFrQjtJQUsvRCxZQUNJLE1BQXlCLEVBQ3pCLEtBQTJCLEVBQzNCLEdBQWlDO1FBQ25DLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksTUFBTSxHQUFjLEVBQUUsRUFBRSxJQUFJLENBQUM7UUFDakMsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUMzQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4RCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JCLE9BQU8sQ0FBQyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNoQyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ2pDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEIsQ0FBQztZQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hCLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDZixDQUFDO1FBQ0gsQ0FBQztRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7Q0FDRjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxvQkFDRixNQUF5QixFQUN6QixLQUEyQixFQUMzQixHQUFpQztJQUNuQyxNQUFNLENBQUMsSUFBSSxpQkFBaUIsQ0FBZ0IsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNsRSxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL19leHRyZW1hYnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdENvbXBhcmU8VD4oa2V5OiBULCBtaW5WYWx1ZTogVCk6IG51bWJlciB7XG4gIHJldHVybiBrZXkgPiBtaW5WYWx1ZSA/IDEgOiBrZXkgPCBtaW5WYWx1ZSA/IC0xIDogMDtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIEV4dHJlbWFCeUl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfa2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5O1xuICBwcml2YXRlIF9jbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5LFxuICAgICAgY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5Rm4gPSBrZXlGbjtcbiAgICB0aGlzLl9jbXAgPSBjbXA7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IHJlc3VsdDogVFNvdXJjZVtdID0gW10sIG5leHQ7XG4gICAgY29uc3QgaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGlmICgobmV4dCA9IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBubyBlbGVtZW50cycpO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50ID0gbmV4dC52YWx1ZSwgcmVzS2V5ID0gdGhpcy5fa2V5Rm4oY3VycmVudCk7XG4gICAgcmVzdWx0LnB1c2goY3VycmVudCk7XG4gICAgd2hpbGUgKCEobmV4dCA9IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgbGV0IGN1cnIgPSBuZXh0LnZhbHVlLCBrZXkgPSB0aGlzLl9rZXlGbihjdXJyKTtcbiAgICAgIGNvbnN0IGMgPSB0aGlzLl9jbXAoa2V5LCByZXNLZXkpO1xuICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY3Vycik7XG4gICAgICB9IGVsc2UgaWYgKGMgPiAwKSB7XG4gICAgICAgIHJlc3VsdCA9IFtjdXJyXTtcbiAgICAgICAgcmVzS2V5ID0ga2V5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHlpZWxkKiByZXN1bHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHRyZW1hQnk8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeHRyZW1hQnlJdGVyYWJsZTxUU291cmNlLCBUS2V5Pihzb3VyY2UsIGtleUZuLCBjbXApO1xufVxuIl19
