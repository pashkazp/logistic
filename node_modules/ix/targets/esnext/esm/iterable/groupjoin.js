import { IterableX } from '../iterable';
import { createGrouping } from './_grouping';
import { empty } from './empty';
import { identity } from '../internal/identity';
class GroupJoinIterable extends IterableX {
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    *[Symbol.iterator]() {
        const map = createGrouping(this._inner, this._innerSelector, identity);
        for (let outerElement of this._outer) {
            const outerKey = this._outerSelector(outerElement);
            const innerElements = map.has(outerKey) ? map.get(outerKey) : empty();
            yield this._resultSelector(outerElement, innerElements);
        }
    }
}
export function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2dyb3Vwam9pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDN0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFaEQsdUJBQXVELFNBQVEsU0FBa0I7SUFPL0UsWUFDSSxLQUF1QixFQUN2QixLQUF1QixFQUN2QixhQUFzQyxFQUN0QyxhQUFzQyxFQUN0QyxjQUFtRTtRQUNyRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQixNQUFNLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZFLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDbkQsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBcUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLEVBQVUsQ0FBQztZQUNoRyxNQUFNLElBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQzFELENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLG9CQUNGLEtBQXVCLEVBQ3ZCLEtBQXVCLEVBQ3ZCLGFBQXNDLEVBQ3RDLGFBQXNDLEVBQ3RDLGNBQW1FO0lBQ3JFLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUMxQixLQUFLLEVBQ0wsS0FBSyxFQUNMLGFBQWEsRUFDYixhQUFhLEVBQ2IsY0FBYyxDQUFDLENBQUM7QUFDcEIsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9ncm91cGpvaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVHcm91cGluZyB9IGZyb20gJy4vX2dyb3VwaW5nJztcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9lbXB0eSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcblxuY2xhc3MgR3JvdXBKb2luSXRlcmFibGU8VE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHQ+IGV4dGVuZHMgSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcHJpdmF0ZSBfb3V0ZXI6IEl0ZXJhYmxlPFRPdXRlcj47XG4gIHByaXZhdGUgX2lubmVyOiBJdGVyYWJsZTxUSW5uZXI+O1xuICBwcml2YXRlIF9vdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleTtcbiAgcHJpdmF0ZSBfaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXk7XG4gIHByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj4pID0+IFRSZXN1bHQ7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBvdXRlcjogSXRlcmFibGU8VE91dGVyPixcbiAgICAgIGlubmVyOiBJdGVyYWJsZTxUSW5uZXI+LFxuICAgICAgb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXksXG4gICAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSxcbiAgICAgIHJlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj4pID0+IFRSZXN1bHQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX291dGVyID0gb3V0ZXI7XG4gICAgdGhpcy5faW5uZXIgPSBpbm5lcjtcbiAgICB0aGlzLl9vdXRlclNlbGVjdG9yID0gb3V0ZXJTZWxlY3RvcjtcbiAgICB0aGlzLl9pbm5lclNlbGVjdG9yID0gaW5uZXJTZWxlY3RvcjtcbiAgICB0aGlzLl9yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IG1hcCA9IGNyZWF0ZUdyb3VwaW5nKHRoaXMuX2lubmVyLCB0aGlzLl9pbm5lclNlbGVjdG9yLCBpZGVudGl0eSk7XG4gICAgZm9yIChsZXQgb3V0ZXJFbGVtZW50IG9mIHRoaXMuX291dGVyKSB7XG4gICAgICBjb25zdCBvdXRlcktleSA9IHRoaXMuX291dGVyU2VsZWN0b3Iob3V0ZXJFbGVtZW50KTtcbiAgICAgIGNvbnN0IGlubmVyRWxlbWVudHMgPSBtYXAuaGFzKG91dGVyS2V5KSA/IDxJdGVyYWJsZTxUSW5uZXI+Pm1hcC5nZXQob3V0ZXJLZXkpIDogZW1wdHk8VElubmVyPigpO1xuICAgICAgeWllbGQgdGhpcy5fcmVzdWx0U2VsZWN0b3Iob3V0ZXJFbGVtZW50LCBpbm5lckVsZW1lbnRzKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwSm9pbjxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXI6IEl0ZXJhYmxlPFRPdXRlcj4sXG4gICAgaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj4sXG4gICAgb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXksXG4gICAgaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXksXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogSXRlcmFibGU8VElubmVyPikgPT4gVFJlc3VsdCk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgR3JvdXBKb2luSXRlcmFibGU8VE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHQ+KFxuICAgIG91dGVyLFxuICAgIGlubmVyLFxuICAgIG91dGVyU2VsZWN0b3IsXG4gICAgaW5uZXJTZWxlY3RvcixcbiAgICByZXN1bHRTZWxlY3Rvcik7XG59XG4iXX0=
