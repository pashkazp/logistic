import { IterableX } from '../iterable';
import { identity } from '../internal/identity';
import { comparer as defaultComparer } from '../internal/comparer';
class DistinctUntilChangedIterable extends IterableX {
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    *[Symbol.iterator]() {
        let currentKey = {}, hasCurrentKey = false;
        for (let item of this._source) {
            let key = this._keySelector(item);
            let comparerEquals = false;
            if (hasCurrentKey) {
                comparerEquals = this._comparer(currentKey, key);
            }
            if (!hasCurrentKey || !comparerEquals) {
                hasCurrentKey = true;
                currentKey = key;
                yield item;
            }
        }
    }
}
/**
 * Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
 * @param {Iterable<TSource>} source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<TSource>} Sequence without adjacent non-distinct elements.
 */
export function distinctUntilChanged(source, keySelector = identity, comparer = defaultComparer) {
    return new DistinctUntilChangedIterable(source, keySelector, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2Rpc3RpbmN0dW50aWxjaGFuZ2VkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxRQUFRLElBQUksZUFBZSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFbkUsa0NBQWtELFNBQVEsU0FBa0I7SUFLMUUsWUFDSSxNQUF5QixFQUN6QixXQUFxQyxFQUNyQyxRQUFnRDtRQUNsRCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQixJQUFJLFVBQVUsR0FBUyxFQUFFLEVBQUUsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUNqRCxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM5QixJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2xDLElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztZQUMzQixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUFDLENBQUM7WUFDeEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO2dCQUN0QyxhQUFhLEdBQUcsSUFBSSxDQUFDO2dCQUNyQixVQUFVLEdBQUcsR0FBRyxDQUFDO2dCQUNqQixNQUFNLElBQUksQ0FBQztZQUNiLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSwrQkFDRixNQUF5QixFQUN6QixjQUF3QyxRQUFRLEVBQ2hELFdBQW1ELGVBQWU7SUFDcEUsTUFBTSxDQUFDLElBQUksNEJBQTRCLENBQWdCLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDeEYsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9kaXN0aW5jdHVudGlsY2hhbmdlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgY29tcGFyZXIgYXMgZGVmYXVsdENvbXBhcmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuXG5jbGFzcyBEaXN0aW5jdFVudGlsQ2hhbmdlZEl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfa2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleTtcbiAgcHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgICBjb21wYXJlcjogKGZpcnN0OiBUS2V5LCBzZWNvbmQ6IFRLZXkpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IGN1cnJlbnRLZXkgPSA8VEtleT57fSwgaGFzQ3VycmVudEtleSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBsZXQga2V5ID0gdGhpcy5fa2V5U2VsZWN0b3IoaXRlbSk7XG4gICAgICBsZXQgY29tcGFyZXJFcXVhbHMgPSBmYWxzZTtcbiAgICAgIGlmIChoYXNDdXJyZW50S2V5KSB7IGNvbXBhcmVyRXF1YWxzID0gdGhpcy5fY29tcGFyZXIoY3VycmVudEtleSwga2V5KTsgfVxuICAgICAgaWYgKCFoYXNDdXJyZW50S2V5IHx8ICFjb21wYXJlckVxdWFscykge1xuICAgICAgICBoYXNDdXJyZW50S2V5ID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudEtleSA9IGtleTtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGNvbnNlY3V0aXZlIGRpc3RpbmN0IGVsZW1lbnRzIGJhc2VkIG9uIGEga2V5IHZhbHVlIGJ5IHVzaW5nIHRoZSBzcGVjaWZpZWQgZXF1YWxpdHkgY29tcGFyZXIgdG8gY29tcGFyZSBrZXkgdmFsdWVzLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUU291cmNlPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFRTb3VyY2UpOiBUS2V5fSBba2V5U2VsZWN0b3JdIEtleSBzZWxlY3Rvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogVEtleSwgeTogVEtleSk6IGJvb2xlYW59IFtjb21wYXJlcl0gQ29tcGFyZXIgdXNlZCB0byBjb21wYXJlIGtleSB2YWx1ZXMuXG4gKiBAcmV0dXJuIHtJdGVyYWJsZTxUU291cmNlPn0gU2VxdWVuY2Ugd2l0aG91dCBhZGphY2VudCBub24tZGlzdGluY3QgZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZDxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgPSBpZGVudGl0eSxcbiAgICBjb21wYXJlcjogKGZpcnN0OiBUS2V5LCBzZWNvbmQ6IFRLZXkpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiAgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEaXN0aW5jdFVudGlsQ2hhbmdlZEl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5U2VsZWN0b3IsIGNvbXBhcmVyKTtcbn1cbiJdfQ==
