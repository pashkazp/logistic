import { IterableX } from '../iterable';
import { isIterable } from '../internal/isiterable';
class FlattenIterable extends IterableX {
    constructor(source, depth) {
        super();
        this._source = source;
        this._depth = depth;
    }
    *_flatten(source, depth) {
        if (depth === 0) {
            for (let item of source) {
                yield item;
            }
            return;
        }
        for (let item of source) {
            if (isIterable(item)) {
                for (let innerItem of this._flatten(item, depth - 1)) {
                    yield innerItem;
                }
            }
            else {
                yield item;
            }
        }
    }
    [Symbol.iterator]() {
        return this._flatten(this._source, this._depth)[Symbol.iterator]();
    }
}
/**
 * Flattens the source sequence until the specified depth.
 * @param {Iterable<T>} source Source sequence.
 * @param {Number} depth The depth to flatten the source sequence.
 * @returns {Iterable<T>} The flattened sequence, flattened to the specified depth.
 */
export function flatten(source, depth = Infinity) {
    return new FlattenIterable(source, depth);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZsYXR0ZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFcEQscUJBQStCLFNBQVEsU0FBa0I7SUFJdkQsWUFBWSxNQUF5QixFQUFFLEtBQWE7UUFDbEQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQsQ0FBUyxRQUFRLENBQUMsTUFBeUIsRUFBRSxLQUFhO1FBQ3hELEVBQUUsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBQUMsTUFBTSxJQUFJLENBQUM7WUFBQyxDQUFDO1lBQ3hDLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLEVBQUUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JCLEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQUMsTUFBTSxTQUFTLENBQUM7Z0JBQUMsQ0FBQztZQUM1RSxDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ04sTUFBTSxJQUFJLENBQUM7WUFDYixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUNyRSxDQUFDO0NBQ0Y7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sa0JBQXFCLE1BQW1CLEVBQUUsUUFBZ0IsUUFBUTtJQUN0RSxNQUFNLENBQUMsSUFBSSxlQUFlLENBQUksTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQy9DLENBQUMiLCJmaWxlIjoiaXRlcmFibGUvZmxhdHRlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi9pbnRlcm5hbC9pc2l0ZXJhYmxlJztcblxuY2xhc3MgRmxhdHRlbkl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfZGVwdGg6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBkZXB0aDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZGVwdGggPSBkZXB0aDtcbiAgfVxuXG4gIHByaXZhdGUgKl9mbGF0dGVuKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGRlcHRoOiBudW1iZXIpOiBJdGVyYWJsZTxUU291cmNlPiB7XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICBmb3IgKGxldCBpdGVtIG9mIHNvdXJjZSkgeyB5aWVsZCBpdGVtOyB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IGl0ZW0gb2Ygc291cmNlKSB7XG4gICAgICBpZiAoaXNJdGVyYWJsZShpdGVtKSkge1xuICAgICAgICBmb3IgKGxldCBpbm5lckl0ZW0gb2YgdGhpcy5fZmxhdHRlbihpdGVtLCBkZXB0aCAtIDEpKSB7IHlpZWxkIGlubmVySXRlbTsgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmxhdHRlbih0aGlzLl9zb3VyY2UsIHRoaXMuX2RlcHRoKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBGbGF0dGVucyB0aGUgc291cmNlIHNlcXVlbmNlIHVudGlsIHRoZSBzcGVjaWZpZWQgZGVwdGguXG4gKiBAcGFyYW0ge0l0ZXJhYmxlPFQ+fSBzb3VyY2UgU291cmNlIHNlcXVlbmNlLlxuICogQHBhcmFtIHtOdW1iZXJ9IGRlcHRoIFRoZSBkZXB0aCB0byBmbGF0dGVuIHRoZSBzb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcmV0dXJucyB7SXRlcmFibGU8VD59IFRoZSBmbGF0dGVuZWQgc2VxdWVuY2UsIGZsYXR0ZW5lZCB0byB0aGUgc3BlY2lmaWVkIGRlcHRoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPihzb3VyY2U6IEl0ZXJhYmxlPFQ+LCBkZXB0aDogbnVtYmVyID0gSW5maW5pdHkpOiBJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IEZsYXR0ZW5JdGVyYWJsZTxUPihzb3VyY2UsIGRlcHRoKTtcbn1cbiJdfQ==
