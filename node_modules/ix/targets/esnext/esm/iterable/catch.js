import { IterableX } from '../iterable';
import { returnIterator } from '../internal/returniterator';
class CatchIterable extends IterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    *[Symbol.iterator]() {
        let error = null, hasError = false;
        for (let source of this._source) {
            const it = source[Symbol.iterator]();
            error = null;
            hasError = false;
            while (1) {
                let c = {};
                try {
                    const { done, value } = it.next();
                    if (done) {
                        returnIterator(it);
                        break;
                    }
                    c = value;
                }
                catch (e) {
                    error = e;
                    hasError = true;
                    returnIterator(it);
                    break;
                }
                yield c;
            }
            if (!hasError) {
                break;
            }
        }
        if (hasError) {
            throw error;
        }
    }
}
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @param {Iterabe<Iterable<TSource>>} source Source sequences.
 * @return {Iterable<TSource>} Sequence that continues to concatenate source sequences while errors occur.
 */
export function _catchAll(source) {
    return new CatchIterable(source);
}
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @param {Iterable<TSource>} source The first source.
 * @param {...Iterable<TSource>} args The rest of the sequence that continues to concatenate source sequences while errors occur.
 */
export function _catch(source, ...args) {
    return new CatchIterable([source, ...args]);
}
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @param {...Iterable<TSource>} source Sequence that continues to concatenate source sequences while errors occur.
 * @return {Iterable<TSource>} Sequence that continues to concatenate source sequences while errors occur.
 */
export function _catchStatic(...source) {
    return new CatchIterable(source);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2NhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRTVELG1CQUE2QixTQUFRLFNBQWtCO0lBR3JELFlBQVksTUFBbUM7UUFDN0MsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEIsSUFBSSxLQUFLLEdBQUcsSUFBSSxFQUFFLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFFbkMsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDaEMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1lBRXJDLEtBQUssR0FBRyxJQUFJLENBQUM7WUFDYixRQUFRLEdBQUcsS0FBSyxDQUFDO1lBRWpCLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1QsSUFBSSxDQUFDLEdBQVksRUFBRSxDQUFDO2dCQUVwQixJQUFJLENBQUM7b0JBQ0gsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQ2xDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ1QsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQUNuQixLQUFLLENBQUM7b0JBQ1IsQ0FBQztvQkFDRCxDQUFDLEdBQUcsS0FBSyxDQUFDO2dCQUNaLENBQUM7Z0JBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDWCxLQUFLLEdBQUcsQ0FBQyxDQUFDO29CQUNWLFFBQVEsR0FBRyxJQUFJLENBQUM7b0JBQ2hCLGNBQWMsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbkIsS0FBSyxDQUFDO2dCQUNSLENBQUM7Z0JBRUQsTUFBTSxDQUFDLENBQUM7WUFDVixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUFDLENBQUM7UUFDM0IsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLEtBQUssQ0FBQztRQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNGO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sb0JBQTZCLE1BQW1DO0lBQ3BFLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBVSxNQUFNLENBQUMsQ0FBQztBQUM1QyxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0saUJBQTBCLE1BQXlCLEVBQUUsR0FBRyxJQUF5QjtJQUNyRixNQUFNLENBQUMsSUFBSSxhQUFhLENBQVUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQ3ZELENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSx1QkFBZ0MsR0FBRyxNQUEyQjtJQUNsRSxNQUFNLENBQUMsSUFBSSxhQUFhLENBQVUsTUFBTSxDQUFDLENBQUM7QUFDNUMsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9jYXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IHJldHVybkl0ZXJhdG9yIH0gZnJvbSAnLi4vaW50ZXJuYWwvcmV0dXJuaXRlcmF0b3InO1xuXG5jbGFzcyBDYXRjaEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj47XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgZXJyb3IgPSBudWxsLCBoYXNFcnJvciA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgc291cmNlIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgY29uc3QgaXQgPSBzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuXG4gICAgICBlcnJvciA9IG51bGw7XG4gICAgICBoYXNFcnJvciA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgYyA9IDxUU291cmNlPnt9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gaXQubmV4dCgpO1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICByZXR1cm5JdGVyYXRvcihpdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYyA9IHZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm5JdGVyYXRvcihpdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB5aWVsZCBjO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc0Vycm9yKSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgaWYgKGhhc0Vycm9yKSB7IHRocm93IGVycm9yOyB9XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2VxdWVuY2UgYnkgY29uY2F0ZW5hdGluZyBzb3VyY2Ugc2VxdWVuY2VzIHVudGlsIGEgc291cmNlIHNlcXVlbmNlIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBAcGFyYW0ge0l0ZXJhYmU8SXRlcmFibGU8VFNvdXJjZT4+fSBzb3VyY2UgU291cmNlIHNlcXVlbmNlcy5cbiAqIEByZXR1cm4ge0l0ZXJhYmxlPFRTb3VyY2U+fSBTZXF1ZW5jZSB0aGF0IGNvbnRpbnVlcyB0byBjb25jYXRlbmF0ZSBzb3VyY2Ugc2VxdWVuY2VzIHdoaWxlIGVycm9ycyBvY2N1ci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaEFsbDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPEl0ZXJhYmxlPFRTb3VyY2U+Pik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ2F0Y2hJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzZXF1ZW5jZSBieSBjb25jYXRlbmF0aW5nIHNvdXJjZSBzZXF1ZW5jZXMgdW50aWwgYSBzb3VyY2Ugc2VxdWVuY2UgY29tcGxldGVzIHN1Y2Nlc3NmdWxseS5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZSBUaGUgZmlyc3Qgc291cmNlLlxuICogQHBhcmFtIHsuLi5JdGVyYWJsZTxUU291cmNlPn0gYXJncyBUaGUgcmVzdCBvZiB0aGUgc2VxdWVuY2UgdGhhdCBjb250aW51ZXMgdG8gY29uY2F0ZW5hdGUgc291cmNlIHNlcXVlbmNlcyB3aGlsZSBlcnJvcnMgb2NjdXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2g8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgLi4uYXJnczogSXRlcmFibGU8VFNvdXJjZT5bXSk6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ2F0Y2hJdGVyYWJsZTxUU291cmNlPihbc291cmNlLCAuLi5hcmdzXSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNlcXVlbmNlIGJ5IGNvbmNhdGVuYXRpbmcgc291cmNlIHNlcXVlbmNlcyB1bnRpbCBhIHNvdXJjZSBzZXF1ZW5jZSBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICogQHBhcmFtIHsuLi5JdGVyYWJsZTxUU291cmNlPn0gc291cmNlIFNlcXVlbmNlIHRoYXQgY29udGludWVzIHRvIGNvbmNhdGVuYXRlIHNvdXJjZSBzZXF1ZW5jZXMgd2hpbGUgZXJyb3JzIG9jY3VyLlxuICogQHJldHVybiB7SXRlcmFibGU8VFNvdXJjZT59IFNlcXVlbmNlIHRoYXQgY29udGludWVzIHRvIGNvbmNhdGVuYXRlIHNvdXJjZSBzZXF1ZW5jZXMgd2hpbGUgZXJyb3JzIG9jY3VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoU3RhdGljPFRTb3VyY2U+KC4uLnNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT5bXSk6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ2F0Y2hJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19
