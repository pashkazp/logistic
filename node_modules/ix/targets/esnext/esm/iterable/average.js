import { identity } from '../internal/identity';
/**
 * Computes the average of a sequence of values from the sequence either from the sequence itself
 * or from the selector function.
 * @example
 * // Using non chained version
 * const result = average([1, 2, 3]);
 * const result = Ix.Iterable.of(1, 2, 3).average();
 * console.log(result);
 * @param {Iterable<any>} source A sequence of values to calculate the average of.
 * @param {function(x: any): number} [selector] A transform function to apply to each element.
 * @returns {number} The average of the sequence of values.
 */
export function average(source, selector = identity) {
    let sum = 0;
    let count = 0;
    for (let item of source) {
        sum += selector(item);
        count++;
    }
    if (count === 0) {
        throw new Error('Empty collection');
    }
    return sum / count;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2F2ZXJhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBS2hEOzs7Ozs7Ozs7OztHQVdHO0FBQ0gsTUFBTSxrQkFBa0IsTUFBcUIsRUFBRSxXQUErQixRQUFRO0lBQ3BGLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDeEIsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLENBQUMiLCJmaWxlIjoiaXRlcmFibGUvYXZlcmFnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuXG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZShzb3VyY2U6IEl0ZXJhYmxlPG51bWJlcj4sIHNlbGVjdG9yPzogKHg6IG51bWJlcikgPT4gbnVtYmVyKTogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2U8VD4oc291cmNlOiBJdGVyYWJsZTxUPiwgc2VsZWN0b3I/OiAoeDogVCkgPT4gbnVtYmVyKTogbnVtYmVyO1xuXG4vKipcbiAqIENvbXB1dGVzIHRoZSBhdmVyYWdlIG9mIGEgc2VxdWVuY2Ugb2YgdmFsdWVzIGZyb20gdGhlIHNlcXVlbmNlIGVpdGhlciBmcm9tIHRoZSBzZXF1ZW5jZSBpdHNlbGZcbiAqIG9yIGZyb20gdGhlIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqIC8vIFVzaW5nIG5vbiBjaGFpbmVkIHZlcnNpb25cbiAqIGNvbnN0IHJlc3VsdCA9IGF2ZXJhZ2UoWzEsIDIsIDNdKTtcbiAqIGNvbnN0IHJlc3VsdCA9IEl4Lkl0ZXJhYmxlLm9mKDEsIDIsIDMpLmF2ZXJhZ2UoKTtcbiAqIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gKiBAcGFyYW0ge0l0ZXJhYmxlPGFueT59IHNvdXJjZSBBIHNlcXVlbmNlIG9mIHZhbHVlcyB0byBjYWxjdWxhdGUgdGhlIGF2ZXJhZ2Ugb2YuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHg6IGFueSk6IG51bWJlcn0gW3NlbGVjdG9yXSBBIHRyYW5zZm9ybSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGVsZW1lbnQuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBUaGUgYXZlcmFnZSBvZiB0aGUgc2VxdWVuY2Ugb2YgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZShzb3VyY2U6IEl0ZXJhYmxlPGFueT4sIHNlbGVjdG9yOiAoeDogYW55KSA9PiBudW1iZXIgPSBpZGVudGl0eSk6IG51bWJlciB7XG4gIGxldCBzdW0gPSAwO1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGxldCBpdGVtIG9mIHNvdXJjZSkge1xuICAgIHN1bSArPSBzZWxlY3RvcihpdGVtKTtcbiAgICBjb3VudCsrO1xuICB9XG5cbiAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbXB0eSBjb2xsZWN0aW9uJyk7XG4gIH1cblxuICByZXR1cm4gc3VtIC8gY291bnQ7XG59XG4iXX0=
