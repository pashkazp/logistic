import { AsyncIterableX } from '../asynciterable';
import { bindCallback } from '../internal/bindcallback';
class FilterIterable extends AsyncIterableX {
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    async *[Symbol.asyncIterator]() {
        let i = 0;
        for await (let item of (this._source)) {
            if (await this._predicate(item, i++)) {
                yield item;
            }
        }
    }
}
/**
* Filters a sequence of values based on a predicate.
* @param {Iterable<T | Promise<T>> | AsyncIterable<T>} source Source sequence.
* @param {function(value: T, index: number): boolean | Promise<boolean>} predicate A function to test each source element for a condition.
* @param {Object} [thisArg] Value to use as this when executing callback.
* @return {AsyncIterable<T>} Sequence that contains elements from the input sequence that satisfy the condition.
*/
export function filterAsync(source, predicate, thisArg) {
    return new FilterIterable(source, bindCallback(predicate, thisArg, 2));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZpbHRlcmFzeW5jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFeEQsb0JBQThCLFNBQVEsY0FBdUI7SUFJM0QsWUFDSSxNQUF5RSxFQUN6RSxTQUF3RTtRQUMxRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO0lBQzlCLENBQUM7SUFFRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLEdBQUcsQ0FBQyxLQUFLLENBQUwsQ0FBTyxJQUFJLElBQUksSUFBNEIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlELEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JDLE1BQU0sSUFBSSxDQUFDO1lBQ2IsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRDs7Ozs7O0VBTUU7QUFDRixNQUFNLHNCQUNGLE1BQXlFLEVBQ3pFLFNBQXdFLEVBQ3hFLE9BQWE7SUFDZixNQUFNLENBQUMsSUFBSSxjQUFjLENBQVUsTUFBTSxFQUFFLFlBQVksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEYsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9maWx0ZXJhc3luYy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuXG5jbGFzcyBGaWx0ZXJJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4+IHwgQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4+IHwgQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgYXdhaXQgKGxldCBpdGVtIG9mIDxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pih0aGlzLl9zb3VyY2UpKSB7XG4gICAgICBpZiAoYXdhaXQgdGhpcy5fcHJlZGljYXRlKGl0ZW0sIGkrKykpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4qIEZpbHRlcnMgYSBzZXF1ZW5jZSBvZiB2YWx1ZXMgYmFzZWQgb24gYSBwcmVkaWNhdGUuXG4qIEBwYXJhbSB7SXRlcmFibGU8VCB8IFByb21pc2U8VD4+IHwgQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZS5cbiogQHBhcmFtIHtmdW5jdGlvbih2YWx1ZTogVCwgaW5kZXg6IG51bWJlcik6IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+fSBwcmVkaWNhdGUgQSBmdW5jdGlvbiB0byB0ZXN0IGVhY2ggc291cmNlIGVsZW1lbnQgZm9yIGEgY29uZGl0aW9uLlxuKiBAcGFyYW0ge09iamVjdH0gW3RoaXNBcmddIFZhbHVlIHRvIHVzZSBhcyB0aGlzIHdoZW4gZXhlY3V0aW5nIGNhbGxiYWNrLlxuKiBAcmV0dXJuIHtBc3luY0l0ZXJhYmxlPFQ+fSBTZXF1ZW5jZSB0aGF0IGNvbnRhaW5zIGVsZW1lbnRzIGZyb20gdGhlIGlucHV0IHNlcXVlbmNlIHRoYXQgc2F0aXNmeSB0aGUgY29uZGl0aW9uLlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXJBc3luYzxUU291cmNlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPixcbiAgICB0aGlzQXJnPzogYW55KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEZpbHRlckl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgYmluZENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMikpO1xufVxuIl19
