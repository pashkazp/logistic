import { AsyncIterableX } from '../asynciterable';
import { MaxRefCountList, RefCountList } from '../iterable/_refcountlist';
import { create } from './create';
class MemoizeAsyncBuffer extends AsyncIterableX {
    constructor(source, buffer) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = buffer;
    }
    async *[Symbol.asyncIterator]() {
        let i = 0;
        try {
            while (1) {
                let hasValue = false, current = {};
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let next = await this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        throw this._error;
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
}
export function memoize(source, readerCount = -1, selector) {
    if (readerCount === -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new RefCountList(readerCount));
    }
    return create(() => selector(memoize(source, readerCount))[Symbol.asyncIterator]());
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvbWVtb2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFpQixlQUFlLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDekYsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyx3QkFBNEIsU0FBUSxjQUFpQjtJQU1uRCxZQUFZLE1BQXdCLEVBQUUsTUFBd0I7UUFDNUQsS0FBSyxFQUFFLENBQUM7UUFIRixhQUFRLEdBQVksS0FBSyxDQUFDO1FBSWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLElBQUksQ0FBQztZQUNILE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1QsSUFBSSxRQUFRLEdBQUcsS0FBSyxFQUFFLE9BQU8sR0FBTSxFQUFFLENBQUM7Z0JBQ3RDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQ25CLElBQUksQ0FBQzs0QkFDSCxJQUFJLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7NEJBQ3JDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7NEJBQ3RCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0NBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NEJBQUMsQ0FBQzt3QkFDekMsQ0FBQzt3QkFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDOzRCQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzt3QkFDdkIsQ0FBQztvQkFDSCxDQUFDO29CQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNsQixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUM7b0JBQ3BCLENBQUM7b0JBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFBQyxDQUFDO2dCQUMvQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLENBQUM7Z0JBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDYixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLEtBQUssQ0FBQztnQkFDUixDQUFDO2dCQUVELENBQUMsRUFBRSxDQUFDO1lBQ04sQ0FBQztRQUNILENBQUM7Z0JBQVMsQ0FBQztZQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7Q0FDRjtBQVFELE1BQU0sa0JBQ0YsTUFBOEIsRUFDOUIsY0FBc0IsQ0FBQyxDQUFDLEVBQ3hCLFFBQW9FO0lBQ3RFLEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksa0JBQWtCLENBQVUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLElBQUksZUFBZSxFQUFXLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsSUFBSSxrQkFBa0IsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxZQUFZLENBQVUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUNqSCxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBb0IsTUFBTSxRQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUFDMUcsQ0FBQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL21lbW9pemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgSVJlZkNvdW50TGlzdCwgTWF4UmVmQ291bnRMaXN0LCBSZWZDb3VudExpc3QgfSBmcm9tICcuLi9pdGVyYWJsZS9fcmVmY291bnRsaXN0JztcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJy4vY3JlYXRlJztcblxuY2xhc3MgTWVtb2l6ZUFzeW5jQnVmZmVyPFQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VD4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmF0b3I8VD47XG4gIHByaXZhdGUgX2J1ZmZlcjogSVJlZkNvdW50TGlzdDxUPjtcbiAgcHJpdmF0ZSBfZXJyb3I6IGFueTtcbiAgcHJpdmF0ZSBfc3RvcHBlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYXRvcjxUPiwgYnVmZmVyOiBJUmVmQ291bnRMaXN0PFQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fYnVmZmVyID0gYnVmZmVyO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgaGFzVmFsdWUgPSBmYWxzZSwgY3VycmVudCA9IDxUPnt9O1xuICAgICAgICBpZiAoaSA+PSB0aGlzLl9idWZmZXIuY291bnQpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxldCBuZXh0ID0gYXdhaXQgdGhpcy5fc291cmNlLm5leHQoKTtcbiAgICAgICAgICAgICAgaGFzVmFsdWUgPSAhbmV4dC5kb25lO1xuICAgICAgICAgICAgICBpZiAoaGFzVmFsdWUpIHsgY3VycmVudCA9IG5leHQudmFsdWU7IH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlO1xuICAgICAgICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5fc3RvcHBlZCkge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5fZXJyb3I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IHRoaXMuX2J1ZmZlci5wdXNoKGN1cnJlbnQpOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgeWllbGQgdGhpcy5fYnVmZmVyLmdldChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fYnVmZmVyLmRvbmUoKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICByZWFkZXJDb3VudD86IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+O1xuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemU8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJlYWRlckNvdW50PzogbnVtYmVyLFxuICAgIHNlbGVjdG9yPzogKHZhbHVlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD47XG5leHBvcnQgZnVuY3Rpb24gbWVtb2l6ZTxUU291cmNlLCBUUmVzdWx0ID0gVFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJlYWRlckNvdW50OiBudW1iZXIgPSAtMSxcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2UgfCBUUmVzdWx0PiB7XG4gIGlmIChyZWFkZXJDb3VudCA9PT0gLTEgJiYgIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBNZW1vaXplQXN5bmNCdWZmZXI8VFNvdXJjZT4oc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLCBuZXcgTWF4UmVmQ291bnRMaXN0PFRTb3VyY2U+KCkpO1xuICB9XG5cbiAgaWYgKHJlYWRlckNvdW50ICE9PSAtMSAmJiAhc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbmV3IE1lbW9pemVBc3luY0J1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCksIG5ldyBSZWZDb3VudExpc3Q8VFNvdXJjZT4ocmVhZGVyQ291bnQpKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGU8VFNvdXJjZSB8IFRSZXN1bHQ+KCgpID0+IHNlbGVjdG9yIShtZW1vaXplKHNvdXJjZSwgcmVhZGVyQ291bnQpKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSk7XG59XG4iXX0=
