import { AsyncIterableX } from '../asynciterable';
import { returnAsyncIterator } from '../internal/returniterator';
class CatchAllAsyncIterable extends AsyncIterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    async *[Symbol.asyncIterator]() {
        let error = null, hasError = false;
        for (let source of this._source) {
            const it = source[Symbol.asyncIterator]();
            error = null;
            hasError = false;
            while (1) {
                let c = {};
                try {
                    const { done, value } = await it.next();
                    if (done) {
                        await returnAsyncIterator(it);
                        break;
                    }
                    c = value;
                }
                catch (e) {
                    error = e;
                    hasError = true;
                    await returnAsyncIterator(it);
                    break;
                }
                yield c;
            }
            if (!hasError) {
                break;
            }
        }
        if (hasError) {
            throw error;
        }
    }
}
export function _catchAll(source) {
    return new CatchAllAsyncIterable(source);
}
export function _catch(source, ...args) {
    return _catchAll([source].concat(args));
}
export function _catchStatic(...source) {
    return _catchAll(source);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvY2F0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBRWpFLDJCQUFxQyxTQUFRLGNBQXVCO0lBR2xFLFlBQVksTUFBd0M7UUFDbEQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUMzQixJQUFJLEtBQUssR0FBRyxJQUFJLEVBQUUsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUVuQyxHQUFHLENBQUMsQ0FBQyxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFFMUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUNiLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFFakIsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFDVCxJQUFJLENBQUMsR0FBWSxFQUFFLENBQUM7Z0JBRXBCLElBQUksQ0FBQztvQkFDSCxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO29CQUN4QyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUNULE1BQU0sbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUM7d0JBQzlCLEtBQUssQ0FBQztvQkFDUixDQUFDO29CQUNELENBQUMsR0FBRyxLQUFLLENBQUM7Z0JBQ1osQ0FBQztnQkFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNYLEtBQUssR0FBRyxDQUFDLENBQUM7b0JBQ1YsUUFBUSxHQUFHLElBQUksQ0FBQztvQkFDaEIsTUFBTSxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDOUIsS0FBSyxDQUFDO2dCQUNSLENBQUM7Z0JBRUQsTUFBTSxDQUFDLENBQUM7WUFDVixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUFDLENBQUM7UUFDM0IsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLEtBQUssQ0FBQztRQUFDLENBQUM7SUFDaEMsQ0FBQztDQUNGO0FBRUQsTUFBTSxvQkFBNkIsTUFBd0M7SUFDekUsTUFBTSxDQUFDLElBQUkscUJBQXFCLENBQVUsTUFBTSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUVELE1BQU0saUJBQW9CLE1BQXdCLEVBQUUsR0FBRyxJQUF3QjtJQUM3RSxNQUFNLENBQUMsU0FBUyxDQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUVELE1BQU0sdUJBQTBCLEdBQUcsTUFBMEI7SUFDM0QsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMzQixDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvY2F0Y2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgcmV0dXJuQXN5bmNJdGVyYXRvciB9IGZyb20gJy4uL2ludGVybmFsL3JldHVybml0ZXJhdG9yJztcblxuY2xhc3MgQ2F0Y2hBbGxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBlcnJvciA9IG51bGwsIGhhc0Vycm9yID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBzb3VyY2Ugb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBjb25zdCBpdCA9IHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcblxuICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgaGFzRXJyb3IgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgbGV0IGMgPSA8VFNvdXJjZT57fTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgYXdhaXQgcmV0dXJuQXN5bmNJdGVyYXRvcihpdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYyA9IHZhbHVlO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICBhd2FpdCByZXR1cm5Bc3luY0l0ZXJhdG9yKGl0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHlpZWxkIGM7XG4gICAgICB9XG5cbiAgICAgIGlmICghaGFzRXJyb3IpIHsgYnJlYWs7IH1cbiAgICB9XG5cbiAgICBpZiAoaGFzRXJyb3IpIHsgdGhyb3cgZXJyb3I7IH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoQWxsPFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ2F0Y2hBbGxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2g8VD4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LCAuLi5hcmdzOiBBc3luY0l0ZXJhYmxlPFQ+W10pOiBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBfY2F0Y2hBbGw8VD4oW3NvdXJjZV0uY29uY2F0KGFyZ3MpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaFN0YXRpYzxUPiguLi5zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD5bXSk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIF9jYXRjaEFsbChzb3VyY2UpO1xufVxuIl19
