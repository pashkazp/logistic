import { AsyncIterableX } from '../asynciterable';
import { arrayIndexOfAsync } from '../internal/arrayindexof';
import { comparerAsync } from '../internal/comparer';
async function arrayRemove(array, item, comparer) {
    let idx = await arrayIndexOfAsync(array, item, comparer);
    if (idx === -1) {
        return false;
    }
    array.splice(idx, 1);
    return true;
}
class IntersectAsyncIterable extends AsyncIterableX {
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let map = [];
        for await (let secondItem of this._second) {
            map.push(secondItem);
        }
        for await (let firstItem of this._first) {
            if (await arrayRemove(map, firstItem, this._comparer)) {
                yield firstItem;
            }
        }
    }
}
export function intersect(first, second, comparer = comparerAsync) {
    return new IntersectAsyncIterable(first, second, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvaW50ZXJzZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFckQsS0FBSyxzQkFDRCxLQUFVLEVBQUUsSUFBTyxFQUNuQixRQUFvRDtJQUN0RCxJQUFJLEdBQUcsR0FBRyxNQUFNLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDekQsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7SUFBQyxDQUFDO0lBQ2pDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsNEJBQXNDLFNBQVEsY0FBdUI7SUFLbkUsWUFDRSxLQUE2QixFQUM3QixNQUE4QixFQUM5QixRQUFnRTtRQUNoRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzNCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBQyxLQUFLLENBQUwsQ0FBTyxJQUFJLFVBQVUsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUMxQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZCLENBQUM7UUFFRCxHQUFHLENBQUMsS0FBSyxDQUFMLENBQU8sSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDeEMsRUFBRSxDQUFDLENBQUMsTUFBTSxXQUFXLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxNQUFNLFNBQVMsQ0FBQztZQUNsQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sb0JBQ0YsS0FBNkIsRUFDN0IsTUFBOEIsRUFDOUIsV0FBbUUsYUFBYTtJQUNsRixNQUFNLENBQUMsSUFBSSxzQkFBc0IsQ0FBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3RFLENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9pbnRlcnNlY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcblxuYXN5bmMgZnVuY3Rpb24gYXJyYXlSZW1vdmU8VD4oXG4gICAgYXJyYXk6IFRbXSwgaXRlbTogVCxcbiAgICBjb21wYXJlcjogKHg6IFQsIHk6IFQpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGxldCBpZHggPSBhd2FpdCBhcnJheUluZGV4T2ZBc3luYyhhcnJheSwgaXRlbSwgY29tcGFyZXIpO1xuICBpZiAoaWR4ID09PSAtMSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgYXJyYXkuc3BsaWNlKGlkeCwgMSk7XG4gIHJldHVybiB0cnVlO1xufVxuXG5jbGFzcyBJbnRlcnNlY3RBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9maXJzdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfc2Vjb25kOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9jb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9maXJzdCA9IGZpcnN0O1xuICAgIHRoaXMuX3NlY29uZCA9IHNlY29uZDtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IG1hcCA9IFtdO1xuICAgIGZvciBhd2FpdCAobGV0IHNlY29uZEl0ZW0gb2YgdGhpcy5fc2Vjb25kKSB7XG4gICAgICBtYXAucHVzaChzZWNvbmRJdGVtKTtcbiAgICB9XG5cbiAgICBmb3IgYXdhaXQgKGxldCBmaXJzdEl0ZW0gb2YgdGhpcy5fZmlyc3QpIHtcbiAgICAgIGlmIChhd2FpdCBhcnJheVJlbW92ZShtYXAsIGZpcnN0SXRlbSwgdGhpcy5fY29tcGFyZXIpKSB7XG4gICAgICAgIHlpZWxkIGZpcnN0SXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdDxUU291cmNlPihcbiAgICBmaXJzdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiA9IGNvbXBhcmVyQXN5bmMpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgSW50ZXJzZWN0QXN5bmNJdGVyYWJsZTxUU291cmNlPihmaXJzdCwgc2Vjb25kLCBjb21wYXJlcik7XG59XG4iXX0=
