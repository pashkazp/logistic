import { AsyncIterableX } from '../asynciterable';
import { identityAsync } from '../internal/identity';
import { comparerAsync } from '../internal/comparer';
class DistinctUntilChangedAsyncIterable extends AsyncIterableX {
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    async *[Symbol.asyncIterator]() {
        let currentKey, hasCurrentKey = false;
        for await (let item of this._source) {
            let key = await this._keySelector(item);
            let comparerEquals = false;
            if (hasCurrentKey) {
                comparerEquals = await this._comparer(currentKey, key);
            }
            if (!hasCurrentKey || !comparerEquals) {
                hasCurrentKey = true;
                currentKey = key;
                yield item;
            }
        }
    }
}
export function distinctUntilChanged(source, keySelector = identityAsync, comparer = comparerAsync) {
    return new DistinctUntilChangedAsyncIterable(source, keySelector, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGlzdGluY3R1bnRpbGNoYW5nZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFckQsdUNBQXVELFNBQVEsY0FBdUI7SUFLcEYsWUFDSSxNQUE4QixFQUM5QixXQUFxRCxFQUNyRCxRQUFtRTtRQUNyRSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2hDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzNCLElBQUksVUFBNEIsRUFBRSxhQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3hELEdBQUcsQ0FBQyxLQUFLLENBQUwsQ0FBTyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDeEMsSUFBSSxjQUFjLEdBQUcsS0FBSyxDQUFDO1lBQzNCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsY0FBYyxHQUFHLE1BQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQy9FLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztnQkFDdEMsYUFBYSxHQUFHLElBQUksQ0FBQztnQkFDckIsVUFBVSxHQUFHLEdBQUcsQ0FBQztnQkFDakIsTUFBTSxJQUFJLENBQUM7WUFDYixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sK0JBQ0YsTUFBOEIsRUFDOUIsY0FBd0QsYUFBYSxFQUNyRSxXQUFzRSxhQUFhO0lBQ3JGLE1BQU0sQ0FBQyxJQUFJLGlDQUFpQyxDQUFnQixNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdGLENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9kaXN0aW5jdHVudGlsY2hhbmdlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBpZGVudGl0eUFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcblxuY2xhc3MgRGlzdGluY3RVbnRpbENoYW5nZWRBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+O1xuICBwcml2YXRlIF9jb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICBjb21wYXJlcjogKGZpcnN0OiBUS2V5LCBzZWNvbmQ6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IGN1cnJlbnRLZXk6IFRLZXkgfCB1bmRlZmluZWQsIGhhc0N1cnJlbnRLZXkgPSBmYWxzZTtcbiAgICBmb3IgYXdhaXQgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgbGV0IGtleSA9IGF3YWl0IHRoaXMuX2tleVNlbGVjdG9yKGl0ZW0pO1xuICAgICAgbGV0IGNvbXBhcmVyRXF1YWxzID0gZmFsc2U7XG4gICAgICBpZiAoaGFzQ3VycmVudEtleSkgeyBjb21wYXJlckVxdWFscyA9IGF3YWl0IHRoaXMuX2NvbXBhcmVyKGN1cnJlbnRLZXkhLCBrZXkpOyB9XG4gICAgICBpZiAoIWhhc0N1cnJlbnRLZXkgfHwgIWNvbXBhcmVyRXF1YWxzKSB7XG4gICAgICAgIGhhc0N1cnJlbnRLZXkgPSB0cnVlO1xuICAgICAgICBjdXJyZW50S2V5ID0ga2V5O1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3RVbnRpbENoYW5nZWQ8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+ID0gaWRlbnRpdHlBc3luYyxcbiAgICBjb21wYXJlcjogKGZpcnN0OiBUS2V5LCBzZWNvbmQ6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6ICBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5U2VsZWN0b3IsIGNvbXBhcmVyKTtcbn1cbiJdfQ==
