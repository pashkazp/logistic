import { AsyncIterableX } from '../asynciterable';
import { forEach } from './foreach';
class DebounceAsyncIterable extends AsyncIterableX {
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    async *[Symbol.asyncIterator]() {
        let noValue;
        let lastItem;
        let deferred;
        let resolver;
        let done = false;
        let hasError = false;
        let error;
        const reset = (hasNoValue) => {
            noValue = hasNoValue;
            lastItem = undefined;
            deferred = new Promise(r => resolver = r);
        };
        const run = () => {
            if (lastItem === undefined) {
                noValue = true;
                return;
            }
            const item = lastItem;
            const res = resolver;
            reset(false);
            setTimeout(run, this._time);
            res(item);
        };
        reset(true);
        forEach(this._source, item => {
            lastItem = item;
            if (noValue) {
                run();
            }
        })
            .then(() => done = true)
            .catch(err => { hasError = true; error = err; });
        while (1) {
            if (done) {
                break;
            }
            if (hasError) {
                throw error;
            }
            yield await deferred;
        }
    }
}
export function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGVib3VuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsMkJBQXFDLFNBQVEsY0FBdUI7SUFJbEUsWUFBWSxNQUE4QixFQUFFLElBQVk7UUFDdEQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRUQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUMzQixJQUFJLE9BQWdCLENBQUM7UUFDckIsSUFBSSxRQUE2QixDQUFDO1FBQ2xDLElBQUksUUFBMEIsQ0FBQztRQUMvQixJQUFJLFFBQXNFLENBQUM7UUFDM0UsSUFBSSxJQUFJLEdBQVksS0FBSyxDQUFDO1FBQzFCLElBQUksUUFBUSxHQUFZLEtBQUssQ0FBQztRQUM5QixJQUFJLEtBQVUsQ0FBQztRQUVmLE1BQU0sS0FBSyxHQUFHLENBQUMsVUFBbUI7WUFDaEMsT0FBTyxHQUFHLFVBQVUsQ0FBQztZQUNyQixRQUFRLEdBQUcsU0FBUyxDQUFDO1lBQ3JCLFFBQVEsR0FBRyxJQUFJLE9BQU8sQ0FBVSxDQUFDLElBQUksUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQztRQUVGLE1BQU0sR0FBRyxHQUFHO1lBQ1YsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUM7Z0JBQ2YsTUFBTSxDQUFDO1lBQ1QsQ0FBQztZQUVELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQztZQUN0QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUM7WUFDckIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2IsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osQ0FBQyxDQUFDO1FBRUYsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSTtZQUN4QixRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ2hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQUMsR0FBRyxFQUFFLENBQUM7WUFBQyxDQUFDO1FBQ3pCLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7YUFDdkIsS0FBSyxDQUFDLEdBQUcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRWpELE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDVCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUFDLENBQUM7WUFDcEIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLEtBQUssQ0FBQztZQUFDLENBQUM7WUFDOUIsTUFBTSxNQUFNLFFBQVMsQ0FBQztRQUN4QixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQsTUFBTSxtQkFBNEIsTUFBOEIsRUFBRSxJQUFZO0lBQzVFLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixDQUFVLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMxRCxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvZGVib3VuY2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgZm9yRWFjaCB9IGZyb20gJy4vZm9yZWFjaCc7XG5cbmNsYXNzIERlYm91bmNlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF90aW1lOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCB0aW1lOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBub1ZhbHVlOiBib29sZWFuO1xuICAgIGxldCBsYXN0SXRlbTogVFNvdXJjZSB8IHVuZGVmaW5lZDtcbiAgICBsZXQgZGVmZXJyZWQ6IFByb21pc2U8VFNvdXJjZT47XG4gICAgbGV0IHJlc29sdmVyOiAodmFsdWU/OiBUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4gfCB1bmRlZmluZWQpID0+IHZvaWQ7XG4gICAgbGV0IGRvbmU6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBsZXQgaGFzRXJyb3I6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBsZXQgZXJyb3I6IGFueTtcblxuICAgIGNvbnN0IHJlc2V0ID0gKGhhc05vVmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgIG5vVmFsdWUgPSBoYXNOb1ZhbHVlO1xuICAgICAgbGFzdEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgICBkZWZlcnJlZCA9IG5ldyBQcm9taXNlPFRTb3VyY2U+KHIgPT4gcmVzb2x2ZXIgPSByKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcnVuID0gKCkgPT4ge1xuICAgICAgaWYgKGxhc3RJdGVtID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9WYWx1ZSA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXRlbSA9IGxhc3RJdGVtO1xuICAgICAgY29uc3QgcmVzID0gcmVzb2x2ZXI7XG4gICAgICByZXNldChmYWxzZSk7XG4gICAgICBzZXRUaW1lb3V0KHJ1biwgdGhpcy5fdGltZSk7XG4gICAgICByZXMoaXRlbSk7XG4gICAgfTtcblxuICAgIHJlc2V0KHRydWUpO1xuICAgIGZvckVhY2godGhpcy5fc291cmNlLCBpdGVtID0+IHtcbiAgICAgIGxhc3RJdGVtID0gaXRlbTtcbiAgICAgIGlmIChub1ZhbHVlKSB7IHJ1bigpOyB9XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiBkb25lID0gdHJ1ZSlcbiAgICAuY2F0Y2goZXJyID0+IHsgaGFzRXJyb3IgPSB0cnVlOyBlcnJvciA9IGVycjsgfSk7XG5cbiAgICB3aGlsZSAoMSkge1xuICAgICAgaWYgKGRvbmUpIHsgYnJlYWs7IH1cbiAgICAgIGlmIChoYXNFcnJvcikgeyB0aHJvdyBlcnJvcjsgfVxuICAgICAgeWllbGQgYXdhaXQgZGVmZXJyZWQhO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2U8VFNvdXJjZT4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCB0aW1lOiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGVib3VuY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgdGltZSk7XG59XG4iXX0=
