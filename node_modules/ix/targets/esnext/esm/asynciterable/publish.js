import { AsyncIterableX } from '../asynciterable';
import { RefCountList } from '../iterable/_refcountlist';
import { create } from './create';
class PublishedAsyncBuffer extends AsyncIterableX {
    constructor(source) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = new RefCountList(0);
    }
    async *_getIterable(i) {
        try {
            while (1) {
                let hasValue = false, current = {};
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let next = await this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        if (this._error) {
                            throw this._error;
                        }
                        else {
                            break;
                        }
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
    [Symbol.asyncIterator]() {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.asyncIterator]();
    }
}
export function publish(source, selector) {
    return selector ?
        create(async () => selector(publish(source))[Symbol.asyncIterator]()) :
        new PublishedAsyncBuffer(source[Symbol.asyncIterator]());
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvcHVibGlzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFbEMsMEJBQThCLFNBQVEsY0FBaUI7SUFNckQsWUFBWSxNQUF3QjtRQUNsQyxLQUFLLEVBQUUsQ0FBQztRQUhGLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFJaEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLFlBQVksQ0FBSSxDQUFDLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU8sS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFTO1FBQ25DLElBQUksQ0FBQztZQUNILE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1QsSUFBSSxRQUFRLEdBQUcsS0FBSyxFQUFFLE9BQU8sR0FBTSxFQUFFLENBQUM7Z0JBQ3RDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQzVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQ25CLElBQUksQ0FBQzs0QkFDSCxJQUFJLElBQUksR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7NEJBQ3JDLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7NEJBQ3RCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0NBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NEJBQUMsQ0FBQzt3QkFDekMsQ0FBQzt3QkFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDOzRCQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzt3QkFDdkIsQ0FBQztvQkFDSCxDQUFDO29CQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNsQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDaEIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDO3dCQUNwQixDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLEtBQUssQ0FBQzt3QkFDUixDQUFDO29CQUNILENBQUM7b0JBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFBQyxDQUFDO2dCQUMvQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLENBQUM7Z0JBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDYixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLEtBQUssQ0FBQztnQkFDUixDQUFDO2dCQUVELENBQUMsRUFBRSxDQUFDO1lBQ04sQ0FBQztRQUNILENBQUM7Z0JBQVMsQ0FBQztZQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0lBQ3ZFLENBQUM7Q0FDRjtBQU1ELE1BQU0sa0JBQ0YsTUFBOEIsRUFDOUIsUUFBb0U7SUFDdEUsTUFBTSxDQUFDLFFBQVE7UUFDYixNQUFNLENBQUMsS0FBSyxPQUFPLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUNyRSxJQUFJLG9CQUFvQixDQUFVLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3RFLENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9wdWJsaXNoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IFJlZkNvdW50TGlzdCB9IGZyb20gJy4uL2l0ZXJhYmxlL19yZWZjb3VudGxpc3QnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUnO1xuXG5jbGFzcyBQdWJsaXNoZWRBc3luY0J1ZmZlcjxUPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcHJpdmF0ZSBfYnVmZmVyOiBSZWZDb3VudExpc3Q8VD47XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYXRvcjxUPjtcbiAgcHJpdmF0ZSBfZXJyb3I6IGFueTtcbiAgcHJpdmF0ZSBfc3RvcHBlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYXRvcjxUPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBSZWZDb3VudExpc3Q8VD4oMCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jICpfZ2V0SXRlcmFibGUoaTogbnVtYmVyKTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gICAgdHJ5IHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCBoYXNWYWx1ZSA9IGZhbHNlLCBjdXJyZW50ID0gPFQ+e307XG4gICAgICAgIGlmIChpID49IHRoaXMuX2J1ZmZlci5jb3VudCkge1xuICAgICAgICAgIGlmICghdGhpcy5fc3RvcHBlZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbGV0IG5leHQgPSBhd2FpdCB0aGlzLl9zb3VyY2UubmV4dCgpO1xuICAgICAgICAgICAgICBoYXNWYWx1ZSA9ICFuZXh0LmRvbmU7XG4gICAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyBjdXJyZW50ID0gbmV4dC52YWx1ZTsgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGU7XG4gICAgICAgICAgICAgIHRoaXMuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fZXJyb3IpIHtcbiAgICAgICAgICAgICAgdGhyb3cgdGhpcy5fZXJyb3I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGFzVmFsdWUpIHsgdGhpcy5fYnVmZmVyLnB1c2goY3VycmVudCk7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgICB5aWVsZCB0aGlzLl9idWZmZXIuZ2V0KGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLl9idWZmZXIuZG9uZSgpO1xuICAgIH1cbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYXRvcjxUPiB7XG4gICAgdGhpcy5fYnVmZmVyLnJlYWRlckNvdW50Kys7XG4gICAgcmV0dXJuIHRoaXMuX2dldEl0ZXJhYmxlKHRoaXMuX2J1ZmZlci5jb3VudClbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZT4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT47XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUU291cmNlLCBUUmVzdWx0PihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICBzZWxlY3Rvcj86ICh2YWx1ZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yPzogKHZhbHVlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZSB8IFRSZXN1bHQ+IHtcbiAgcmV0dXJuIHNlbGVjdG9yID9cbiAgICBjcmVhdGUoYXN5bmMgKCkgPT4gc2VsZWN0b3IocHVibGlzaChzb3VyY2UpKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSkgOlxuICAgIG5ldyBQdWJsaXNoZWRBc3luY0J1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkpO1xufVxuIl19
