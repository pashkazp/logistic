import { AsyncIterableX } from '../asynciterable';
import { toArray } from './toarray';
import { sorter as defaultSorter } from '../internal/sorter';
export class OrderedAsyncIterableBaseX extends AsyncIterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    async *[Symbol.asyncIterator]() {
        const array = await toArray(this._source);
        const len = array.length;
        const indices = new Array(len);
        for (let i = 0, len = array.length; i < len; i++) {
            indices[i] = i;
        }
        indices.sort(this._getSorter(array));
        for (const index of indices) {
            yield array[index];
        }
    }
    thenBy(keySelector, comparer = defaultSorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedAsyncIterableX(this._source, keySelector, comparer, false, this);
    }
    thenByDescending(keySelector, comparer = defaultSorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedAsyncIterableX(this._source, keySelector, comparer, true, this);
    }
}
export class OrderedAsyncIterableX extends OrderedAsyncIterableBaseX {
    constructor(source, keySelector, comparer, descending, parent) {
        super(source);
        this._keySelector = keySelector;
        this._comparer = comparer;
        this._descending = descending;
        this._parent = parent;
    }
    _getSorter(elements, next) {
        const keys = elements.map(this._keySelector);
        const comparer = this._comparer;
        const parent = this._parent;
        const descending = this._descending;
        const sorter = (x, y) => {
            const result = comparer(keys[x], keys[y]);
            if (result === 0) {
                return next ? next(x, y) : x - y;
            }
            return descending ? -result : result;
        };
        return parent ? parent._getSorter(elements, sorter) : sorter;
    }
}
export function orderBy(source, keySelector, comparer = defaultSorter) {
    return new OrderedAsyncIterableX(source, keySelector, comparer, false);
}
export function orderByDescending(source, keySelector, comparer = defaultSorter) {
    return new OrderedAsyncIterableX(source, keySelector, comparer, true);
}
export function thenBy(source, keySelector, comparer = defaultSorter) {
    return new OrderedAsyncIterableX(source._source, keySelector, comparer, false, source);
}
export function thenByDescending(source, keySelector, comparer = defaultSorter) {
    return new OrderedAsyncIterableX(source._source, keySelector, comparer, true, source);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
