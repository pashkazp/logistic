import { AsyncIterableX } from '../asynciterable';
import { createGrouping } from './_grouping';
import { identity } from '../internal/identity';
class JoinAsyncIterable extends AsyncIterableX {
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    async *[Symbol.asyncIterator]() {
        const map = await createGrouping(this._inner, this._innerSelector, identity);
        for await (let outerElement of this._outer) {
            const outerKey = await this._outerSelector(outerElement);
            if (map.has(outerKey)) {
                for (let innerElement of map.get(outerKey)) {
                    yield await this._resultSelector(outerElement, innerElement);
                }
            }
        }
    }
}
export function innerJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new JoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvaW5uZXJqb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRCx1QkFBdUQsU0FBUSxjQUF1QjtJQU9wRixZQUNFLEtBQTRCLEVBQzVCLEtBQTRCLEVBQzVCLGFBQXNELEVBQ3RELGFBQXNELEVBQ3RELGNBQTRFO1FBQzVFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7SUFDeEMsQ0FBQztJQUVELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDM0IsTUFBTSxHQUFHLEdBQUcsTUFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLEdBQUcsQ0FBQyxLQUFLLENBQUwsQ0FBTyxJQUFJLFlBQVksSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUMzQyxNQUFNLFFBQVEsR0FBRyxNQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDekQsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RCLEdBQUcsQ0FBQyxDQUFDLElBQUksWUFBWSxJQUFJLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFFLENBQUMsQ0FBQyxDQUFDO29CQUM1QyxNQUFNLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBQy9ELENBQUM7WUFDSCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVELE1BQU0sb0JBQ0YsS0FBNEIsRUFDNUIsS0FBNEIsRUFDNUIsYUFBc0QsRUFDdEQsYUFBc0QsRUFDdEQsY0FBNEU7SUFDOUUsTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQzFCLEtBQUssRUFDTCxLQUFLLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLENBQUMsQ0FBQztBQUNwQixDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvaW5uZXJqb2luLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUdyb3VwaW5nIH0gZnJvbSAnLi9fZ3JvdXBpbmcnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5cbmNsYXNzIEpvaW5Bc3luY0l0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcHJpdmF0ZSBfb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPjtcbiAgcHJpdmF0ZSBfaW5uZXI6IEFzeW5jSXRlcmFibGU8VElubmVyPjtcbiAgcHJpdmF0ZSBfb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+O1xuICBwcml2YXRlIF9pbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT47XG4gIHByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IFRJbm5lcikgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPixcbiAgICBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+LFxuICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogVElubmVyKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fb3V0ZXIgPSBvdXRlcjtcbiAgICB0aGlzLl9pbm5lciA9IGlubmVyO1xuICAgIHRoaXMuX291dGVyU2VsZWN0b3IgPSBvdXRlclNlbGVjdG9yO1xuICAgIHRoaXMuX2lubmVyU2VsZWN0b3IgPSBpbm5lclNlbGVjdG9yO1xuICAgIHRoaXMuX3Jlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBtYXAgPSBhd2FpdCBjcmVhdGVHcm91cGluZyh0aGlzLl9pbm5lciwgdGhpcy5faW5uZXJTZWxlY3RvciwgaWRlbnRpdHkpO1xuICAgIGZvciBhd2FpdCAobGV0IG91dGVyRWxlbWVudCBvZiB0aGlzLl9vdXRlcikge1xuICAgICAgY29uc3Qgb3V0ZXJLZXkgPSBhd2FpdCB0aGlzLl9vdXRlclNlbGVjdG9yKG91dGVyRWxlbWVudCk7XG4gICAgICBpZiAobWFwLmhhcyhvdXRlcktleSkpIHtcbiAgICAgICAgZm9yIChsZXQgaW5uZXJFbGVtZW50IG9mIG1hcC5nZXQob3V0ZXJLZXkpISkge1xuICAgICAgICAgIHlpZWxkIGF3YWl0IHRoaXMuX3Jlc3VsdFNlbGVjdG9yKG91dGVyRWxlbWVudCwgaW5uZXJFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW5uZXJKb2luPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcjogQXN5bmNJdGVyYWJsZTxUT3V0ZXI+LFxuICAgIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4sXG4gICAgb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGlubmVyU2VsZWN0b3I6ICh2YWx1ZTogVElubmVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICByZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBUSW5uZXIpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEpvaW5Bc3luY0l0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcixcbiAgICBpbm5lcixcbiAgICBvdXRlclNlbGVjdG9yLFxuICAgIGlubmVyU2VsZWN0b3IsXG4gICAgcmVzdWx0U2VsZWN0b3IpO1xufVxuIl19
