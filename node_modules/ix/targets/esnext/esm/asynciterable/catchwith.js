import { AsyncIterableX } from '../asynciterable';
import { returnAsyncIterator } from '../internal/returniterator';
class CatchWithAsyncIterable extends AsyncIterableX {
    constructor(source, handler) {
        super();
        this._source = source;
        this._handler = handler;
    }
    async *[Symbol.asyncIterator]() {
        let err, hasError = false, it = this._source[Symbol.asyncIterator]();
        while (1) {
            let c = {};
            try {
                c = await it.next();
                if (c.done) {
                    await returnAsyncIterator(it);
                    break;
                }
            }
            catch (e) {
                err = await this._handler(e);
                hasError = true;
                await returnAsyncIterator(it);
                break;
            }
            yield c.value;
        }
        if (hasError) {
            for await (let item of err) {
                yield item;
            }
        }
    }
}
export function catchWith(source, handler) {
    return new CatchWithAsyncIterable(source, handler);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvY2F0Y2h3aXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSw0QkFBc0MsU0FBUSxjQUF1QjtJQUluRSxZQUNJLE1BQThCLEVBQzlCLE9BQWlGO1FBQ25GLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDM0IsSUFBSSxHQUF1QyxFQUFFLFFBQVEsR0FBRyxLQUFLLEVBQUUsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFDekcsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNULElBQUksQ0FBQyxHQUE0QixFQUFFLENBQUM7WUFFcEMsSUFBSSxDQUFDO2dCQUNILENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ1gsTUFBTSxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDOUIsS0FBSyxDQUFDO2dCQUNSLENBQUM7WUFDSCxDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxHQUFHLEdBQUcsTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM3QixRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixNQUFNLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO2dCQUM5QixLQUFLLENBQUM7WUFDUixDQUFDO1lBRUQsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2hCLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ2IsR0FBRyxDQUFDLEtBQUssQ0FBTCxDQUFPLElBQUksSUFBSSxJQUFJLEdBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLE1BQU0sSUFBSSxDQUFDO1lBQ2IsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLG9CQUNGLE1BQThCLEVBQzlCLE9BQWlGO0lBQ25GLE1BQU0sQ0FBQyxJQUFJLHNCQUFzQixDQUFVLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUM5RCxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvY2F0Y2h3aXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IHJldHVybkFzeW5jSXRlcmF0b3IgfSBmcm9tICcuLi9pbnRlcm5hbC9yZXR1cm5pdGVyYXRvcic7XG5cbmNsYXNzIENhdGNoV2l0aEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfaGFuZGxlcjogKGVycm9yOiBhbnkpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgaGFuZGxlcjogKGVycm9yOiBhbnkpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5faGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgZXJyOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgdW5kZWZpbmVkLCBoYXNFcnJvciA9IGZhbHNlLCBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgbGV0IGMgPSA8SXRlcmF0b3JSZXN1bHQ8VFNvdXJjZT4+e307XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGMgPSBhd2FpdCBpdC5uZXh0KCk7XG4gICAgICAgIGlmIChjLmRvbmUpIHtcbiAgICAgICAgICBhd2FpdCByZXR1cm5Bc3luY0l0ZXJhdG9yKGl0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlcnIgPSBhd2FpdCB0aGlzLl9oYW5kbGVyKGUpO1xuICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgIGF3YWl0IHJldHVybkFzeW5jSXRlcmF0b3IoaXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgeWllbGQgYy52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgIGZvciBhd2FpdCAobGV0IGl0ZW0gb2YgZXJyISkge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2F0Y2hXaXRoPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBoYW5kbGVyOiAoZXJyb3I6IGFueSkgPT4gQXN5bmNJdGVyYWJsZTxUU291cmNlPiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ2F0Y2hXaXRoQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGhhbmRsZXIpO1xufVxuIl19
