import { AsyncIterableX } from '../asynciterable';
import { sleep } from './_sleep';
export class TimeoutError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, TimeoutError.prototype);
        this.message = 'Timeout has occurred';
    }
}
const VALUE_TYPE = 'value';
const ERROR_TYPE = 'error';
class TimeoutAsyncIterable extends AsyncIterableX {
    constructor(source, dueTime) {
        super();
        this._source = source;
        this._dueTime = dueTime;
    }
    async *[Symbol.asyncIterator]() {
        const it = this._source[Symbol.asyncIterator]();
        while (1) {
            const { type, value } = await Promise.race([
                it.next().then(value => { return { type: VALUE_TYPE, value }; }),
                sleep(this._dueTime).then(() => { return { type: ERROR_TYPE }; })
            ]);
            if (type === ERROR_TYPE) {
                throw new TimeoutError();
            }
            if (value.done) {
                break;
            }
            yield value.value;
        }
    }
}
export function timeout(source, dueTime) {
    return new TimeoutAsyncIterable(source, dueTime);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvdGltZW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVqQyxNQUFNLG1CQUFvQixTQUFRLEtBQUs7SUFDckM7UUFDRSxLQUFLLEVBQUUsQ0FBQztRQUNSLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsT0FBTyxHQUFHLHNCQUFzQixDQUFDO0lBQ3hDLENBQUM7Q0FDRjtBQUVELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQztBQUMzQixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFPM0IsMEJBQW9DLFNBQVEsY0FBdUI7SUFJakUsWUFBWSxNQUE4QixFQUFFLE9BQWU7UUFDekQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQztJQUMxQixDQUFDO0lBRUQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUMzQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ2hELE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDVCxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sT0FBTyxDQUFDLElBQUksQ0FBNEI7Z0JBQ3BFLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxNQUFNLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hFLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xFLENBQUMsQ0FBQztZQUVILEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDO2dCQUN4QixNQUFNLElBQUksWUFBWSxFQUFFLENBQUM7WUFDM0IsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUFDLEtBQUssQ0FBQztZQUFDLENBQUM7WUFDMUIsTUFBTSxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3BCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGtCQUNGLE1BQThCLEVBQzlCLE9BQWU7SUFDakIsTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQVUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVELENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS90aW1lb3V0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnLi9fc2xlZXAnO1xuXG5leHBvcnQgY2xhc3MgVGltZW91dEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUaW1lb3V0RXJyb3IucHJvdG90eXBlKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnVGltZW91dCBoYXMgb2NjdXJyZWQnO1xuICB9XG59XG5cbmNvbnN0IFZBTFVFX1RZUEUgPSAndmFsdWUnO1xuY29uc3QgRVJST1JfVFlQRSA9ICdlcnJvcic7XG5cbmludGVyZmFjZSBUaW1lb3V0T3BlcmF0aW9uPFQ+IHtcbiAgdHlwZTogc3RyaW5nO1xuICB2YWx1ZT86IEl0ZXJhdG9yUmVzdWx0PFQ+O1xufVxuXG5jbGFzcyBUaW1lb3V0QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9kdWVUaW1lOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBkdWVUaW1lOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9kdWVUaW1lID0gZHVlVGltZTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBhd2FpdCBQcm9taXNlLnJhY2U8VGltZW91dE9wZXJhdGlvbjxUU291cmNlPj4oW1xuICAgICAgICBpdC5uZXh0KCkudGhlbih2YWx1ZSA9PiB7IHJldHVybiB7IHR5cGU6IFZBTFVFX1RZUEUsIHZhbHVlIH07IH0pLFxuICAgICAgICBzbGVlcCh0aGlzLl9kdWVUaW1lKS50aGVuKCgpID0+IHsgcmV0dXJuIHsgdHlwZTogRVJST1JfVFlQRSB9OyB9KVxuICAgICAgXSk7XG5cbiAgICAgIGlmICh0eXBlID09PSBFUlJPUl9UWVBFKSB7XG4gICAgICAgIHRocm93IG5ldyBUaW1lb3V0RXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlLmRvbmUpIHsgYnJlYWs7IH1cbiAgICAgIHlpZWxkIHZhbHVlLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGltZW91dDxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgZHVlVGltZTogbnVtYmVyKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRpbWVvdXRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgZHVlVGltZSk7XG59Il19
