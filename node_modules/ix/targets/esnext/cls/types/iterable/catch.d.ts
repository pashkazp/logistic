/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { IterableX } from '../iterable';
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {!Iterable<!Iterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
export declare function _catchAll<TSource>(source: Iterable<Iterable<TSource>>): IterableX<TSource>;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {...!Iterable<TSource>} args
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
export declare function _catch<TSource>(source: Iterable<TSource>, ...args: Iterable<TSource>[]): IterableX<TSource>;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {...!Iterable<TSource>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
export declare function _catchStatic<TSource>(...source: Iterable<TSource>[]): IterableX<TSource>;
