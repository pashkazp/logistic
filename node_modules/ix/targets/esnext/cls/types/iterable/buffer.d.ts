/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { IterableX } from '../iterable';
/**
 * Generates a sequence of buffers over the source sequence, with specified length and possible overlap.
 * \@example <caption>Creates a sequence of buffers with and without skip</caption>
 * const source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0];
 *
 * // Without skip
 * const result = buffer(source, 5);
 * const result = Ix.Iterable.from(source).buffer(5);
 * for (const item of result) {
 *   console.log(result);
 * }
 * // => [0, 1, 2, 3, 4]
 * // => [5, 6, 7, 8, 9]
 *
 * // With skip
 * const result = buffer(source, 3, 4);
 * const result = Ix.Iterable.from(source).buffer(3, 4);
 * for (const item of result) {
 *   console.log(result);
 * }
 * // => [0, 1, 2]
 * // => [4, 5, 6]
 * // => [8, 9]
 * to the count.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} count
 * @param {number=} skip
 * @return {!tsickle_forward_declare_1.IterableX<!Array<TSource>>}
 */
export declare function buffer<TSource>(source: Iterable<TSource>, count: number, skip?: number): IterableX<TSource[]>;
