/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { IterableX } from '../iterable';
/**
 * Returns an iterable sequence that is the result of invoking the selector on the source sequence,
 * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use
 * the same sequence multiple times.
 * the source sequence as many times as needed, without sharing subscriptions to the source sequence.
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(!Iterable<TSource>): !Iterable<TResult>} selector
 * @return {!tsickle_forward_declare_1.IterableX<TResult>} An iterable sequence that contains the elements of a sequence produced by multicasting the source
 * sequence within a selector function.
 */
export declare function chain<TSource, TResult>(source: Iterable<TSource>, selector: (source: Iterable<TSource>) => Iterable<TResult>): IterableX<TResult>;
