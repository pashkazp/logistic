goog.module('targets.esnext.cls.iterable.pairwise'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/pairwise.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class PairwiseIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!IterableIterator<!Array<TSource>>}
     */
    *[Symbol.iterator]() {
        let /** @type {TSource} */ value, /** @type {boolean} */ hasValue = false;
        for (const /** @type {TSource} */ item of this._source) {
            if (!hasValue) {
                hasValue = true;
            }
            else {
                yield [/** @type {TSource} */ ((value)), item];
            }
            value = item;
        }
    }
}
function PairwiseIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    PairwiseIterable.prototype._source;
}
/**
 * Returns a new sequence that triggers on the second and subsequent triggerings of the input sequence.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @return {!tsickle_forward_declare_1.IterableX<!Array<TSource>>}
 */
function pairwise(source) {
    return new PairwiseIterable(source);
}
exports.pairwise = pairwise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9wYWlyd2lzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEgsc0JBQStCLFNBQVEsb0JBQXFCO0lBVTVEOztPQUVHO0lBVEQsWUFBWSxNQUF5QjtRQVduQyxLQVZLLEVBQUUsQ0FBQztRQVdSLElBVkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBV3hCLENBQUM7SUFDSDs7T0FFRztJQVhELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBYWhCLElBQUksc0JBWkQsQ0FBQSxLQUEyQixFQUFBLHNCQUFDLENBQUEsUUFBUyxHQUFFLEtBQU0sQ0FBQztRQWFqRCxHQUFHLENBQUMsQ0FaQyxNQUFBLHNCQUFLLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBYWhDLEVBQUUsQ0FBQyxDQVpDLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTtnQkFhZCxRQVpRLEdBQUUsSUFBSyxDQUFDO1lBYWxCLENBWkM7WUFBQSxJQUFLLENBQUEsQ0FBRTtnQkFhTixNQVpLLENBQUEsc0JBQUEsQ0FBQSxDQUFBLENBQUUsS0FBQSxDQUFBLENBQU0sRUFBQyxJQUFLLENBQUMsQ0FBQztZQWF2QixDQVpDO1lBYUQsS0FaSyxHQUFFLElBQUssQ0FBQztRQWFmLENBWkM7SUFhSCxDQVpDO0NBQ0g7QUFjQTtJQUNBLGlDQUFpQztJQUNqQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ25DLENBQUM7QUFFRDs7Ozs7R0FLRztBQWpCSCxrQkFBa0MsTUFBeUI7SUFtQnpELE1BbEJNLENBQUEsSUFBSSxnQkFBaUIsQ0FBVSxNQUFNLENBQUMsQ0FBQztBQW1CL0MsQ0FsQkM7QUFGRCw0QkFFQyIsImZpbGUiOiJwYWlyd2lzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBQYWlyd2lzZUl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8IUFycmF5PFRTb3VyY2U+Pn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIHZhbHVlOiBUU291cmNlIHwgdW5kZWZpbmVkLCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoIWhhc1ZhbHVlKSB7XG4gICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIFsgLyoqIEB0eXBlIHtUU291cmNlfSAqLygodmFsdWUpKSwgaXRlbV07XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IGl0ZW07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFBhaXJ3aXNlSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuUGFpcndpc2VJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbmV3IHNlcXVlbmNlIHRoYXQgdHJpZ2dlcnMgb24gdGhlIHNlY29uZCBhbmQgc3Vic2VxdWVudCB0cmlnZ2VyaW5ncyBvZiB0aGUgaW5wdXQgc2VxdWVuY2UuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPCFBcnJheTxUU291cmNlPj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYWlyd2lzZTxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+KTogSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xuICByZXR1cm4gbmV3IFBhaXJ3aXNlSXRlcmFibGU8VFNvdXJjZT4oc291cmNlKTtcbn1cbiJdfQ==