goog.module('targets.esnext.cls.iterable.skip'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/skip.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class SkipIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Iterator<TSource>} */ it = this._source[Symbol.iterator](), /** @type {number} */ count = this._count, /** @type {?} */ next;
        while (count > 0 && !(next = it.next()).done) {
            count--;
        }
        if (count <= 0) {
            while (!(next = it.next()).done) {
                yield next.value;
            }
        }
    }
}
function SkipIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    SkipIterable.prototype._source;
    /** @type {number} */
    SkipIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function skip(source, count) {
    return new SkipIterable(source, count);
}
exports.skip = skip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9za2lwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUY7O0dBRUc7QUFQSCxrQkFBMkIsU0FBUSxvQkFBbUI7SUFXdEQ7OztPQUdHO0lBVkQsWUFBWSxNQUF5QixFQUFDLEtBQWM7UUFZbEQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWNoQixJQUFJLGlDQWJELENBQUEsRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUEscUJBQUMsQ0FBQSxLQUFNLEdBQUUsSUFBSyxDQUFDLE1BQU0sRUFBQSxnQkFBQyxDQUFBLElBQUssQ0FBQztRQWNwRSxPQWJPLEtBQUssR0FBRSxDQUFFLElBQUcsQ0FBRSxDQUFDLElBQUksR0FBRSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBRTtZQWM3QyxLQWJLLEVBQUUsQ0FBQztRQWNWLENBYkM7UUFjRCxFQUFFLENBQUMsQ0FiQyxLQUFLLElBQUcsQ0FBRSxDQUFDLENBQUEsQ0FBRTtZQWNmLE9BYk8sQ0FBQyxDQUFDLElBQUksR0FBRSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBRTtnQkFjaEMsTUFiSyxJQUFLLENBQUMsS0FBSyxDQUFDO1lBY25CLENBYkM7UUFjSCxDQWJDO0lBY0gsQ0FiQztDQUNIO0FBZUE7SUFDQSxpQ0FBaUM7SUFDakMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDL0IscUJBQXFCO0lBQ3JCLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQzlCLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxjQUE4QixNQUF5QixFQUFDLEtBQWM7SUEyQnBFLE1BMUJNLENBQUEsSUFBSSxZQUFhLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBMkJsRCxDQTFCQztBQUZELG9CQUVDIiwiZmlsZSI6InNraXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgU2tpcEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5pdGVyYXRvcl0oKSwgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGNvdW50ID0gdGhpcy5fY291bnQsIC8qKiBAdHlwZSB7P30gKi8gbmV4dDtcbiAgICB3aGlsZSAoY291bnQgPiAwICYmICEobmV4dCA9IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgY291bnQtLTtcbiAgICB9XG4gICAgaWYgKGNvdW50IDw9IDApIHtcbiAgICAgIHdoaWxlICghKG5leHQgPSBpdC5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgeWllbGQgbmV4dC52YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2tpcEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cblNraXBJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuU2tpcEl0ZXJhYmxlLnByb3RvdHlwZS5fY291bnQ7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBTa2lwSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBjb3VudCk7XG59XG4iXX0=