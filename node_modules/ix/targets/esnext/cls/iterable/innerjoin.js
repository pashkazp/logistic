goog.module('targets.esnext.cls.iterable.innerjoin'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/innerjoin.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var _grouping_1 = goog.require('targets.esnext.cls.iterable._grouping');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._grouping");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @template TOuter, TInner, TKey, TResult
 */
class JoinIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TOuter>} outer
     * @param {!Iterable<TInner>} inner
     * @param {function(TOuter): TKey} outerSelector
     * @param {function(TInner): TKey} innerSelector
     * @param {function(TOuter, TInner): TResult} resultSelector
     */
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    *[Symbol.iterator]() {
        const /** @type {!Map<TKey, !Array<?>>} */ map = _grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity);
        for (let /** @type {TOuter} */ outerElement of this._outer) {
            const /** @type {TKey} */ outerKey = this._outerSelector(outerElement);
            if (map.has(outerKey)) {
                for (let /** @type {?} */ innerElement of ((map.get(outerKey)))) {
                    yield this._resultSelector(outerElement, innerElement);
                }
            }
        }
    }
}
function JoinIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TOuter>} */
    JoinIterable.prototype._outer;
    /** @type {!Iterable<TInner>} */
    JoinIterable.prototype._inner;
    /** @type {function(TOuter): TKey} */
    JoinIterable.prototype._outerSelector;
    /** @type {function(TInner): TKey} */
    JoinIterable.prototype._innerSelector;
    /** @type {function(TOuter, TInner): TResult} */
    JoinIterable.prototype._resultSelector;
}
/**
 * @template TOuter, TInner, TKey, TResult
 * @param {!Iterable<TOuter>} outer
 * @param {!Iterable<TInner>} inner
 * @param {function(TOuter): TKey} outerSelector
 * @param {function(TInner): TKey} innerSelector
 * @param {function(TOuter, TInner): TResult} resultSelector
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function innerJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new JoinIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.innerJoin = innerJoin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9pbm5lcmpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsMkNBTnVCO0FBT3ZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnREFBZ0QsQ0FBQyxDQVAxRDtBQVE3QyxtREFQaUI7QUFRakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFUSCxrQkFBaUQsU0FBUSxvQkFBbUI7SUFnQjVFOzs7Ozs7T0FNRztJQWZELFlBaUJFLEtBaEJ1QixFQWlCdkIsS0FoQnVCLEVBaUJ2QixhQWhCc0MsRUFpQnRDLGFBaEJzQyxFQWlCdEMsY0FoQnlEO1FBaUJ6RCxLQWhCSyxFQUFFLENBQUM7UUFpQlIsSUFoQkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBaUJwQixJQWhCSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFpQnBCLElBaEJJLENBQUMsY0FBYyxHQUFFLGFBQWMsQ0FBQztRQWlCcEMsSUFoQkksQ0FBQyxjQUFjLEdBQUUsYUFBYyxDQUFDO1FBaUJwQyxJQWhCSSxDQUFDLGVBQWUsR0FBRSxjQUFlLENBQUM7SUFpQnhDLENBQUM7SUFDSDs7T0FFRztJQWpCRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQW1CaEIsTUFBTSxvQ0FsQkQsQ0FBQSxHQUFJLEdBQUUsMEJBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLElBQUssQ0FBQyxjQUFjLEVBQUMsbUJBQVMsQ0FBQyxDQUFDO1FBbUJ2RSxHQUFHLENBQUMsQ0FsQkMsSUFBQSxxQkFBRyxDQUFBLFlBQWEsSUFBRyxJQUFLLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBRTtZQW1CckMsTUFBTSxtQkFsQkQsQ0FBQSxRQUFTLEdBQUUsSUFBSyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQW1CbkQsRUFBRSxDQUFDLENBbEJDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQW1CdEIsR0FBRyxDQUFDLENBbEJDLElBQUEsZ0JBQUcsQ0FBQSxZQUFhLElBQUEsQ0FBQSxDQUFHLEdBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBRTtvQkFtQjVDLE1BbEJLLElBQUssQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFDLFlBQWEsQ0FBQyxDQUFDO2dCQW1CekQsQ0FsQkM7WUFtQkgsQ0FsQkM7UUFtQkgsQ0FsQkM7SUFtQkgsQ0FsQkM7Q0FDSDtBQW9CQTtJQUNBLGdDQUFnQztJQUNoQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM5QixnQ0FBZ0M7SUFDaEMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDOUIscUNBQXFDO0lBQ3JDLFlBQVksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0lBQ3RDLHFDQUFxQztJQUNyQyxZQUFZLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztJQUN0QyxnREFBZ0Q7SUFDaEQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7QUFDdkMsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBdkNILG1CQXlDSSxLQXhDdUIsRUF5Q3ZCLEtBeEN1QixFQXlDdkIsYUF4Q3NDLEVBeUN0QyxhQXhDc0MsRUF5Q3RDLGNBeEN5RDtJQXlDM0QsTUF4Q00sQ0FBQSxJQUFJLFlBQWEsQ0F5Q3JCLEtBeENLLEVBeUNMLEtBeENLLEVBeUNMLGFBeENhLEVBeUNiLGFBeENhLEVBeUNiLGNBeENjLENBQUMsQ0FBQztBQXlDcEIsQ0F4Q0M7QUFaRCw4QkFZQyIsImZpbGUiOiJpbm5lcmpvaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGNyZWF0ZUdyb3VwaW5nIH0gZnJvbSAnLi9fZ3JvdXBpbmcnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUuX2dyb3VwaW5nXCIpO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0XG4gKi9cbmNsYXNzIEpvaW5JdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfb3V0ZXI6IEl0ZXJhYmxlPFRPdXRlcj47XG5wcml2YXRlIF9pbm5lcjogSXRlcmFibGU8VElubmVyPjtcbnByaXZhdGUgX291dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5O1xucHJpdmF0ZSBfaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXk7XG5wcml2YXRlIF9yZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBUSW5uZXIpID0+IFRSZXN1bHQ7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRPdXRlcj59IG91dGVyXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUSW5uZXI+fSBpbm5lclxuICogQHBhcmFtIHtmdW5jdGlvbihUT3V0ZXIpOiBUS2V5fSBvdXRlclNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRJbm5lcik6IFRLZXl9IGlubmVyU2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVE91dGVyLCBUSW5uZXIpOiBUUmVzdWx0fSByZXN1bHRTZWxlY3RvclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICBvdXRlcjogSXRlcmFibGU8VE91dGVyPixcbiAgICBpbm5lcjogSXRlcmFibGU8VElubmVyPixcbiAgICBvdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSxcbiAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSxcbiAgICByZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBUSW5uZXIpID0+IFRSZXN1bHQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX291dGVyID0gb3V0ZXI7XG4gICAgdGhpcy5faW5uZXIgPSBpbm5lcjtcbiAgICB0aGlzLl9vdXRlclNlbGVjdG9yID0gb3V0ZXJTZWxlY3RvcjtcbiAgICB0aGlzLl9pbm5lclNlbGVjdG9yID0gaW5uZXJTZWxlY3RvcjtcbiAgICB0aGlzLl9yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshTWFwPFRLZXksICFBcnJheTw/Pj59ICovIG1hcCA9IGNyZWF0ZUdyb3VwaW5nKHRoaXMuX2lubmVyLCB0aGlzLl9pbm5lclNlbGVjdG9yLCBpZGVudGl0eSk7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUT3V0ZXJ9ICovIG91dGVyRWxlbWVudCBvZiB0aGlzLl9vdXRlcikge1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHtUS2V5fSAqLyBvdXRlcktleSA9IHRoaXMuX291dGVyU2VsZWN0b3Iob3V0ZXJFbGVtZW50KTtcbiAgICAgIGlmIChtYXAuaGFzKG91dGVyS2V5KSkge1xuICAgICAgICBmb3IgKGxldCAvKiogQHR5cGUgez99ICovIGlubmVyRWxlbWVudCBvZiAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8oKCBtYXAuZ2V0KG91dGVyS2V5KSkpKSB7XG4gICAgICAgICAgeWllbGQgdGhpcy5fcmVzdWx0U2VsZWN0b3Iob3V0ZXJFbGVtZW50LCBpbm5lckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEpvaW5JdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VE91dGVyPn0gKi9cbkpvaW5JdGVyYWJsZS5wcm90b3R5cGUuX291dGVyO1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VElubmVyPn0gKi9cbkpvaW5JdGVyYWJsZS5wcm90b3R5cGUuX2lubmVyO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUT3V0ZXIpOiBUS2V5fSAqL1xuSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5fb3V0ZXJTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVElubmVyKTogVEtleX0gKi9cbkpvaW5JdGVyYWJsZS5wcm90b3R5cGUuX2lubmVyU2VsZWN0b3I7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRPdXRlciwgVElubmVyKTogVFJlc3VsdH0gKi9cbkpvaW5JdGVyYWJsZS5wcm90b3R5cGUuX3Jlc3VsdFNlbGVjdG9yO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VE91dGVyPn0gb3V0ZXJcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRJbm5lcj59IGlubmVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRPdXRlcik6IFRLZXl9IG91dGVyU2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVElubmVyKTogVEtleX0gaW5uZXJTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUT3V0ZXIsIFRJbm5lcik6IFRSZXN1bHR9IHJlc3VsdFNlbGVjdG9yXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbm5lckpvaW48VE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHQ+KFxuICAgIG91dGVyOiBJdGVyYWJsZTxUT3V0ZXI+LFxuICAgIGlubmVyOiBJdGVyYWJsZTxUSW5uZXI+LFxuICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5LFxuICAgIGlubmVyU2VsZWN0b3I6ICh2YWx1ZTogVElubmVyKSA9PiBUS2V5LFxuICAgIHJlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IFRJbm5lcikgPT4gVFJlc3VsdCk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgSm9pbkl0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcixcbiAgICBpbm5lcixcbiAgICBvdXRlclNlbGVjdG9yLFxuICAgIGlubmVyU2VsZWN0b3IsXG4gICAgcmVzdWx0U2VsZWN0b3IpO1xufVxuIl19