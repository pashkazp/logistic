goog.module('targets.esnext.cls.iterable.takewhile'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/takewhile.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class TakeWhileIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource, number): boolean} predicate
     */
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {number} */ i = 0;
        for (let /** @type {TSource} */ item of this._source) {
            if (!this._predicate(item, i++)) {
                break;
            }
            yield item;
        }
    }
}
function TakeWhileIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    TakeWhileIterable.prototype._source;
    /** @type {function(TSource, number): boolean} */
    TakeWhileIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource, number): boolean} predicate
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function takeWhile(source, predicate) {
    return new TakeWhileIterable(source, predicate);
}
exports.takeWhile = takeWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS90YWtld2hpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBILHVCQUFnQyxTQUFRLG9CQUFtQjtJQVczRDs7O09BR0c7SUFWRCxZQUFZLE1BQXlCLEVBQUMsU0FBc0Q7UUFZMUYsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsVUFBVSxHQUFFLFNBQVUsQ0FBQztJQVk5QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWNoQixJQUFJLHFCQWJELENBQUEsQ0FBRSxHQUFFLENBQUUsQ0FBQztRQWNWLEdBQUcsQ0FBQyxDQWJDLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFjOUIsRUFBRSxDQUFDLENBYkMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQkFBQSxLQUFBLENBQU87WUFBQSxDQUFFO1lBYzNDLE1BYkssSUFBSyxDQUFDO1FBY2IsQ0FiQztJQWNILENBYkM7Q0FDSDtBQWVBO0lBQ0EsaUNBQWlDO0lBQ2pDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDcEMsaURBQWlEO0lBQ2pELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDdkMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILG1CQTJCSSxNQTFCeUIsRUEyQnpCLFNBMUJxRDtJQTJCdkQsTUExQk0sQ0FBQSxJQUFJLGlCQUFrQixDQUFVLE1BQU0sRUFBQyxTQUFVLENBQUMsQ0FBQztBQTJCM0QsQ0ExQkM7QUFKRCw4QkFJQyIsImZpbGUiOiJ0YWtld2hpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgVGFrZVdoaWxlSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3ByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBwcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKCF0aGlzLl9wcmVkaWNhdGUoaXRlbSwgaSsrKSkgeyBicmVhazsgfVxuICAgICAgeWllbGQgaXRlbTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVGFrZVdoaWxlSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuVGFrZVdoaWxlSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IGJvb2xlYW59ICovXG5UYWtlV2hpbGVJdGVyYWJsZS5wcm90b3R5cGUuX3ByZWRpY2F0ZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGVcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VXaGlsZTxUU291cmNlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYWtlV2hpbGVJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIHByZWRpY2F0ZSk7XG59XG4iXX0=