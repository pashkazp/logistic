goog.module('targets.esnext.cls.iterable.from'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/from.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var bindcallback_1 = goog.require('targets.esnext.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var tolength_1 = goog.require('targets.esnext.cls.internal.tolength');
const tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.tolength");
var isiterable_1 = goog.require('targets.esnext.cls.internal.isiterable');
const tsickle_forward_declare_5 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.isiterable");
/**
 * @template TSource, TResult
 */
class FromIterable extends iterable_1.IterableX {
    /**
     * @param {(!Iterable<TSource>|!ArrayLike<TSource>)} source
     * @param {function(TSource, number): TResult} fn
     */
    constructor(source, fn) {
        super();
        this._source = source;
        this._fn = fn;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    *[Symbol.iterator]() {
        const /** @type {boolean} */ iterable = isiterable_1.isIterable(this._source);
        let /** @type {number} */ i = 0;
        if (iterable) {
            for (let /** @type {TSource} */ item of (this._source)) {
                yield this._fn(item, i++);
            }
        }
        else {
            let /** @type {number} */ length = tolength_1.toLength(((this._source)).length);
            while (i < length) {
                let /** @type {TSource} */ val = ((this._source))[i];
                yield this._fn(val, i++);
            }
        }
    }
}
function FromIterable_tsickle_Closure_declarations() {
    /** @type {(!Iterable<TSource>|!ArrayLike<TSource>)} */
    FromIterable.prototype._source;
    /** @type {function(TSource, number): TResult} */
    FromIterable.prototype._fn;
}
/**
 * @template TSource, TResult
 * @param {(!Iterable<TSource>|!ArrayLike<TSource>)} source
 * @param {function(TSource, number): TResult=} fn
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function from(source, fn = identity_1.identity, thisArg) {
    return new FromIterable(source, bindcallback_1.bindCallback(fn, thisArg, 2));
}
exports.from = from;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9mcm9tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLDJEQU5xQjtBQU9yQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FQbEQ7QUFReEQsbURBUGlCO0FBUWpCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQVJ0RDtBQVNoRCxtREFSaUI7QUFTakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBVHREO0FBVWhELHVEQVRtQjtBQVVuQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsaURBQWlELENBQUMsQ0FBQztBQUN6Rzs7R0FFRztBQVhILGtCQUE4QyxTQUFRLG9CQUFtQjtJQWV6RTs7O09BR0c7SUFkRCxZQUFZLE1BQThDLEVBQUMsRUFBK0M7UUFnQnhHLEtBZkssRUFBRSxDQUFDO1FBZ0JSLElBZkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBZ0J0QixJQWZJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztJQWdCaEIsQ0FBQztJQUNIOztPQUVHO0lBaEJELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBa0JoQixNQUFNLHNCQWpCRCxDQUFBLFFBQVMsR0FBRSx1QkFBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQWtCMUMsSUFBSSxxQkFqQkQsQ0FBQSxDQUFFLEdBQUUsQ0FBRSxDQUFDO1FBa0JWLEVBQUUsQ0FBQyxDQWpCQyxRQUFRLENBQUMsQ0FBQSxDQUFFO1lBa0JiLEdBQUcsQ0FBQyxDQWpCQyxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFBLENBQXVCLElBQUksQ0FBQyxPQUFBLENBQU8sQ0FBQyxDQUFBLENBQUU7Z0JBa0JqRCxNQWpCSyxJQUFLLENBQUMsR0FBRyxDQUFDLElBQUksRUFBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDO1lBa0I1QixDQWpCQztRQWtCSCxDQWpCQztRQUFBLElBQUssQ0FBQSxDQUFFO1lBa0JOLElBQUkscUJBakJELENBQUEsTUFBTyxHQUFFLG1CQUFTLENBQUMsQ0FBQSxDQUFxQixJQUFJLENBQUMsT0FBQSxDQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQWtCakUsT0FqQk8sQ0FBQyxHQUFFLE1BQU8sRUFBQyxDQUFFO2dCQWtCbEIsSUFBSSxzQkFqQkQsQ0FBQSxHQUFJLEdBQUUsQ0FBQSxDQUFzQixJQUFJLENBQUMsT0FBQSxDQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFrQmhELE1BakJLLElBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUM7WUFrQjNCLENBakJDO1FBa0JILENBakJDO0lBa0JILENBakJDO0NBQ0g7QUFtQkE7SUFDQSx1REFBdUQ7SUFDdkQsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDL0IsaURBQWlEO0lBQ2pELFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0FBQzNCLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUE5QkgsY0FnQ0ksTUEvQjhDLEVBZ0M5QyxLQS9CZ0QsbUJBQVMsRUFnQ3pELE9BL0JhO0lBZ0NmLE1BL0JNLENBQUEsSUFBSSxZQUFhLENBQW1CLE1BQU0sRUFBQywyQkFBYSxDQUFDLEVBQUUsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQWdDbEYsQ0EvQkM7QUFMRCxvQkFLQyIsImZpbGUiOiJmcm9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYmluZGNhbGxiYWNrXCIpO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcbmltcG9ydCB7IHRvTGVuZ3RoIH0gZnJvbSAnLi4vaW50ZXJuYWwvdG9sZW5ndGgnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfNCA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwudG9sZW5ndGhcIik7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vaW50ZXJuYWwvaXNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV81ID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pc2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICovXG5jbGFzcyBGcm9tSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdCA9IFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRSZXN1bHQ+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4gfCBBcnJheUxpa2U8VFNvdXJjZT47XG5wcml2YXRlIF9mbjogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBUUmVzdWx0O1xuLyoqXG4gKiBAcGFyYW0geyghSXRlcmFibGU8VFNvdXJjZT58IUFycmF5TGlrZTxUU291cmNlPil9IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBUUmVzdWx0fSBmblxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+IHwgQXJyYXlMaWtlPFRTb3VyY2U+LCBmbjogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBUUmVzdWx0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaXRlcmFibGUgPSBpc0l0ZXJhYmxlKHRoaXMuX3NvdXJjZSk7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDtcbiAgICBpZiAoaXRlcmFibGUpIHtcbiAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi8oKCA8SXRlcmFibGU8VFNvdXJjZT4+dGhpcy5fc291cmNlKSkpIHtcbiAgICAgICAgeWllbGQgdGhpcy5fZm4oaXRlbSwgaSsrKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBsZW5ndGggPSB0b0xlbmd0aCgoIC8qKiBAdHlwZSB7IUFycmF5TGlrZTxUU291cmNlPn0gKi8oKDxBcnJheUxpa2U8VFNvdXJjZT4+dGhpcy5fc291cmNlKSkpLmxlbmd0aCk7XG4gICAgICB3aGlsZSAoaSA8IGxlbmd0aCkge1xuICAgICAgICBsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyB2YWwgPSAoIC8qKiBAdHlwZSB7IUFycmF5TGlrZTxUU291cmNlPn0gKi8oKDxBcnJheUxpa2U8VFNvdXJjZT4+dGhpcy5fc291cmNlKSkpW2ldO1xuICAgICAgICB5aWVsZCB0aGlzLl9mbih2YWwsIGkrKyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEZyb21JdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHsoIUl0ZXJhYmxlPFRTb3VyY2U+fCFBcnJheUxpa2U8VFNvdXJjZT4pfSAqL1xuRnJvbUl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBUUmVzdWx0fSAqL1xuRnJvbUl0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRSZXN1bHRcbiAqIEBwYXJhbSB7KCFJdGVyYWJsZTxUU291cmNlPnwhQXJyYXlMaWtlPFRTb3VyY2U+KX0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IFRSZXN1bHQ9fSBmblxuICogQHBhcmFtIHs/PX0gdGhpc0FyZ1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZnJvbTxUU291cmNlLCBUUmVzdWx0ID0gVFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiB8IEFycmF5TGlrZTxUU291cmNlPixcbiAgICBmbjogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBUUmVzdWx0ID0gaWRlbnRpdHksXG4gICAgdGhpc0FyZz86IGFueSk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgRnJvbUl0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+KHNvdXJjZSwgYmluZENhbGxiYWNrKGZuLCB0aGlzQXJnLCAyKSk7XG59XG4iXX0=