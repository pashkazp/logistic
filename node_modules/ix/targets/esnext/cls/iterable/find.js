goog.module('targets.esnext.cls.iterable.find'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/find.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var bindcallback_1 = goog.require('targets.esnext.cls.internal.bindcallback');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * Returns the value of the first element in the sequence that satisfies the provided testing function.
 * Otherwise undefined is returned.
 * Otherwise undefined is returned.
 * @template T
 * @param {!Iterable<T>} source
 * @param {function(T, number): boolean} predicate
 * @param {?=} thisArg
 * @return {T}
 */
function find(source, predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError();
    }
    const /** @type {?} */ f = bindcallback_1.bindCallback(predicate, thisArg, 2);
    let /** @type {number} */ i = 0;
    for (let /** @type {T} */ item of source) {
        if (f(item, i++)) {
            return item;
        }
    }
    return undefined;
}
exports.find = find;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9maW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwyREFMcUI7QUFNckIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7Ozs7Ozs7OztHQVNHO0FBTEgsY0FPSSxNQU5tQixFQU9uQixTQU4rQyxFQU8vQyxPQU5hO0lBT2YsRUFBRSxDQUFDLENBTkMsT0FBTSxTQUFVLEtBQUksVUFBVyxDQUFDLENBQUEsQ0FBRTtRQUFBLE1BQU0sSUFBSSxTQUFVLEVBQUUsQ0FBQztJQUFBLENBQUU7SUFPL0QsTUFBTSxnQkFORCxDQUFBLENBQUUsR0FBRSwyQkFBYSxDQUFDLFNBQVMsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUM7SUFPOUMsSUFBSSxxQkFORCxDQUFBLENBQUUsR0FBRSxDQUFFLENBQUM7SUFRVixHQUFHLENBQUMsQ0FOQyxJQUFBLGdCQUFHLENBQUEsSUFBSyxJQUFHLE1BQU8sQ0FBQyxDQUFBLENBQUU7UUFPeEIsRUFBRSxDQUFDLENBTkMsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtZQU9qQixNQU5NLENBQUEsSUFBSyxDQUFDO1FBT2QsQ0FOQztJQU9ILENBTkM7SUFPRCxNQU5NLENBQUEsU0FBVSxDQUFDO0FBT25CLENBTkM7QUFkRCxvQkFjQyIsImZpbGUiOiJmaW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmJpbmRjYWxsYmFja1wiKTtcbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNlcXVlbmNlIHRoYXQgc2F0aXNmaWVzIHRoZSBwcm92aWRlZCB0ZXN0aW5nIGZ1bmN0aW9uLlxuICogT3RoZXJ3aXNlIHVuZGVmaW5lZCBpcyByZXR1cm5lZC5cbiAqIE90aGVyd2lzZSB1bmRlZmluZWQgaXMgcmV0dXJuZWQuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihULCBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGVcbiAqIEBwYXJhbSB7Pz19IHRoaXNBcmdcbiAqIEByZXR1cm4ge1R9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmaW5kPFQ+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4sXG4gICAgdGhpc0FyZz86IGFueSk6IFQgfCB1bmRlZmluZWQge1xuICBpZiAodHlwZW9mIHByZWRpY2F0ZSAhPT0gJ2Z1bmN0aW9uJykgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IH1cbiAgY29uc3QgLyoqIEB0eXBlIHs/fSAqLyBmID0gYmluZENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMik7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7XG5cbiAgZm9yIChsZXQgLyoqIEB0eXBlIHtUfSAqLyBpdGVtIG9mIHNvdXJjZSkge1xuICAgIGlmIChmKGl0ZW0sIGkrKykpIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19