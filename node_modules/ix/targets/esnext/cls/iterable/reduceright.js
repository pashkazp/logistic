goog.module('targets.esnext.cls.iterable.reduceright'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/reduceright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var toarray_1 = goog.require('targets.esnext.cls.iterable.toarray');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.toarray");
/**
 * @template T, R
 * @param {!Iterable<T>} source
 * @param {function(R, T, number): R} fn
 * @param {(T|R)=} seed
 * @return {(T|R)}
 */
function reduceRight(source, fn, seed) {
    const /** @type {boolean} */ hasSeed = arguments.length === 3;
    let /** @type {boolean} */ hasValue = false;
    const /** @type {!Array<T>} */ array = toarray_1.toArray(source);
    for (let /** @type {number} */ offset = array.length - 1; offset >= 0; offset--) {
        const /** @type {T} */ item = array[offset];
        if (hasValue || (hasValue = hasSeed)) {
            seed = fn(/** @type {R} */ (seed), item, offset);
        }
        else {
            seed = item;
            hasValue = true;
        }
    }
    if (hasSeed && !hasValue) {
        return ((seed));
    }
    if (!hasValue) {
        throw new Error('Sequence contains no elements');
    }
    return ((seed));
}
exports.reduceRight = reduceRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9yZWR1Y2VyaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsdUNBTGdCO0FBTWhCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw4Q0FBOEMsQ0FBQyxDQU5qRTtBQW9CcEM7Ozs7OztHQU1HO0FBWEgscUJBYUksTUFabUIsRUFhbkIsRUFac0MsRUFhdEMsSUFaWTtJQWFkLE1BQU0sc0JBWkQsQ0FBQSxPQUFRLEdBQUUsU0FBVSxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUM7SUFhdkMsSUFBSSxzQkFaRCxDQUFBLFFBQVMsR0FBRSxLQUFNLENBQUM7SUFhckIsTUFBTSx3QkFaRCxDQUFBLEtBQU0sR0FBRSxpQkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBYTlCLEdBQUcsQ0FBQyxDQVpDLElBQUEscUJBQUcsQ0FBQSxNQUFPLEdBQUUsS0FBTSxDQUFDLE1BQU0sR0FBRSxDQUFFLEVBQUMsTUFBTyxJQUFHLENBQUUsRUFBQyxNQUFPLEVBQUUsRUFBQyxDQUFFO1FBYTFELE1BQU0sZ0JBWkQsQ0FBQSxJQUFLLEdBQUUsS0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBYTNCLEVBQUUsQ0FBQyxDQVpDLFFBQVEsSUFBRyxDQUFFLFFBQVEsR0FBRSxPQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7WUFhckMsSUFaSSxHQUFFLEVBQUcsQ0FBQSxnQkFBQSxDQUFBLENBQUksSUFBQSxDQUFJLEVBQUMsSUFBSyxFQUFDLE1BQU8sQ0FBQyxDQUFDO1FBYW5DLENBWkM7UUFBQSxJQUFLLENBQUEsQ0FBRTtZQWFOLElBWkksR0FBRSxJQUFLLENBQUM7WUFhWixRQVpRLEdBQUUsSUFBSyxDQUFDO1FBYWxCLENBWkM7SUFhSCxDQVpDO0lBY0QsRUFBRSxDQUFDLENBWkMsT0FBTyxJQUFHLENBQUUsUUFBUSxDQUFDLENBQUEsQ0FBRTtRQWF6QixNQUFNLENBQXFCLENBQUMsQ0FadEIsSUFBQSxDQUFBLENBQU0sQ0FBQztJQWFmLENBWkM7SUFjRCxFQUFFLENBQUMsQ0FaQyxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUU7UUFhZCxNQVpLLElBQUksS0FBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFhbkQsQ0FaQztJQWNELE1BQU0sQ0FBcUIsQ0FBQyxDQVp0QixJQUFBLENBQUEsQ0FBTSxDQUFDO0FBYWYsQ0FaQztBQTFCRCxrQ0EwQkMiLCJmaWxlIjoicmVkdWNlcmlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi90b2FycmF5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLnRvYXJyYXlcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiByZWR1Y2VSaWdodDxUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCxcbiAgICBzZWVkPzogVCk6IFQ7XG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlUmlnaHQ8VD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVFtdLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVFtdLFxuICAgIHNlZWQ/OiBUW10pOiBUW107XG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlUmlnaHQ8VCwgUj4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gICAgc2VlZD86IFIpOiBSO1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICogQHBhcmFtIHshSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihSLCBULCBudW1iZXIpOiBSfSBmblxuICogQHBhcmFtIHsoVHxSKT19IHNlZWRcbiAqIEByZXR1cm4geyhUfFIpfVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVkdWNlUmlnaHQ8VCwgUj4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICBmbjogKGFjYzogUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUixcbiAgICBzZWVkPzogVCB8IFIpOiBUIHwgUiB7XG4gIGNvbnN0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzU2VlZCA9IGFyZ3VtZW50cy5sZW5ndGggPT09IDM7XG4gIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc1ZhbHVlID0gZmFsc2U7XG4gIGNvbnN0IC8qKiBAdHlwZSB7IUFycmF5PFQ+fSAqLyBhcnJheSA9IHRvQXJyYXkoc291cmNlKTtcbiAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIG9mZnNldCA9IGFycmF5Lmxlbmd0aCAtIDE7IG9mZnNldCA+PSAwOyBvZmZzZXQtLSkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7VH0gKi8gaXRlbSA9IGFycmF5W29mZnNldF07XG4gICAgaWYgKGhhc1ZhbHVlIHx8IChoYXNWYWx1ZSA9IGhhc1NlZWQpKSB7XG4gICAgICBzZWVkID0gZm4oIC8qKiBAdHlwZSB7Un0gKi8oKDxSPnNlZWQpKSwgaXRlbSwgb2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VlZCA9IGl0ZW07XG4gICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGhhc1NlZWQgJiYgIWhhc1ZhbHVlKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7KFR8Uil9ICovKCggc2VlZCkpO1xuICB9XG5cbiAgaWYgKCFoYXNWYWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2VxdWVuY2UgY29udGFpbnMgbm8gZWxlbWVudHMnKTtcbiAgfVxuXG4gIHJldHVybiAvKiogQHR5cGUgeyhUfFIpfSAqLygoIHNlZWQpKTtcbn1cbiJdfQ==