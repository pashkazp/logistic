goog.module('targets.esnext.cls.iterable.flatmapasync'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/flatmapasync.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.esnext.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource, TResult
 */
class FlatMapAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
     * @param {function(TSource): (!Iterable<(TResult|!PromiseLike<TResult>)>|!AsyncIterable<TResult>)} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        for await (let /** @type {TSource} */ outer of ((this._source))) {
            for await (let /** @type {TResult} */ inner of ((this._selector(outer)))) {
                yield inner;
            }
        }
    }
}
function FlatMapAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} */
    FlatMapAsyncIterable.prototype._source;
    /** @type {function(TSource): (!Iterable<(TResult|!PromiseLike<TResult>)>|!AsyncIterable<TResult>)} */
    FlatMapAsyncIterable.prototype._selector;
}
/**
 * Projects each element of a sequence to a potentially async iterable and flattens the
 * resulting sequences into one sequence.
 * transform function on each element of the input sequence.
 * @template TSource, TResult
 * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
 * @param {function(TSource): (!Iterable<(TResult|!PromiseLike<TResult>)>|!AsyncIterable<TResult>)} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function flatMapAsync(source, selector, thisArg) {
    return new FlatMapAsyncIterable(source, bindcallback_1.bindCallback(selector, thisArg, 1));
}
exports.flatMapAsync = flatMapAsync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9mbGF0bWFwYXN5bmMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsMkRBTnFCO0FBT3JCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQzNHOztHQUVHO0FBUkgsMEJBQTRDLFNBQVEsOEJBQXdCO0lBWTVFOzs7T0FHRztJQVhELFlBYUUsTUFaeUUsRUFhekUsUUFaK0Y7UUFhL0YsS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQztJQWE1QixDQUFDO0lBQ0g7O09BRUc7SUFiRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBZTNCLEdBZEcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsS0FBTSxJQUFBLENBQTRCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFFO1lBZS9ELEdBZEcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsS0FBTSxJQUFBLENBQTRCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQWV4RSxNQWRLLEtBQU0sQ0FBQztZQWVkLENBZEM7UUFlSCxDQWRDO0lBZUgsQ0FkQztDQUNIO0FBZ0JBO0lBQ0EsbUZBQW1GO0lBQ25GLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdkMsc0dBQXNHO0lBQ3RHLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDekMsQ0FBQztBQUVEOzs7Ozs7Ozs7R0FTRztBQXJCSCxzQkF1QkksTUF0QnlFLEVBdUJ6RSxRQXRCK0YsRUF1Qi9GLE9BdEJhO0lBdUJmLE1BdEJNLENBQUEsSUFBSSxvQkFBcUIsQ0FBbUIsTUFBTSxFQUFDLDJCQUFhLENBQUMsUUFBUSxFQUFDLE9BQVEsRUFBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBdUJoRyxDQXRCQztBQUxELG9DQUtDIiwiZmlsZSI6ImZsYXRtYXBhc3luYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmJpbmRjYWxsYmFja1wiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRSZXN1bHRcbiAqL1xuY2xhc3MgRmxhdE1hcEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFJlc3VsdCB8IFByb21pc2VMaWtlPFRSZXN1bHQ+PiB8IEFzeW5jSXRlcmFibGU8VFJlc3VsdD47XG4vKipcbiAqIEBwYXJhbSB7KCFJdGVyYWJsZTwoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pPnwhQXN5bmNJdGVyYWJsZTxUU291cmNlPil9IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKCFJdGVyYWJsZTwoVFJlc3VsdHwhUHJvbWlzZUxpa2U8VFJlc3VsdD4pPnwhQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pil9IHNlbGVjdG9yXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZSB8IFByb21pc2VMaWtlPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFJlc3VsdCB8IFByb21pc2VMaWtlPFRSZXN1bHQ+PiB8IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFJlc3VsdD59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gb3V0ZXIgb2YgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi8oKCA8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4odGhpcy5fc291cmNlKSkpKSB7XG4gICAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RSZXN1bHR9ICovIGlubmVyIG9mIC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFJlc3VsdD59ICovKCggPEFzeW5jSXRlcmFibGU8VFJlc3VsdD4+KHRoaXMuX3NlbGVjdG9yKG91dGVyKSkpKSkge1xuICAgICAgICB5aWVsZCBpbm5lcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRmxhdE1hcEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7KCFJdGVyYWJsZTwoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pPnwhQXN5bmNJdGVyYWJsZTxUU291cmNlPil9ICovXG5GbGF0TWFwQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICghSXRlcmFibGU8KFRSZXN1bHR8IVByb21pc2VMaWtlPFRSZXN1bHQ+KT58IUFzeW5jSXRlcmFibGU8VFJlc3VsdD4pfSAqL1xuRmxhdE1hcEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zZWxlY3Rvcjtcbn1cblxuLyoqXG4gKiBQcm9qZWN0cyBlYWNoIGVsZW1lbnQgb2YgYSBzZXF1ZW5jZSB0byBhIHBvdGVudGlhbGx5IGFzeW5jIGl0ZXJhYmxlIGFuZCBmbGF0dGVucyB0aGVcbiAqIHJlc3VsdGluZyBzZXF1ZW5jZXMgaW50byBvbmUgc2VxdWVuY2UuXG4gKiB0cmFuc2Zvcm0gZnVuY3Rpb24gb24gZWFjaCBlbGVtZW50IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZS5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyghSXRlcmFibGU8KFRTb3VyY2V8IVByb21pc2VMaWtlPFRTb3VyY2U+KT58IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4pfSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICghSXRlcmFibGU8KFRSZXN1bHR8IVByb21pc2VMaWtlPFRSZXN1bHQ+KT58IUFzeW5jSXRlcmFibGU8VFJlc3VsdD4pfSBzZWxlY3RvclxuICogQHBhcmFtIHs/PX0gdGhpc0FyZ1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0TWFwQXN5bmM8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4+IHwgQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUUmVzdWx0IHwgUHJvbWlzZUxpa2U8VFJlc3VsdD4+IHwgQXN5bmNJdGVyYWJsZTxUUmVzdWx0PixcbiAgICB0aGlzQXJnPzogYW55KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEZsYXRNYXBBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+KHNvdXJjZSwgYmluZENhbGxiYWNrKHNlbGVjdG9yLCB0aGlzQXJnLCAxKSk7XG59XG4iXX0=