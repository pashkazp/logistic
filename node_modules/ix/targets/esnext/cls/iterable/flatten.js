goog.module('targets.esnext.cls.iterable.flatten'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/flatten.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var isiterable_1 = goog.require('targets.esnext.cls.internal.isiterable');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.isiterable");
/**
 * @template TSource
 */
class FlattenIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} depth
     */
    constructor(source, depth) {
        super();
        this._source = source;
        this._depth = depth;
    }
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} depth
     * @return {!Iterable<TSource>}
     */
    *_flatten(source, depth) {
        if (depth === 0) {
            for (let /** @type {TSource} */ item of source) {
                yield item;
            }
            return;
        }
        for (let /** @type {TSource} */ item of source) {
            if (isiterable_1.isIterable(item)) {
                for (let /** @type {TSource} */ innerItem of this._flatten(item, depth - 1)) {
                    yield innerItem;
                }
            }
            else {
                yield item;
            }
        }
    }
    /**
     * @return {!Iterator<TSource>}
     */
    [Symbol.iterator]() {
        return this._flatten(this._source, this._depth)[Symbol.iterator]();
    }
}
function FlattenIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    FlattenIterable.prototype._source;
    /** @type {number} */
    FlattenIterable.prototype._depth;
}
/**
 * Flattens the source sequence until the specified depth.
 * @template T
 * @param {!Iterable<T>} source
 * @param {number=} depth
 * @return {!tsickle_forward_declare_1.IterableX<T>}
 */
function flatten(source, depth = Infinity) {
    return new FlattenIterable(source, depth);
}
exports.flatten = flatten;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9mbGF0dGVuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLHVEQU5tQjtBQU9uQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsaURBQWlELENBQUMsQ0FBQztBQUN6Rzs7R0FFRztBQVJILHFCQUE4QixTQUFRLG9CQUFtQjtJQVl6RDs7O09BR0c7SUFYRCxZQUFZLE1BQXlCLEVBQUMsS0FBYztRQWFsRCxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO0lBYXRCLENBQUM7SUFDSDs7OztPQUlHO0lBZkQsQ0FBUyxRQUFRLENBQUMsTUFBeUIsRUFBQyxLQUFjO1FBa0J4RCxFQUFFLENBQUMsQ0FqQkMsS0FBSyxLQUFJLENBQUUsQ0FBQyxDQUFBLENBQUU7WUFrQmhCLEdBQUcsQ0FBQyxDQWpCQyxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLE1BQU8sQ0FBQyxDQUFBLENBQUU7Z0JBQUEsTUFBTSxJQUFLLENBQUM7WUFBQSxDQUFFO1lBa0J4QyxNQUFNLENBakJDO1FBa0JULENBakJDO1FBa0JELEdBQUcsQ0FBQyxDQWpCQyxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLE1BQU8sQ0FBQyxDQUFBLENBQUU7WUFrQnhCLEVBQUUsQ0FBQyxDQWpCQyx1QkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQkFrQnJCLEdBQUcsQ0FBQyxDQWpCQyxJQUFBLHNCQUFHLENBQUEsU0FBVSxJQUFHLElBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLEtBQU0sR0FBRSxDQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7b0JBQUEsTUFBTSxTQUFVLENBQUM7Z0JBQUEsQ0FBRTtZQWtCNUUsQ0FqQkM7WUFBQSxJQUFLLENBQUEsQ0FBRTtnQkFrQk4sTUFqQkssSUFBSyxDQUFDO1lBa0JiLENBakJDO1FBa0JILENBakJDO0lBa0JILENBQUM7SUFDSDs7T0FFRztJQWxCRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFvQmYsTUFuQk0sQ0FBQSxJQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBb0JyRSxDQW5CQztDQUNIO0FBcUJBO0lBQ0EsaUNBQWlDO0lBQ2pDLGVBQWUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2xDLHFCQUFxQjtJQUNyQixlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUNqQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBMUJILGlCQUEyQixNQUFtQixFQUFDLFFBQWdCLFFBQVM7SUE0QnRFLE1BM0JNLENBQUEsSUFBSSxlQUFnQixDQUFJLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTRCL0MsQ0EzQkM7QUFGRCwwQkFFQyIsImZpbGUiOiJmbGF0dGVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vaW50ZXJuYWwvaXNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pc2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBGbGF0dGVuSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2RlcHRoOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBkZXB0aDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZGVwdGggPSBkZXB0aDtcbiAgfVxuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGhcbiAqIEByZXR1cm4geyFJdGVyYWJsZTxUU291cmNlPn1cbiAqL1xuXG5wcml2YXRlICpfZmxhdHRlbihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBkZXB0aDogbnVtYmVyKTogSXRlcmFibGU8VFNvdXJjZT4ge1xuICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHNvdXJjZSkgeyB5aWVsZCBpdGVtOyB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICAgIGlmIChpc0l0ZXJhYmxlKGl0ZW0pKSB7XG4gICAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaW5uZXJJdGVtIG9mIHRoaXMuX2ZsYXR0ZW4oaXRlbSwgZGVwdGggLSAxKSkgeyB5aWVsZCBpbm5lckl0ZW07IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZsYXR0ZW4odGhpcy5fc291cmNlLCB0aGlzLl9kZXB0aClbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIEZsYXR0ZW5JdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5GbGF0dGVuSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cbkZsYXR0ZW5JdGVyYWJsZS5wcm90b3R5cGUuX2RlcHRoO1xufVxuXG4vKipcbiAqIEZsYXR0ZW5zIHRoZSBzb3VyY2Ugc2VxdWVuY2UgdW50aWwgdGhlIHNwZWNpZmllZCBkZXB0aC5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcj19IGRlcHRoXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuPFQ+KHNvdXJjZTogSXRlcmFibGU8VD4sIGRlcHRoOiBudW1iZXIgPSBJbmZpbml0eSk6IEl0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgRmxhdHRlbkl0ZXJhYmxlPFQ+KHNvdXJjZSwgZGVwdGgpO1xufVxuIl19