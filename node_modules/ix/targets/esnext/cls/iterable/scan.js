goog.module('targets.esnext.cls.iterable.scan'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/scan.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template T, R
 */
class ScanIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<T>} source
     * @param {function((T|R), T, number): R} fn
     * @param {...(T|R)} args
     */
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    /**
     * @return {!IterableIterator<R>}
     */
    *[Symbol.iterator]() {
        let /** @type {number} */ i = 0, /** @type {boolean} */ hasValue = false;
        for (let /** @type {T} */ item of this._source) {
            if (hasValue || (hasValue = this._hasSeed)) {
                this._seed = this._fn(/** @type {R} */ (this._seed), item, i++);
                yield this._seed;
            }
            else {
                this._seed = item;
                hasValue = true;
                i++;
            }
        }
    }
}
function ScanIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<T>} */
    ScanIterable.prototype._source;
    /** @type {function((T|R), T, number): R} */
    ScanIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanIterable.prototype._seed;
    /** @type {boolean} */
    ScanIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!Iterable<T>} source
 * @param {function((T|R), T, number): R} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.IterableX<(T|R)>}
 */
function scan(source, accumulator, ...args) {
    return new ScanIterable(source, accumulator, ...args);
}
exports.scan = scan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zY2FuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUY7O0dBRUc7QUFQSCxrQkFBd0IsU0FBUSxvQkFBYTtJQWE3Qzs7OztPQUlHO0lBWEQsWUFhSSxNQVptQixFQWFuQixFQVowQyxFQWExQyxHQVpHLElBQWU7UUFhcEIsS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztRQWFkLElBWkksQ0FBQyxRQUFRLEdBQUUsSUFBSyxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUM7UUFhbEMsSUFaSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFhdkIsQ0FBQztJQUNIOztPQUVHO0lBYkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFlaEIsSUFBSSxxQkFkRCxDQUFBLENBQUUsR0FBRSxDQUFFLEVBQUEsc0JBQUMsQ0FBQSxRQUFTLEdBQUUsS0FBTSxDQUFDO1FBZTVCLEdBQUcsQ0FBQyxDQWRDLElBQUEsZ0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFlOUIsRUFBRSxDQUFDLENBZEMsUUFBUSxJQUFHLENBQUUsUUFBUSxHQUFFLElBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBZTNDLElBZEksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDLEdBQUcsQ0FBQSxnQkFBQSxDQUFBLENBQUksSUFBSSxDQUFDLEtBQUEsQ0FBSyxFQUFDLElBQUssRUFBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQWVoRCxNQWRLLElBQUssQ0FBQyxLQUFLLENBQUM7WUFlbkIsQ0FkQztZQUFBLElBQUssQ0FBQSxDQUFFO2dCQWVOLElBZEksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDO2dCQWVsQixRQWRRLEdBQUUsSUFBSyxDQUFDO2dCQWVoQixDQWRDLEVBQUUsQ0FBQztZQWVOLENBZEM7UUFlSCxDQWRDO0lBZUgsQ0FkQztDQUNIO0FBZ0JBO0lBQ0EsMkJBQTJCO0lBQzNCLFlBQVksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQy9CLDRDQUE0QztJQUM1QyxZQUFZLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUMzQixvQkFBb0I7SUFDcEIsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDN0Isc0JBQXNCO0lBQ3RCLFlBQVksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ2hDLENBQUM7QUFVRDs7Ozs7O0dBTUc7QUFoQ0gsY0FrQ0ksTUFqQ21CLEVBa0NuQixXQWpDdUQsRUFrQ3ZELEdBakNHLElBQWU7SUFrQ3BCLE1BakNNLENBQUEsSUFBSSxZQUFhLENBQUMsTUFBTSxFQUFDLFdBQVksRUFBQyxHQUFJLElBQUksQ0FBQyxDQUFDO0FBa0N4RCxDQWpDQztBQUxELG9CQUtDIiwiZmlsZSI6InNjYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqL1xuY2xhc3MgU2Nhbkl0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgSXRlcmFibGVYPFI+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VD47XG5wcml2YXRlIF9mbjogKGFjYzogVCB8IFIsIHg6IFQsIGluZGV4OiBudW1iZXIpID0+IFI7XG5wcml2YXRlIF9zZWVkPzogVCB8IFI7XG5wcml2YXRlIF9oYXNTZWVkOiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiBSfSBmblxuICogQHBhcmFtIHsuLi4oVHxSKX0gYXJnc1xuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gICAgICBmbjogKGFjYzogVCB8IFIsIHg6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gICAgICAuLi5hcmdzOiAoVCB8IFIpW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICAgIHRoaXMuX2hhc1NlZWQgPSBhcmdzLmxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLl9zZWVkID0gYXJnc1swXTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxSPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDAsIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzVmFsdWUgPSBmYWxzZTtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1R9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gdGhpcy5faGFzU2VlZCkpIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IHRoaXMuX2ZuKCAvKiogQHR5cGUge1J9ICovKCg8Uj50aGlzLl9zZWVkKSksIGl0ZW0sIGkrKyk7XG4gICAgICAgIHlpZWxkIHRoaXMuX3NlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWVkID0gaXRlbTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNjYW5JdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VD59ICovXG5TY2FuSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiBSfSAqL1xuU2Nhbkl0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG4vKiogQHR5cGUgeyhUfFIpfSAqL1xuU2Nhbkl0ZXJhYmxlLnByb3RvdHlwZS5fc2VlZDtcbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblNjYW5JdGVyYWJsZS5wcm90b3R5cGUuX2hhc1NlZWQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYW48VD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCk6IEl0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQsIFIgPSBUPihcbiAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSLFxuICBzZWVkOiBSKTogSXRlcmFibGVYPFI+O1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICogQHBhcmFtIHshSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogUn0gYWNjdW11bGF0b3JcbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDwoVHxSKT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIGFjY3VtdWxhdG9yOiAoYWNjOiBUIHwgUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogSXRlcmFibGVYPFQgfCBSPiB7XG4gIHJldHVybiBuZXcgU2Nhbkl0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19