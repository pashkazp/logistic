goog.module('targets.esnext.cls.iterable.expand'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/expand.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class ExpandIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): !Iterable<TSource>} fn
     */
    constructor(source, fn) {
        super();
        this._source = source;
        this._fn = fn;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Array<!Iterable<TSource>>} */ q = [this._source];
        while (q.length > 0) {
            let /** @type {!Iterable<TSource>} */ src = q.shift();
            for (let /** @type {TSource} */ item of ((src))) {
                q.push(this._fn(item));
                yield item;
            }
        }
    }
}
function ExpandIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    ExpandIterable.prototype._source;
    /** @type {function(TSource): !Iterable<TSource>} */
    ExpandIterable.prototype._fn;
}
/**
 * Expands the sequence by recursively applying a selector function.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): !Iterable<TSource>} selector
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function expand(source, selector) {
    return new ExpandIterable(source, selector);
}
exports.expand = expand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9leHBhbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBILG9CQUE2QixTQUFRLG9CQUFtQjtJQVd4RDs7O09BR0c7SUFWRCxZQUFZLE1BQXlCLEVBQUMsRUFBMEM7UUFZOUUsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztJQVloQixDQUFDO0lBQ0g7O09BRUc7SUFaRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWNoQixJQUFJLHlDQWJELENBQUEsQ0FBRSxHQUFFLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBY3ZCLE9BYk8sQ0FBQyxDQUFDLE1BQU0sR0FBRSxDQUFFLEVBQUMsQ0FBRTtZQWNwQixJQUFJLGlDQWJELENBQUEsR0FBSSxHQUFFLENBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQWNwQixHQUFHLENBQUMsQ0FiQyxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFBLENBQUEsQ0FBRyxHQUFBLENBQUEsQ0FBSyxDQUFDLENBQUEsQ0FBRTtnQkFjdEIsQ0FiQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBY3ZCLE1BYkssSUFBSyxDQUFDO1lBY2IsQ0FiQztRQWNILENBYkM7SUFjSCxDQWJDO0NBQ0g7QUFlQTtJQUNBLGlDQUFpQztJQUNqQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNqQyxvREFBb0Q7SUFDcEQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUFDN0IsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQXBCSCxnQkFzQkksTUFyQnlCLEVBc0J6QixRQXJCK0M7SUFzQmpELE1BckJNLENBQUEsSUFBSSxjQUFlLENBQVUsTUFBTSxFQUFDLFFBQVEsQ0FBQyxDQUFDO0FBc0J0RCxDQXJCQztBQUpELHdCQUlDIiwiZmlsZSI6ImV4cGFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBFeHBhbmRJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfZm46ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFNvdXJjZT47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICFJdGVyYWJsZTxUU291cmNlPn0gZm5cbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgZm46ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFycmF5PCFJdGVyYWJsZTxUU291cmNlPj59ICovIHEgPSBbdGhpcy5fc291cmNlXTtcbiAgICB3aGlsZSAocS5sZW5ndGggPiAwKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovIHNyYyA9IHEuc2hpZnQoKTtcbiAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi8oKCBzcmMpKSkge1xuICAgICAgICBxLnB1c2godGhpcy5fZm4oaXRlbSkpO1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBFeHBhbmRJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeHBhbmRJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICFJdGVyYWJsZTxUU291cmNlPn0gKi9cbkV4cGFuZEl0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG59XG5cbi8qKlxuICogRXhwYW5kcyB0aGUgc2VxdWVuY2UgYnkgcmVjdXJzaXZlbHkgYXBwbHlpbmcgYSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAhSXRlcmFibGU8VFNvdXJjZT59IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmQ8VFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUU291cmNlPik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRXhwYW5kSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLHNlbGVjdG9yKTtcbn1cbiJdfQ==