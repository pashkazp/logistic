goog.module('targets.esnext.cls.iterable.tap'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/tap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
/**
 * @template TSource
 */
class TapIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {(!NextObserver<TSource>|!ErrorObserver<TSource>|!CompletionObserver<TSource>)} observer
     */
    constructor(source, observer) {
        super();
        this._source = source;
        this._observer = observer;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        const /** @type {!Iterator<TSource>} */ it = this._source[Symbol.iterator]();
        while (1) {
            let /** @type {?} */ next;
            try {
                next = it.next();
                if (next.done) {
                    break;
                }
            }
            catch (e) {
                if (this._observer.error) {
                    this._observer.error(e);
                }
                throw e;
            }
            if (this._observer.next) {
                this._observer.next(next.value);
            }
            yield next.value;
        }
        if (this._observer.complete) {
            this._observer.complete();
        }
    }
}
function TapIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    TapIterable.prototype._source;
    /** @type {(!NextObserver<TSource>|!ErrorObserver<TSource>|!CompletionObserver<TSource>)} */
    TapIterable.prototype._observer;
}
/**
 * Lazily invokes observer methods for each value in the sequence, and upon successful or exceptional termination.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {(!NextObserver<TSource>|!ErrorObserver<TSource>|!CompletionObserver<TSource>)} observer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function tap(source, observer) {
    return new TapIterable(source, observer);
}
exports.tap = tap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS90YXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFReEMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsc0NBQXNDO0FBQzVGOztHQUVHO0FBVEgsaUJBQTBCLFNBQVEsb0JBQW1CO0lBYXJEOzs7T0FHRztJQVpELFlBQVksTUFBeUIsRUFBQyxRQUFtQztRQWN2RSxLQWJLLEVBQUUsQ0FBQztRQWNSLElBYkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBY3RCLElBYkksQ0FBQyxTQUFTLEdBQUUsUUFBUyxDQUFDO0lBYzVCLENBQUM7SUFDSDs7T0FFRztJQWRELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBZ0JoQixNQUFNLGlDQWZELENBQUEsRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFnQjNDLE9BZk8sQ0FBQyxFQUFDLENBQUU7WUFnQlQsSUFBSSxnQkFmRCxDQUFBLElBQUssQ0FBQztZQWdCVCxJQWZHLENBQUU7Z0JBZ0JILElBZkksR0FBRSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBZ0JqQixFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTtvQkFBQSxLQUFBLENBQU87Z0JBQUEsQ0FBRTtZQWdCM0IsQ0FmQztZQUFBLEtBQUEsQ0FBQSxDQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBZ0JYLEVBQUUsQ0FBQyxDQWZDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBRTtvQkFBQSxJQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQSxDQUFFO2dCQWdCdEQsTUFmSyxDQUFFLENBQUM7WUFnQlYsQ0FmQztZQWlCRCxFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7Z0JBQUEsSUFBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsQ0FBRTtZQWdCN0QsTUFmSyxJQUFLLENBQUMsS0FBSyxDQUFDO1FBZ0JuQixDQWZDO1FBaUJELEVBQUUsQ0FBQyxDQWZDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTtZQUFBLElBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7UUFBQSxDQUFFO0lBZ0I3RCxDQWZDO0NBQ0g7QUFpQkE7SUFDQSxpQ0FBaUM7SUFDakMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDOUIsNEZBQTRGO0lBQzVGLFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUF0QkgsYUFBNkIsTUFBeUIsRUFBQyxRQUFtQztJQXdCeEYsTUF2Qk0sQ0FBQSxJQUFJLFdBQVksQ0FBVSxNQUFNLEVBQUMsUUFBUyxDQUFDLENBQUM7QUF3QnBELENBdkJDO0FBRkQsa0JBRUMiLCJmaWxlIjoidGFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBQYXJ0aWFsT2JzZXJ2ZXIgfSBmcm9tICcuLi9vYnNlcnZlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5vYnNlcnZlclwiKTtcbmdvb2cucmVxdWlyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5vYnNlcnZlclwiKTsgLy8gZm9yY2UgdHlwZS1vbmx5IG1vZHVsZSB0byBiZSBsb2FkZWRcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgVGFwSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX29ic2VydmVyOiBQYXJ0aWFsT2JzZXJ2ZXI8VFNvdXJjZT47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7KCFOZXh0T2JzZXJ2ZXI8VFNvdXJjZT58IUVycm9yT2JzZXJ2ZXI8VFNvdXJjZT58IUNvbXBsZXRpb25PYnNlcnZlcjxUU291cmNlPil9IG9ic2VydmVyXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIG9ic2VydmVyOiBQYXJ0aWFsT2JzZXJ2ZXI8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9vYnNlcnZlciA9IG9ic2VydmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7P30gKi8gbmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5leHQgPSBpdC5uZXh0KCk7XG4gICAgICAgIGlmIChuZXh0LmRvbmUpIHsgYnJlYWs7IH1cbiAgICAgIH0gY2F0Y2ggKCAvKiogQHR5cGUgez99ICovZSkge1xuICAgICAgICBpZiAodGhpcy5fb2JzZXJ2ZXIuZXJyb3IpIHsgdGhpcy5fb2JzZXJ2ZXIuZXJyb3IoZSk7IH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX29ic2VydmVyLm5leHQpIHsgdGhpcy5fb2JzZXJ2ZXIubmV4dChuZXh0LnZhbHVlKTsgfVxuICAgICAgeWllbGQgbmV4dC52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fb2JzZXJ2ZXIuY29tcGxldGUpIHsgdGhpcy5fb2JzZXJ2ZXIuY29tcGxldGUoKTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFRhcEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cblRhcEl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHsoIU5leHRPYnNlcnZlcjxUU291cmNlPnwhRXJyb3JPYnNlcnZlcjxUU291cmNlPnwhQ29tcGxldGlvbk9ic2VydmVyPFRTb3VyY2U+KX0gKi9cblRhcEl0ZXJhYmxlLnByb3RvdHlwZS5fb2JzZXJ2ZXI7XG59XG5cbi8qKlxuICogTGF6aWx5IGludm9rZXMgb2JzZXJ2ZXIgbWV0aG9kcyBmb3IgZWFjaCB2YWx1ZSBpbiB0aGUgc2VxdWVuY2UsIGFuZCB1cG9uIHN1Y2Nlc3NmdWwgb3IgZXhjZXB0aW9uYWwgdGVybWluYXRpb24uXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHsoIU5leHRPYnNlcnZlcjxUU291cmNlPnwhRXJyb3JPYnNlcnZlcjxUU291cmNlPnwhQ29tcGxldGlvbk9ic2VydmVyPFRTb3VyY2U+KX0gb2JzZXJ2ZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhcDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBvYnNlcnZlcjogUGFydGlhbE9ic2VydmVyPFRTb3VyY2U+KTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYXBJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIG9ic2VydmVyKTtcbn1cbiJdfQ==