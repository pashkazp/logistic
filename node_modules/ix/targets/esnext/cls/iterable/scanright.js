goog.module('targets.esnext.cls.iterable.scanright'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/scanright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var toarray_1 = goog.require('targets.esnext.cls.iterable.toarray');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.toarray");
/**
 * @template T, R
 */
class ScanRightIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<T>} source
     * @param {function((T|R), T, number): R} fn
     * @param {...(T|R)} args
     */
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    /**
     * @return {!IterableIterator<R>}
     */
    *[Symbol.iterator]() {
        let /** @type {boolean} */ hasValue = false;
        const /** @type {!Array<T>} */ source = toarray_1.toArray(this._source);
        for (let /** @type {number} */ offset = source.length - 1; offset >= 0; offset--) {
            const /** @type {T} */ item = source[offset];
            if (hasValue || (hasValue = this._hasSeed)) {
                this._seed = this._fn(/** @type {R} */ (this._seed), item, offset);
                yield this._seed;
            }
            else {
                this._seed = item;
                hasValue = true;
            }
        }
    }
}
function ScanRightIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<T>} */
    ScanRightIterable.prototype._source;
    /** @type {function((T|R), T, number): R} */
    ScanRightIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanRightIterable.prototype._seed;
    /** @type {boolean} */
    ScanRightIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!Iterable<T>} source
 * @param {function((T|R), T, number): R} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.IterableX<(T|R)>}
 */
function scanRight(source, accumulator, ...args) {
    return new ScanRightIterable(source, accumulator, ...args);
}
exports.scanRight = scanRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zY2FucmlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsdUNBTmdCO0FBT2hCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0FBQ3RHOztHQUVHO0FBUkgsdUJBQTZCLFNBQVEsb0JBQWE7SUFjbEQ7Ozs7T0FJRztJQVpELFlBY0ksTUFibUIsRUFjbkIsRUFiMEMsRUFjMUMsR0FiRyxJQUFlO1FBY3BCLEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsSUFiSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7UUFjZCxJQWJJLENBQUMsUUFBUSxHQUFFLElBQUssQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDO1FBY2xDLElBYkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBY3ZCLENBQUM7SUFDSDs7T0FFRztJQWRELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBZ0JoQixJQUFJLHNCQWZELENBQUEsUUFBUyxHQUFFLEtBQU0sQ0FBQztRQWdCckIsTUFBTSx3QkFmRCxDQUFBLE1BQU8sR0FBRSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQWdCckMsR0FBRyxDQUFDLENBZkMsSUFBQSxxQkFBRyxDQUFBLE1BQU8sR0FBRSxNQUFPLENBQUMsTUFBTSxHQUFFLENBQUUsRUFBQyxNQUFPLElBQUcsQ0FBRSxFQUFDLE1BQU8sRUFBRSxFQUFDLENBQUU7WUFnQjNELE1BQU0sZ0JBZkQsQ0FBQSxJQUFLLEdBQUUsTUFBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBZ0I1QixFQUFFLENBQUMsQ0FmQyxRQUFRLElBQUcsQ0FBRSxRQUFRLEdBQUUsSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQkFnQjNDLElBZkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDLEdBQUcsQ0FBQSxnQkFBQSxDQUFBLENBQUksSUFBSSxDQUFDLEtBQUEsQ0FBSyxFQUFDLElBQUssRUFBQyxNQUFPLENBQUMsQ0FBQztnQkFnQm5ELE1BZkssSUFBSyxDQUFDLEtBQUssQ0FBQztZQWdCbkIsQ0FmQztZQUFBLElBQUssQ0FBQSxDQUFFO2dCQWdCTixJQWZJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztnQkFnQmxCLFFBZlEsR0FBRSxJQUFLLENBQUM7WUFnQmxCLENBZkM7UUFnQkgsQ0FmQztJQWdCSCxDQWZDO0NBQ0g7QUFpQkE7SUFDQSwyQkFBMkI7SUFDM0IsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNwQyw0Q0FBNEM7SUFDNUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUNoQyxvQkFBb0I7SUFDcEIsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUNsQyxzQkFBc0I7SUFDdEIsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUNyQyxDQUFDO0FBVUQ7Ozs7OztHQU1HO0FBakNILG1CQW1DSSxNQWxDbUIsRUFtQ25CLFdBbEN1RCxFQW1DdkQsR0FsQ0csSUFBZTtJQW1DcEIsTUFsQ00sQ0FBQSxJQUFJLGlCQUFrQixDQUFDLE1BQU0sRUFBQyxXQUFZLEVBQUMsR0FBSSxJQUFJLENBQUMsQ0FBQztBQW1DN0QsQ0FsQ0M7QUFMRCw4QkFLQyIsImZpbGUiOiJzY2FucmlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3RvYXJyYXknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUudG9hcnJheVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqL1xuY2xhc3MgU2NhblJpZ2h0SXRlcmFibGU8VCwgUj4gZXh0ZW5kcyBJdGVyYWJsZVg8Uj4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUPjtcbnByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUjtcbnByaXZhdGUgX3NlZWQ/OiBUIHwgUjtcbnByaXZhdGUgX2hhc1NlZWQ6IGJvb2xlYW47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IFJ9IGZuXG4gKiBAcGFyYW0gey4uLihUfFIpfSBhcmdzXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICAgIGZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUixcbiAgICAgIC4uLmFyZ3M6IChUIHwgUilbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2ZuID0gZm47XG4gICAgdGhpcy5faGFzU2VlZCA9IGFyZ3MubGVuZ3RoID09PSAxO1xuICAgIHRoaXMuX3NlZWQgPSBhcmdzWzBdO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFI+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzVmFsdWUgPSBmYWxzZTtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFBcnJheTxUPn0gKi8gc291cmNlID0gdG9BcnJheSh0aGlzLl9zb3VyY2UpO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBvZmZzZXQgPSBzb3VyY2UubGVuZ3RoIC0gMTsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSB7XG4gICAgICBjb25zdCAvKiogQHR5cGUge1R9ICovIGl0ZW0gPSBzb3VyY2Vbb2Zmc2V0XTtcbiAgICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSB0aGlzLl9oYXNTZWVkKSkge1xuICAgICAgICB0aGlzLl9zZWVkID0gdGhpcy5fZm4oIC8qKiBAdHlwZSB7Un0gKi8oKDxSPnRoaXMuX3NlZWQpKSwgaXRlbSwgb2Zmc2V0KTtcbiAgICAgICAgeWllbGQgdGhpcy5fc2VlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBpdGVtO1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNjYW5SaWdodEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUPn0gKi9cblNjYW5SaWdodEl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogUn0gKi9cblNjYW5SaWdodEl0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG4vKiogQHR5cGUgeyhUfFIpfSAqL1xuU2NhblJpZ2h0SXRlcmFibGUucHJvdG90eXBlLl9zZWVkO1xuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuU2NhblJpZ2h0SXRlcmFibGUucHJvdG90eXBlLl9oYXNTZWVkO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCk6IEl0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gIHNlZWQ6IFIpOiBJdGVyYWJsZVg8Uj47XG4vKipcbiAqIEB0ZW1wbGF0ZSBULCBSXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiBSfSBhY2N1bXVsYXRvclxuICogQHBhcmFtIHsuLi4oVHxSKX0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPChUfFIpPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5SaWdodDxULCBSID0gVD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSLFxuICAgIC4uLmFyZ3M6IChUIHwgUilbXSk6IEl0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5SaWdodEl0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19