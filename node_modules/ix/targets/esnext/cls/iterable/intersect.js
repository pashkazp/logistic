goog.module('targets.esnext.cls.iterable.intersect'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/intersect.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var arrayindexof_1 = goog.require('targets.esnext.cls.internal.arrayindexof');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.esnext.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): boolean} comparer
 * @return {boolean}
 */
function arrayRemove(array, item, comparer) {
    let /** @type {number} */ idx = arrayindexof_1.arrayIndexOf(array, item, comparer);
    if (idx === -1) {
        return false;
    }
    array.splice(idx, 1);
    return true;
}
/**
 * @template TSource
 */
class IntersectIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} first
     * @param {!Iterable<TSource>} second
     * @param {function(TSource, TSource): boolean} comparer
     */
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Array<?>} */ map = [];
        for (let /** @type {TSource} */ secondItem of this._second) {
            map.push(secondItem);
        }
        for (let /** @type {TSource} */ firstItem of this._first) {
            if (arrayRemove(map, firstItem, this._comparer)) {
                yield firstItem;
            }
        }
    }
}
function IntersectIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    IntersectIterable.prototype._first;
    /** @type {!Iterable<TSource>} */
    IntersectIterable.prototype._second;
    /** @type {function(TSource, TSource): boolean} */
    IntersectIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} first
 * @param {!Iterable<TSource>} second
 * @param {function(TSource, TSource): boolean=} comparer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function intersect(first, second, comparer = comparer_1.comparer) {
    return new IntersectIterable(first, second, comparer);
}
exports.intersect = intersect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9pbnRlcnNlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsMkRBTnFCO0FBT3JCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQVBsRDtBQVF4RCxtREFQb0M7QUFRcEMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7Ozs7OztHQU1HO0FBYkgscUJBQXdCLEtBQVUsRUFBQyxJQUFRLEVBQUMsUUFBa0M7SUFlNUUsSUFBSSxxQkFkRCxDQUFBLEdBQUksR0FBRSwyQkFBYSxDQUFDLEtBQUssRUFBQyxJQUFLLEVBQUMsUUFBUyxDQUFDLENBQUM7SUFlOUMsRUFBRSxDQUFDLENBZEMsR0FBRyxLQUFJLENBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtRQUFBLE1BQU8sQ0FBQSxLQUFNLENBQUM7SUFBQSxDQUFFO0lBZWpDLEtBZEssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFDLENBQUUsQ0FBQyxDQUFDO0lBZXJCLE1BZE0sQ0FBQSxJQUFLLENBQUM7QUFlZCxDQUFDO0FBQ0Q7O0dBRUc7QUFmSCx1QkFBZ0MsU0FBUSxvQkFBbUI7SUFvQjNEOzs7O09BSUc7SUFuQkQsWUFxQkksS0FwQndCLEVBcUJ4QixNQXBCeUIsRUFxQnpCLFFBcEI2QztRQXFCL0MsS0FwQkssRUFBRSxDQUFDO1FBcUJSLElBcEJJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQXFCcEIsSUFwQkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBcUJ0QixJQXBCSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFxQjVCLENBQUM7SUFDSDs7T0FFRztJQXJCRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQXVCaEIsSUFBSSx3QkF0QkQsQ0FBQSxHQUFJLEdBQUUsRUFBRyxDQUFDO1FBdUJiLEdBQUcsQ0FBQyxDQXRCQyxJQUFBLHNCQUFHLENBQUEsVUFBVyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBdUJwQyxHQXRCRyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQXVCdkIsQ0F0QkM7UUF3QkQsR0FBRyxDQUFDLENBdEJDLElBQUEsc0JBQUcsQ0FBQSxTQUFVLElBQUcsSUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUU7WUF1QmxDLEVBQUUsQ0FBQyxDQXRCQyxXQUFXLENBQUMsR0FBRyxFQUFDLFNBQVUsRUFBQyxJQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQXVCaEQsTUF0QkssU0FBVSxDQUFDO1lBdUJsQixDQXRCQztRQXVCSCxDQXRCQztJQXVCSCxDQXRCQztDQUNIO0FBd0JBO0lBQ0EsaUNBQWlDO0lBQ2pDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsaUNBQWlDO0lBQ2pDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDcEMsa0RBQWtEO0lBQ2xELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDdEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQXJDSCxtQkF1Q00sS0F0Q3dCLEVBdUN4QixNQXRDeUIsRUF1Q3pCLFdBdEMrQyxtQkFBZ0I7SUF1Q25FLE1BdENNLENBQUEsSUFBSSxpQkFBa0IsQ0FBVSxLQUFLLEVBQUMsTUFBTyxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBdUNqRSxDQXRDQztBQUxELDhCQUtDIiwiZmlsZSI6ImludGVyc2VjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mIH0gZnJvbSAnLi4vaW50ZXJuYWwvYXJyYXlpbmRleG9mJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmFycmF5aW5kZXhvZlwiKTtcbmltcG9ydCB7IGNvbXBhcmVyIGFzIGRlZmF1bHRDb21wYXJlciB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXJyYXk8VD59IGFycmF5XG4gKiBAcGFyYW0ge1R9IGl0ZW1cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCwgVCk6IGJvb2xlYW59IGNvbXBhcmVyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBhcnJheVJlbW92ZTxUPihhcnJheTogVFtdLCBpdGVtOiBULCBjb21wYXJlcjogKHg6IFQsIHk6IFQpID0+IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpZHggPSBhcnJheUluZGV4T2YoYXJyYXksIGl0ZW0sIGNvbXBhcmVyKTtcbiAgaWYgKGlkeCA9PT0gLTEpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGFycmF5LnNwbGljZShpZHgsIDEpO1xuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgSW50ZXJzZWN0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfZmlyc3Q6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGZpcnN0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiBib29sZWFufSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIGZpcnN0OiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHNlY29uZDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2ZpcnN0ID0gZmlyc3Q7XG4gICAgdGhpcy5fc2Vjb25kID0gc2Vjb25kO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIG1hcCA9IFtdO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gc2Vjb25kSXRlbSBvZiB0aGlzLl9zZWNvbmQpIHtcbiAgICAgIG1hcC5wdXNoKHNlY29uZEl0ZW0pO1xuICAgIH1cblxuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gZmlyc3RJdGVtIG9mIHRoaXMuX2ZpcnN0KSB7XG4gICAgICBpZiAoYXJyYXlSZW1vdmUobWFwLCBmaXJzdEl0ZW0sIHRoaXMuX2NvbXBhcmVyKSkge1xuICAgICAgICB5aWVsZCBmaXJzdEl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEludGVyc2VjdEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cbkludGVyc2VjdEl0ZXJhYmxlLnByb3RvdHlwZS5fZmlyc3Q7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cbkludGVyc2VjdEl0ZXJhYmxlLnByb3RvdHlwZS5fc2Vjb25kO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogYm9vbGVhbn0gKi9cbkludGVyc2VjdEl0ZXJhYmxlLnByb3RvdHlwZS5fY29tcGFyZXI7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBmaXJzdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNlY29uZFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogYm9vbGVhbj19IGNvbXBhcmVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnNlY3Q8VFNvdXJjZT4oXG4gICAgICBmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBzZWNvbmQ6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuID0gZGVmYXVsdENvbXBhcmVyKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBJbnRlcnNlY3RJdGVyYWJsZTxUU291cmNlPihmaXJzdCwgc2Vjb25kLCBjb21wYXJlcik7XG59XG4iXX0=