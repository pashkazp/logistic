goog.module('targets.esnext.cls.iterable.slice'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/slice.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class SliceIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} begin
     * @param {number} end
     */
    constructor(source, begin, end) {
        super();
        this._source = source;
        this._begin = begin;
        this._end = end;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Iterator<TSource>} */ it = this._source[Symbol.iterator](), /** @type {number} */ begin = this._begin, /** @type {?} */ next;
        while (begin > 0 && !(next = it.next()).done) {
            begin--;
        }
        let /** @type {number} */ end = this._end;
        if (end > 0) {
            while (!(next = it.next()).done) {
                yield next.value;
                if (--end === 0) {
                    break;
                }
            }
        }
    }
}
function SliceIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    SliceIterable.prototype._source;
    /** @type {number} */
    SliceIterable.prototype._begin;
    /** @type {number} */
    SliceIterable.prototype._end;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} begin
 * @param {number=} end
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function slice(source, begin, end = Infinity) {
    return new SliceIterable(source, begin, end);
}
exports.slice = slice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zbGljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEgsbUJBQTRCLFNBQVEsb0JBQW1CO0lBWXZEOzs7O09BSUc7SUFYRCxZQUFZLE1BQXlCLEVBQUMsS0FBYyxFQUFDLEdBQVk7UUFhL0QsS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWFwQixJQVpJLENBQUMsSUFBSSxHQUFFLEdBQUksQ0FBQztJQWFsQixDQUFDO0lBQ0g7O09BRUc7SUFiRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWVoQixJQUFJLGlDQWRELENBQUEsRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUEscUJBQUMsQ0FBQSxLQUFNLEdBQUUsSUFBSyxDQUFDLE1BQU0sRUFBQSxnQkFBQyxDQUFBLElBQUssQ0FBQztRQWVwRSxPQWRPLEtBQUssR0FBRSxDQUFFLElBQUcsQ0FBRSxDQUFDLElBQUksR0FBRSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBRTtZQWU3QyxLQWRLLEVBQUUsQ0FBQztRQWVWLENBZEM7UUFnQkQsSUFBSSxxQkFkRCxDQUFBLEdBQUksR0FBRSxJQUFLLENBQUMsSUFBSSxDQUFDO1FBZXBCLEVBQUUsQ0FBQyxDQWRDLEdBQUcsR0FBRSxDQUFFLENBQUMsQ0FBQSxDQUFFO1lBZVosT0FkTyxDQUFDLENBQUMsSUFBSSxHQUFFLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFFO2dCQWVoQyxNQWRLLElBQUssQ0FBQyxLQUFLLENBQUM7Z0JBZWpCLEVBQUUsQ0FBQyxDQWRDLEVBQUUsR0FBRyxLQUFJLENBQUUsQ0FBQyxDQUFBLENBQUU7b0JBQUEsS0FBQSxDQUFPO2dCQUFBLENBQUU7WUFlN0IsQ0FkQztRQWVILENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxpQ0FBaUM7SUFDakMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDaEMscUJBQXFCO0lBQ3JCLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQy9CLHFCQUFxQjtJQUNyQixhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztBQUM3QixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBN0JILGVBK0JJLE1BOUJ5QixFQStCekIsS0E5QmEsRUErQmIsTUE5QmEsUUFBUztJQStCeEIsTUE5Qk0sQ0FBQSxJQUFJLGFBQWMsQ0FBVSxNQUFNLEVBQUMsS0FBTSxFQUFDLEdBQUksQ0FBQyxDQUFDO0FBK0J4RCxDQTlCQztBQUxELHNCQUtDIiwiZmlsZSI6InNsaWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFNsaWNlSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2JlZ2luOiBudW1iZXI7XG5wcml2YXRlIF9lbmQ6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGJlZ2luOiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fYmVnaW4gPSBiZWdpbjtcbiAgICB0aGlzLl9lbmQgPSBlbmQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5pdGVyYXRvcl0oKSwgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGJlZ2luID0gdGhpcy5fYmVnaW4sIC8qKiBAdHlwZSB7P30gKi8gbmV4dDtcbiAgICB3aGlsZSAoYmVnaW4gPiAwICYmICEobmV4dCA9IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgYmVnaW4tLTtcbiAgICB9XG5cbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGVuZCA9IHRoaXMuX2VuZDtcbiAgICBpZiAoZW5kID4gMCkge1xuICAgICAgd2hpbGUgKCEobmV4dCA9IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgICB5aWVsZCBuZXh0LnZhbHVlO1xuICAgICAgICBpZiAoLS1lbmQgPT09IDApIHsgYnJlYWs7IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2xpY2VJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5TbGljZUl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5TbGljZUl0ZXJhYmxlLnByb3RvdHlwZS5fYmVnaW47XG4vKiogQHR5cGUge251bWJlcn0gKi9cblNsaWNlSXRlcmFibGUucHJvdG90eXBlLl9lbmQ7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXI9fSBlbmRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBlbmQ6IG51bWJlciA9IEluZmluaXR5KTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBTbGljZUl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgYmVnaW4sIGVuZCk7XG59XG4iXX0=