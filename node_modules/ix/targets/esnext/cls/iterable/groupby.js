goog.module('targets.esnext.cls.iterable.groupby'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/groupby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var _grouping_1 = goog.require('targets.esnext.cls.iterable._grouping');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._grouping");
/**
 * @template TKey, TValue
 */
class GroupedIterable extends iterable_1.IterableX {
    /**
     * @param {TKey} key
     * @param {!Iterable<TValue>} source
     */
    constructor(key, source) {
        super();
        this.key = key;
        this._source = source;
    }
    /**
     * @return {!Iterator<TValue>}
     */
    [Symbol.iterator]() {
        return this._source[Symbol.iterator]();
    }
}
exports.GroupedIterable = GroupedIterable;
function GroupedIterable_tsickle_Closure_declarations() {
    /** @type {TKey} */
    GroupedIterable.prototype.key;
    /** @type {!Iterable<TValue>} */
    GroupedIterable.prototype._source;
}
/**
 * @template TSource, TKey, TValue
 */
class GroupByIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TSource): TValue} elementSelector
     */
    constructor(source, keySelector, elementSelector) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._elementSelector = elementSelector;
    }
    /**
     * @return {!IterableIterator<!GroupedIterable<TKey, TValue>>}
     */
    *[Symbol.iterator]() {
        const /** @type {!Map<TKey, !Array<TValue>>} */ map = _grouping_1.createGrouping(this._source, this._keySelector, this._elementSelector);
        for (let [key, values] of map) {
            yield new GroupedIterable(key, values);
        }
    }
}
exports.GroupByIterable = GroupByIterable;
function GroupByIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    GroupByIterable.prototype._source;
    /** @type {function(TSource): TKey} */
    GroupByIterable.prototype._keySelector;
    /** @type {function(TSource): TValue} */
    GroupByIterable.prototype._elementSelector;
}
/**
 * @template TSource, TKey, TValue
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TSource): TValue=} elementSelector
 * @return {!tsickle_forward_declare_1.IterableX<!GroupedIterable<TKey, TValue>>}
 */
function groupBy(source, keySelector, elementSelector = identity_1.identity) {
    return new GroupByIterable(source, keySelector, elementSelector);
}
exports.groupBy = groupBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9ncm91cGJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLG1EQU5pQjtBQU9qQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FQdEQ7QUFRaEQsMkNBUHVCO0FBUXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0FBQ3hHOztHQUVHO0FBVEgscUJBQTBDLFNBQVEsb0JBQWtCO0lBYXBFOzs7T0FHRztJQVpELFlBQVksR0FBUyxFQUFDLE1BQXlCO1FBYzdDLEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLEdBQUcsR0FBRSxHQUFJLENBQUM7UUFjZixJQWJJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztJQWN4QixDQUFDO0lBQ0g7O09BRUc7SUFkRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFnQmYsTUFmTSxDQUFBLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFnQnpDLENBZkM7Q0FDSDtBQWJBLDBDQWFBO0FBaUJBO0lBQ0EsbUJBQW1CO0lBQ25CLGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQzlCLGdDQUFnQztJQUNoQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUNsQyxDQUFDO0FBRUQ7O0dBRUc7QUF4QkgscUJBQW1ELFNBQVEsb0JBQXlDO0lBNkJwRzs7OztPQUlHO0lBNUJELFlBOEJJLE1BN0J5QixFQThCekIsV0E3QnFDLEVBOEJyQyxlQTdCMkM7UUE4QjdDLEtBN0JLLEVBQUUsQ0FBQztRQThCUixJQTdCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUE4QnRCLElBN0JJLENBQUMsWUFBWSxHQUFFLFdBQVksQ0FBQztRQThCaEMsSUE3QkksQ0FBQyxnQkFBZ0IsR0FBRSxlQUFnQixDQUFDO0lBOEIxQyxDQUFDO0lBQ0g7O09BRUc7SUE5QkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFnQ2hCLE1BQU0seUNBL0JELENBQUEsR0FBSSxHQUFFLDBCQUFlLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxJQUFLLENBQUMsWUFBWSxFQUFDLElBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBZ0NuRixHQUFHLENBQUMsQ0EvQkMsSUFBRyxDQUFFLEdBQUcsRUFBQyxNQUFPLENBQUMsSUFBRyxHQUFJLENBQUMsQ0FBQSxDQUFFO1lBZ0M5QixNQS9CSyxJQUFJLGVBQWdCLENBQUMsR0FBRyxFQUFDLE1BQU8sQ0FBQyxDQUFDO1FBZ0N6QyxDQS9CQztJQWdDSCxDQS9CQztDQUNIO0FBckJBLDBDQXFCQTtBQWlDQTtJQUNBLGlDQUFpQztJQUNqQyxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNsQyxzQ0FBc0M7SUFDdEMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDdkMsd0NBQXdDO0lBQ3hDLGVBQWUsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUM7QUFDM0MsQ0FBQztBQVVEOzs7Ozs7R0FNRztBQS9DSCxpQkFpREksTUFoRHlCLEVBaUR6QixXQWhEcUMsRUFpRHJDLGtCQWhENkMsbUJBQVM7SUFpRHhELE1BaERNLENBQUEsSUFBSSxlQUFnQixDQUF3QixNQUFNLEVBQUMsV0FBWSxFQUFDLGVBQWdCLENBQUMsQ0FBQztBQWlEMUYsQ0FoREM7QUFMRCwwQkFLQyIsImZpbGUiOiJncm91cGJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuaW1wb3J0IHsgY3JlYXRlR3JvdXBpbmcgfSBmcm9tICcuL19ncm91cGluZyc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZS5fZ3JvdXBpbmdcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUS2V5LCBUVmFsdWVcbiAqL1xuZXhwb3J0IGNsYXNzIEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+IGV4dGVuZHMgSXRlcmFibGVYPFRWYWx1ZT4ge1xucHVibGljIHJlYWRvbmx5IGtleTogVEtleTtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFZhbHVlPjtcbi8qKlxuICogQHBhcmFtIHtUS2V5fSBrZXlcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRWYWx1ZT59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3RvcihrZXk6IFRLZXksIHNvdXJjZTogSXRlcmFibGU8VFZhbHVlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYXRvcjxUVmFsdWU+fVxuICovXG5bU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc291cmNlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBHcm91cGVkSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7VEtleX0gKi9cbkdyb3VwZWRJdGVyYWJsZS5wcm90b3R5cGUua2V5O1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFZhbHVlPn0gKi9cbkdyb3VwZWRJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleSwgVFZhbHVlXG4gKi9cbmV4cG9ydCBjbGFzcyBHcm91cEJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleSwgVFZhbHVlPiBleHRlbmRzIEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXk7XG5wcml2YXRlIF9lbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogVFZhbHVlfSBlbGVtZW50U2VsZWN0b3JcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSxcbiAgICAgIGVsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2VsZW1lbnRTZWxlY3RvciA9IGVsZW1lbnRTZWxlY3RvcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjwhR3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshTWFwPFRLZXksICFBcnJheTxUVmFsdWU+Pn0gKi8gbWFwID0gY3JlYXRlR3JvdXBpbmcodGhpcy5fc291cmNlLCB0aGlzLl9rZXlTZWxlY3RvciwgdGhpcy5fZWxlbWVudFNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZXNdIG9mIG1hcCkge1xuICAgICAgeWllbGQgbmV3IEdyb3VwZWRJdGVyYWJsZShrZXksIHZhbHVlcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEdyb3VwQnlJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5Hcm91cEJ5SXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSAqL1xuR3JvdXBCeUl0ZXJhYmxlLnByb3RvdHlwZS5fa2V5U2VsZWN0b3I7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiBUVmFsdWV9ICovXG5Hcm91cEJ5SXRlcmFibGUucHJvdG90eXBlLl9lbGVtZW50U2VsZWN0b3I7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5KTogSXRlcmFibGVYPEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUU291cmNlPj47XG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBCeTxUU291cmNlLCBUS2V5LCBUVmFsdWU+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5LFxuICBlbGVtZW50U2VsZWN0b3I/OiAodmFsdWU6IFRTb3VyY2UpID0+IFRWYWx1ZSk6IEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj47XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5LCBUVmFsdWVcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUVmFsdWU9fSBlbGVtZW50U2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDwhR3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBCeTxUU291cmNlLCBUS2V5LCBUVmFsdWU+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSxcbiAgICBlbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlID0gaWRlbnRpdHkpOiBJdGVyYWJsZVg8R3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+IHtcbiAgcmV0dXJuIG5ldyBHcm91cEJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihzb3VyY2UsIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IpO1xufVxuIl19