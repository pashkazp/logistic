goog.module('targets.esnext.cls.iterable.flatmap'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/flatmap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var bindcallback_1 = goog.require('targets.esnext.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource, TResult
 */
class FlatMapIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): !Iterable<TResult>} fn
     */
    constructor(source, fn) {
        super();
        this._source = source;
        this._fn = fn;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    *[Symbol.iterator]() {
        for (let /** @type {TSource} */ outerItem of this._source) {
            for (let /** @type {TResult} */ innerItem of this._fn(outerItem)) {
                yield innerItem;
            }
        }
    }
}
function FlatMapIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    FlatMapIterable.prototype._source;
    /** @type {function(TSource): !Iterable<TResult>} */
    FlatMapIterable.prototype._fn;
}
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * transform function on each element of the input sequence.
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): !Iterable<TResult>} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function flatMap(source, selector, thisArg) {
    return new FlatMapIterable(source, bindcallback_1.bindCallback(selector, thisArg, 1));
}
exports.flatMap = flatMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9mbGF0bWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLDJEQU5xQjtBQU9yQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUMzRzs7R0FFRztBQVJILHFCQUF1QyxTQUFRLG9CQUFtQjtJQVlsRTs7O09BR0c7SUFYRCxZQUFZLE1BQXlCLEVBQUMsRUFBMEM7UUFhOUUsS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztJQWFoQixDQUFDO0lBQ0g7O09BRUc7SUFiRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWVoQixHQUFHLENBQUMsQ0FkQyxJQUFBLHNCQUFHLENBQUEsU0FBVSxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBZW5DLEdBQUcsQ0FBQyxDQWRDLElBQUEsc0JBQUcsQ0FBQSxTQUFVLElBQUcsSUFBSyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBZTFDLE1BZEssU0FBVSxDQUFDO1lBZWxCLENBZEM7UUFlSCxDQWRDO0lBZUgsQ0FkQztDQUNIO0FBZ0JBO0lBQ0EsaUNBQWlDO0lBQ2pDLGVBQWUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2xDLG9EQUFvRDtJQUNwRCxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUM5QixDQUFDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBckJILGlCQXVCSSxNQXRCeUIsRUF1QnpCLFFBdEIrQyxFQXVCL0MsT0F0QmE7SUF1QmYsTUF0Qk0sQ0FBQSxJQUFJLGVBQWdCLENBQW1CLE1BQU0sRUFBQywyQkFBYSxDQUFDLFFBQVEsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQXVCM0YsQ0F0QkM7QUFMRCwwQkFLQyIsImZpbGUiOiJmbGF0bWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYmluZGNhbGxiYWNrXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICovXG5jbGFzcyBGbGF0TWFwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2ZuOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAhSXRlcmFibGU8VFJlc3VsdD59IGZuXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGZuOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gb3V0ZXJJdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUUmVzdWx0fSAqLyBpbm5lckl0ZW0gb2YgdGhpcy5fZm4ob3V0ZXJJdGVtKSkge1xuICAgICAgICB5aWVsZCBpbm5lckl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEZsYXRNYXBJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5GbGF0TWFwSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiAhSXRlcmFibGU8VFJlc3VsdD59ICovXG5GbGF0TWFwSXRlcmFibGUucHJvdG90eXBlLl9mbjtcbn1cblxuLyoqXG4gKiBQcm9qZWN0cyBlYWNoIGVsZW1lbnQgb2YgYSBzZXF1ZW5jZSB0byBpdGVyYWJsZSBhbmQgZmxhdHRlbnMgdGhlIHJlc3VsdGluZyBzZXF1ZW5jZXMgaW50b1xuICogb25lIHNlcXVlbmNlLlxuICogdHJhbnNmb3JtIGZ1bmN0aW9uIG9uIGVhY2ggZWxlbWVudCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogIUl0ZXJhYmxlPFRSZXN1bHQ+fSBzZWxlY3RvclxuICogQHBhcmFtIHs/PX0gdGhpc0FyZ1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdE1hcDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+LFxuICAgIHRoaXNBcmc/OiBhbnkpOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEZsYXRNYXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0Pihzb3VyY2UsIGJpbmRDYWxsYmFjayhzZWxlY3RvciwgdGhpc0FyZywgMSkpO1xufVxuIl19