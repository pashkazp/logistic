goog.module('targets.esnext.cls.iterable.case'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/case.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var defer_1 = goog.require('targets.esnext.cls.iterable.defer');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.defer");
var empty_1 = goog.require('targets.esnext.cls.iterable.empty');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.empty");
/**
 * Returns a sequence from a dictionary based on the result of evaluating a selector function.
 * \@example
 * const map = new Map([
 *   [1, [1, 2, 3]],
 *   [2, [2, 3, 4]],
 *   [3, [4, 5, 6]]
 * ]);
 * const result = case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * const result = Ix.Iterable.case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * for (const item of result) {
 *   console.log(result);
 * }
 * for the computed selector value.  If not specified, defaults to an empty sequence.
 * @template TSource, TResult
 * @param {function(): TSource} selector
 * @param {!Map<TSource, !Iterable<TResult>>} sources
 * @param {!Iterable<TResult>=} defaultSource
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function _case(selector, sources, defaultSource = empty_1.empty()) {
    return defer_1.defer(() => {
        const /** @type {TSource} */ key = selector();
        return sources.has(key) ? ((sources.get(key))) : defaultSource;
    });
}
exports._case = _case;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9jYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFHSCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsbUNBTmM7QUFPZCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsNENBQTRDLENBQUMsQ0FQbkU7QUFRaEMsbUNBUGM7QUFRZCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsNENBQTRDLENBQUMsQ0FBQztBQUNwRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkJHO0FBUEgsZUFTSSxRQVJ1QixFQVN2QixPQVJ3QyxFQVN4QyxnQkFSa0MsYUFBTSxFQUFXO0lBU3JELE1BUk0sQ0FBQSxhQUFNLENBQVU7UUFTcEIsTUFBTSxzQkFSRCxDQUFBLEdBQUksR0FBRSxRQUFTLEVBQUUsQ0FBQztRQVN2QixNQVJNLENBQUEsT0FBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBQSxDQUFBLENBQUUsT0FBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUEsQ0FBQSxDQUFFLEdBQUUsYUFBYyxDQUFDO0lBUzlELENBUkMsQ0FBQyxDQUFDO0FBU0wsQ0FSQztBQVJELHNCQVFDIiwiZmlsZSI6ImNhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGRlZmVyIH0gZnJvbSAnLi9kZWZlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZS5kZWZlclwiKTtcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9lbXB0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZS5lbXB0eVwiKTtcbi8qKlxuICogUmV0dXJucyBhIHNlcXVlbmNlIGZyb20gYSBkaWN0aW9uYXJ5IGJhc2VkIG9uIHRoZSByZXN1bHQgb2YgZXZhbHVhdGluZyBhIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICogXFxAZXhhbXBsZSBcbiAqIGNvbnN0IG1hcCA9IG5ldyBNYXAoW1xuICogICBbMSwgWzEsIDIsIDNdXSxcbiAqICAgWzIsIFsyLCAzLCA0XV0sXG4gKiAgIFszLCBbNCwgNSwgNl1dXG4gKiBdKTtcbiAqIGNvbnN0IHJlc3VsdCA9IGNhc2UoXG4gKiAgICgpID0+IDIsXG4gKiAgIG1hcCxcbiAqICAgWzUsIDYsIDddXG4gKiApO1xuICogY29uc3QgcmVzdWx0ID0gSXguSXRlcmFibGUuY2FzZShcbiAqICAgKCkgPT4gMixcbiAqICAgbWFwLFxuICogICBbNSwgNiwgN11cbiAqICk7XG4gKiBmb3IgKGNvbnN0IGl0ZW0gb2YgcmVzdWx0KSB7XG4gKiAgIGNvbnNvbGUubG9nKHJlc3VsdCk7XG4gKiB9XG4gKiBmb3IgdGhlIGNvbXB1dGVkIHNlbGVjdG9yIHZhbHVlLiAgSWYgbm90IHNwZWNpZmllZCwgZGVmYXVsdHMgdG8gYW4gZW1wdHkgc2VxdWVuY2UuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHtmdW5jdGlvbigpOiBUU291cmNlfSBzZWxlY3RvclxuICogQHBhcmFtIHshTWFwPFRTb3VyY2UsICFJdGVyYWJsZTxUUmVzdWx0Pj59IHNvdXJjZXNcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRSZXN1bHQ+PX0gZGVmYXVsdFNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2Nhc2U8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc2VsZWN0b3I6ICgpID0+IFRTb3VyY2UsXG4gICAgc291cmNlczogTWFwPFRTb3VyY2UsIEl0ZXJhYmxlPFRSZXN1bHQ+PixcbiAgICBkZWZhdWx0U291cmNlOiBJdGVyYWJsZTxUUmVzdWx0PiA9IGVtcHR5PFRSZXN1bHQ+KCkpOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gZGVmZXI8VFJlc3VsdD4oKCkgPT4ge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8ga2V5ID0gc2VsZWN0b3IoKTtcbiAgICByZXR1cm4gc291cmNlcy5oYXMoa2V5KSA/IC8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRSZXN1bHQ+fSAqLygoIHNvdXJjZXMuZ2V0KGtleSkpKSA6IGRlZmF1bHRTb3VyY2U7XG4gIH0pO1xufVxuIl19