goog.module('targets.esnext.cls.iterable._refcountlist'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/_refcountlist.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @ignore
 * @record
 * @template T
 */
function RefCount() { }
exports.RefCount = RefCount;
function RefCount_tsickle_Closure_declarations() {
    /** @type {T} */
    RefCount.prototype.value;
    /** @type {number} */
    RefCount.prototype.count;
}
/**
 * @ignore
 * @record
 * @template T
 */
function IRefCountList() { }
exports.IRefCountList = IRefCountList;
function IRefCountList_tsickle_Closure_declarations() {
    /** @type {function(): void} */
    IRefCountList.prototype.clear;
    /** @type {number} */
    IRefCountList.prototype.count;
    /** @type {function(number): T} */
    IRefCountList.prototype.get;
    /** @type {function(T): void} */
    IRefCountList.prototype.push;
    /** @type {function(): void} */
    IRefCountList.prototype.done;
}
/**
 * @ignore
 * @template T
 * @implements {IRefCountList}
 */
class MaxRefCountList {
    constructor() {
        this._list = [];
    }
    /**
     * @return {void}
     */
    clear() { this._list = []; }
    /**
     * @return {number}
     */
    get count() { return this._list.length; }
    /**
     * @param {number} index
     * @return {T}
     */
    get(index) { return this._list[index]; }
    /**
     * @param {T} value
     * @return {void}
     */
    push(value) { this._list.push(value); }
    /**
     * @return {void}
     */
    done() { }
}
exports.MaxRefCountList = MaxRefCountList;
function MaxRefCountList_tsickle_Closure_declarations() {
    /** @type {!Array<T>} */
    MaxRefCountList.prototype._list;
}
/**
 * @ignore
 * @template T
 * @implements {IRefCountList}
 */
class RefCountList {
    /**
     * @param {number} readerCount
     */
    constructor(readerCount) {
        this._count = 0;
        this._readerCount = readerCount;
        this._list = new Map();
    }
    /**
     * @return {void}
     */
    clear() { this._list.clear(); }
    /**
     * @return {number}
     */
    get count() { return this._count; }
    /**
     * @return {number}
     */
    get readerCount() { return this._readerCount; }
    /**
     * @param {number} value
     * @return {void}
     */
    set readerCount(value) { this._readerCount = value; }
    /**
     * @return {void}
     */
    done() { this._readerCount--; }
    /**
     * @param {number} index
     * @return {T}
     */
    get(index) {
        if (!this._list.has(index)) {
            throw new Error('Element no longer available in the buffer.');
        }
        const /** @type {!RefCount<T>} */ res = ((this._list.get(index)));
        const /** @type {T} */ val = res.value;
        if (--res.count === 0) {
            this._list.delete(index);
        }
        return val;
    }
    /**
     * @param {T} value
     * @return {void}
     */
    push(value) {
        this._list.set(this._count++, { value: value, count: this._readerCount });
    }
}
exports.RefCountList = RefCountList;
function RefCountList_tsickle_Closure_declarations() {
    /** @type {number} */
    RefCountList.prototype._readerCount;
    /** @type {!Map<number, !RefCount<T>>} */
    RefCountList.prototype._list;
    /** @type {number} */
    RefCountList.prototype._count;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9fcmVmY291bnRsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFHSDs7OztHQUlHO0FBQ0gsc0JBQTRCLENBQUM7QUFBN0IsNEJBQTZCO0FBRzdCO0lBQ0EsZ0JBQWdCO0lBQ2hCLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ3pCLHFCQUFxQjtJQUNyQixRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztBQUN6QixDQUFDO0FBUUQ7Ozs7R0FJRztBQUNILDJCQUFpQyxDQUFDO0FBQWxDLHNDQUFrQztBQUdsQztJQUNBLCtCQUErQjtJQUMvQixhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUM5QixxQkFBcUI7SUFDckIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDOUIsa0NBQWtDO0lBQ2xDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQzVCLGdDQUFnQztJQUNoQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztJQUM3QiwrQkFBK0I7SUFDL0IsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDN0IsQ0FBQztBQWFEOzs7O0dBSUc7QUF6Q0g7SUFBQTtRQUNTLFVBQU0sR0FBTyxFQUFHLENBQUE7SUFTekIsQ0FBQTtJQWtDQTs7T0FFRztJQTNDRCxLQUFLLEtBQUksSUFBSyxDQUFDLEtBQUssR0FBRSxFQUFHLENBQUMsQ0FBQSxDQUFBO0lBNkM1Qjs7T0FFRztJQTlDRCxJQUFHLEtBQU0sS0FBSSxNQUFPLENBQUEsSUFBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBO0lBZ0R6Qzs7O09BR0c7SUFsREQsR0FBRyxDQUFDLEtBQWEsSUFBTSxNQUFPLENBQUEsSUFBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBLENBQUE7SUFvRG5EOzs7T0FHRztJQXRERCxJQUFJLENBQUMsS0FBUSxJQUFHLElBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUEsQ0FBQTtJQXdEMUM7O09BRUc7SUF2REQsSUFBSSxLQUFFLENBQUk7Q0FDWjtBQVZBLDBDQVVBO0FBMERBO0lBQ0Esd0JBQXdCO0lBQ3hCLGVBQWUsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7OztHQUlHO0FBOURIO0lBbUVBOztPQUVHO0lBaEVELFlBQVksV0FBbUI7UUFGeEIsV0FBTyxHQUFVLENBQUUsQ0FBQTtRQW9FeEIsSUFqRUksQ0FBQyxZQUFZLEdBQUUsV0FBWSxDQUFDO1FBa0VoQyxJQWpFSSxDQUFDLEtBQUssR0FBRSxJQUFJLEdBQUksRUFBdUIsQ0FBQztJQWtFOUMsQ0FBQztJQUNIOztPQUVHO0lBbEVELEtBQUssS0FBSSxJQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUEsQ0FBQTtJQW9FL0I7O09BRUc7SUFyRUQsSUFBRyxLQUFNLEtBQUksTUFBTyxDQUFBLElBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFBO0lBdUVuQzs7T0FFRztJQXhFRCxJQUFHLFdBQVksS0FBSSxNQUFPLENBQUEsSUFBSyxDQUFDLFlBQVksQ0FBQyxDQUFBLENBQUE7SUEwRS9DOzs7T0FHRztJQTVFRCxJQUFHLFdBQVksQ0FBQyxLQUFhLElBQUcsSUFBSyxDQUFDLFlBQVksR0FBRSxLQUFNLENBQUMsQ0FBQSxDQUFBO0lBOEU3RDs7T0FFRztJQS9FRCxJQUFJLEtBQUksSUFBSyxDQUFDLFlBQVksRUFBRSxDQUFDLENBQUEsQ0FBQTtJQWlGL0I7OztPQUdHO0lBbEZELEdBQUcsQ0FBQyxLQUFhO1FBb0ZmLEVBQUUsQ0FBQyxDQW5GQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUEsQ0FBRTtZQW9GM0IsTUFuRkssSUFBSSxLQUFNLENBQUMsNENBQTRDLENBQUMsQ0FBQztRQW9GaEUsQ0FuRkM7UUFvRkQsTUFBTSwyQkFuRkQsQ0FBQSxHQUFJLEdBQUEsQ0FBQSxDQUFFLElBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQSxDQUFBLENBQUUsQ0FBQztRQW9GbkMsTUFBTSxnQkFuRkQsQ0FBQSxHQUFJLEdBQUUsR0FBSSxDQUFDLEtBQUssQ0FBQztRQW9GdEIsRUFBRSxDQUFDLENBbkZDLEVBQUUsR0FBRyxDQUFDLEtBQUssS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO1lBb0Z0QixJQW5GSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFvRjNCLENBbkZDO1FBb0ZELE1BbkZNLENBQUEsR0FBSSxDQUFDO0lBb0ZiLENBQUM7SUFDSDs7O09BR0c7SUFyRkQsSUFBSSxDQUFDLEtBQVE7UUF1RlgsSUF0RkksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBQyxFQUFFLEtBQU0sRUFBQyxLQUFNLEVBQUMsS0FBTSxFQUFDLElBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0lBdUY1RSxDQXRGQztDQUNIO0FBL0JBLG9DQStCQTtBQXdGQTtJQUNBLHFCQUFxQjtJQUNyQixZQUFZLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUNwQyx5Q0FBeUM7SUFDekMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDN0IscUJBQXFCO0lBQ3JCLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQzlCLENBQUMiLCJmaWxlIjoiX3JlZmNvdW50bGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAcmVjb3JkXG4gKiBAdGVtcGxhdGUgVFxuICovXG5leHBvcnQgZnVuY3Rpb24gUmVmQ291bnQoKSB7fVxuXG5cbmZ1bmN0aW9uIFJlZkNvdW50X3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge1R9ICovXG5SZWZDb3VudC5wcm90b3R5cGUudmFsdWU7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblJlZkNvdW50LnByb3RvdHlwZS5jb3VudDtcbn1cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlZkNvdW50PFQ+IHtcbiAgdmFsdWU6IFQ7XG4gIGNvdW50OiBudW1iZXI7XG59XG4vKipcbiAqIEBpZ25vcmVcbiAqIEByZWNvcmRcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBJUmVmQ291bnRMaXN0KCkge31cblxuXG5mdW5jdGlvbiBJUmVmQ291bnRMaXN0X3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge2Z1bmN0aW9uKCk6IHZvaWR9ICovXG5JUmVmQ291bnRMaXN0LnByb3RvdHlwZS5jbGVhcjtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuSVJlZkNvdW50TGlzdC5wcm90b3R5cGUuY291bnQ7XG4vKiogQHR5cGUge2Z1bmN0aW9uKG51bWJlcik6IFR9ICovXG5JUmVmQ291bnRMaXN0LnByb3RvdHlwZS5nZXQ7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFQpOiB2b2lkfSAqL1xuSVJlZkNvdW50TGlzdC5wcm90b3R5cGUucHVzaDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKTogdm9pZH0gKi9cbklSZWZDb3VudExpc3QucHJvdG90eXBlLmRvbmU7XG59XG5cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVJlZkNvdW50TGlzdDxUPiB7XG4gIGNsZWFyKCk6IHZvaWQ7XG4gIHJlYWRvbmx5IGNvdW50OiBudW1iZXI7XG4gIGdldChpbmRleDogbnVtYmVyKTogVDtcbiAgcHVzaCh2YWx1ZTogVCk6IHZvaWQ7XG4gIGRvbmUoKTogdm9pZDtcbn1cbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRcbiAqIEBpbXBsZW1lbnRzIHtJUmVmQ291bnRMaXN0fVxuICovXG5leHBvcnQgY2xhc3MgTWF4UmVmQ291bnRMaXN0PFQ+IGltcGxlbWVudHMgSVJlZkNvdW50TGlzdDxUPiB7XG5wcml2YXRlIF9saXN0OiBUW10gPSBbXTtcbi8qKlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuY2xlYXIoKSB7IHRoaXMuX2xpc3QgPSBbXTsgfVxuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmdldCBjb3VudCgpIHsgcmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoOyB9XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7VH1cbiAqL1xuZ2V0KGluZGV4OiBudW1iZXIpOiBUIHsgcmV0dXJuIHRoaXMuX2xpc3RbaW5kZXhdOyB9XG4vKipcbiAqIEBwYXJhbSB7VH0gdmFsdWVcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbnB1c2godmFsdWU6IFQpIHsgdGhpcy5fbGlzdC5wdXNoKHZhbHVlKTsgfVxuLyoqXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5kb25lKCkgeyB9XG59XG5cbmZ1bmN0aW9uIE1heFJlZkNvdW50TGlzdF90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXJyYXk8VD59ICovXG5NYXhSZWZDb3VudExpc3QucHJvdG90eXBlLl9saXN0O1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAaW1wbGVtZW50cyB7SVJlZkNvdW50TGlzdH1cbiAqL1xuZXhwb3J0IGNsYXNzIFJlZkNvdW50TGlzdDxUPiBpbXBsZW1lbnRzIElSZWZDb3VudExpc3Q8VD4ge1xucHJpdmF0ZSBfcmVhZGVyQ291bnQ6IG51bWJlcjtcbnByaXZhdGUgX2xpc3Q6IE1hcDxudW1iZXIsIFJlZkNvdW50PFQ+PjtcbnByaXZhdGUgX2NvdW50OiBudW1iZXIgPSAwO1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gcmVhZGVyQ291bnRcbiAqL1xuY29uc3RydWN0b3IocmVhZGVyQ291bnQ6IG51bWJlcikge1xuICAgIHRoaXMuX3JlYWRlckNvdW50ID0gcmVhZGVyQ291bnQ7XG4gICAgdGhpcy5fbGlzdCA9IG5ldyBNYXA8bnVtYmVyLCBSZWZDb3VudDxUPj4oKTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5jbGVhcigpIHsgdGhpcy5fbGlzdC5jbGVhcigpOyB9XG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZ2V0IGNvdW50KCkgeyByZXR1cm4gdGhpcy5fY291bnQ7IH1cbi8qKlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5nZXQgcmVhZGVyQ291bnQoKSB7IHJldHVybiB0aGlzLl9yZWFkZXJDb3VudDsgfVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbnNldCByZWFkZXJDb3VudCh2YWx1ZTogbnVtYmVyKSB7IHRoaXMuX3JlYWRlckNvdW50ID0gdmFsdWU7IH1cbi8qKlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xuZG9uZSgpIHsgdGhpcy5fcmVhZGVyQ291bnQtLTsgfVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge1R9XG4gKi9cbmdldChpbmRleDogbnVtYmVyKTogVCB7XG4gICAgaWYgKCF0aGlzLl9saXN0LmhhcyhpbmRleCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRWxlbWVudCBubyBsb25nZXIgYXZhaWxhYmxlIGluIHRoZSBidWZmZXIuJyk7XG4gICAgfVxuICAgIGNvbnN0IC8qKiBAdHlwZSB7IVJlZkNvdW50PFQ+fSAqLyByZXMgPSAvKiogQHR5cGUgeyFSZWZDb3VudDxUPn0gKi8oKCB0aGlzLl9saXN0LmdldChpbmRleCkpKTtcbiAgICBjb25zdCAvKiogQHR5cGUge1R9ICovIHZhbCA9IHJlcy52YWx1ZTtcbiAgICBpZiAoLS1yZXMuY291bnQgPT09IDApIHtcbiAgICAgIHRoaXMuX2xpc3QuZGVsZXRlKGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbiAgfVxuLyoqXG4gKiBAcGFyYW0ge1R9IHZhbHVlXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5wdXNoKHZhbHVlOiBUKSB7XG4gICAgdGhpcy5fbGlzdC5zZXQodGhpcy5fY291bnQrKywgeyB2YWx1ZTogdmFsdWUsIGNvdW50OiB0aGlzLl9yZWFkZXJDb3VudCB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBSZWZDb3VudExpc3RfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuUmVmQ291bnRMaXN0LnByb3RvdHlwZS5fcmVhZGVyQ291bnQ7XG4vKiogQHR5cGUgeyFNYXA8bnVtYmVyLCAhUmVmQ291bnQ8VD4+fSAqL1xuUmVmQ291bnRMaXN0LnByb3RvdHlwZS5fbGlzdDtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuUmVmQ291bnRMaXN0LnByb3RvdHlwZS5fY291bnQ7XG59XG5cbiJdfQ==