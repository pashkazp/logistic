goog.module('targets.esnext.cls.iterable.sequenceequal'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/sequenceequal.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var comparer_1 = goog.require('targets.esnext.cls.internal.comparer');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!Iterable<T>} source
 * @param {!Iterable<T>} other
 * @param {function(T, T): boolean=} comparer
 * @return {boolean}
 */
function sequenceEqual(source, other, comparer = comparer_1.comparer) {
    const /** @type {!Iterator<T>} */ it1 = source[Symbol.iterator](), /** @type {!Iterator<T>} */ it2 = other[Symbol.iterator]();
    let /** @type {!IteratorResult<T>} */ next1, /** @type {!IteratorResult<T>} */ next2;
    while (!(next1 = it1.next()).done) {
        if (!(!(next2 = it2.next()).done && comparer(next1.value, next2.value))) {
            return false;
        }
    }
    return it2.next().done;
}
exports.sequenceEqual = sequenceEqual;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zZXF1ZW5jZWVxdWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxtREFMb0M7QUFNcEMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7Ozs7OztHQU1HO0FBWEgsdUJBYUksTUFabUIsRUFhbkIsS0Faa0IsRUFhbEIsV0FaNEMsbUJBQWdCO0lBYTlELE1BQU0sMkJBWkQsQ0FBQSxHQUFJLEdBQUUsTUFBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFBLDJCQUFDLENBQUEsR0FBSSxHQUFFLEtBQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQWF0RSxJQUFJLGlDQVpELENBQUEsS0FBeUIsRUFBQSxpQ0FBQyxDQUFBLEtBQXlCLENBQUM7SUFhdkQsT0FaTyxDQUFDLENBQUMsS0FBSyxHQUFFLEdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFFO1FBYWxDLEVBQUUsQ0FBQyxDQVpDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFFLEdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBRyxRQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBQyxLQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUU7WUFheEUsTUFaTSxDQUFBLEtBQU0sQ0FBQztRQWFmLENBWkM7SUFhSCxDQVpDO0lBY0QsTUFaTSxDQUFBLEdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUM7QUFhekIsQ0FaQztBQWJELHNDQWFDIiwiZmlsZSI6InNlcXVlbmNlZXF1YWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBjb21wYXJlciBhcyBkZWZhdWx0Q29tcGFyZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFQ+fSBvdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbihULCBUKTogYm9vbGVhbj19IGNvbXBhcmVyXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2VxdWVuY2VFcXVhbDxUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIG90aGVyOiBJdGVyYWJsZTxUPixcbiAgICBjb21wYXJlcjogKGZpcnN0OiBULCBzZWNvbmQ6IFQpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiBib29sZWFuIHtcbiAgY29uc3QgLyoqIEB0eXBlIHshSXRlcmF0b3I8VD59ICovIGl0MSA9IHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCksIC8qKiBAdHlwZSB7IUl0ZXJhdG9yPFQ+fSAqLyBpdDIgPSBvdGhlcltTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIGxldCAvKiogQHR5cGUgeyFJdGVyYXRvclJlc3VsdDxUPn0gKi8gbmV4dDE6IEl0ZXJhdG9yUmVzdWx0PFQ+LCAvKiogQHR5cGUgeyFJdGVyYXRvclJlc3VsdDxUPn0gKi8gbmV4dDI6IEl0ZXJhdG9yUmVzdWx0PFQ+O1xuICB3aGlsZSAoIShuZXh0MSA9IGl0MS5uZXh0KCkpLmRvbmUpIHtcbiAgICBpZiAoISghKG5leHQyID0gaXQyLm5leHQoKSkuZG9uZSAmJiBjb21wYXJlcihuZXh0MS52YWx1ZSwgbmV4dDIudmFsdWUpKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBpdDIubmV4dCgpLmRvbmU7XG59XG4iXX0=