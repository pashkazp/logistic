goog.module('targets.esnext.cls.iterable.union'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/union.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var arrayindexof_1 = goog.require('targets.esnext.cls.internal.arrayindexof');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.esnext.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource
 */
class UnionIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} left
     * @param {!Iterable<TSource>} right
     * @param {function(TSource, TSource): boolean} comparer
     */
    constructor(left, right, comparer) {
        super();
        this._left = left;
        this._right = right;
        this._comparer = comparer;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Array<?>} */ map = [];
        for (let /** @type {TSource} */ lItem of this._left) {
            if (arrayindexof_1.arrayIndexOf(map, lItem, this._comparer) === -1) {
                map.push(lItem);
                yield lItem;
            }
        }
        for (let /** @type {TSource} */ rItem of this._right) {
            if (arrayindexof_1.arrayIndexOf(map, rItem, this._comparer) === -1) {
                map.push(rItem);
                yield rItem;
            }
        }
    }
}
function UnionIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    UnionIterable.prototype._left;
    /** @type {!Iterable<TSource>} */
    UnionIterable.prototype._right;
    /** @type {function(TSource, TSource): boolean} */
    UnionIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} left
 * @param {!Iterable<TSource>} right
 * @param {function(TSource, TSource): boolean=} comparer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function union(left, right, comparer = comparer_1.comparer) {
    return new UnionIterable(left, right, comparer);
}
exports.union = union;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS91bmlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQU5yRDtBQU94QywyREFOcUI7QUFPckIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBUGxEO0FBUXhELG1EQVBvQztBQVFwQyxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7R0FFRztBQVRILG1CQUE0QixTQUFRLG9CQUFtQjtJQWN2RDs7OztPQUlHO0lBYkQsWUFBWSxJQUF1QixFQUFDLEtBQXlCLEVBQUMsUUFBOEM7UUFlMUcsS0FkSyxFQUFFLENBQUM7UUFlUixJQWRJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztRQWVsQixJQWRJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWVwQixJQWRJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQztJQWU1QixDQUFDO0lBQ0g7O09BRUc7SUFmRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWlCaEIsSUFBSSx3QkFoQkQsQ0FBQSxHQUFJLEdBQUUsRUFBRyxDQUFDO1FBaUJiLEdBQUcsQ0FBQyxDQWhCQyxJQUFBLHNCQUFHLENBQUEsS0FBTSxJQUFHLElBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFFO1lBaUI3QixFQUFFLENBQUMsQ0FoQkMsMkJBQVksQ0FBQyxHQUFHLEVBQUMsS0FBTSxFQUFDLElBQUssQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBaUJwRCxHQWhCRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFpQmhCLE1BaEJLLEtBQU0sQ0FBQztZQWlCZCxDQWhCQztRQWlCSCxDQWhCQztRQWtCRCxHQUFHLENBQUMsQ0FoQkMsSUFBQSxzQkFBRyxDQUFBLEtBQU0sSUFBRyxJQUFLLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBRTtZQWlCOUIsRUFBRSxDQUFDLENBaEJDLDJCQUFZLENBQUMsR0FBRyxFQUFDLEtBQU0sRUFBQyxJQUFLLENBQUMsU0FBUyxDQUFDLEtBQUksQ0FBRSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQWlCcEQsR0FoQkcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBaUJoQixNQWhCSyxLQUFNLENBQUM7WUFpQmQsQ0FoQkM7UUFpQkgsQ0FoQkM7SUFpQkgsQ0FoQkM7Q0FDSDtBQWtCQTtJQUNBLGlDQUFpQztJQUNqQyxhQUFhLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUM5QixpQ0FBaUM7SUFDakMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDL0Isa0RBQWtEO0lBQ2xELGFBQWEsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUEvQkgsZUFpQ0ksSUFoQ3VCLEVBaUN2QixLQWhDd0IsRUFpQ3hCLFdBaEMrQyxtQkFBZ0I7SUFpQ2pFLE1BaENNLENBQUEsSUFBSSxhQUFjLENBQVUsSUFBSSxFQUFDLEtBQU0sRUFBQyxRQUFTLENBQUMsQ0FBQztBQWlDM0QsQ0FoQ0M7QUFMRCxzQkFLQyIsImZpbGUiOiJ1bmlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mIH0gZnJvbSAnLi4vaW50ZXJuYWwvYXJyYXlpbmRleG9mJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmFycmF5aW5kZXhvZlwiKTtcbmltcG9ydCB7IGNvbXBhcmVyIGFzIGRlZmF1bHRDb21wYXJlciB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBVbmlvbkl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX2xlZnQ6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfcmlnaHQ6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gbGVmdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHJpZ2h0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiBib29sZWFufSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihsZWZ0OiBJdGVyYWJsZTxUU291cmNlPiwgcmlnaHQ6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3JpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gbWFwID0gW107XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBsSXRlbSBvZiB0aGlzLl9sZWZ0KSB7XG4gICAgICBpZiAoYXJyYXlJbmRleE9mKG1hcCwgbEl0ZW0sIHRoaXMuX2NvbXBhcmVyKSA9PT0gLTEpIHtcbiAgICAgICAgbWFwLnB1c2gobEl0ZW0pO1xuICAgICAgICB5aWVsZCBsSXRlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIHJJdGVtIG9mIHRoaXMuX3JpZ2h0KSB7XG4gICAgICBpZiAoYXJyYXlJbmRleE9mKG1hcCwgckl0ZW0sIHRoaXMuX2NvbXBhcmVyKSA9PT0gLTEpIHtcbiAgICAgICAgbWFwLnB1c2gockl0ZW0pO1xuICAgICAgICB5aWVsZCBySXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVW5pb25JdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5Vbmlvbkl0ZXJhYmxlLnByb3RvdHlwZS5fbGVmdDtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuVW5pb25JdGVyYWJsZS5wcm90b3R5cGUuX3JpZ2h0O1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogYm9vbGVhbn0gKi9cblVuaW9uSXRlcmFibGUucHJvdG90eXBlLl9jb21wYXJlcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGxlZnRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSByaWdodFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogYm9vbGVhbj19IGNvbXBhcmVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bmlvbjxUU291cmNlPihcbiAgICBsZWZ0OiBJdGVyYWJsZTxUU291cmNlPixcbiAgICByaWdodDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuID0gZGVmYXVsdENvbXBhcmVyKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBVbmlvbkl0ZXJhYmxlPFRTb3VyY2U+KGxlZnQsIHJpZ2h0LCBjb21wYXJlcik7XG59XG4iXX0=