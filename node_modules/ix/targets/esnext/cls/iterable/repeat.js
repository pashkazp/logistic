goog.module('targets.esnext.cls.iterable.repeat'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/repeat.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var of_1 = goog.require('targets.esnext.cls.iterable.of');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.of");
var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class RepeatIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        if (this._count === -1) {
            while (1) {
                for (let /** @type {TSource} */ item of this._source) {
                    yield item;
                }
            }
        }
        else {
            for (let /** @type {number} */ i = 0; i < this._count; i++) {
                for (let /** @type {TSource} */ item of this._source) {
                    yield item;
                }
            }
        }
    }
}
function RepeatIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    RepeatIterable.prototype._source;
    /** @type {number} */
    RepeatIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.IterableX<TSource>}
 */
function repeat(source, count = -1) {
    return new RepeatIterable(source, count);
}
exports.repeat = repeat;
/**
 * @template TSource
 * @param {TSource} value
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.IterableX<TSource>}
 */
function repeatStatic(value, count = -1) {
    return new RepeatIterable(of_1.of(value), count);
}
exports.repeatStatic = repeatStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9yZXBlYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDZCQUxXO0FBTVgsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHlDQUF5QyxDQUFDLENBTnRFO0FBTzFCLDBDQU5rQjtBQU9sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVJILG9CQUE2QixTQUFRLG9CQUFtQjtJQVl4RDs7O09BR0c7SUFYRCxZQUFZLE1BQXlCLEVBQUMsS0FBYztRQWFsRCxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO0lBYXRCLENBQUM7SUFDSDs7T0FFRztJQWJELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBZWhCLEVBQUUsQ0FBQyxDQWRDLElBQUksQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDLENBQUMsQ0FBQSxDQUFFO1lBZXZCLE9BZE8sQ0FBQyxFQUFDLENBQUU7Z0JBZVQsR0FBRyxDQUFDLENBZEMsSUFBQSxzQkFBRyxDQUFBLElBQUssSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtvQkFBQSxNQUFNLElBQUssQ0FBQztnQkFBQSxDQUFFO1lBZWhELENBZEM7UUFlSCxDQWRDO1FBQUEsSUFBSyxDQUFBLENBQUU7WUFlTixHQUFHLENBQUMsQ0FkQyxJQUFBLHFCQUFHLENBQUEsQ0FBRSxHQUFFLENBQUUsRUFBQyxDQUFFLEdBQUUsSUFBSyxDQUFDLE1BQU0sRUFBQyxDQUFFLEVBQUUsRUFBQyxDQUFFO2dCQWVyQyxHQUFHLENBQUMsQ0FkQyxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO29CQUFBLE1BQU0sSUFBSyxDQUFDO2dCQUFBLENBQUU7WUFlaEQsQ0FkQztRQWVILENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxpQ0FBaUM7SUFDakMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDakMscUJBQXFCO0lBQ3JCLGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7R0FLRztBQTFCSCxnQkFBZ0MsTUFBeUIsRUFBQyxRQUFnQixDQUFFLENBQUM7SUE0QjNFLE1BM0JNLENBQUEsSUFBSSxjQUFlLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBNEJwRCxDQUFDO0FBN0JELHdCQTZCQztBQUNEOzs7OztHQUtHO0FBL0JILHNCQUFzQyxLQUFjLEVBQUMsUUFBZ0IsQ0FBRSxDQUFDO0lBaUN0RSxNQWhDTSxDQUFBLElBQUksY0FBZSxDQUFVLE9BQUUsQ0FBQyxLQUFLLENBQUMsRUFBQyxLQUFNLENBQUMsQ0FBQztBQWlDdkQsQ0FoQ0M7QUFGRCxvQ0FFQyIsImZpbGUiOiJyZXBlYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBvZiB9IGZyb20gJy4vb2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUub2ZcIik7XG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgUmVwZWF0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGlmICh0aGlzLl9jb3VudCA9PT0gLTEpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7IGkgPCB0aGlzLl9jb3VudDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBSZXBlYXRJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5SZXBlYXRJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuUmVwZWF0SXRlcmFibGUucHJvdG90eXBlLl9jb3VudDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXI9fSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0PFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIgPSAtMSk6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgUmVwZWF0SXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBjb3VudCk7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0ge1RTb3VyY2V9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IGNvdW50XG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMi5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRTdGF0aWM8VFNvdXJjZT4odmFsdWU6IFRTb3VyY2UsIGNvdW50OiBudW1iZXIgPSAtMSk6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgUmVwZWF0SXRlcmFibGU8VFNvdXJjZT4ob2YodmFsdWUpLCBjb3VudCk7XG59XG4iXX0=