goog.module('targets.esnext.cls.iterable.skiplast'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/skiplast.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class SkipLastIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Array<?>} */ q = [];
        for (let /** @type {TSource} */ item of this._source) {
            q.push(item);
            if (q.length > this._count) {
                yield ((q.shift()));
            }
        }
    }
}
function SkipLastIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    SkipLastIterable.prototype._source;
    /** @type {number} */
    SkipLastIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function skipLast(source, count) {
    return new SkipLastIterable(source, count);
}
exports.skipLast = skipLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9za2lwbGFzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEgsc0JBQStCLFNBQVEsb0JBQW1CO0lBVzFEOzs7T0FHRztJQVZELFlBQVksTUFBeUIsRUFBQyxLQUFjO1FBWWxELEtBWEssRUFBRSxDQUFDO1FBWVIsSUFYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFZdEIsSUFYSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7SUFZdEIsQ0FBQztJQUNIOztPQUVHO0lBWkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFjaEIsSUFBSSx3QkFiRCxDQUFBLENBQUUsR0FBRSxFQUFHLENBQUM7UUFjWCxHQUFHLENBQUMsQ0FiQyxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBYzlCLENBYkMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFjYixFQUFFLENBQUMsQ0FiQyxDQUFDLENBQUMsTUFBTSxHQUFFLElBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFFO2dCQWMzQixNQUE0QixDQUFDLENBYnhCLENBQUUsQ0FBQyxLQUFLLEVBQUEsQ0FBQSxDQUFHLENBQUM7WUFjbkIsQ0FiQztRQWNILENBYkM7SUFjSCxDQWJDO0NBQ0g7QUFlQTtJQUNBLGlDQUFpQztJQUNqQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ25DLHFCQUFxQjtJQUNyQixnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxrQkFBa0MsTUFBeUIsRUFBQyxLQUFjO0lBMkJ4RSxNQTFCTSxDQUFBLElBQUksZ0JBQWlCLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBMkJ0RCxDQTFCQztBQUZELDRCQUVDIiwiZmlsZSI6InNraXBsYXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFNraXBMYXN0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gcSA9IFtdO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIHEucHVzaChpdGVtKTtcbiAgICAgIGlmIChxLmxlbmd0aCA+IHRoaXMuX2NvdW50KSB7XG4gICAgICAgIHlpZWxkIC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8oKCBxLnNoaWZ0KCkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2tpcExhc3RJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5Ta2lwTGFzdEl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5Ta2lwTGFzdEl0ZXJhYmxlLnByb3RvdHlwZS5fY291bnQ7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcExhc3Q8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgU2tpcExhc3RJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGNvdW50KTtcbn1cbiJdfQ==