goog.module('targets.esnext.cls.iterable.groupjoin'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/groupjoin.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var _grouping_1 = goog.require('targets.esnext.cls.iterable._grouping');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._grouping");
var empty_1 = goog.require('targets.esnext.cls.iterable.empty');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.empty");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @template TOuter, TInner, TKey, TResult
 */
class GroupJoinIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TOuter>} outer
     * @param {!Iterable<TInner>} inner
     * @param {function(TOuter): TKey} outerSelector
     * @param {function(TInner): TKey} innerSelector
     * @param {function(TOuter, !Iterable<TInner>): TResult} resultSelector
     */
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    *[Symbol.iterator]() {
        const /** @type {!Map<TKey, !Array<?>>} */ map = _grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity);
        for (let /** @type {TOuter} */ outerElement of this._outer) {
            const /** @type {TKey} */ outerKey = this._outerSelector(outerElement);
            const /** @type {!Iterable<TInner>} */ innerElements = map.has(outerKey) ? (map.get(outerKey)) : empty_1.empty();
            yield this._resultSelector(outerElement, innerElements);
        }
    }
}
function GroupJoinIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TOuter>} */
    GroupJoinIterable.prototype._outer;
    /** @type {!Iterable<TInner>} */
    GroupJoinIterable.prototype._inner;
    /** @type {function(TOuter): TKey} */
    GroupJoinIterable.prototype._outerSelector;
    /** @type {function(TInner): TKey} */
    GroupJoinIterable.prototype._innerSelector;
    /** @type {function(TOuter, !Iterable<TInner>): TResult} */
    GroupJoinIterable.prototype._resultSelector;
}
/**
 * @template TOuter, TInner, TKey, TResult
 * @param {!Iterable<TOuter>} outer
 * @param {!Iterable<TInner>} inner
 * @param {function(TOuter): TKey} outerSelector
 * @param {function(TInner): TKey} innerSelector
 * @param {function(TOuter, !Iterable<TInner>): TResult} resultSelector
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.groupJoin = groupJoin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9ncm91cGpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsMkNBTnVCO0FBT3ZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnREFBZ0QsQ0FBQyxDQVAxRDtBQVE3QyxtQ0FQYztBQVFkLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw0Q0FBNEMsQ0FBQyxDQVJuRTtBQVNoQyxtREFSaUI7QUFTakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFWSCx1QkFBc0QsU0FBUSxvQkFBbUI7SUFpQmpGOzs7Ozs7T0FNRztJQWhCRCxZQWtCSSxLQWpCdUIsRUFrQnZCLEtBakJ1QixFQWtCdkIsYUFqQnNDLEVBa0J0QyxhQWpCc0MsRUFrQnRDLGNBakJtRTtRQWtCckUsS0FqQkssRUFBRSxDQUFDO1FBa0JSLElBakJJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWtCcEIsSUFqQkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBa0JwQixJQWpCSSxDQUFDLGNBQWMsR0FBRSxhQUFjLENBQUM7UUFrQnBDLElBakJJLENBQUMsY0FBYyxHQUFFLGFBQWMsQ0FBQztRQWtCcEMsSUFqQkksQ0FBQyxlQUFlLEdBQUUsY0FBZSxDQUFDO0lBa0J4QyxDQUFDO0lBQ0g7O09BRUc7SUFsQkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFvQmhCLE1BQU0sb0NBbkJELENBQUEsR0FBSSxHQUFFLDBCQUFlLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBQyxJQUFLLENBQUMsY0FBYyxFQUFDLG1CQUFTLENBQUMsQ0FBQztRQW9CdkUsR0FBRyxDQUFDLENBbkJDLElBQUEscUJBQUcsQ0FBQSxZQUFhLElBQUcsSUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUU7WUFvQnJDLE1BQU0sbUJBbkJELENBQUEsUUFBUyxHQUFFLElBQUssQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7WUFvQm5ELE1BQU0sZ0NBbkJELENBQUEsYUFBYyxHQUFFLEdBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUEsQ0FBcUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUEsQ0FBQyxHQUFFLGFBQU0sRUFBVSxDQUFDO1lBb0JoRyxNQW5CSyxJQUFLLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBQyxhQUFjLENBQUMsQ0FBQztRQW9CMUQsQ0FuQkM7SUFvQkgsQ0FuQkM7Q0FDSDtBQXFCQTtJQUNBLGdDQUFnQztJQUNoQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ25DLGdDQUFnQztJQUNoQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ25DLHFDQUFxQztJQUNyQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0lBQzNDLHFDQUFxQztJQUNyQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0lBQzNDLDJEQUEyRDtJQUMzRCxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDO0FBQzVDLENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQXhDSCxtQkEwQ0ksS0F6Q3VCLEVBMEN2QixLQXpDdUIsRUEwQ3ZCLGFBekNzQyxFQTBDdEMsYUF6Q3NDLEVBMEN0QyxjQXpDbUU7SUEwQ3JFLE1BekNNLENBQUEsSUFBSSxpQkFBa0IsQ0EwQzFCLEtBekNLLEVBMENMLEtBekNLLEVBMENMLGFBekNhLEVBMENiLGFBekNhLEVBMENiLGNBekNjLENBQUMsQ0FBQztBQTBDcEIsQ0F6Q0M7QUFaRCw4QkFZQyIsImZpbGUiOiJncm91cGpvaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGNyZWF0ZUdyb3VwaW5nIH0gZnJvbSAnLi9fZ3JvdXBpbmcnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUuX2dyb3VwaW5nXCIpO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL2VtcHR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLmVtcHR5XCIpO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV80ID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0XG4gKi9cbmNsYXNzIEdyb3VwSm9pbkl0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PiBleHRlbmRzIEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9vdXRlcjogSXRlcmFibGU8VE91dGVyPjtcbnByaXZhdGUgX2lubmVyOiBJdGVyYWJsZTxUSW5uZXI+O1xucHJpdmF0ZSBfb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXk7XG5wcml2YXRlIF9pbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleTtcbnByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj4pID0+IFRSZXN1bHQ7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRPdXRlcj59IG91dGVyXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUSW5uZXI+fSBpbm5lclxuICogQHBhcmFtIHtmdW5jdGlvbihUT3V0ZXIpOiBUS2V5fSBvdXRlclNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRJbm5lcik6IFRLZXl9IGlubmVyU2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVE91dGVyLCAhSXRlcmFibGU8VElubmVyPik6IFRSZXN1bHR9IHJlc3VsdFNlbGVjdG9yXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgb3V0ZXI6IEl0ZXJhYmxlPFRPdXRlcj4sXG4gICAgICBpbm5lcjogSXRlcmFibGU8VElubmVyPixcbiAgICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5LFxuICAgICAgaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXksXG4gICAgICByZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBJdGVyYWJsZTxUSW5uZXI+KSA9PiBUUmVzdWx0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9vdXRlciA9IG91dGVyO1xuICAgIHRoaXMuX2lubmVyID0gaW5uZXI7XG4gICAgdGhpcy5fb3V0ZXJTZWxlY3RvciA9IG91dGVyU2VsZWN0b3I7XG4gICAgdGhpcy5faW5uZXJTZWxlY3RvciA9IGlubmVyU2VsZWN0b3I7XG4gICAgdGhpcy5fcmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IU1hcDxUS2V5LCAhQXJyYXk8Pz4+fSAqLyBtYXAgPSBjcmVhdGVHcm91cGluZyh0aGlzLl9pbm5lciwgdGhpcy5faW5uZXJTZWxlY3RvciwgaWRlbnRpdHkpO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VE91dGVyfSAqLyBvdXRlckVsZW1lbnQgb2YgdGhpcy5fb3V0ZXIpIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7VEtleX0gKi8gb3V0ZXJLZXkgPSB0aGlzLl9vdXRlclNlbGVjdG9yKG91dGVyRWxlbWVudCk7XG4gICAgICBjb25zdCAvKiogQHR5cGUgeyFJdGVyYWJsZTxUSW5uZXI+fSAqLyBpbm5lckVsZW1lbnRzID0gbWFwLmhhcyhvdXRlcktleSkgPyAvKiogQHR5cGUgeyFJdGVyYWJsZTxUSW5uZXI+fSAqLygoIDxJdGVyYWJsZTxUSW5uZXI+Pm1hcC5nZXQob3V0ZXJLZXkpKSkgOiBlbXB0eTxUSW5uZXI+KCk7XG4gICAgICB5aWVsZCB0aGlzLl9yZXN1bHRTZWxlY3RvcihvdXRlckVsZW1lbnQsIGlubmVyRWxlbWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBHcm91cEpvaW5JdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VE91dGVyPn0gKi9cbkdyb3VwSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5fb3V0ZXI7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUSW5uZXI+fSAqL1xuR3JvdXBKb2luSXRlcmFibGUucHJvdG90eXBlLl9pbm5lcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVE91dGVyKTogVEtleX0gKi9cbkdyb3VwSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5fb3V0ZXJTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVElubmVyKTogVEtleX0gKi9cbkdyb3VwSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5faW5uZXJTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVE91dGVyLCAhSXRlcmFibGU8VElubmVyPik6IFRSZXN1bHR9ICovXG5Hcm91cEpvaW5JdGVyYWJsZS5wcm90b3R5cGUuX3Jlc3VsdFNlbGVjdG9yO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VE91dGVyPn0gb3V0ZXJcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRJbm5lcj59IGlubmVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRPdXRlcik6IFRLZXl9IG91dGVyU2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVElubmVyKTogVEtleX0gaW5uZXJTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUT3V0ZXIsICFJdGVyYWJsZTxUSW5uZXI+KTogVFJlc3VsdH0gcmVzdWx0U2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwSm9pbjxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXI6IEl0ZXJhYmxlPFRPdXRlcj4sXG4gICAgaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj4sXG4gICAgb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXksXG4gICAgaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXksXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogSXRlcmFibGU8VElubmVyPikgPT4gVFJlc3VsdCk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgR3JvdXBKb2luSXRlcmFibGU8VE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHQ+KFxuICAgIG91dGVyLFxuICAgIGlubmVyLFxuICAgIG91dGVyU2VsZWN0b3IsXG4gICAgaW5uZXJTZWxlY3RvcixcbiAgICByZXN1bHRTZWxlY3Rvcik7XG59XG4iXX0=