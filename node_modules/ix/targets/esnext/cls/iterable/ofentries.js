goog.module('targets.esnext.cls.iterable.ofentries'); exports = {}; var module = {id: 'targets/esnext/cls/iterable/ofentries.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.esnext.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var map_1 = goog.require('targets.esnext.cls.iterable.map');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.map");
/**
 * @template TFirst, TSecond
 * @param {TFirst} x
 * @param {TSecond} y
 * @return {!Array<?>}
 */
function makeTuple(x, y) {
    return [x, y];
}
/**
 * @template TSource
 */
class OfEntriesIterable extends iterable_1.IterableX {
    /**
     * @param {!Object<string,TSource>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!Iterator<!Array<?>>}
     */
    [Symbol.iterator]() {
        return map_1.map(Object.keys(this._source), key => makeTuple(key, this._source[key]))[Symbol.iterator]();
    }
}
function OfEntriesIterable_tsickle_Closure_declarations() {
    /** @type {!Object<string,TSource>} */
    OfEntriesIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!Object<string,TSource>} source
 * @return {!tsickle_forward_declare_1.IterableX<!Array<?>>}
 */
function ofEntries(source) {
    return new OfEntriesIterable(source);
}
exports.ofEntries = ofEntries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9vZmVudHJpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsK0JBTlk7QUFPWixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUNsRzs7Ozs7R0FLRztBQVhILG1CQUFvQyxDQUFTLEVBQUMsQ0FBVztJQWF2RCxNQVpNLENBQUEsQ0FBRSxDQUFDLEVBQUMsQ0FBRSxDQUFDLENBQUM7QUFhaEIsQ0FBQztBQUNEOztHQUVHO0FBYkgsdUJBQWdDLFNBQVEsb0JBQTZCO0lBZ0JyRTs7T0FFRztJQWZELFlBQVksTUFBa0M7UUFpQjVDLEtBaEJLLEVBQUUsQ0FBQztRQWlCUixJQWhCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7SUFpQnhCLENBQUM7SUFDSDs7T0FFRztJQWpCRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFtQmYsTUFsQk0sQ0FBQSxTQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsR0FBSSxJQUFHLFNBQVUsQ0FBQyxHQUFHLEVBQUMsSUFBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFtQnJHLENBbEJDO0NBQ0g7QUFvQkE7SUFDQSxzQ0FBc0M7SUFDdEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUNwQyxDQUFDO0FBRUQ7Ozs7R0FJRztBQTNCSCxtQkFBbUMsTUFBa0M7SUE2Qm5FLE1BNUJNLENBQUEsSUFBSSxpQkFBa0IsQ0FBVSxNQUFNLENBQUMsQ0FBQztBQTZCaEQsQ0E1QkM7QUFGRCw4QkFFQyIsImZpbGUiOiJvZmVudHJpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLm1hcFwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRGaXJzdCwgVFNlY29uZFxuICogQHBhcmFtIHtURmlyc3R9IHhcbiAqIEBwYXJhbSB7VFNlY29uZH0geVxuICogQHJldHVybiB7IUFycmF5PD8+fVxuICovXG5mdW5jdGlvbiBtYWtlVHVwbGU8VEZpcnN0LCBUU2Vjb25kPih4OiBURmlyc3QsIHk6IFRTZWNvbmQpOiBbVEZpcnN0LCBUU2Vjb25kXSB7XG4gIHJldHVybiBbeCwgeV07XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIE9mRW50cmllc0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFtzdHJpbmcsIFRTb3VyY2VdPiB7XG5wcml2YXRlIF9zb3VyY2U6IHsgW2tleTogc3RyaW5nXTogVFNvdXJjZSB9O1xuLyoqXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLFRTb3VyY2U+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiB7IFtrZXk6IHN0cmluZ106IFRTb3VyY2UgfSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYXRvcjwhQXJyYXk8Pz4+fVxuICovXG5bU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gbWFwKE9iamVjdC5rZXlzKHRoaXMuX3NvdXJjZSksIGtleSA9PiBtYWtlVHVwbGUoa2V5LCB0aGlzLl9zb3VyY2Vba2V5XSkpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBPZkVudHJpZXNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZyxUU291cmNlPn0gKi9cbk9mRW50cmllc0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLFRTb3VyY2U+fSBzb3VyY2VcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDwhQXJyYXk8Pz4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb2ZFbnRyaWVzPFRTb3VyY2U+KHNvdXJjZTogeyBba2V5OiBzdHJpbmddOiBUU291cmNlIH0pOiBJdGVyYWJsZVg8W3N0cmluZywgVFNvdXJjZV0+IHtcbiAgcmV0dXJuIG5ldyBPZkVudHJpZXNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19