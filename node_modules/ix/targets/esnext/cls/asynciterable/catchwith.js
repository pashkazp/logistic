goog.module('targets.esnext.cls.asynciterable.catchwith'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/catchwith.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var returniterator_1 = goog.require('targets.esnext.cls.internal.returniterator');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.returniterator");
/**
 * @template TSource
 */
class CatchWithAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(?): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} handler
     */
    constructor(source, handler) {
        super();
        this._source = source;
        this._handler = handler;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {!AsyncIterable<TSource>} */ err, /** @type {boolean} */ hasError = false, /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
        while (1) {
            let /** @type {!IteratorResult<TSource>} */ c = ({});
            try {
                c = await it.next();
                if (c.done) {
                    await returniterator_1.returnAsyncIterator(it);
                    break;
                }
            }
            catch (e) {
                err = await this._handler(e);
                hasError = true;
                await returniterator_1.returnAsyncIterator(it);
                break;
            }
            yield c.value;
        }
        if (hasError) {
            for await (let /** @type {TSource} */ item of ((err))) {
                yield item;
            }
        }
    }
}
function CatchWithAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    CatchWithAsyncIterable.prototype._source;
    /** @type {function(?): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} */
    CatchWithAsyncIterable.prototype._handler;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(?): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} handler
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function catchWith(source, handler) {
    return new CatchWithAsyncIterable(source, handler);
}
exports.catchWith = catchWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2NhdGNod2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwrREFONEI7QUFPNUIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDN0c7O0dBRUc7QUFSSCw0QkFBcUMsU0FBUSw4QkFBd0I7SUFZckU7OztPQUdHO0lBWEQsWUFhSSxNQVo4QixFQWE5QixPQVppRjtRQWFuRixLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxRQUFRLEdBQUUsT0FBUSxDQUFDO0lBYTFCLENBQUM7SUFDSDs7T0FFRztJQWJELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFlM0IsSUFBSSxzQ0FkRCxDQUFBLEdBQXdDLEVBQUEsc0JBQUMsQ0FBQSxRQUFTLEdBQUUsS0FBTSxFQUFBLHNDQUFDLENBQUEsRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFlekcsT0FkTyxDQUFDLEVBQUMsQ0FBRTtZQWVULElBQUksdUNBZEQsQ0FBQSxDQUFFLEdBQUEsQ0FBNEIsRUFBQSxDQUFFLENBQUM7WUFnQnBDLElBZEcsQ0FBRTtnQkFlSCxDQWRDLEdBQUUsTUFBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBZXBCLEVBQUUsQ0FBQyxDQWRDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFO29CQWVYLE1BZEssb0NBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBZTlCLEtBQUssQ0FkQztnQkFlUixDQWRDO1lBZUgsQ0FkQztZQUFBLEtBQUEsQ0FBQSxDQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBZVgsR0FkRyxHQUFFLE1BQU0sSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFlN0IsUUFkUSxHQUFFLElBQUssQ0FBQztnQkFlaEIsTUFkSyxvQ0FBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFlOUIsS0FBSyxDQWRDO1lBZVIsQ0FkQztZQWdCRCxNQWRLLENBQUUsQ0FBQyxLQUFLLENBQUM7UUFlaEIsQ0FkQztRQWdCRCxFQUFFLENBQUMsQ0FkQyxRQUFRLENBQUMsQ0FBQSxDQUFFO1lBZWIsR0FkRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUEsQ0FBQSxDQUFHLEdBQUEsQ0FBQSxDQUFLLENBQUMsQ0FBQSxDQUFFO2dCQWU1QixNQWRLLElBQUssQ0FBQztZQWViLENBZEM7UUFlSCxDQWRDO0lBZUgsQ0FkQztDQUNIO0FBZ0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDekMsdUZBQXVGO0lBQ3ZGLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDMUMsQ0FBQztBQUVEOzs7OztHQUtHO0FBMUJILG1CQTRCSSxNQTNCOEIsRUE0QjlCLE9BM0JpRjtJQTRCbkYsTUEzQk0sQ0FBQSxJQUFJLHNCQUF1QixDQUFVLE1BQU0sRUFBQyxPQUFRLENBQUMsQ0FBQztBQTRCOUQsQ0EzQkM7QUFKRCw4QkFJQyIsImZpbGUiOiJjYXRjaHdpdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IHJldHVybkFzeW5jSXRlcmF0b3IgfSBmcm9tICcuLi9pbnRlcm5hbC9yZXR1cm5pdGVyYXRvcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5yZXR1cm5pdGVyYXRvclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgQ2F0Y2hXaXRoQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2hhbmRsZXI6IChlcnJvcjogYW55KSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOiAoIUFzeW5jSXRlcmFibGU8VFNvdXJjZT58IVByb21pc2U8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KX0gaGFuZGxlclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGhhbmRsZXI6IChlcnJvcjogYW55KSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2hhbmRsZXIgPSBoYW5kbGVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLyBlcnI6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCB1bmRlZmluZWQsIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzRXJyb3IgPSBmYWxzZSwgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGxldCAvKiogQHR5cGUgeyFJdGVyYXRvclJlc3VsdDxUU291cmNlPn0gKi8gYyA9IC8qKiBAdHlwZSB7IUl0ZXJhdG9yUmVzdWx0PFRTb3VyY2U+fSAqLygoIDxJdGVyYXRvclJlc3VsdDxUU291cmNlPj57fSkpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBjID0gYXdhaXQgaXQubmV4dCgpO1xuICAgICAgICBpZiAoYy5kb25lKSB7XG4gICAgICAgICAgYXdhaXQgcmV0dXJuQXN5bmNJdGVyYXRvcihpdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKCAvKiogQHR5cGUgez99ICovZSkge1xuICAgICAgICBlcnIgPSBhd2FpdCB0aGlzLl9oYW5kbGVyKGUpO1xuICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgIGF3YWl0IHJldHVybkFzeW5jSXRlcmF0b3IoaXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgeWllbGQgYy52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLygoIGVycikpKSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIENhdGNoV2l0aEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5DYXRjaFdpdGhBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbig/KTogKCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fCFQcm9taXNlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pil9ICovXG5DYXRjaFdpdGhBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5faGFuZGxlcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOiAoIUFzeW5jSXRlcmFibGU8VFNvdXJjZT58IVByb21pc2U8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KX0gaGFuZGxlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXRjaFdpdGg8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGhhbmRsZXI6IChlcnJvcjogYW55KSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBDYXRjaFdpdGhBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgaGFuZGxlcik7XG59XG4iXX0=