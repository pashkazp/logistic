goog.module('targets.esnext.cls.asynciterable.tap'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/tap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
/**
 * @template TSource
 */
class TapAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {(!NextAsyncObserver<TSource>|!ErrorAsyncObserver<TSource>|!CompletionAsyncObserver<TSource>)} observer
     */
    constructor(source, observer) {
        super();
        this._source = source;
        this._observer = observer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
        while (1) {
            let /** @type {?} */ next;
            try {
                next = await it.next();
            }
            catch (e) {
                if (this._observer.error) {
                    await this._observer.error(e);
                }
                throw e;
            }
            if (next.done) {
                if (this._observer.complete) {
                    await this._observer.complete();
                }
                break;
            }
            if (this._observer.next) {
                await this._observer.next(next.value);
            }
            yield next.value;
        }
    }
}
function TapAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TapAsyncIterable.prototype._source;
    /** @type {(!NextAsyncObserver<TSource>|!ErrorAsyncObserver<TSource>|!CompletionAsyncObserver<TSource>)} */
    TapAsyncIterable.prototype._observer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {(!NextAsyncObserver<TSource>|!ErrorAsyncObserver<TSource>|!CompletionAsyncObserver<TSource>)} observer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function tap(source, observer) {
    return new TapAsyncIterable(source, observer);
}
exports.tap = tap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3RhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQVFsRCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5RixJQUFJLENBQUMsT0FBTyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQyxzQ0FBc0M7QUFDNUY7O0dBRUc7QUFUSCxzQkFBK0IsU0FBUSw4QkFBd0I7SUFhL0Q7OztPQUdHO0lBWkQsWUFBWSxNQUE4QixFQUFDLFFBQXdDO1FBY2pGLEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsSUFiSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFjNUIsQ0FBQztJQUNIOztPQUVHO0lBZEQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWdCM0IsTUFBTSxzQ0FmRCxDQUFBLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBZ0JoRCxPQWZPLENBQUMsRUFBQyxDQUFFO1lBZ0JULElBQUksZ0JBZkQsQ0FBQSxJQUFLLENBQUM7WUFnQlQsSUFmRyxDQUFFO2dCQWdCSCxJQWZJLEdBQUUsTUFBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7WUFnQnpCLENBZkM7WUFBQSxLQUFBLENBQUEsQ0FBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQWdCWCxFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUU7b0JBQUEsTUFBTSxJQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQSxDQUFFO2dCQWdCNUQsTUFmSyxDQUFFLENBQUM7WUFnQlYsQ0FmQztZQWlCRCxFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTtnQkFnQmQsRUFBRSxDQUFDLENBZkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFFO29CQUFBLE1BQU0sSUFBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFBQSxDQUFFO2dCQWdCakUsS0FBSyxDQWZDO1lBZ0JSLENBZkM7WUFpQkQsRUFBRSxDQUFDLENBZkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFO2dCQUFBLE1BQU0sSUFBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQUEsQ0FBRTtZQWdCbkUsTUFmSyxJQUFLLENBQUMsS0FBSyxDQUFDO1FBZ0JuQixDQWZDO0lBZ0JILENBZkM7Q0FDSDtBQWlCQTtJQUNBLHNDQUFzQztJQUN0QyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ25DLDJHQUEyRztJQUMzRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ3JDLENBQUM7QUFFRDs7Ozs7R0FLRztBQTNCSCxhQTZCSSxNQTVCOEIsRUE2QjlCLFFBNUJ1QztJQTZCekMsTUE1Qk0sQ0FBQSxJQUFJLGdCQUFpQixDQUFVLE1BQU0sRUFBQyxRQUFTLENBQUMsQ0FBQztBQTZCekQsQ0E1QkM7QUFKRCxrQkFJQyIsImZpbGUiOiJ0YXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IFBhcnRpYWxBc3luY09ic2VydmVyIH0gZnJvbSAnLi4vb2JzZXJ2ZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMub2JzZXJ2ZXJcIik7XG5nb29nLnJlcXVpcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMub2JzZXJ2ZXJcIik7IC8vIGZvcmNlIHR5cGUtb25seSBtb2R1bGUgdG8gYmUgbG9hZGVkXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFRhcEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9vYnNlcnZlcjogUGFydGlhbEFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHsoIU5leHRBc3luY09ic2VydmVyPFRTb3VyY2U+fCFFcnJvckFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT58IUNvbXBsZXRpb25Bc3luY09ic2VydmVyPFRTb3VyY2U+KX0gb2JzZXJ2ZXJcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBvYnNlcnZlcjogUGFydGlhbEFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9vYnNlcnZlciA9IG9ic2VydmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV4dCA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgIH0gY2F0Y2ggKCAvKiogQHR5cGUgez99ICovZSkge1xuICAgICAgICBpZiAodGhpcy5fb2JzZXJ2ZXIuZXJyb3IpIHsgYXdhaXQgdGhpcy5fb2JzZXJ2ZXIuZXJyb3IoZSk7IH1cbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHQuZG9uZSkge1xuICAgICAgICBpZiAodGhpcy5fb2JzZXJ2ZXIuY29tcGxldGUpIHsgYXdhaXQgdGhpcy5fb2JzZXJ2ZXIuY29tcGxldGUoKTsgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX29ic2VydmVyLm5leHQpIHsgYXdhaXQgdGhpcy5fb2JzZXJ2ZXIubmV4dChuZXh0LnZhbHVlKTsgfVxuICAgICAgeWllbGQgbmV4dC52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVGFwQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblRhcEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUgeyghTmV4dEFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT58IUVycm9yQXN5bmNPYnNlcnZlcjxUU291cmNlPnwhQ29tcGxldGlvbkFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT4pfSAqL1xuVGFwQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX29ic2VydmVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7KCFOZXh0QXN5bmNPYnNlcnZlcjxUU291cmNlPnwhRXJyb3JBc3luY09ic2VydmVyPFRTb3VyY2U+fCFDb21wbGV0aW9uQXN5bmNPYnNlcnZlcjxUU291cmNlPil9IG9ic2VydmVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhcDxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgb2JzZXJ2ZXI6IFBhcnRpYWxBc3luY09ic2VydmVyPFRTb3VyY2U+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRhcEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBvYnNlcnZlcik7XG59XG4iXX0=