goog.module('targets.esnext.cls.asynciterable.groupjoin'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/groupjoin.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _grouping_1 = goog.require('targets.esnext.cls.asynciterable._grouping');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._grouping");
var empty_1 = goog.require('targets.esnext.cls.asynciterable.empty');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.empty");
var from_1 = goog.require('targets.esnext.cls.asynciterable.from');
const tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.from");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_5 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @template TOuter, TInner, TKey, TResult
 */
class GroupJoinAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TOuter>} outer
     * @param {!AsyncIterable<TInner>} inner
     * @param {function(TOuter): (TKey|!Promise<TKey>)} outerSelector
     * @param {function(TInner): (TKey|!Promise<TKey>)} innerSelector
     * @param {function(TOuter, !AsyncIterable<TInner>): (TResult|!Promise<TResult>)} resultSelector
     */
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!Map<TKey, !Array<?>>} */ map = await _grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity);
        for await (let /** @type {TOuter} */ outerElement of this._outer) {
            const /** @type {TKey} */ outerKey = await this._outerSelector(outerElement);
            const /** @type {(!Iterable<TInner>|!tsickle_forward_declare_1.AsyncIterableX<TInner>)} */ innerElements = map.has(outerKey) ? (map.get(outerKey)) : empty_1.empty();
            yield await this._resultSelector(outerElement, from_1.from(innerElements));
        }
    }
}
function GroupJoinAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TOuter>} */
    GroupJoinAsyncIterable.prototype._outer;
    /** @type {!AsyncIterable<TInner>} */
    GroupJoinAsyncIterable.prototype._inner;
    /** @type {function(TOuter): (TKey|!Promise<TKey>)} */
    GroupJoinAsyncIterable.prototype._outerSelector;
    /** @type {function(TInner): (TKey|!Promise<TKey>)} */
    GroupJoinAsyncIterable.prototype._innerSelector;
    /** @type {function(TOuter, !AsyncIterable<TInner>): (TResult|!Promise<TResult>)} */
    GroupJoinAsyncIterable.prototype._resultSelector;
}
/**
 * @template TOuter, TInner, TKey, TResult
 * @param {!AsyncIterable<TOuter>} outer
 * @param {!AsyncIterable<TInner>} inner
 * @param {function(TOuter): (TKey|!Promise<TKey>)} outerSelector
 * @param {function(TInner): (TKey|!Promise<TKey>)} innerSelector
 * @param {function(TOuter, !AsyncIterable<TInner>): (TResult|!Promise<TResult>)} resultSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.groupJoin = groupJoin;
//# sourceMappingURL=data:application/json;base64,