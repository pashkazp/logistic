goog.module('targets.esnext.cls.asynciterable.generatetime'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/generatetime.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _sleep_1 = goog.require('targets.esnext.cls.asynciterable._sleep');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._sleep");
/**
 * @template TState, TResult
 */
class GenerateTimeAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {TState} initialState
     * @param {function(TState): (boolean|!Promise<boolean>)} condition
     * @param {function(TState): (TState|!Promise<TState>)} iterate
     * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
     * @param {function(TState): (number|!Promise<number>)} timeSelector
     */
    constructor(initialState, condition, iterate, resultSelector, timeSelector) {
        super();
        this._initialState = initialState;
        this._condition = condition;
        this._iterate = iterate;
        this._resultSelector = resultSelector;
        this._timeSelector = timeSelector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        for (let /** @type {TState} */ i = this._initialState; await this._condition(i); i = await this._iterate(i)) {
            await _sleep_1.sleep(await this._timeSelector(i));
            yield await this._resultSelector(i);
        }
    }
}
function GenerateTimeAsyncIterable_tsickle_Closure_declarations() {
    /** @type {TState} */
    GenerateTimeAsyncIterable.prototype._initialState;
    /** @type {function(TState): (boolean|!Promise<boolean>)} */
    GenerateTimeAsyncIterable.prototype._condition;
    /** @type {function(TState): (TState|!Promise<TState>)} */
    GenerateTimeAsyncIterable.prototype._iterate;
    /** @type {function(TState): (TResult|!Promise<TResult>)} */
    GenerateTimeAsyncIterable.prototype._resultSelector;
    /** @type {function(TState): (number|!Promise<number>)} */
    GenerateTimeAsyncIterable.prototype._timeSelector;
}
/**
 * @template TState, TResult
 * @param {TState} initialState
 * @param {function(TState): (boolean|!Promise<boolean>)} condition
 * @param {function(TState): (TState|!Promise<TState>)} iterate
 * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
 * @param {function(TState): (number|!Promise<number>)} timeSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function generateTime(initialState, condition, iterate, resultSelector, timeSelector) {
    return new GenerateTimeAsyncIterable(initialState, condition, iterate, resultSelector, timeSelector);
}
exports.generateTime = generateTime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2dlbmVyYXRldGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCxxQ0FOYztBQU9kLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQzFHOztHQUVHO0FBUkgsK0JBQWdELFNBQVEsOEJBQXdCO0lBZWhGOzs7Ozs7T0FNRztJQWRELFlBZ0JJLFlBZm9CLEVBZ0JwQixTQWZ3RCxFQWdCeEQsT0Fmb0QsRUFnQnBELGNBZjZELEVBZ0I3RCxZQWZ5RDtRQWdCM0QsS0FmSyxFQUFFLENBQUM7UUFnQlIsSUFmSSxDQUFDLGFBQWEsR0FBRSxZQUFhLENBQUM7UUFnQmxDLElBZkksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDO1FBZ0I1QixJQWZJLENBQUMsUUFBUSxHQUFFLE9BQVEsQ0FBQztRQWdCeEIsSUFmSSxDQUFDLGVBQWUsR0FBRSxjQUFlLENBQUM7UUFnQnRDLElBZkksQ0FBQyxhQUFhLEdBQUUsWUFBYSxDQUFDO0lBZ0JwQyxDQUFDO0lBQ0g7O09BRUc7SUFoQkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWtCM0IsR0FBRyxDQUFDLENBakJDLElBQUEscUJBQUcsQ0FBQSxDQUFFLEdBQUUsSUFBSyxDQUFDLGFBQWEsRUFBQyxNQUFNLElBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBRSxHQUFFLE1BQU0sSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFFO1lBa0J0RixNQWpCSyxjQUFNLENBQUMsTUFBSyxJQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFrQnpDLE1BakJLLE1BQU0sSUFBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQWtCdEMsQ0FqQkM7SUFrQkgsQ0FqQkM7Q0FDSDtBQW1CQTtJQUNBLHFCQUFxQjtJQUNyQix5QkFBeUIsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0lBQ2xELDREQUE0RDtJQUM1RCx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQy9DLDBEQUEwRDtJQUMxRCx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQzdDLDREQUE0RDtJQUM1RCx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDO0lBQ3BELDBEQUEwRDtJQUMxRCx5QkFBeUIsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0FBQ2xELENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQXRDSCxzQkF3Q0ksWUF2Q29CLEVBd0NwQixTQXZDd0QsRUF3Q3hELE9BdkNvRCxFQXdDcEQsY0F2QzZELEVBd0M3RCxZQXZDeUQ7SUF3QzNELE1BdkNNLENBQUEsSUFBSSx5QkFBMEIsQ0F3Q2xDLFlBdkNZLEVBd0NaLFNBdkNTLEVBd0NULE9BdkNPLEVBd0NQLGNBdkNjLEVBd0NkLFlBdkNZLENBQUMsQ0FBQztBQXdDbEIsQ0F2Q0M7QUFaRCxvQ0FZQyIsImZpbGUiOiJnZW5lcmF0ZXRpbWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IHNsZWVwIH0gZnJvbSAnLi9fc2xlZXAnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5fc2xlZXBcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU3RhdGUsIFRSZXN1bHRcbiAqL1xuY2xhc3MgR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZTxUU3RhdGUsIFRSZXN1bHQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfaW5pdGlhbFN0YXRlOiBUU3RhdGU7XG5wcml2YXRlIF9jb25kaXRpb246ICh2YWx1ZTogVFN0YXRlKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcbnByaXZhdGUgX2l0ZXJhdGU6ICh2YWx1ZTogVFN0YXRlKSA9PiBUU3RhdGUgfCBQcm9taXNlPFRTdGF0ZT47XG5wcml2YXRlIF9yZXN1bHRTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+O1xucHJpdmF0ZSBfdGltZVNlbGVjdG9yOiAodmFsdWU6IFRTdGF0ZSkgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+O1xuLyoqXG4gKiBAcGFyYW0ge1RTdGF0ZX0gaW5pdGlhbFN0YXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29uZGl0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChUU3RhdGV8IVByb21pc2U8VFN0YXRlPil9IGl0ZXJhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRSZXN1bHR8IVByb21pc2U8VFJlc3VsdD4pfSByZXN1bHRTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pfSB0aW1lU2VsZWN0b3JcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBpbml0aWFsU3RhdGU6IFRTdGF0ZSxcbiAgICAgIGNvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgICAgaXRlcmF0ZTogKHZhbHVlOiBUU3RhdGUpID0+IFRTdGF0ZSB8IFByb21pc2U8VFN0YXRlPixcbiAgICAgIHJlc3VsdFNlbGVjdG9yOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4sXG4gICAgICB0aW1lU2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2luaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLl9jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgdGhpcy5faXRlcmF0ZSA9IGl0ZXJhdGU7XG4gICAgdGhpcy5fcmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgICB0aGlzLl90aW1lU2VsZWN0b3IgPSB0aW1lU2VsZWN0b3I7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU3RhdGV9ICovIGkgPSB0aGlzLl9pbml0aWFsU3RhdGU7IGF3YWl0IHRoaXMuX2NvbmRpdGlvbihpKTsgaSA9IGF3YWl0IHRoaXMuX2l0ZXJhdGUoaSkpIHtcbiAgICAgIGF3YWl0IHNsZWVwKGF3YWl0IHRoaXMuX3RpbWVTZWxlY3RvcihpKSk7XG4gICAgICB5aWVsZCBhd2FpdCB0aGlzLl9yZXN1bHRTZWxlY3RvcihpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtUU3RhdGV9ICovXG5HZW5lcmF0ZVRpbWVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5faW5pdGlhbFN0YXRlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU3RhdGUpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9ICovXG5HZW5lcmF0ZVRpbWVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fY29uZGl0aW9uO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU3RhdGUpOiAoVFN0YXRlfCFQcm9taXNlPFRTdGF0ZT4pfSAqL1xuR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2l0ZXJhdGU7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTdGF0ZSk6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gKi9cbkdlbmVyYXRlVGltZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9yZXN1bHRTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFN0YXRlKTogKG51bWJlcnwhUHJvbWlzZTxudW1iZXI+KX0gKi9cbkdlbmVyYXRlVGltZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl90aW1lU2VsZWN0b3I7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTdGF0ZSwgVFJlc3VsdFxuICogQHBhcmFtIHtUU3RhdGV9IGluaXRpYWxTdGF0ZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbmRpdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAoVFN0YXRlfCFQcm9taXNlPFRTdGF0ZT4pfSBpdGVyYXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gcmVzdWx0U2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKG51bWJlcnwhUHJvbWlzZTxudW1iZXI+KX0gdGltZVNlbGVjdG9yXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVGltZTxUU3RhdGUsIFRSZXN1bHQ+KFxuICAgIGluaXRpYWxTdGF0ZTogVFN0YXRlLFxuICAgIGNvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgIGl0ZXJhdGU6ICh2YWx1ZTogVFN0YXRlKSA9PiBUU3RhdGUgfCBQcm9taXNlPFRTdGF0ZT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PixcbiAgICB0aW1lU2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZTxUU3RhdGUsIFRSZXN1bHQ+KFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICBjb25kaXRpb24sXG4gICAgaXRlcmF0ZSxcbiAgICByZXN1bHRTZWxlY3RvcixcbiAgICB0aW1lU2VsZWN0b3IpO1xufVxuIl19