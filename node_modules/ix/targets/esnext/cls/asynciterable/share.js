goog.module('targets.esnext.cls.asynciterable.share'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/share.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var create_1 = goog.require('targets.esnext.cls.asynciterable.create');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.create");
/**
 * @template T
 */
class SharedAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterator<T>} it
     */
    constructor(it) {
        super();
        this._it = it;
    }
    /**
     * @return {!AsyncIterator<T>}
     */
    [Symbol.asyncIterator]() {
        return this._it;
    }
}
function SharedAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterator<T>} */
    SharedAsyncIterable.prototype._it;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {function(!AsyncIterable<TSource>): (!AsyncIterable<TResult>|!Promise<!AsyncIterable<TResult>>)=} selector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(TSource|TResult)>}
 */
function share(source, selector) {
    return selector ?
        create_1.create(async () => {
            const /** @type {!AsyncIterable<TResult>} */ it = await selector(new SharedAsyncIterable(source[Symbol.asyncIterator]()));
            return it[Symbol.asyncIterator]();
        }) :
        new SharedAsyncIterable(source[Symbol.asyncIterator]());
}
exports.share = share;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NoYXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELHFDQU5lO0FBT2YsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7QUFDMUc7O0dBRUc7QUFSSCx5QkFBNEIsU0FBUSw4QkFBa0I7SUFXdEQ7O09BRUc7SUFWRCxZQUFZLEVBQW9CO1FBWTlCLEtBWEssRUFBRSxDQUFDO1FBWVIsSUFYSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7SUFZaEIsQ0FBQztJQUNIOztPQUVHO0lBWkQsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBY3BCLE1BYk0sQ0FBQSxJQUFLLENBQUMsR0FBRyxDQUFDO0lBY2xCLENBYkM7Q0FDSDtBQWVBO0lBQ0EsZ0NBQWdDO0lBQ2hDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUFDbEMsQ0FBQztBQVNEOzs7OztHQUtHO0FBeEJILGVBMEJJLE1BekI4QixFQTBCOUIsUUF6QnNHO0lBMkJ4RyxNQXpCTSxDQUFBLFFBQVM7UUEwQmIsZUF6Qk0sQ0EwQkosS0F6Qks7WUEwQkgsTUFBTSxzQ0F6QkQsQ0FBQSxFQUFHLEdBQUUsTUFBTSxRQUFTLENBQUMsSUFBRyxtQkFBb0IsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBMEJuRixNQXpCTSxDQUFBLEVBQUcsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQTBCbkMsQ0F6QkMsQ0FBQztRQTBCTCxJQXpCRyxtQkFBb0IsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQTBCckUsQ0F6QkM7QUFYRCxzQkFXQyIsImZpbGUiOiJzaGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5jcmVhdGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKi9cbmNsYXNzIFNoYXJlZEFzeW5jSXRlcmFibGU8VD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUPiB7XG5wcml2YXRlIF9pdDogQXN5bmNJdGVyYXRvcjxUPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYXRvcjxUPn0gaXRcbiAqL1xuY29uc3RydWN0b3IoaXQ6IEFzeW5jSXRlcmF0b3I8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2l0ID0gaXQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmF0b3I8VD59XG4gKi9cbltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0O1xuICB9XG59XG5cbmZ1bmN0aW9uIFNoYXJlZEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VD59ICovXG5TaGFyZWRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5faXQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNoYXJlPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+O1xuZXhwb3J0IGZ1bmN0aW9uIHNoYXJlPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0PiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUUmVzdWx0Pj4pOlxuICAgICAgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD47XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oIUFzeW5jSXRlcmFibGU8VFNvdXJjZT4pOiAoIUFzeW5jSXRlcmFibGU8VFJlc3VsdD58IVByb21pc2U8IUFzeW5jSXRlcmFibGU8VFJlc3VsdD4+KT19IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDwoVFNvdXJjZXxUUmVzdWx0KT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzaGFyZTxUU291cmNlLCBUUmVzdWx0ID0gVFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yPzogKHZhbHVlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+Pik6XG4gICAgICBBc3luY0l0ZXJhYmxlWDxUU291cmNlIHwgVFJlc3VsdD4ge1xuICByZXR1cm4gc2VsZWN0b3IgP1xuICAgIGNyZWF0ZTxUUmVzdWx0PihcbiAgICAgIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pn0gKi8gaXQgPSBhd2FpdCBzZWxlY3RvcihuZXcgU2hhcmVkQXN5bmNJdGVyYWJsZShzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkpKTtcbiAgICAgICAgcmV0dXJuIGl0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgICAgIH0pIDpcbiAgICBuZXcgU2hhcmVkQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkpO1xufVxuIl19