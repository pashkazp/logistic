goog.module('targets.esnext.cls.asynciterable.throttle'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/throttle.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class ThrottleAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} time
     */
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {?} */ currentTime, /** @type {?} */ previousTime;
        for await (const /** @type {TSource} */ item of this._source) {
            currentTime = Date.now();
            if (!previousTime || currentTime - previousTime > this._time) {
                previousTime = currentTime;
                yield item;
            }
        }
    }
}
function ThrottleAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ThrottleAsyncIterable.prototype._source;
    /** @type {number} */
    ThrottleAsyncIterable.prototype._time;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} time
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function throttle(source, time) {
    return new ThrottleAsyncIterable(source, time);
}
exports.throttle = throttle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rocm90dGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCwyQkFBb0MsU0FBUSw4QkFBd0I7SUFXcEU7OztPQUdHO0lBVkQsWUFBWSxNQUE4QixFQUFDLElBQWE7UUFZdEQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztJQVlwQixDQUFDO0lBQ0g7O09BRUc7SUFaRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBYzNCLElBQUksZ0JBYkQsQ0FBQSxXQUFZLEVBQUEsZ0JBQUMsQ0FBQSxZQUFhLENBQUM7UUFjOUIsR0FiRyxDQUFBLEtBQU0sQ0FBTixDQUFRLE1BQUEsc0JBQUssQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFjdEMsV0FiVyxHQUFFLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztZQWN6QixFQUFFLENBQUMsQ0FiQyxDQUFDLFlBQVksSUFBRyxXQUFZLEdBQUUsWUFBYSxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFFO2dCQWM3RCxZQWJZLEdBQUUsV0FBWSxDQUFDO2dCQWMzQixNQWJLLElBQUssQ0FBQztZQWNiLENBYkM7UUFjSCxDQWJDO0lBY0gsQ0FiQztDQUNIO0FBZUE7SUFDQSxzQ0FBc0M7SUFDdEMscUJBQXFCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN4QyxxQkFBcUI7SUFDckIscUJBQXFCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztBQUN0QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6Qkgsa0JBQWtDLE1BQThCLEVBQUMsSUFBYTtJQTJCNUUsTUExQk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sRUFBQyxJQUFLLENBQUMsQ0FBQztBQTJCMUQsQ0ExQkM7QUFGRCw0QkFFQyIsImZpbGUiOiJ0aHJvdHRsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUaHJvdHRsZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF90aW1lOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCB0aW1lOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBjdXJyZW50VGltZSwgLyoqIEB0eXBlIHs/fSAqLyBwcmV2aW91c1RpbWU7XG4gICAgZm9yIGF3YWl0IChjb25zdCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBjdXJyZW50VGltZSA9IERhdGUubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzVGltZSB8fCBjdXJyZW50VGltZSAtIHByZXZpb3VzVGltZSA+IHRoaXMuX3RpbWUpIHtcbiAgICAgICAgcHJldmlvdXNUaW1lID0gY3VycmVudFRpbWU7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFRocm90dGxlQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblRocm90dGxlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuVGhyb3R0bGVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fdGltZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aHJvdHRsZTxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUaHJvdHRsZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCB0aW1lKTtcbn1cbiJdfQ==