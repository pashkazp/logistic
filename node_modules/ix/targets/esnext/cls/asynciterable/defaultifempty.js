goog.module('targets.esnext.cls.asynciterable.defaultifempty'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/defaultifempty.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class DefaultIfEmptyAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {TSource} defaultValue
     */
    constructor(source, defaultValue) {
        super();
        this._source = source;
        this._defaultValue = defaultValue;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {number} */ state = 1;
        for await (let /** @type {TSource} */ item of this._source) {
            state = 2;
            yield item;
        }
        if (state === 1) {
            yield this._defaultValue;
        }
    }
}
function DefaultIfEmptyAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    DefaultIfEmptyAsyncIterable.prototype._source;
    /** @type {TSource} */
    DefaultIfEmptyAsyncIterable.prototype._defaultValue;
}
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {T} defaultValue
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function defaultIfEmpty(source, defaultValue) {
    return new DefaultIfEmptyAsyncIterable(source, defaultValue);
}
exports.defaultIfEmpty = defaultIfEmpty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2RlZmF1bHRpZmVtcHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCxpQ0FBMEMsU0FBUSw4QkFBd0I7SUFXMUU7OztPQUdHO0lBVkQsWUFBWSxNQUE4QixFQUFDLFlBQXNCO1FBWS9ELEtBWEssRUFBRSxDQUFDO1FBWVIsSUFYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFZdEIsSUFYSSxDQUFDLGFBQWEsR0FBRSxZQUFhLENBQUM7SUFZcEMsQ0FBQztJQUNIOztPQUVHO0lBWkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWMzQixJQUFJLHFCQWJELENBQUEsS0FBTSxHQUFFLENBQUUsQ0FBQztRQWNkLEdBYkcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBY3BDLEtBYkssR0FBRSxDQUFFLENBQUM7WUFjVixNQWJLLElBQUssQ0FBQztRQWNiLENBYkM7UUFjRCxFQUFFLENBQUMsQ0FiQyxLQUFLLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTtZQWNoQixNQWJLLElBQUssQ0FBQyxhQUFhLENBQUM7UUFjM0IsQ0FiQztJQWNILENBYkM7Q0FDSDtBQWVBO0lBQ0Esc0NBQXNDO0lBQ3RDLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDOUMsc0JBQXNCO0lBQ3RCLDJCQUEyQixDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7QUFDcEQsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILHdCQUFrQyxNQUF3QixFQUFDLFlBQWdCO0lBMkJ6RSxNQTFCTSxDQUFBLElBQUksMkJBQTRCLENBQUksTUFBTSxFQUFDLFlBQWEsQ0FBQyxDQUFDO0FBMkJsRSxDQTFCQztBQUZELHdDQUVDIiwiZmlsZSI6ImRlZmF1bHRpZmVtcHR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIERlZmF1bHRJZkVtcHR5QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2RlZmF1bHRWYWx1ZTogVFNvdXJjZTtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge1RTb3VyY2V9IGRlZmF1bHRWYWx1ZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGRlZmF1bHRWYWx1ZTogVFNvdXJjZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2RlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHN0YXRlID0gMTtcbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBzdGF0ZSA9IDI7XG4gICAgICB5aWVsZCBpdGVtO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT09IDEpIHtcbiAgICAgIHlpZWxkIHRoaXMuX2RlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRGVmYXVsdElmRW1wdHlBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRGVmYXVsdElmRW1wdHlBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtUU291cmNlfSAqL1xuRGVmYXVsdElmRW1wdHlBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZGVmYXVsdFZhbHVlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7VH0gZGVmYXVsdFZhbHVlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRJZkVtcHR5PFQ+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPiwgZGVmYXVsdFZhbHVlOiBUKTogQXN5bmNJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IERlZmF1bHRJZkVtcHR5QXN5bmNJdGVyYWJsZTxUPihzb3VyY2UsIGRlZmF1bHRWYWx1ZSk7XG59XG4iXX0=