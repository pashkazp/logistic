goog.module('targets.esnext.cls.asynciterable.skipwhile'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/skipwhile.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class SkipWhileAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
     */
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {boolean} */ yielding = false, /** @type {number} */ i = 0;
        for await (let /** @type {TSource} */ element of this._source) {
            if (!yielding && !(await this._predicate(element, i++))) {
                yielding = true;
            }
            if (yielding) {
                yield element;
            }
        }
    }
}
function SkipWhileAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    SkipWhileAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (boolean|!Promise<boolean>)} */
    SkipWhileAsyncIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function skipWhile(source, predicate) {
    return new SkipWhileAsyncIterable(source, predicate);
}
exports.skipWhile = skipWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NraXB3aGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgsNEJBQXFDLFNBQVEsOEJBQXdCO0lBV3JFOzs7T0FHRztJQVZELFlBWUksTUFYOEIsRUFZOUIsU0FYd0U7UUFZMUUsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsVUFBVSxHQUFFLFNBQVUsQ0FBQztJQVk5QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBYzNCLElBQUksc0JBYkQsQ0FBQSxRQUFTLEdBQUUsS0FBTSxFQUFBLHFCQUFDLENBQUEsQ0FBRSxHQUFFLENBQUUsQ0FBQztRQWM1QixHQWJHLENBQUEsS0FBTSxDQUFOLENBQVEsSUFBQSxzQkFBRyxDQUFBLE9BQVEsSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtZQWN2QyxFQUFFLENBQUMsQ0FiQyxDQUFDLFFBQVEsSUFBRyxDQUFFLENBQUMsTUFBSyxJQUFLLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQUFBLFFBQVMsR0FBRSxJQUFLLENBQUM7WUFBQSxDQUFFO1lBYzdFLEVBQUUsQ0FBQyxDQWJDLFFBQVEsQ0FBQyxDQUFBLENBQUU7Z0JBQUEsTUFBTSxPQUFRLENBQUM7WUFBQSxDQUFFO1FBY2xDLENBYkM7SUFjSCxDQWJDO0NBQ0g7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3pDLHFFQUFxRTtJQUNyRSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBQzVDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxtQkEyQkksTUExQjhCLEVBMkI5QixTQTFCd0U7SUEyQjFFLE1BMUJNLENBQUEsSUFBSSxzQkFBdUIsQ0FBVSxNQUFNLEVBQUMsU0FBVSxDQUFDLENBQUM7QUEyQmhFLENBMUJDO0FBSkQsOEJBSUMiLCJmaWxlIjoic2tpcHdoaWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFNraXBXaGlsZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9wcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IHByZWRpY2F0ZVxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyB5aWVsZGluZyA9IGZhbHNlLCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBlbGVtZW50IG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKCF5aWVsZGluZyAmJiAhKGF3YWl0IHRoaXMuX3ByZWRpY2F0ZShlbGVtZW50LCBpKyspKSkgeyB5aWVsZGluZyA9IHRydWU7IH1cbiAgICAgIGlmICh5aWVsZGluZykgeyB5aWVsZCBlbGVtZW50OyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNraXBXaGlsZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5Ta2lwV2hpbGVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9ICovXG5Ta2lwV2hpbGVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fcHJlZGljYXRlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBwcmVkaWNhdGVcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcFdoaWxlPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBwcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgU2tpcFdoaWxlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIHByZWRpY2F0ZSk7XG59XG4iXX0=