goog.module('targets.esnext.cls.asynciterable.repeat'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/repeat.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var of_1 = goog.require('targets.esnext.cls.asynciterable.of');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.of");
var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class RepeatAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        if (this._count === -1) {
            while (1) {
                for await (let /** @type {TSource} */ item of this._source) {
                    yield item;
                }
            }
        }
        else {
            for (let /** @type {number} */ i = 0; i < this._count; i++) {
                for await (let /** @type {TSource} */ item of this._source) {
                    yield item;
                }
            }
        }
    }
}
function RepeatAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    RepeatAsyncIterable.prototype._source;
    /** @type {number} */
    RepeatAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.AsyncIterableX<TSource>}
 */
function repeat(source, count = -1) {
    return new RepeatAsyncIterable(source, count);
}
exports.repeat = repeat;
/**
 * @template TSource
 * @param {TSource} value
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.AsyncIterableX<TSource>}
 */
function repeatStatic(value, count = -1) {
    return new RepeatAsyncIterable(of_1.of(value), count);
}
exports.repeatStatic = repeatStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JlcGVhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsNkJBTFc7QUFNWCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsOENBQThDLENBQUMsQ0FOM0U7QUFPMUIsb0RBTnVCO0FBT3ZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUkgseUJBQWtDLFNBQVEsOEJBQXdCO0lBWWxFOzs7T0FHRztJQVhELFlBQVksTUFBOEIsRUFBQyxLQUFjO1FBYXZELEtBWkssRUFBRSxDQUFDO1FBYVIsSUFaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsSUFaSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7SUFhdEIsQ0FBQztJQUNIOztPQUVHO0lBYkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWUzQixFQUFFLENBQUMsQ0FkQyxJQUFJLENBQUMsTUFBTSxLQUFJLENBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtZQWV2QixPQWRPLENBQUMsRUFBQyxDQUFFO2dCQWVULEdBZEcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO29CQUFBLE1BQU0sSUFBSyxDQUFDO2dCQUFBLENBQUU7WUFldEQsQ0FkQztRQWVILENBZEM7UUFBQSxJQUFLLENBQUEsQ0FBRTtZQWVOLEdBQUcsQ0FBQyxDQWRDLElBQUEscUJBQUcsQ0FBQSxDQUFFLEdBQUUsQ0FBRSxFQUFDLENBQUUsR0FBRSxJQUFLLENBQUMsTUFBTSxFQUFDLENBQUUsRUFBRSxFQUFDLENBQUU7Z0JBZXJDLEdBZEcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO29CQUFBLE1BQU0sSUFBSyxDQUFDO2dCQUFBLENBQUU7WUFldEQsQ0FkQztRQWVILENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxzQ0FBc0M7SUFDdEMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN0QyxxQkFBcUI7SUFDckIsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUNyQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUExQkgsZ0JBQWdDLE1BQThCLEVBQUMsUUFBZ0IsQ0FBRSxDQUFDO0lBNEJoRixNQTNCTSxDQUFBLElBQUksbUJBQW9CLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBNEJ6RCxDQUFDO0FBN0JELHdCQTZCQztBQUNEOzs7OztHQUtHO0FBL0JILHNCQUFzQyxLQUFjLEVBQUMsUUFBZ0IsQ0FBRSxDQUFDO0lBaUN0RSxNQWhDTSxDQUFBLElBQUksbUJBQW9CLENBQVUsT0FBRSxDQUFDLEtBQUssQ0FBQyxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBaUM1RCxDQWhDQztBQUZELG9DQUVDIiwiZmlsZSI6InJlcGVhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IG9mIH0gZnJvbSAnLi9vZic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLm9mXCIpO1xuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFJlcGVhdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGlmICh0aGlzLl9jb3VudCA9PT0gLTEpIHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7IGkgPCB0aGlzLl9jb3VudDsgaSsrKSB7XG4gICAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBSZXBlYXRBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuUmVwZWF0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuUmVwZWF0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvdW50O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyPX0gY291bnRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0PFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlciA9IC0xKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFJlcGVhdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBjb3VudCk7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0ge1RTb3VyY2V9IHZhbHVlXG4gKiBAcGFyYW0ge251bWJlcj19IGNvdW50XG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMi5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdFN0YXRpYzxUU291cmNlPih2YWx1ZTogVFNvdXJjZSwgY291bnQ6IG51bWJlciA9IC0xKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFJlcGVhdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4ob2YodmFsdWUpLCBjb3VudCk7XG59XG4iXX0=