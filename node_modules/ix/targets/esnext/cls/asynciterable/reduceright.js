goog.module('targets.esnext.cls.asynciterable.reduceright'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/reduceright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var toarray_1 = goog.require('targets.esnext.cls.asynciterable.toarray');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.toarray");
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!Promise<(T|R)>}
 */
async function reduceRight(source, accumulator, ...args) {
    let [seed] = args;
    const /** @type {boolean} */ hasSeed = args.length === 1;
    let /** @type {boolean} */ hasValue = false;
    const /** @type {!Array<T>} */ array = await toarray_1.toArray(source);
    for (let /** @type {number} */ offset = array.length - 1; offset >= 0; offset--) {
        const /** @type {T} */ item = array[offset];
        if (hasValue || (hasValue = hasSeed)) {
            seed = await accumulator(seed, item, offset);
        }
        else {
            seed = item;
            hasValue = true;
        }
    }
    if (hasSeed && !hasValue) {
        return ((seed));
    }
    if (!hasValue) {
        throw new Error('Sequence contains no elements');
    }
    return ((seed));
}
exports.reduceRight = reduceRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JlZHVjZXJpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCx1Q0FMZ0I7QUFNaEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBTnRFO0FBZXBDOzs7Ozs7R0FNRztBQVpHLEtBQU0sc0JBY1IsTUFid0IsRUFjeEIsV0Fib0UsRUFjcEUsR0FiRyxJQUFlO0lBY3BCLElBYkcsQ0FBRSxJQUFJLENBQUMsR0FBRSxJQUFLLENBQUM7SUFjbEIsTUFBTSxzQkFiRCxDQUFBLE9BQVEsR0FBRSxJQUFLLENBQUMsTUFBTSxLQUFJLENBQUUsQ0FBQztJQWNsQyxJQUFJLHNCQWJELENBQUEsUUFBUyxHQUFFLEtBQU0sQ0FBQztJQWNyQixNQUFNLHdCQWJELENBQUEsS0FBTSxHQUFFLE1BQU0saUJBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQWNwQyxHQUFHLENBQUMsQ0FiQyxJQUFBLHFCQUFHLENBQUEsTUFBTyxHQUFFLEtBQU0sQ0FBQyxNQUFNLEdBQUUsQ0FBRSxFQUFDLE1BQU8sSUFBRyxDQUFFLEVBQUMsTUFBTyxFQUFFLEVBQUMsQ0FBRTtRQWMxRCxNQUFNLGdCQWJELENBQUEsSUFBSyxHQUFFLEtBQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQWMzQixFQUFFLENBQUMsQ0FiQyxRQUFRLElBQUcsQ0FBRSxRQUFRLEdBQUUsT0FBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO1lBY3JDLElBYkksR0FBRSxNQUFNLFdBQVksQ0FBQyxJQUFJLEVBQUMsSUFBSyxFQUFDLE1BQU8sQ0FBQyxDQUFDO1FBYy9DLENBYkM7UUFBQSxJQUFLLENBQUEsQ0FBRTtZQWNOLElBYkksR0FBRSxJQUFLLENBQUM7WUFjWixRQWJRLEdBQUUsSUFBSyxDQUFDO1FBY2xCLENBYkM7SUFjSCxDQWJDO0lBZUQsRUFBRSxDQUFDLENBYkMsT0FBTyxJQUFHLENBQUUsUUFBUSxDQUFDLENBQUEsQ0FBRTtRQWN6QixNQUFNLENBQXFCLENBQUMsQ0FidEIsSUFBQSxDQUFBLENBQU0sQ0FBQztJQWNmLENBYkM7SUFlRCxFQUFFLENBQUMsQ0FiQyxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUU7UUFjZCxNQWJLLElBQUksS0FBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFjbkQsQ0FiQztJQWVELE1BQU0sQ0FBcUIsQ0FBQyxDQWJ0QixJQUFBLENBQUEsQ0FBTSxDQUFDO0FBY2YsQ0FiQztBQTNCRCxrQ0EyQkMiLCJmaWxlIjoicmVkdWNlcmlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi90b2FycmF5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUudG9hcnJheVwiKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0PFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCB8IFByb21pc2U8VD4pOiBQcm9taXNlPFQ+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0PFQsIFIgPSBUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICBzZWVkOiBSKTogUHJvbWlzZTxSPjtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogKFJ8IVByb21pc2U8Uj4pfSBhY2N1bXVsYXRvclxuICogQHBhcmFtIHsuLi4oVHxSKX0gYXJnc1xuICogQHJldHVybiB7IVByb21pc2U8KFR8Uik+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVkdWNlUmlnaHQ8VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBQcm9taXNlPFQgfCBSPiB7XG4gIGxldCBbc2VlZF0gPSBhcmdzO1xuICBjb25zdCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc1NlZWQgPSBhcmdzLmxlbmd0aCA9PT0gMTtcbiAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzVmFsdWUgPSBmYWxzZTtcbiAgY29uc3QgLyoqIEB0eXBlIHshQXJyYXk8VD59ICovIGFycmF5ID0gYXdhaXQgdG9BcnJheShzb3VyY2UpO1xuICBmb3IgKGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gb2Zmc2V0ID0gYXJyYXkubGVuZ3RoIC0gMTsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHtUfSAqLyBpdGVtID0gYXJyYXlbb2Zmc2V0XTtcbiAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gaGFzU2VlZCkpIHtcbiAgICAgIHNlZWQgPSBhd2FpdCBhY2N1bXVsYXRvcihzZWVkLCBpdGVtLCBvZmZzZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWVkID0gaXRlbTtcbiAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoaGFzU2VlZCAmJiAhaGFzVmFsdWUpIHtcbiAgICByZXR1cm4gLyoqIEB0eXBlIHsoVHxSKX0gKi8oKCBzZWVkKSk7XG4gIH1cblxuICBpZiAoIWhhc1ZhbHVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBubyBlbGVtZW50cycpO1xuICB9XG5cbiAgcmV0dXJuIC8qKiBAdHlwZSB7KFR8Uil9ICovKCggc2VlZCkpO1xufVxuIl19