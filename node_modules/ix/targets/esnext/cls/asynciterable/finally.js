goog.module('targets.esnext.cls.asynciterable.finally'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/finally.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class FinalyAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(): (void|!Promise<void>)} action
     */
    constructor(source, action) {
        super();
        this._source = source;
        this._action = action;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        try {
            for await (let /** @type {TSource} */ item of this._source) {
                yield item;
            }
        }
        finally {
            await this._action();
        }
    }
}
function FinalyAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    FinalyAsyncIterable.prototype._source;
    /** @type {function(): (void|!Promise<void>)} */
    FinalyAsyncIterable.prototype._action;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(): (void|!Promise<void>)} action
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function _finally(source, action) {
    return new FinalyAsyncIterable(source, action);
}
exports._finally = _finally;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ZpbmFsbHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBILHlCQUFrQyxTQUFRLDhCQUF3QjtJQVdsRTs7O09BR0c7SUFWRCxZQUFZLE1BQThCLEVBQUMsTUFBbUM7UUFZNUUsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztJQVl4QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBYzNCLElBYkcsQ0FBRTtZQWNILEdBYkcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO2dCQUFBLE1BQU0sSUFBSyxDQUFDO1lBQUEsQ0FBRTtRQWN0RCxDQWJDO2dCQUFRLENBQUU7WUFjVCxNQWJLLElBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQWN2QixDQWJDO0lBY0gsQ0FiQztDQUNIO0FBZUE7SUFDQSxzQ0FBc0M7SUFDdEMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN0QyxnREFBZ0Q7SUFDaEQsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUN0QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6Qkgsa0JBMkJJLE1BMUI4QixFQTJCOUIsTUExQmtDO0lBMkJwQyxNQTFCTSxDQUFBLElBQUksbUJBQW9CLENBQVUsTUFBTSxFQUFDLE1BQU8sQ0FBQyxDQUFDO0FBMkIxRCxDQTFCQztBQUpELDRCQUlDIiwiZmlsZSI6ImZpbmFsbHkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgRmluYWx5QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2FjdGlvbjogKCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigpOiAodm9pZHwhUHJvbWlzZTx2b2lkPil9IGFjdGlvblxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGFjdGlvbjogKCkgPT4gdm9pZCB8IFByb21pc2U8dm9pZD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9hY3Rpb24gPSBhY3Rpb247XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCB0aGlzLl9hY3Rpb24oKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRmluYWx5QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkZpbmFseUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKCk6ICh2b2lkfCFQcm9taXNlPHZvaWQ+KX0gKi9cbkZpbmFseUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9hY3Rpb247XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigpOiAodm9pZHwhUHJvbWlzZTx2b2lkPil9IGFjdGlvblxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZmluYWxseTxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgYWN0aW9uOiAoKSA9PiB2b2lkIHwgUHJvbWlzZTx2b2lkPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBGaW5hbHlBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgYWN0aW9uKTtcbn1cbiJdfQ==