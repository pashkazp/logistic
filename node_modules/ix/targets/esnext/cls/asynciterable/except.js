goog.module('targets.esnext.cls.asynciterable.except'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/except.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var arrayindexof_1 = goog.require('targets.esnext.cls.internal.arrayindexof');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.esnext.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource
 */
class ExceptAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} first
     * @param {!AsyncIterable<TSource>} second
     * @param {function(TSource, TSource): (boolean|!Promise<boolean>)} comparer
     */
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {!Array<?>} */ map = [];
        for await (let /** @type {TSource} */ secondItem of this._second) {
            map.push(secondItem);
        }
        for await (let /** @type {TSource} */ firstItem of this._first) {
            if (await arrayindexof_1.arrayIndexOfAsync(map, firstItem, this._comparer) === -1) {
                map.push(firstItem);
                yield firstItem;
            }
        }
    }
}
function ExceptAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ExceptAsyncIterable.prototype._first;
    /** @type {!AsyncIterable<TSource>} */
    ExceptAsyncIterable.prototype._second;
    /** @type {function(TSource, TSource): (boolean|!Promise<boolean>)} */
    ExceptAsyncIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} first
 * @param {!AsyncIterable<TSource>} second
 * @param {function(TSource, TSource): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function except(first, second, comparer = comparer_1.comparerAsync) {
    return new ExceptAsyncIterable(first, second, comparer);
}
exports.except = except;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2V4Y2VwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwyREFOMEI7QUFPMUIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBUDdDO0FBUTdELG1EQVBzQjtBQVF0QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7R0FFRztBQVRILHlCQUFrQyxTQUFRLDhCQUF3QjtJQWNsRTs7OztPQUlHO0lBYkQsWUFlSSxLQWQ2QixFQWU3QixNQWQ4QixFQWU5QixRQWRnRTtRQWVsRSxLQWRLLEVBQUUsQ0FBQztRQWVSLElBZEksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBZXBCLElBZEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBZXRCLElBZEksQ0FBQyxTQUFTLEdBQUUsUUFBUyxDQUFDO0lBZTVCLENBQUM7SUFDSDs7T0FFRztJQWZELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFpQjNCLElBQUksd0JBaEJELENBQUEsR0FBSSxHQUFFLEVBQUcsQ0FBQztRQWlCYixHQWhCRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsc0JBQUcsQ0FBQSxVQUFXLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFpQjFDLEdBaEJHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBaUJ2QixDQWhCQztRQWtCRCxHQWhCRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsc0JBQUcsQ0FBQSxTQUFVLElBQUcsSUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUU7WUFpQnhDLEVBQUUsQ0FBQyxDQWhCQyxNQUFLLGdDQUFrQixDQUFDLEdBQUcsRUFBQyxTQUFVLEVBQUMsSUFBSyxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQkFpQm5FLEdBaEJHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQWlCcEIsTUFoQkssU0FBVSxDQUFDO1lBaUJsQixDQWhCQztRQWlCSCxDQWhCQztJQWlCSCxDQWhCQztDQUNIO0FBa0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDckMsc0NBQXNDO0lBQ3RDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdEMsc0VBQXNFO0lBQ3RFLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQS9CSCxnQkFpQ0ksS0FoQzZCLEVBaUM3QixNQWhDOEIsRUFpQzlCLFdBaENrRSx3QkFBYztJQWlDbEYsTUFoQ00sQ0FBQSxJQUFJLG1CQUFvQixDQUFVLEtBQUssRUFBQyxNQUFPLEVBQUMsUUFBUyxDQUFDLENBQUM7QUFpQ25FLENBaENDO0FBTEQsd0JBS0MiLCJmaWxlIjoiZXhjZXB0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBhcnJheUluZGV4T2ZBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5hcnJheWluZGV4b2ZcIik7XG5pbXBvcnQgeyBjb21wYXJlckFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMyA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuY29tcGFyZXJcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIEV4Y2VwdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9maXJzdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3NlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IGZpcnN0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzZWNvbmRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29tcGFyZXJcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBmaXJzdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHNlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2ZpcnN0ID0gZmlyc3Q7XG4gICAgdGhpcy5fc2Vjb25kID0gc2Vjb25kO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFycmF5PD8+fSAqLyBtYXAgPSBbXTtcbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIHNlY29uZEl0ZW0gb2YgdGhpcy5fc2Vjb25kKSB7XG4gICAgICBtYXAucHVzaChzZWNvbmRJdGVtKTtcbiAgICB9XG5cbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGZpcnN0SXRlbSBvZiB0aGlzLl9maXJzdCkge1xuICAgICAgaWYgKGF3YWl0IGFycmF5SW5kZXhPZkFzeW5jKG1hcCwgZmlyc3RJdGVtLCB0aGlzLl9jb21wYXJlcikgPT09IC0xKSB7XG4gICAgICAgIG1hcC5wdXNoKGZpcnN0SXRlbSk7XG4gICAgICAgIHlpZWxkIGZpcnN0SXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRXhjZXB0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkV4Y2VwdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9maXJzdDtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeGNlcHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc2Vjb25kO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuRXhjZXB0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBmaXJzdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPik9fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleGNlcHQ8VFNvdXJjZT4oXG4gICAgZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2Vjb25kOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4gPSBjb21wYXJlckFzeW5jKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEV4Y2VwdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oZmlyc3QsIHNlY29uZCwgY29tcGFyZXIpO1xufVxuIl19