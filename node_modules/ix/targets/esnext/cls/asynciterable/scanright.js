goog.module('targets.esnext.cls.asynciterable.scanright'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/scanright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var toarray_1 = goog.require('targets.esnext.cls.asynciterable.toarray');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.toarray");
/**
 * @template T, R
 */
class ScanRightAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<T>} source
     * @param {function((T|R), T, number): (R|!Promise<R>)} fn
     * @param {...(T|R)} args
     */
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    /**
     * @return {!AsyncIterableIterator<R>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {boolean} */ hasValue = false;
        const /** @type {!Array<T>} */ source = await toarray_1.toArray(this._source);
        for (let /** @type {number} */ offset = source.length - 1; offset >= 0; offset--) {
            const /** @type {T} */ item = source[offset];
            if (hasValue || (hasValue = this._hasSeed)) {
                this._seed = await this._fn(/** @type {R} */ (this._seed), item, offset);
                yield this._seed;
            }
            else {
                this._seed = item;
                hasValue = true;
            }
        }
    }
}
function ScanRightAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<T>} */
    ScanRightAsyncIterable.prototype._source;
    /** @type {function((T|R), T, number): (R|!Promise<R>)} */
    ScanRightAsyncIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanRightAsyncIterable.prototype._seed;
    /** @type {boolean} */
    ScanRightAsyncIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(T|R)>}
 */
function scanRight(source, accumulator, ...args) {
    return new ScanRightAsyncIterable(source, accumulator, ...args);
}
exports.scanRight = scanRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NjYW5yaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCx1Q0FOZ0I7QUFPaEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7O0dBRUc7QUFSSCw0QkFBa0MsU0FBUSw4QkFBa0I7SUFjNUQ7Ozs7T0FJRztJQVpELFlBY0ksTUFid0IsRUFjeEIsRUFidUQsRUFjdkQsR0FiRyxJQUFlO1FBY3BCLEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsSUFiSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7UUFjZCxJQWJJLENBQUMsUUFBUSxHQUFFLElBQUssQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDO1FBY2xDLElBYkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBY3ZCLENBQUM7SUFDSDs7T0FFRztJQWRELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFnQjNCLElBQUksc0JBZkQsQ0FBQSxRQUFTLEdBQUUsS0FBTSxDQUFDO1FBZ0JyQixNQUFNLHdCQWZELENBQUEsTUFBTyxHQUFFLE1BQU0saUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFnQjNDLEdBQUcsQ0FBQyxDQWZDLElBQUEscUJBQUcsQ0FBQSxNQUFPLEdBQUUsTUFBTyxDQUFDLE1BQU0sR0FBRSxDQUFFLEVBQUMsTUFBTyxJQUFHLENBQUUsRUFBQyxNQUFPLEVBQUUsRUFBQyxDQUFFO1lBZ0IzRCxNQUFNLGdCQWZELENBQUEsSUFBSyxHQUFFLE1BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQWdCNUIsRUFBRSxDQUFDLENBZkMsUUFBUSxJQUFHLENBQUUsUUFBUSxHQUFFLElBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBZ0IzQyxJQWZJLENBQUMsS0FBSyxHQUFFLE1BQU0sSUFBSyxDQUFDLEdBQUcsQ0FBQSxnQkFBQSxDQUFBLENBQUksSUFBSSxDQUFDLEtBQUEsQ0FBSyxFQUFDLElBQUssRUFBQyxNQUFPLENBQUMsQ0FBQztnQkFnQnpELE1BZkssSUFBSyxDQUFDLEtBQUssQ0FBQztZQWdCbkIsQ0FmQztZQUFBLElBQUssQ0FBQSxDQUFFO2dCQWdCTixJQWZJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztnQkFnQmxCLFFBZlEsR0FBRSxJQUFLLENBQUM7WUFnQmxCLENBZkM7UUFnQkgsQ0FmQztJQWdCSCxDQWZDO0NBQ0g7QUFpQkE7SUFDQSxnQ0FBZ0M7SUFDaEMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN6QywwREFBMEQ7SUFDMUQsc0JBQXNCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUNyQyxvQkFBb0I7SUFDcEIsc0JBQXNCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUN2QyxzQkFBc0I7SUFDdEIsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUMxQyxDQUFDO0FBVUQ7Ozs7OztHQU1HO0FBakNILG1CQW1DSSxNQWxDd0IsRUFtQ3hCLFdBbENvRSxFQW1DcEUsR0FsQ0csSUFBZTtJQW1DcEIsTUFsQ00sQ0FBQSxJQUFJLHNCQUF1QixDQUFDLE1BQU0sRUFBQyxXQUFZLEVBQUMsR0FBSSxJQUFJLENBQUMsQ0FBQztBQW1DbEUsQ0FsQ0M7QUFMRCw4QkFLQyIsImZpbGUiOiJzY2FucmlnaHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3RvYXJyYXknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS50b2FycmF5XCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICovXG5jbGFzcyBTY2FuUmlnaHRBc3luY0l0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8Uj4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+O1xucHJpdmF0ZSBfZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPjtcbnByaXZhdGUgX3NlZWQ/OiBUIHwgUjtcbnByaXZhdGUgX2hhc1NlZWQ6IGJvb2xlYW47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogKFJ8IVByb21pc2U8Uj4pfSBmblxuICogQHBhcmFtIHsuLi4oVHxSKX0gYXJnc1xuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICAgIGZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgICAuLi5hcmdzOiAoVCB8IFIpW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICAgIHRoaXMuX2hhc1NlZWQgPSBhcmdzLmxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLl9zZWVkID0gYXJnc1swXTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFI+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFycmF5PFQ+fSAqLyBzb3VyY2UgPSBhd2FpdCB0b0FycmF5KHRoaXMuX3NvdXJjZSk7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIG9mZnNldCA9IHNvdXJjZS5sZW5ndGggLSAxOyBvZmZzZXQgPj0gMDsgb2Zmc2V0LS0pIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7VH0gKi8gaXRlbSA9IHNvdXJjZVtvZmZzZXRdO1xuICAgICAgaWYgKGhhc1ZhbHVlIHx8IChoYXNWYWx1ZSA9IHRoaXMuX2hhc1NlZWQpKSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBhd2FpdCB0aGlzLl9mbiggLyoqIEB0eXBlIHtSfSAqLygoPFI+dGhpcy5fc2VlZCkpLCBpdGVtLCBvZmZzZXQpO1xuICAgICAgICB5aWVsZCB0aGlzLl9zZWVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGl0ZW07XG4gICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2NhblJpZ2h0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUPn0gKi9cblNjYW5SaWdodEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiAoUnwhUHJvbWlzZTxSPil9ICovXG5TY2FuUmlnaHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG4vKiogQHR5cGUgeyhUfFIpfSAqL1xuU2NhblJpZ2h0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NlZWQ7XG4vKiogQHR5cGUge2Jvb2xlYW59ICovXG5TY2FuUmlnaHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5faGFzU2VlZDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCB8IFByb21pc2U8VD4pOiBBc3luY0l0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gIHNlZWQ6IFIpOiBBc3luY0l0ZXJhYmxlWDxSPjtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogKFJ8IVByb21pc2U8Uj4pfSBhY2N1bXVsYXRvclxuICogQHBhcmFtIHsuLi4oVHxSKX0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8KFR8Uik+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgYWNjdW11bGF0b3I6IChhY2M6IFQgfCBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogQXN5bmNJdGVyYWJsZVg8VCB8IFI+IHtcbiAgcmV0dXJuIG5ldyBTY2FuUmlnaHRBc3luY0l0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19