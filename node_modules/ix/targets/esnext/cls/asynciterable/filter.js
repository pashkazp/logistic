goog.module('targets.esnext.cls.asynciterable.filter'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/filter.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.esnext.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource
 */
class FilterAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
     * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
     */
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {number} */ i = 0;
        for await (let /** @type {TSource} */ item of ((this._source))) {
            if (await this._predicate(item, i++)) {
                yield item;
            }
        }
    }
}
function FilterAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} */
    FilterAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (boolean|!Promise<boolean>)} */
    FilterAsyncIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
 * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function filter(source, predicate, thisArg) {
    return new FilterAsyncIterable(source, bindcallback_1.bindCallback(predicate, thisArg, 2));
}
exports.filter = filter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwyREFOcUI7QUFPckIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7O0dBRUc7QUFSSCx5QkFBa0MsU0FBUSw4QkFBd0I7SUFZbEU7OztPQUdHO0lBWEQsWUFhRSxNQVp5RSxFQWF6RSxTQVp3RTtRQWF4RSxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDO0lBYTlCLENBQUM7SUFDSDs7T0FFRztJQWJELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFlM0IsSUFBSSxxQkFkRCxDQUFBLENBQUUsR0FBRSxDQUFFLENBQUM7UUFlVixHQWRHLENBQUEsS0FBTSxDQUFOLENBQVEsSUFBQSxzQkFBRyxDQUFBLElBQUssSUFBQSxDQUE0QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBRTtZQWU5RCxFQUFFLENBQUMsQ0FkQyxNQUFLLElBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQWVyQyxNQWRLLElBQUssQ0FBQztZQWViLENBZEM7UUFlSCxDQWRDO0lBZUgsQ0FkQztDQUNIO0FBZ0JBO0lBQ0EsbUZBQW1GO0lBQ25GLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdEMscUVBQXFFO0lBQ3JFLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDekMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQTNCSCxnQkE2QkksTUE1QnlFLEVBNkJ6RSxTQTVCd0UsRUE2QnhFLE9BNUJhO0lBNkJmLE1BNUJNLENBQUEsSUFBSSxtQkFBb0IsQ0FBVSxNQUFNLEVBQUMsMkJBQWEsQ0FBQyxTQUFTLEVBQUMsT0FBUSxFQUFDLENBQUUsQ0FBQyxDQUFDLENBQUM7QUE2QnZGLENBNUJDO0FBTEQsd0JBS0MiLCJmaWxlIjoiZmlsdGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYmluZGNhbGxiYWNrXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBGaWx0ZXJBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4+IHwgQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3ByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHsoIUl0ZXJhYmxlPChUU291cmNlfCFQcm9taXNlTGlrZTxUU291cmNlPik+fCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KX0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gcHJlZGljYXRlXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZSB8IFByb21pc2VMaWtlPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovKCggPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KHRoaXMuX3NvdXJjZSkpKSkge1xuICAgICAgaWYgKGF3YWl0IHRoaXMuX3ByZWRpY2F0ZShpdGVtLCBpKyspKSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEZpbHRlckFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7KCFJdGVyYWJsZTwoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pPnwhQXN5bmNJdGVyYWJsZTxUU291cmNlPil9ICovXG5GaWx0ZXJBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9ICovXG5GaWx0ZXJBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fcHJlZGljYXRlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyghSXRlcmFibGU8KFRTb3VyY2V8IVByb21pc2VMaWtlPFRTb3VyY2U+KT58IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4pfSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBwcmVkaWNhdGVcbiAqIEBwYXJhbSB7Pz19IHRoaXNBcmdcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZSB8IFByb21pc2VMaWtlPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IFByb21pc2U8Ym9vbGVhbj4gfCBib29sZWFuLFxuICAgIHRoaXNBcmc/OiBhbnkpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRmlsdGVyQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGJpbmRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDIpKTtcbn1cbiJdfQ==