goog.module('targets.esnext.cls.asynciterable.buffer'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/buffer.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class BufferAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     * @param {number} skip
     */
    constructor(source, count, skip) {
        super();
        this._source = source;
        this._count = count;
        this._skip = skip;
    }
    /**
     * @return {!AsyncIterableIterator<!Array<TSource>>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {!Array<!Array<TSource>>} */ buffers = [], /** @type {number} */ i = 0;
        for await (let /** @type {TSource} */ item of this._source) {
            if (i % this._skip === 0) {
                buffers.push([]);
            }
            for (let /** @type {!Array<TSource>} */ buffer of buffers) {
                buffer.push(item);
            }
            if (buffers.length > 0 && buffers[0].length === this._count) {
                yield ((buffers.shift()));
            }
            i++;
        }
        while (buffers.length > 0) {
            yield ((buffers.shift()));
        }
    }
}
function BufferAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    BufferAsyncIterable.prototype._source;
    /** @type {number} */
    BufferAsyncIterable.prototype._count;
    /** @type {number} */
    BufferAsyncIterable.prototype._skip;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @param {number=} skip
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!Array<TSource>>}
 */
function buffer(source, count, skip) {
    if (skip == null) {
        skip = count;
    }
    return new BufferAsyncIterable(source, count, skip);
}
exports.buffer = buffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2J1ZmZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgseUJBQWtDLFNBQVEsOEJBQTBCO0lBWXBFOzs7O09BSUc7SUFYRCxZQWFJLE1BWjhCLEVBYTlCLEtBWmEsRUFhYixJQVpZO1FBYVosS0FaSyxFQUFFLENBQUM7UUFhVixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWFwQixJQVpJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztJQWFwQixDQUFDO0lBQ0g7O09BRUc7SUFiRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBZ0IzQixJQUFJLHNDQWRELENBQUEsT0FBUSxHQUFlLEVBQUcsRUFBQSxxQkFBQyxDQUFBLENBQUcsR0FBRSxDQUFFLENBQUM7UUFldEMsR0FkRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFlcEMsRUFBRSxDQUFDLENBZEMsQ0FBQyxHQUFFLElBQUssQ0FBQyxLQUFLLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTtnQkFlekIsT0FkTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztZQWVuQixDQWRDO1lBZ0JELEdBQUcsQ0FBQyxDQWRDLElBQUEsOEJBQUcsQ0FBQSxNQUFPLElBQUcsT0FBUSxDQUFDLENBQUEsQ0FBRTtnQkFlM0IsTUFkTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQWVwQixDQWRDO1lBZ0JELEVBQUUsQ0FBQyxDQWRDLE9BQU8sQ0FBQyxNQUFNLEdBQUUsQ0FBRSxJQUFHLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUksSUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUU7Z0JBZTVELE1BQW9DLENBQUMsQ0FkaEMsT0FBUSxDQUFDLEtBQUssRUFBQSxDQUFBLENBQUcsQ0FBQztZQWV6QixDQWRDO1lBZ0JELENBZEMsRUFBRSxDQUFDO1FBZU4sQ0FkQztRQWdCRCxPQWRPLE9BQU8sQ0FBQyxNQUFNLEdBQUUsQ0FBRSxFQUFDLENBQUU7WUFlMUIsTUFBb0MsQ0FBQyxDQWRoQyxPQUFRLENBQUMsS0FBSyxFQUFBLENBQUEsQ0FBRyxDQUFDO1FBZXpCLENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxzQ0FBc0M7SUFDdEMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN0QyxxQkFBcUI7SUFDckIsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNyQyxxQkFBcUI7SUFDckIsbUJBQW1CLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztBQUNwQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBN0JILGdCQStCSSxNQTlCOEIsRUErQjlCLEtBOUJhLEVBK0JiLElBOUJhO0lBK0JmLEVBQUUsQ0FBQyxDQTlCQyxJQUFJLElBQUcsSUFBSyxDQUFDLENBQUEsQ0FBRTtRQUFBLElBQUssR0FBRSxLQUFNLENBQUM7SUFBQSxDQUFFO0lBK0JuQyxNQTlCTSxDQUFBLElBQUksbUJBQW9CLENBQVUsTUFBTSxFQUFDLEtBQU0sRUFBQyxJQUFLLENBQUMsQ0FBQztBQStCL0QsQ0E5QkM7QUFORCx3QkFNQyIsImZpbGUiOiJidWZmZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgQnVmZmVyQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfY291bnQ6IG51bWJlcjtcbnByaXZhdGUgX3NraXA6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBza2lwXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgY291bnQ6IG51bWJlcixcbiAgICAgIHNraXA6IG51bWJlcikge1xuICAgICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgICB0aGlzLl9za2lwID0gc2tpcDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPCFBcnJheTxUU291cmNlPj59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuXG4gICAgbGV0IC8qKiBAdHlwZSB7IUFycmF5PCFBcnJheTxUU291cmNlPj59ICovIGJ1ZmZlcnM6IFRTb3VyY2VbXVtdID0gW10sIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyAgaSA9IDA7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKGkgJSB0aGlzLl9za2lwID09PSAwKSB7XG4gICAgICAgIGJ1ZmZlcnMucHVzaChbXSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7IUFycmF5PFRTb3VyY2U+fSAqLyBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICBidWZmZXIucHVzaChpdGVtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJ1ZmZlcnMubGVuZ3RoID4gMCAmJiBidWZmZXJzWzBdLmxlbmd0aCA9PT0gdGhpcy5fY291bnQpIHtcbiAgICAgICAgeWllbGQgLyoqIEB0eXBlIHshQXJyYXk8VFNvdXJjZT59ICovKCggYnVmZmVycy5zaGlmdCgpKSk7XG4gICAgICB9XG5cbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICB3aGlsZSAoYnVmZmVycy5sZW5ndGggPiAwKSB7XG4gICAgICB5aWVsZCAvKiogQHR5cGUgeyFBcnJheTxUU291cmNlPn0gKi8oKCBidWZmZXJzLnNoaWZ0KCkpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQnVmZmVyQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkJ1ZmZlckFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cbkJ1ZmZlckFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb3VudDtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuQnVmZmVyQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NraXA7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcGFyYW0ge251bWJlcj19IHNraXBcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPCFBcnJheTxUU291cmNlPj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXI8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGNvdW50OiBudW1iZXIsXG4gICAgc2tpcD86IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xuICBpZiAoc2tpcCA9PSBudWxsKSB7IHNraXAgPSBjb3VudDsgfVxuICByZXR1cm4gbmV3IEJ1ZmZlckFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBjb3VudCwgc2tpcCk7XG59XG4iXX0=