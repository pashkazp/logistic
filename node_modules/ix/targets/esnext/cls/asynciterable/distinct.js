goog.module('targets.esnext.cls.asynciterable.distinct'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/distinct.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var arrayindexof_1 = goog.require('targets.esnext.cls.internal.arrayindexof');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.esnext.cls.internal.comparer');
const tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource, TKey
 */
class DistinctAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TKey, TKey): (boolean|!Promise<boolean>)} comparer
     */
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {!Array<?>} */ set = [];
        for await (let /** @type {TSource} */ item of ((this._source))) {
            let /** @type {TKey} */ key = await this._keySelector(item);
            if (await arrayindexof_1.arrayIndexOfAsync(set, key, this._comparer) === -1) {
                set.push(key);
                yield item;
            }
        }
    }
}
function DistinctAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!AsyncIterable<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>)} */
    DistinctAsyncIterable.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    DistinctAsyncIterable.prototype._keySelector;
    /** @type {function(TKey, TKey): (boolean|!Promise<boolean>)} */
    DistinctAsyncIterable.prototype._comparer;
}
/**
 * @template TSource, TKey
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)=} keySelector
 * @param {function(TKey, TKey): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function distinct(source, keySelector = identity_1.identityAsync, comparer = comparer_1.comparerAsync) {
    return new DistinctAsyncIterable(source, keySelector, comparer);
}
exports.distinct = distinct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2Rpc3RpbmN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELG1EQU5zQjtBQU90QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FQakQ7QUFRckQsMkRBUDBCO0FBUTFCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQVI3QztBQVM3RCxtREFSc0I7QUFTdEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFWSCwyQkFBMEMsU0FBUSw4QkFBd0I7SUFlMUU7Ozs7T0FJRztJQWRELFlBZ0JJLE1BZjhCLEVBZ0I5QixXQWZxRCxFQWdCckQsUUFmMEQ7UUFnQjVELEtBZkssRUFBRSxDQUFDO1FBZ0JSLElBZkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBZ0J0QixJQWZJLENBQUMsWUFBWSxHQUFFLFdBQVksQ0FBQztRQWdCaEMsSUFmSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFnQjVCLENBQUM7SUFDSDs7T0FFRztJQWhCRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBa0IzQixJQUFJLHdCQWpCRCxDQUFBLEdBQUksR0FBRSxFQUFHLENBQUM7UUFtQmIsR0FqQkcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFBLENBQTRCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFFO1lBa0I5RCxJQUFJLG1CQWpCRCxDQUFBLEdBQUksR0FBRSxNQUFNLElBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFrQnhDLEVBQUUsQ0FBQyxDQWpCQyxNQUFLLGdDQUFrQixDQUFDLEdBQUcsRUFBQyxHQUFJLEVBQUMsSUFBSyxDQUFDLFNBQVMsQ0FBQyxLQUFJLENBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQkFrQjdELEdBakJHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQWtCZCxNQWpCSyxJQUFLLENBQUM7WUFrQmIsQ0FqQkM7UUFrQkgsQ0FqQkM7SUFrQkgsQ0FqQkM7Q0FDSDtBQW1CQTtJQUNBLG1GQUFtRjtJQUNuRixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3hDLHVEQUF1RDtJQUN2RCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQzdDLGdFQUFnRTtJQUNoRSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQzFDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFoQ0gsa0JBa0NJLE1BakM4QixFQWtDOUIsY0FqQ3VELHdCQUFjLEVBa0NyRSxXQWpDNEQsd0JBQWM7SUFrQzVFLE1BakNNLENBQUEsSUFBSSxxQkFBc0IsQ0FBZ0IsTUFBTSxFQUFDLFdBQVksRUFBQyxRQUFTLENBQUMsQ0FBQztBQWtDakYsQ0FqQ0M7QUFMRCw0QkFLQyIsImZpbGUiOiJkaXN0aW5jdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgaWRlbnRpdHlBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMyA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYXJyYXlpbmRleG9mXCIpO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzQgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICovXG5jbGFzcyBEaXN0aW5jdEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZSA8VFNvdXJjZT4+IHwgQXN5bmNJdGVyYWJsZSA8VFNvdXJjZT47XG5wcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbnByaXZhdGUgX2NvbXBhcmVyOiAoeDogVEtleSwgeTogVEtleSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgICAgY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIHNldCA9IFtdO1xuXG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovKCggPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KHRoaXMuX3NvdXJjZSkpKSkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7VEtleX0gKi8ga2V5ID0gYXdhaXQgdGhpcy5fa2V5U2VsZWN0b3IoaXRlbSk7XG4gICAgICBpZiAoYXdhaXQgYXJyYXlJbmRleE9mQXN5bmMoc2V0LCBrZXksIHRoaXMuX2NvbXBhcmVyKSA9PT0gLTEpIHtcbiAgICAgICAgc2V0LnB1c2goa2V5KTtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRGlzdGluY3RBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyghQXN5bmNJdGVyYWJsZTxUU291cmNlPnwhSXRlcmFibGU8KFRTb3VyY2V8IVByb21pc2VMaWtlPFRTb3VyY2U+KT4pfSAqL1xuRGlzdGluY3RBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSAqL1xuRGlzdGluY3RBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fa2V5U2VsZWN0b3I7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9ICovXG5EaXN0aW5jdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb21wYXJlcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pik9fSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3Q8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+ID0gaWRlbnRpdHlBc3luYyxcbiAgICBjb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEaXN0aW5jdEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVEtleT4oc291cmNlLCBrZXlTZWxlY3RvciwgY29tcGFyZXIpO1xufVxuIl19