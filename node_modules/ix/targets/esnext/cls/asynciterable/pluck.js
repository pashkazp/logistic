goog.module('targets.esnext.cls.asynciterable.pluck'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/pluck.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var map_1 = goog.require('targets.esnext.cls.asynciterable.map');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.map");
/**
 * @param {!Array<string>} props
 * @param {number} length
 * @return {function(?): ?}
 */
function plucker(props, length) {
    const /** @type {function(?): ?} */ mapper = (x) => {
        let /** @type {?} */ currentProp = x;
        for (let /** @type {number} */ i = 0; i < length; i++) {
            const /** @type {?} */ p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {...string} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function pluck(source, ...args) {
    return map_1.map(source, /** @type {function(TSource): TResult} */ ((plucker(args, args.length))));
}
exports.pluck = pluck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3BsdWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFHSCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsK0JBTlk7QUFPWixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7OztHQUlHO0FBVkgsaUJBQWlCLEtBQWUsRUFBQyxNQUFlO0lBWTlDLE1BQU0sNkJBWEQsQ0FBQSxNQUFPLEdBQUUsQ0FBRSxDQUFNO1FBWXBCLElBQUksZ0JBWEQsQ0FBQSxXQUFZLEdBQUUsQ0FBRSxDQUFDO1FBWXBCLEdBQUcsQ0FBQyxDQVhDLElBQUEscUJBQUcsQ0FBQSxDQUFFLEdBQUUsQ0FBRSxFQUFDLENBQUUsR0FBRSxNQUFPLEVBQUMsQ0FBRSxFQUFFLEVBQUMsQ0FBRTtZQVloQyxNQUFNLGdCQVhELENBQUEsQ0FBRSxHQUFFLFdBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQVloQyxFQUFFLENBQUMsQ0FYQyxPQUFNLENBQUUsS0FBSSxXQUFZLENBQUMsQ0FBQSxDQUFFO2dCQVk3QixXQVhXLEdBQUUsQ0FBRSxDQUFDO1lBWWxCLENBWEM7WUFBQSxJQUFLLENBQUEsQ0FBRTtnQkFZTixNQVhNLENBQUEsU0FBVSxDQUFDO1lBWW5CLENBWEM7UUFZSCxDQVhDO1FBWUQsTUFYTSxDQUFBLFdBQVksQ0FBQztJQVlyQixDQVhDLENBQUM7SUFhRixNQVhNLENBQUEsTUFBTyxDQUFDO0FBWWhCLENBQUM7QUFDRDs7Ozs7R0FLRztBQWZILGVBaUJFLE1BaEI4QixFQWlCOUIsR0FoQkcsSUFBYztJQWlCakIsTUFoQk0sQ0FBQSxTQUFJLENBQW1CLE1BQU0sRUFBQSx5Q0FBQSxDQUFBLENBQUEsQ0FBQyxPQUFRLENBQUMsSUFBSSxFQUFDLElBQUssQ0FBQyxNQUFNLENBQUksQ0FBMkIsQ0FBUSxDQUFDLENBQUM7QUFpQnpHLENBaEJDO0FBSkQsc0JBSUMiLCJmaWxlIjoicGx1Y2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUubWFwXCIpO1xuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBwcm9wc1xuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7ZnVuY3Rpb24oPyk6ID99XG4gKi9cbmZ1bmN0aW9uIHBsdWNrZXIocHJvcHM6IHN0cmluZ1tdLCBsZW5ndGg6IG51bWJlcik6ICh4OiBhbnkpID0+IGFueSB7XG4gIGNvbnN0IC8qKiBAdHlwZSB7ZnVuY3Rpb24oPyk6ID99ICovIG1hcHBlciA9ICh4OiBhbnkpID0+IHtcbiAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBjdXJyZW50UHJvcCA9IHg7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7P30gKi8gcCA9IGN1cnJlbnRQcm9wW3Byb3BzW2ldXTtcbiAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY3VycmVudFByb3AgPSBwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRQcm9wO1xuICB9O1xuXG4gIHJldHVybiBtYXBwZXI7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7Li4uc3RyaW5nfSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBsdWNrPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gIC4uLmFyZ3M6IHN0cmluZ1tdKTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbWFwPFRTb3VyY2UsIFRSZXN1bHQ+KHNvdXJjZSwgLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlKTogVFJlc3VsdH0gKi8oKCAvKiogQHR5cGUgez99ICovKCggcGx1Y2tlcihhcmdzLCBhcmdzLmxlbmd0aCkgYXMgYW55KSkgYXMgKHZhbHVlOiBUU291cmNlKSA9PiBUUmVzdWx0KSkpO1xufVxuIl19