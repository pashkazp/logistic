goog.module('targets.esnext.cls.asynciterable.zip'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/zip.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource, TResult
 */
class ZipIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} left
     * @param {!AsyncIterable<TSource>} right
     * @param {function(TSource, TSource): (TResult|!Promise<TResult>)} fn
     */
    constructor(left, right, fn) {
        super();
        this._left = left;
        this._right = right;
        this._fn = fn;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!AsyncIterator<TSource>} */ it1 = this._left[Symbol.asyncIterator]();
        const /** @type {!AsyncIterator<TSource>} */ it2 = this._right[Symbol.asyncIterator]();
        while (1) {
            const [next1, next2] = await Promise.all([it1.next(), it2.next()]);
            if (!next1.done && !next2.done) {
                yield await this._fn(next1.value, next2.value);
            }
            else {
                break;
            }
        }
    }
}
function ZipIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ZipIterable.prototype._left;
    /** @type {!AsyncIterable<TSource>} */
    ZipIterable.prototype._right;
    /** @type {function(TSource, TSource): (TResult|!Promise<TResult>)} */
    ZipIterable.prototype._fn;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} left
 * @param {!AsyncIterable<TSource>} right
 * @param {function(TSource, TSource): (TResult|!Promise<TResult>)} fn
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function zip(left, right, fn) {
    return new ZipIterable(left, right, fn);
}
exports.zip = zip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3ppcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgsaUJBQW1DLFNBQVEsOEJBQXdCO0lBWW5FOzs7O09BSUc7SUFYRCxZQWFJLElBWjRCLEVBYTVCLEtBWjZCLEVBYTdCLEVBWmlFO1FBYW5FLEtBWkssRUFBRSxDQUFDO1FBYVIsSUFaSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7UUFhbEIsSUFaSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFhcEIsSUFaSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7SUFhaEIsQ0FBQztJQUNIOztPQUVHO0lBYkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWUzQixNQUFNLHNDQWRELENBQUEsR0FBSSxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7UUFlL0MsTUFBTSxzQ0FkRCxDQUFBLEdBQUksR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBZWhELE9BZE8sQ0FBQyxFQUFDLENBQUU7WUFlVCxNQWRLLENBQUUsS0FBSyxFQUFDLEtBQU0sQ0FBQyxHQUFFLE1BQU0sT0FBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBQyxHQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBZW5FLEVBQUUsQ0FBQyxDQWRDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBRyxDQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFO2dCQWUvQixNQWRLLE1BQU0sSUFBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLEtBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQWVqRCxDQWRDO1lBQUEsSUFBSyxDQUFBLENBQUU7Z0JBZU4sS0FBSyxDQWRDO1lBZVIsQ0FkQztRQWVILENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxzQ0FBc0M7SUFDdEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDNUIsc0NBQXNDO0lBQ3RDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzdCLHNFQUFzRTtJQUN0RSxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUMxQixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBN0JILGFBK0JJLElBOUI0QixFQStCNUIsS0E5QjZCLEVBK0I3QixFQTlCaUU7SUErQm5FLE1BOUJNLENBQUEsSUFBSSxXQUFZLENBQW1CLElBQUksRUFBQyxLQUFNLEVBQUMsRUFBRyxDQUFDLENBQUM7QUErQjVELENBOUJDO0FBTEQsa0JBS0MiLCJmaWxlIjoiemlwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKi9cbmNsYXNzIFppcEl0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3JpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IGxlZnRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHJpZ2h0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9IGZuXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHJpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3JpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdDEgPSB0aGlzLl9sZWZ0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0MiA9IHRoaXMuX3JpZ2h0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBjb25zdCBbbmV4dDEsIG5leHQyXSA9IGF3YWl0IFByb21pc2UuYWxsKFtpdDEubmV4dCgpLCBpdDIubmV4dCgpXSk7XG4gICAgICBpZiAoIW5leHQxLmRvbmUgJiYgIW5leHQyLmRvbmUpIHtcbiAgICAgICAgeWllbGQgYXdhaXQgdGhpcy5fZm4obmV4dDEudmFsdWUsIG5leHQyLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBaaXBJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblppcEl0ZXJhYmxlLnByb3RvdHlwZS5fbGVmdDtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5aaXBJdGVyYWJsZS5wcm90b3R5cGUuX3JpZ2h0O1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKFRSZXN1bHR8IVByb21pc2U8VFJlc3VsdD4pfSAqL1xuWmlwSXRlcmFibGUucHJvdG90eXBlLl9mbjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gbGVmdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gcmlnaHRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gZm5cbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gemlwPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIGxlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgWmlwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4obGVmdCwgcmlnaHQsIGZuKTtcbn1cbiJdfQ==