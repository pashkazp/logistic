goog.module('targets.esnext.cls.asynciterable._extremaby'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/_extremaby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @ignore
 * @template T
 * @param {T} key
 * @param {T} minValue
 * @return {!Promise<number>}
 */
async function defaultCompareAsync(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
exports.defaultCompareAsync = defaultCompareAsync;
/**
 * @ignore
 * @template TSource, TKey
 */
class ExtremaByAsyncIterator extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keyFn
     * @param {function(TKey, TKey): (number|!Promise<number>)} cmp
     */
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {!Array<TSource>} */ result = [], /** @type {?} */ done, /** @type {?} */ next;
        const /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
        done = (next = await it.next()).done;
        if (done) {
            throw new Error('Sequence contains no elements');
        }
        let /** @type {TSource} */ current = next.value;
        let /** @type {TKey} */ resKey = await this._keyFn(current);
        done = (next = await it.next()).done;
        while (!done) {
            let /** @type {TSource} */ curr = next.value;
            let /** @type {TKey} */ key = await this._keyFn(curr);
            const /** @type {number} */ c = await this._cmp(key, resKey);
            if (c === 0) {
                result.push(curr);
            }
            else if (c > 0) {
                result = [curr];
                resKey = key;
            }
            done = (next = await it.next()).done;
        }
        yield* result;
    }
}
function ExtremaByAsyncIterator_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ExtremaByAsyncIterator.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    ExtremaByAsyncIterator.prototype._keyFn;
    /** @type {function(TKey, TKey): (number|!Promise<number>)} */
    ExtremaByAsyncIterator.prototype._cmp;
}
/**
 * @ignore
 * @template TSource, TKey
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)} keyFn
 * @param {function(TKey, TKey): (number|!Promise<number>)} cmp
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function extremaBy(source, keyFn, cmp) {
    return new ExtremaByAsyncIterator(source, keyFn, cmp);
}
exports.extremaBy = extremaBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL19leHRyZW1hYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7Ozs7O0dBTUc7QUFSRyxLQUFNLDhCQUFpQyxHQUFNLEVBQUMsUUFBWTtJQVU5RCxNQVRNLENBQUEsR0FBSSxHQUFFLFFBQVMsR0FBRSxDQUFFLEdBQUUsR0FBSSxHQUFFLFFBQVMsR0FBRSxDQUFFLENBQUMsR0FBRSxDQUFFLENBQUM7QUFVdEQsQ0FBQztBQVhELGtEQVdDO0FBQ0Q7OztHQUdHO0FBUkgsNEJBQTJDLFNBQVEsOEJBQXdCO0lBYTNFOzs7O09BSUc7SUFaRCxZQWNJLE1BYjhCLEVBYzlCLEtBYjJDLEVBYzNDLEdBYm1EO1FBY3JELEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsSUFiSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFjcEIsSUFiSSxDQUFDLElBQUksR0FBRSxHQUFJLENBQUM7SUFjbEIsQ0FBQztJQUNIOztPQUVHO0lBZEQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWdCM0IsSUFBSSw4QkFmRCxDQUFBLE1BQU8sR0FBYSxFQUFHLEVBQUEsZ0JBQUMsQ0FBQSxJQUFLLEVBQUEsZ0JBQUMsQ0FBQSxJQUFLLENBQUM7UUFnQnZDLE1BQU0sc0NBZkQsQ0FBQSxFQUFHLEdBQUUsSUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQWdCaEQsSUFmSSxHQUFFLENBQUUsSUFBSSxHQUFFLE1BQU0sRUFBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBZ0JyQyxFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsQ0FBQSxDQUFFO1lBZ0JULE1BZkssSUFBSSxLQUFNLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQWdCbkQsQ0FmQztRQWlCRCxJQUFJLHNCQWZELENBQUEsT0FBUSxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUM7UUFnQnpCLElBQUksbUJBZkQsQ0FBQSxNQUFPLEdBQUUsTUFBTSxJQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBZ0J4QyxJQWZJLEdBQUUsQ0FBRSxJQUFJLEdBQUUsTUFBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFnQnJDLE9BZk8sQ0FBQyxJQUFJLEVBQUMsQ0FBRTtZQWdCYixJQUFJLHNCQWZELENBQUEsSUFBSyxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUM7WUFnQnRCLElBQUksbUJBZkQsQ0FBQSxHQUFJLEdBQUUsTUFBTSxJQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBZ0JsQyxNQUFNLHFCQWZELENBQUEsQ0FBRSxHQUFFLE1BQU0sSUFBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUMsTUFBTyxDQUFDLENBQUM7WUFnQnZDLEVBQUUsQ0FBQyxDQWZDLENBQUMsS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO2dCQWdCWixNQWZNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBZ0JwQixDQWZDO1lBQUEsSUFBSyxDQUFBLEVBQUEsQ0FBQSxDQUFLLENBQUMsR0FBRSxDQUFFLENBQUMsQ0FBQSxDQUFFO2dCQWdCakIsTUFmTSxHQUFFLENBQUUsSUFBSSxDQUFDLENBQUM7Z0JBZ0JoQixNQWZNLEdBQUUsR0FBSSxDQUFDO1lBZ0JmLENBZkM7WUFnQkQsSUFmSSxHQUFFLENBQUUsSUFBSSxHQUFFLE1BQU0sRUFBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBZ0J2QyxDQWZDO1FBaUJELE9BZk0sTUFBTyxDQUFDO0lBZ0JoQixDQWZDO0NBQ0g7QUFpQkE7SUFDQSxzQ0FBc0M7SUFDdEMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN6Qyx1REFBdUQ7SUFDdkQsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUN4Qyw4REFBOEQ7SUFDOUQsc0JBQXNCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztBQUN0QyxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQTVCSCxtQkE4QkksTUE3QjhCLEVBOEI5QixLQTdCMkMsRUE4QjNDLEdBN0JtRDtJQThCckQsTUE3Qk0sQ0FBQSxJQUFJLHNCQUF1QixDQUFnQixNQUFNLEVBQUMsS0FBTSxFQUFDLEdBQUksQ0FBQyxDQUFDO0FBOEJ2RSxDQTdCQztBQUxELDhCQUtDIiwiZmlsZSI6Il9leHRyZW1hYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0ga2V5XG4gKiBAcGFyYW0ge1R9IG1pblZhbHVlXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxudW1iZXI+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZGVmYXVsdENvbXBhcmVBc3luYzxUPihrZXk6IFQsIG1pblZhbHVlOiBUKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgcmV0dXJuIGtleSA+IG1pblZhbHVlID8gMSA6IGtleSA8IG1pblZhbHVlID8gLTEgOiAwO1xufVxuLyoqXG4gKiBAaWdub3JlXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICovXG5jbGFzcyBFeHRyZW1hQnlBc3luY0l0ZXJhdG9yPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfa2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbnByaXZhdGUgX2NtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9IGtleUZuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pfSBjbXBcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgICAgY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5Rm4gPSBrZXlGbjtcbiAgICB0aGlzLl9jbXAgPSBjbXA7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFycmF5PFRTb3VyY2U+fSAqLyByZXN1bHQ6IFRTb3VyY2VbXSA9IFtdLCAvKiogQHR5cGUgez99ICovIGRvbmUsIC8qKiBAdHlwZSB7P30gKi8gbmV4dDtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICBkb25lID0gKG5leHQgPSBhd2FpdCBpdC5uZXh0KCkpLmRvbmU7XG4gICAgaWYgKGRvbmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2VxdWVuY2UgY29udGFpbnMgbm8gZWxlbWVudHMnKTtcbiAgICB9XG5cbiAgICBsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBjdXJyZW50ID0gbmV4dC52YWx1ZTtcbiAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyByZXNLZXkgPSBhd2FpdCB0aGlzLl9rZXlGbihjdXJyZW50KTtcbiAgICBkb25lID0gKG5leHQgPSBhd2FpdCBpdC5uZXh0KCkpLmRvbmU7XG4gICAgd2hpbGUgKCFkb25lKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBjdXJyID0gbmV4dC52YWx1ZTtcbiAgICAgIGxldCAvKiogQHR5cGUge1RLZXl9ICovIGtleSA9IGF3YWl0IHRoaXMuX2tleUZuKGN1cnIpO1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGMgPSBhd2FpdCB0aGlzLl9jbXAoa2V5LCByZXNLZXkpO1xuICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY3Vycik7XG4gICAgICB9IGVsc2UgaWYgKGMgPiAwKSB7XG4gICAgICAgIHJlc3VsdCA9IFtjdXJyXTtcbiAgICAgICAgcmVzS2V5ID0ga2V5O1xuICAgICAgfVxuICAgICAgZG9uZSA9IChuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lO1xuICAgIH1cblxuICAgIHlpZWxkKiByZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gRXh0cmVtYUJ5QXN5bmNJdGVyYXRvcl90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkV4dHJlbWFCeUFzeW5jSXRlcmF0b3IucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9ICovXG5FeHRyZW1hQnlBc3luY0l0ZXJhdG9yLnByb3RvdHlwZS5fa2V5Rm47XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pfSAqL1xuRXh0cmVtYUJ5QXN5bmNJdGVyYXRvci5wcm90b3R5cGUuX2NtcDtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9IGtleUZuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pfSBjbXBcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmVtYUJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeHRyZW1hQnlBc3luY0l0ZXJhdG9yPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5Rm4sIGNtcCk7XG59XG4iXX0=