goog.module('targets.esnext.cls.asynciterable.pairwise'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/pairwise.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class PairwiseAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<!Array<TSource>>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {TSource} */ value, /** @type {boolean} */ hasValue = false;
        for await (const /** @type {TSource} */ item of this._source) {
            if (!hasValue) {
                hasValue = true;
            }
            else {
                yield [/** @type {TSource} */ ((value)), item];
            }
            value = item;
        }
    }
}
function PairwiseAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    PairwiseAsyncIterable.prototype._source;
}
/**
 * Returns a new sequence that triggers on the second and subsequent triggerings of the input sequence.
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!Array<TSource>>}
 */
function pairwise(source) {
    return new PairwiseAsyncIterable(source);
}
exports.pairwise = pairwise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3BhaXJ3aXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCwyQkFBb0MsU0FBUSw4QkFBMEI7SUFVdEU7O09BRUc7SUFURCxZQUFZLE1BQThCO1FBV3hDLEtBVkssRUFBRSxDQUFDO1FBV1IsSUFWSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7SUFXeEIsQ0FBQztJQUNIOztPQUVHO0lBWEQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWEzQixJQUFJLHNCQVpELENBQUEsS0FBMkIsRUFBQSxzQkFBQyxDQUFBLFFBQVMsR0FBRSxLQUFNLENBQUM7UUFhakQsR0FaRyxDQUFBLEtBQU0sQ0FBTixDQUFRLE1BQUEsc0JBQUssQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFhdEMsRUFBRSxDQUFDLENBWkMsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFFO2dCQWFkLFFBWlEsR0FBRSxJQUFLLENBQUM7WUFhbEIsQ0FaQztZQUFBLElBQUssQ0FBQSxDQUFFO2dCQWFOLE1BWkssQ0FBQSxzQkFBQSxDQUFBLENBQUEsQ0FBRSxLQUFBLENBQUEsQ0FBTSxFQUFDLElBQUssQ0FBQyxDQUFDO1lBYXZCLENBWkM7WUFhRCxLQVpLLEdBQUUsSUFBSyxDQUFDO1FBYWYsQ0FaQztJQWFILENBWkM7Q0FDSDtBQWNBO0lBQ0Esc0NBQXNDO0lBQ3RDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBakJILGtCQUFrQyxNQUE4QjtJQW1COUQsTUFsQk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBbUJwRCxDQWxCQztBQUZELDRCQUVDIiwiZmlsZSI6InBhaXJ3aXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFBhaXJ3aXNlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjwhQXJyYXk8VFNvdXJjZT4+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyB2YWx1ZTogVFNvdXJjZSB8IHVuZGVmaW5lZCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGZvciBhd2FpdCAoY29uc3QgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKCFoYXNWYWx1ZSkge1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5aWVsZCBbIC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8oKHZhbHVlKSksIGl0ZW1dO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBpdGVtO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBQYWlyd2lzZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5QYWlyd2lzZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBzZXF1ZW5jZSB0aGF0IHRyaWdnZXJzIG9uIHRoZSBzZWNvbmQgYW5kIHN1YnNlcXVlbnQgdHJpZ2dlcmluZ3Mgb2YgdGhlIGlucHV0IHNlcXVlbmNlLlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8IUFycmF5PFRTb3VyY2U+Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhaXJ3aXNlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xuICByZXR1cm4gbmV3IFBhaXJ3aXNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19