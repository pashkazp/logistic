goog.module('targets.esnext.cls.asynciterable.groupby'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/groupby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var _grouping_1 = goog.require('targets.esnext.cls.asynciterable._grouping');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._grouping");
/**
 * @template TKey, TValue
 */
class GroupedAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {TKey} key
     * @param {!Iterable<TValue>} source
     */
    constructor(key, source) {
        super();
        this.key = key;
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TValue>}
     */
    async *[Symbol.asyncIterator]() {
        for (let /** @type {TValue} */ item of this._source) {
            yield item;
        }
    }
}
exports.GroupedAsyncIterable = GroupedAsyncIterable;
function GroupedAsyncIterable_tsickle_Closure_declarations() {
    /** @type {TKey} */
    GroupedAsyncIterable.prototype.key;
    /** @type {!Iterable<TValue>} */
    GroupedAsyncIterable.prototype._source;
}
/**
 * @template TSource, TKey, TValue
 */
class GroupByAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TSource): (TValue|!Promise<TValue>)} elementSelector
     */
    constructor(source, keySelector, elementSelector) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._elementSelector = elementSelector;
    }
    /**
     * @return {!AsyncIterableIterator<!GroupedAsyncIterable<TKey, TValue>>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!Map<TKey, !Array<TValue>>} */ map = await _grouping_1.createGrouping(this._source, this._keySelector, this._elementSelector);
        for (let [key, values] of map) {
            yield new GroupedAsyncIterable(key, values);
        }
    }
}
exports.GroupByAsyncIterable = GroupByAsyncIterable;
function GroupByAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    GroupByAsyncIterable.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    GroupByAsyncIterable.prototype._keySelector;
    /** @type {function(TSource): (TValue|!Promise<TValue>)} */
    GroupByAsyncIterable.prototype._elementSelector;
}
/**
 * @template TSource, TKey, TValue
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
 * @param {function(TSource): (TValue|!Promise<TValue>)=} elementSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!GroupedAsyncIterable<TKey, TValue>>}
 */
function groupBy(source, keySelector, elementSelector = identity_1.identityAsync) {
    return new GroupByAsyncIterable(source, keySelector, elementSelector);
}
exports.groupBy = groupBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2dyb3VwYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsbURBTnNCO0FBT3RCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQVBqRDtBQVFyRCwyQ0FQdUI7QUFRdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDN0c7O0dBRUc7QUFUSCwwQkFBK0MsU0FBUSw4QkFBdUI7SUFhOUU7OztPQUdHO0lBWkQsWUFBWSxHQUFTLEVBQUMsTUFBeUI7UUFjN0MsS0FiSyxFQUFFLENBQUM7UUFjUixJQWJJLENBQUMsR0FBRyxHQUFFLEdBQUksQ0FBQztRQWNmLElBYkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBY3hCLENBQUM7SUFDSDs7T0FFRztJQWRELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFnQjNCLEdBQUcsQ0FBQyxDQWZDLElBQUEscUJBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFnQjlCLE1BZkssSUFBSyxDQUFDO1FBZ0JiLENBZkM7SUFnQkgsQ0FmQztDQUNIO0FBZkEsb0RBZUE7QUFpQkE7SUFDQSxtQkFBbUI7SUFDbkIsb0JBQW9CLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUNuQyxnQ0FBZ0M7SUFDaEMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUN2QyxDQUFDO0FBRUQ7O0dBRUc7QUF4QkgsMEJBQXdELFNBQVEsOEJBQW1EO0lBNkJuSDs7OztPQUlHO0lBNUJELFlBOEJJLE1BN0I4QixFQThCOUIsV0E3QnFELEVBOEJyRCxlQTdCNkQ7UUE4Qi9ELEtBN0JLLEVBQUUsQ0FBQztRQThCUixJQTdCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUE4QnRCLElBN0JJLENBQUMsWUFBWSxHQUFFLFdBQVksQ0FBQztRQThCaEMsSUE3QkksQ0FBQyxnQkFBZ0IsR0FBRSxlQUFnQixDQUFDO0lBOEIxQyxDQUFDO0lBQ0g7O09BRUc7SUE5QkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWdDM0IsTUFBTSx5Q0EvQkQsQ0FBQSxHQUFJLEdBQUUsTUFBTSwwQkFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSyxDQUFDLFlBQVksRUFBQyxJQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQWdDekYsR0FBRyxDQUFDLENBL0JDLElBQUcsQ0FBRSxHQUFHLEVBQUMsTUFBTyxDQUFDLElBQUcsR0FBSSxDQUFDLENBQUEsQ0FBRTtZQWdDOUIsTUEvQkssSUFBSSxvQkFBcUIsQ0FBQyxHQUFHLEVBQUMsTUFBTyxDQUFDLENBQUM7UUFnQzlDLENBL0JDO0lBZ0NILENBL0JDO0NBQ0g7QUFyQkEsb0RBcUJBO0FBaUNBO0lBQ0Esc0NBQXNDO0lBQ3RDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdkMsdURBQXVEO0lBQ3ZELG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7SUFDNUMsMkRBQTJEO0lBQzNELG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQztBQUNoRCxDQUFDO0FBVUQ7Ozs7OztHQU1HO0FBL0NILGlCQWlESSxNQWhEOEIsRUFpRDlCLFdBaERxRCxFQWlEckQsa0JBaEQrRCx3QkFBYztJQWtEL0UsTUFoRE0sQ0FBQSxJQUFJLG9CQUFxQixDQUF3QixNQUFNLEVBQUMsV0FBWSxFQUFDLGVBQWdCLENBQUMsQ0FBQztBQWlEL0YsQ0FoREM7QUFORCwwQkFNQyIsImZpbGUiOiJncm91cGJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBpZGVudGl0eUFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG5pbXBvcnQgeyBjcmVhdGVHcm91cGluZyB9IGZyb20gJy4vX2dyb3VwaW5nJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUuX2dyb3VwaW5nXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVEtleSwgVFZhbHVlXG4gKi9cbmV4cG9ydCBjbGFzcyBHcm91cGVkQXN5bmNJdGVyYWJsZTxUS2V5LCBUVmFsdWU+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFZhbHVlPiB7XG5wdWJsaWMgcmVhZG9ubHkga2V5OiBUS2V5O1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUVmFsdWU+O1xuLyoqXG4gKiBAcGFyYW0ge1RLZXl9IGtleVxuICogQHBhcmFtIHshSXRlcmFibGU8VFZhbHVlPn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKGtleTogVEtleSwgc291cmNlOiBJdGVyYWJsZTxUVmFsdWU+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUVmFsdWU+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RWYWx1ZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIHlpZWxkIGl0ZW07XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEdyb3VwZWRBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge1RLZXl9ICovXG5Hcm91cGVkQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUua2V5O1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFZhbHVlPn0gKi9cbkdyb3VwZWRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5LCBUVmFsdWVcbiAqL1xuZXhwb3J0IGNsYXNzIEdyb3VwQnlBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxHcm91cGVkQXN5bmNJdGVyYWJsZTxUS2V5LCBUVmFsdWU+PiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbnByaXZhdGUgX2VsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUgfCBQcm9taXNlPFRWYWx1ZT47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRWYWx1ZXwhUHJvbWlzZTxUVmFsdWU+KX0gZWxlbWVudFNlbGVjdG9yXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICBlbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlIHwgUHJvbWlzZTxUVmFsdWU+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjwhR3JvdXBlZEFzeW5jSXRlcmFibGU8VEtleSwgVFZhbHVlPj59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IU1hcDxUS2V5LCAhQXJyYXk8VFZhbHVlPj59ICovIG1hcCA9IGF3YWl0IGNyZWF0ZUdyb3VwaW5nKHRoaXMuX3NvdXJjZSwgdGhpcy5fa2V5U2VsZWN0b3IsIHRoaXMuX2VsZW1lbnRTZWxlY3Rvcik7XG4gICAgZm9yIChsZXQgW2tleSwgdmFsdWVzXSBvZiBtYXApIHtcbiAgICAgIHlpZWxkIG5ldyBHcm91cGVkQXN5bmNJdGVyYWJsZShrZXksIHZhbHVlcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEdyb3VwQnlBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuR3JvdXBCeUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9ICovXG5Hcm91cEJ5QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2tleVNlbGVjdG9yO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlKTogKFRWYWx1ZXwhUHJvbWlzZTxUVmFsdWU+KX0gKi9cbkdyb3VwQnlBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZWxlbWVudFNlbGVjdG9yO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5Pik6IEFzeW5jSXRlcmFibGVYPEdyb3VwZWRBc3luY0l0ZXJhYmxlPFRLZXksIFRTb3VyY2U+PjtcbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5PFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gIGVsZW1lbnRTZWxlY3Rvcj86ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlIHwgUHJvbWlzZTxUVmFsdWU+KTogQXN5bmNJdGVyYWJsZVg8R3JvdXBlZEFzeW5jSXRlcmFibGU8VEtleSwgVFZhbHVlPj47XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5LCBUVmFsdWVcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRWYWx1ZXwhUHJvbWlzZTxUVmFsdWU+KT19IGVsZW1lbnRTZWxlY3RvclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8IUdyb3VwZWRBc3luY0l0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBCeTxUU291cmNlLCBUS2V5LCBUVmFsdWU+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBlbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlIHwgUHJvbWlzZTxUVmFsdWU+ID0gaWRlbnRpdHlBc3luYyk6XG4gICAgQXN5bmNJdGVyYWJsZVg8R3JvdXBlZEFzeW5jSXRlcmFibGU8VEtleSwgVFZhbHVlPj4ge1xuICByZXR1cm4gbmV3IEdyb3VwQnlBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oc291cmNlLCBrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yKTtcbn1cbiJdfQ==