goog.module('targets.esnext.cls.asynciterable.debounce'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/debounce.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var foreach_1 = goog.require('targets.esnext.cls.asynciterable.foreach');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.foreach");
/**
 * @template TSource
 */
class DebounceAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} time
     */
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {boolean} */ noValue;
        let /** @type {TSource} */ lastItem;
        let /** @type {!Promise<TSource>} */ deferred;
        let /** @type {function((TSource|!PromiseLike<TSource>)): void} */ resolver;
        let /** @type {boolean} */ done = false;
        let /** @type {boolean} */ hasError = false;
        let /** @type {?} */ error;
        const /** @type {function(boolean): void} */ reset = (hasNoValue) => {
            noValue = hasNoValue;
            lastItem = undefined;
            deferred = new Promise(r => resolver = r);
        };
        const /** @type {function(): void} */ run = () => {
            if (lastItem === undefined) {
                noValue = true;
                return;
            }
            const /** @type {TSource} */ item = lastItem;
            const /** @type {function((TSource|!PromiseLike<TSource>)): void} */ res = resolver;
            reset(false);
            setTimeout(run, this._time);
            res(item);
        };
        reset(true);
        foreach_1.forEach(this._source, item => {
            lastItem = item;
            if (noValue) {
                run();
            }
        })
            .then(() => done = true)
            .catch(err => { hasError = true; error = err; });
        while (1) {
            if (done) {
                break;
            }
            if (hasError) {
                throw error;
            }
            yield await ((deferred));
        }
    }
}
function DebounceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    DebounceAsyncIterable.prototype._source;
    /** @type {number} */
    DebounceAsyncIterable.prototype._time;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} time
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}
exports.debounce = debounce;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2RlYm91bmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELHVDQU5nQjtBQU9oQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUMzRzs7R0FFRztBQVJILDJCQUFvQyxTQUFRLDhCQUF3QjtJQVlwRTs7O09BR0c7SUFYRCxZQUFZLE1BQThCLEVBQUMsSUFBYTtRQWF0RCxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDO0lBYXBCLENBQUM7SUFDSDs7T0FFRztJQWJELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFlM0IsSUFBSSxzQkFkRCxDQUFBLE9BQWlCLENBQUM7UUFlckIsSUFBSSxzQkFkRCxDQUFBLFFBQThCLENBQUM7UUFlbEMsSUFBSSxnQ0FkRCxDQUFBLFFBQTJCLENBQUM7UUFlL0IsSUFBSSw4REFkRCxDQUFBLFFBQXVFLENBQUM7UUFlM0UsSUFBSSxzQkFkRCxDQUFBLElBQUssR0FBVyxLQUFNLENBQUM7UUFlMUIsSUFBSSxzQkFkRCxDQUFBLFFBQVMsR0FBVyxLQUFNLENBQUM7UUFlOUIsSUFBSSxnQkFkRCxDQUFBLEtBQVcsQ0FBQztRQWdCZixNQUFNLHNDQWRELENBQUEsS0FBTSxHQUFFLENBQUUsVUFBbUI7WUFlaEMsT0FkTyxHQUFFLFVBQVcsQ0FBQztZQWVyQixRQWRRLEdBQUUsU0FBVSxDQUFDO1lBZXJCLFFBZFEsR0FBRSxJQUFJLE9BQVEsQ0FBVSxDQUFDLElBQUcsUUFBUyxHQUFFLENBQUUsQ0FBQyxDQUFDO1FBZXJELENBZEMsQ0FBQztRQWdCRixNQUFNLCtCQWRELENBQUEsR0FBSSxHQUFFO1lBZVQsRUFBRSxDQUFDLENBZEMsUUFBUSxLQUFJLFNBQVUsQ0FBQyxDQUFBLENBQUU7Z0JBZTNCLE9BZE8sR0FBRSxJQUFLLENBQUM7Z0JBZWYsTUFBTSxDQWRDO1lBZVQsQ0FkQztZQWdCRCxNQUFNLHNCQWRELENBQUEsSUFBSyxHQUFFLFFBQVMsQ0FBQztZQWV0QixNQUFNLDhEQWRELENBQUEsR0FBSSxHQUFFLFFBQVMsQ0FBQztZQWVyQixLQWRLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFlYixVQWRVLENBQUMsR0FBRyxFQUFDLElBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQWU1QixHQWRHLENBQUMsSUFBSSxDQUFDLENBQUM7UUFlWixDQWRDLENBQUM7UUFnQkYsS0FkSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBZVosaUJBZE8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDLElBQUs7WUFleEIsUUFkUSxHQUFFLElBQUssQ0FBQztZQWVoQixFQUFFLENBQUMsQ0FkQyxPQUFPLENBQUMsQ0FBQSxDQUFFO2dCQUFBLEdBQUksRUFBRSxDQUFDO1lBQUEsQ0FBRTtRQWV6QixDQWRDLENBQUM7YUFDRCxJQUFJLENBQUMsTUFBSyxJQUFLLEdBQUUsSUFBSyxDQUFDO2FBQ3ZCLEtBQUssQ0FBQyxHQUFHLE1BQUssUUFBUyxHQUFFLElBQUssQ0FBQyxDQUFBLEtBQU0sR0FBRSxHQUFJLENBQUMsQ0FBQSxDQUFFLENBQUMsQ0FBQztRQWdCakQsT0FkTyxDQUFDLEVBQUMsQ0FBRTtZQWVULEVBQUUsQ0FBQyxDQWRDLElBQUksQ0FBQyxDQUFBLENBQUU7Z0JBQUEsS0FBQSxDQUFPO1lBQUEsQ0FBRTtZQWVwQixFQUFFLENBQUMsQ0FkQyxRQUFRLENBQUMsQ0FBQSxDQUFFO2dCQUFBLE1BQU0sS0FBTSxDQUFDO1lBQUEsQ0FBRTtZQWU5QixNQWRLLE1BQUEsQ0FBQSxDQUFNLFFBQUEsQ0FBQSxDQUFVLENBQUM7UUFleEIsQ0FkQztJQWVILENBZEM7Q0FDSDtBQWdCQTtJQUNBLHNDQUFzQztJQUN0QyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3hDLHFCQUFxQjtJQUNyQixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ3RDLENBQUM7QUFFRDs7Ozs7R0FLRztBQTFCSCxrQkFBa0MsTUFBOEIsRUFBQyxJQUFhO0lBNEI1RSxNQTNCTSxDQUFBLElBQUkscUJBQXNCLENBQVUsTUFBTSxFQUFDLElBQUssQ0FBQyxDQUFDO0FBNEIxRCxDQTNCQztBQUZELDRCQUVDIiwiZmlsZSI6ImRlYm91bmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBmb3JFYWNoIH0gZnJvbSAnLi9mb3JlYWNoJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUuZm9yZWFjaFwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgRGVib3VuY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfdGltZTogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgdGltZTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gbm9WYWx1ZTogYm9vbGVhbjtcbiAgICBsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBsYXN0SXRlbTogVFNvdXJjZSB8IHVuZGVmaW5lZDtcbiAgICBsZXQgLyoqIEB0eXBlIHshUHJvbWlzZTxUU291cmNlPn0gKi8gZGVmZXJyZWQ6IFByb21pc2U8VFNvdXJjZT47XG4gICAgbGV0IC8qKiBAdHlwZSB7ZnVuY3Rpb24oKFRTb3VyY2V8IVByb21pc2VMaWtlPFRTb3VyY2U+KSk6IHZvaWR9ICovIHJlc29sdmVyOiAodmFsdWU/OiBUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4gfCB1bmRlZmluZWQpID0+IHZvaWQ7XG4gICAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gZG9uZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc0Vycm9yOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IC8qKiBAdHlwZSB7P30gKi8gZXJyb3I6IGFueTtcblxuICAgIGNvbnN0IC8qKiBAdHlwZSB7ZnVuY3Rpb24oYm9vbGVhbik6IHZvaWR9ICovIHJlc2V0ID0gKGhhc05vVmFsdWU6IGJvb2xlYW4pID0+IHtcbiAgICAgIG5vVmFsdWUgPSBoYXNOb1ZhbHVlO1xuICAgICAgbGFzdEl0ZW0gPSB1bmRlZmluZWQ7XG4gICAgICBkZWZlcnJlZCA9IG5ldyBQcm9taXNlPFRTb3VyY2U+KHIgPT4gcmVzb2x2ZXIgPSByKTtcbiAgICB9O1xuXG4gICAgY29uc3QgLyoqIEB0eXBlIHtmdW5jdGlvbigpOiB2b2lkfSAqLyBydW4gPSAoKSA9PiB7XG4gICAgICBpZiAobGFzdEl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gPSBsYXN0SXRlbTtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7ZnVuY3Rpb24oKFRTb3VyY2V8IVByb21pc2VMaWtlPFRTb3VyY2U+KSk6IHZvaWR9ICovIHJlcyA9IHJlc29sdmVyO1xuICAgICAgcmVzZXQoZmFsc2UpO1xuICAgICAgc2V0VGltZW91dChydW4sIHRoaXMuX3RpbWUpO1xuICAgICAgcmVzKGl0ZW0pO1xuICAgIH07XG5cbiAgICByZXNldCh0cnVlKTtcbiAgICBmb3JFYWNoKHRoaXMuX3NvdXJjZSwgaXRlbSA9PiB7XG4gICAgICBsYXN0SXRlbSA9IGl0ZW07XG4gICAgICBpZiAobm9WYWx1ZSkgeyBydW4oKTsgfVxuICAgIH0pXG4gICAgLnRoZW4oKCkgPT4gZG9uZSA9IHRydWUpXG4gICAgLmNhdGNoKGVyciA9PiB7IGhhc0Vycm9yID0gdHJ1ZTsgZXJyb3IgPSBlcnI7IH0pO1xuXG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGlmIChkb25lKSB7IGJyZWFrOyB9XG4gICAgICBpZiAoaGFzRXJyb3IpIHsgdGhyb3cgZXJyb3I7IH1cbiAgICAgIHlpZWxkIGF3YWl0IC8qKiBAdHlwZSB7IVByb21pc2U8VFNvdXJjZT59ICovKCggZGVmZXJyZWQpKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRGVib3VuY2VBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRGVib3VuY2VBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5EZWJvdW5jZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl90aW1lO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgdGltZTogbnVtYmVyKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IERlYm91bmNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIHRpbWUpO1xufVxuIl19