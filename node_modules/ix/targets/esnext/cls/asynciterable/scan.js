goog.module('targets.esnext.cls.asynciterable.scan'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/scan.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template T, R
 */
class ScanAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<T>} source
     * @param {function((T|R), T, number): (R|!Promise<R>)} fn
     * @param {...(T|R)} args
     */
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    /**
     * @return {!AsyncIterableIterator<R>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {number} */ i = 0, /** @type {boolean} */ hasValue = false;
        for await (let /** @type {T} */ item of this._source) {
            if (hasValue || (hasValue = this._hasSeed)) {
                this._seed = await this._fn(/** @type {R} */ (this._seed), item, i++);
                yield this._seed;
            }
            else {
                this._seed = item;
                hasValue = true;
                i++;
            }
        }
    }
}
function ScanAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<T>} */
    ScanAsyncIterable.prototype._source;
    /** @type {function((T|R), T, number): (R|!Promise<R>)} */
    ScanAsyncIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanAsyncIterable.prototype._seed;
    /** @type {boolean} */
    ScanAsyncIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(T|R)>}
 */
function scan(source, accumulator, ...args) {
    return new ScanAsyncIterable(source, accumulator, ...args);
}
exports.scan = scan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NjYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBILHVCQUE2QixTQUFRLDhCQUFrQjtJQWF2RDs7OztPQUlHO0lBWEQsWUFhSSxNQVp3QixFQWF4QixFQVp1RCxFQWF2RCxHQVpHLElBQWU7UUFhcEIsS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztRQWFkLElBWkksQ0FBQyxRQUFRLEdBQUUsSUFBSyxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUM7UUFhbEMsSUFaSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFhdkIsQ0FBQztJQUNIOztPQUVHO0lBYkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWUzQixJQUFJLHFCQWRELENBQUEsQ0FBRSxHQUFFLENBQUUsRUFBQSxzQkFBQyxDQUFBLFFBQVMsR0FBRSxLQUFNLENBQUM7UUFlNUIsR0FkRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsZ0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFlcEMsRUFBRSxDQUFDLENBZEMsUUFBUSxJQUFHLENBQUUsUUFBUSxHQUFFLElBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBZTNDLElBZEksQ0FBQyxLQUFLLEdBQUUsTUFBTSxJQUFLLENBQUMsR0FBRyxDQUFBLGdCQUFBLENBQUEsQ0FBSSxJQUFJLENBQUMsS0FBQSxDQUFLLEVBQUMsSUFBSyxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUM7Z0JBZXRELE1BZEssSUFBSyxDQUFDLEtBQUssQ0FBQztZQWVuQixDQWRDO1lBQUEsSUFBSyxDQUFBLENBQUU7Z0JBZU4sSUFkSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7Z0JBZWxCLFFBZFEsR0FBRSxJQUFLLENBQUM7Z0JBZWhCLENBZEMsRUFBRSxDQUFDO1lBZU4sQ0FkQztRQWVILENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxnQ0FBZ0M7SUFDaEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNwQywwREFBMEQ7SUFDMUQsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUNoQyxvQkFBb0I7SUFDcEIsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUNsQyxzQkFBc0I7SUFDdEIsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUNyQyxDQUFDO0FBVUQ7Ozs7OztHQU1HO0FBaENILGNBa0NJLE1BakN3QixFQWtDeEIsV0FqQ29FLEVBa0NwRSxHQWpDRyxJQUFlO0lBa0NwQixNQWpDTSxDQUFBLElBQUksaUJBQWtCLENBQUMsTUFBTSxFQUFDLFdBQVksRUFBQyxHQUFJLElBQUksQ0FBQyxDQUFDO0FBa0M3RCxDQWpDQztBQUxELG9CQUtDIiwiZmlsZSI6InNjYW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqL1xuY2xhc3MgU2NhbkFzeW5jSXRlcmFibGU8VCwgUj4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxSPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD47XG5wcml2YXRlIF9mbjogKGFjYzogVCB8IFIsIHg6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+O1xucHJpdmF0ZSBfc2VlZD86IFQgfCBSO1xucHJpdmF0ZSBfaGFzU2VlZDogYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiAoUnwhUHJvbWlzZTxSPil9IGZuXG4gKiBAcGFyYW0gey4uLihUfFIpfSBhcmdzXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICAgICAgZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAgIC4uLmFyZ3M6IChUIHwgUilbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2ZuID0gZm47XG4gICAgdGhpcy5faGFzU2VlZCA9IGFyZ3MubGVuZ3RoID09PSAxO1xuICAgIHRoaXMuX3NlZWQgPSBhcmdzWzBdO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8Uj59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDAsIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzVmFsdWUgPSBmYWxzZTtcbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1R9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gdGhpcy5faGFzU2VlZCkpIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGF3YWl0IHRoaXMuX2ZuKCAvKiogQHR5cGUge1J9ICovKCg8Uj50aGlzLl9zZWVkKSksIGl0ZW0sIGkrKyk7XG4gICAgICAgIHlpZWxkIHRoaXMuX3NlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWVkID0gaXRlbTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNjYW5Bc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFQ+fSAqL1xuU2NhbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiAoUnwhUHJvbWlzZTxSPil9ICovXG5TY2FuQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2ZuO1xuLyoqIEB0eXBlIHsoVHxSKX0gKi9cblNjYW5Bc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc2VlZDtcbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblNjYW5Bc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5faGFzU2VlZDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2NhbjxUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogVCwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFQgfCBQcm9taXNlPFQ+KTogQXN5bmNJdGVyYWJsZVg8VD47XG5leHBvcnQgZnVuY3Rpb24gc2NhbjxULCBSID0gVD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgc2VlZDogUik6IEFzeW5jSXRlcmFibGVYPFI+O1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiAoUnwhUHJvbWlzZTxSPil9IGFjY3VtdWxhdG9yXG4gKiBAcGFyYW0gey4uLihUfFIpfSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDwoVHxSKT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgYWNjdW11bGF0b3I6IChhY2M6IFQgfCBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogQXN5bmNJdGVyYWJsZVg8VCB8IFI+IHtcbiAgcmV0dXJuIG5ldyBTY2FuQXN5bmNJdGVyYWJsZShzb3VyY2UsIGFjY3VtdWxhdG9yLCAuLi5hcmdzKTtcbn1cbiJdfQ==