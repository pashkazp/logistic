goog.module('targets.esnext.cls.asynciterable.timestamp'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/timestamp.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @record
 * @template TSource
 */
function Timestamp() { }
exports.Timestamp = Timestamp;
function Timestamp_tsickle_Closure_declarations() {
    /** @type {number} */
    Timestamp.prototype.time;
    /** @type {TSource} */
    Timestamp.prototype.value;
}
/**
 * @template TSource
 */
class TimestampAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<?>}
     */
    async *[Symbol.asyncIterator]() {
        for await (const /** @type {TSource} */ item of this._source) {
            yield { time: Date.now(), value: item };
        }
    }
}
function TimestampAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TimestampAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!Timestamp<TSource>>}
 */
function timestamp(source) {
    return new TimestampAsyncIterable(source);
}
exports.timestamp = timestamp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3RpbWVzdGFtcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOzs7R0FHRztBQUNILHVCQUE2QixDQUFDO0FBQTlCLDhCQUE4QjtBQUc5QjtJQUNBLHFCQUFxQjtJQUNyQixTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztJQUN6QixzQkFBc0I7SUFDdEIsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDMUIsQ0FBQztBQU9EOztHQUVHO0FBckJILDRCQUFxQyxTQUFRLDhCQUFtQztJQXdCaEY7O09BRUc7SUF2QkQsWUFBWSxNQUE4QjtRQXlCeEMsS0F4QkssRUFBRSxDQUFDO1FBeUJSLElBeEJJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztJQXlCeEIsQ0FBQztJQUNIOztPQUVHO0lBekJELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUEyQjNCLEdBMUJHLENBQUEsS0FBTSxDQUFOLENBQVEsTUFBQSxzQkFBSyxDQUFBLElBQUssSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtZQTJCdEMsTUExQkssRUFBRSxJQUFLLEVBQUMsSUFBSyxDQUFDLEdBQUcsRUFBRSxFQUFDLEtBQU0sRUFBQyxJQUFLLEVBQUUsQ0FBQztRQTJCMUMsQ0ExQkM7SUEyQkgsQ0ExQkM7Q0FDSDtBQTRCQTtJQUNBLHNDQUFzQztJQUN0QyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ3pDLENBQUM7QUFFRDs7OztHQUlHO0FBbkNILG1CQXFDSSxNQXBDOEI7SUFxQ2hDLE1BcENNLENBQUEsSUFBSSxzQkFBdUIsQ0FBVSxNQUFNLENBQUMsQ0FBQztBQXFDckQsQ0FwQ0M7QUFIRCw4QkFHQyIsImZpbGUiOiJ0aW1lc3RhbXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHJlY29yZFxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFRpbWVzdGFtcCgpIHt9XG5cblxuZnVuY3Rpb24gVGltZXN0YW1wX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUudGltZTtcbi8qKiBAdHlwZSB7VFNvdXJjZX0gKi9cblRpbWVzdGFtcC5wcm90b3R5cGUudmFsdWU7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBUaW1lc3RhbXA8VFNvdXJjZT4ge1xuICB0aW1lOiBudW1iZXI7XG4gIHZhbHVlOiBUU291cmNlO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUaW1lc3RhbXBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VGltZXN0YW1wPFRTb3VyY2U+PiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPD8+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIHlpZWxkIHsgdGltZTogRGF0ZS5ub3coKSwgdmFsdWU6IGl0ZW0gfTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVGltZXN0YW1wQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblRpbWVzdGFtcEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8IVRpbWVzdGFtcDxUU291cmNlPj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0aW1lc3RhbXA8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogQXN5bmNJdGVyYWJsZVg8VGltZXN0YW1wPFRTb3VyY2U+PiB7XG4gIHJldHVybiBuZXcgVGltZXN0YW1wQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19