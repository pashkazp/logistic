goog.module('targets.esnext.cls.asynciterable.while'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/while.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class WhileAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {function(): (boolean|!Promise<boolean>)} condition
     * @param {!AsyncIterable<TSource>} source
     */
    constructor(condition, source) {
        super();
        this._condition = condition;
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        while (await this._condition()) {
            for await (let /** @type {TSource} */ item of this._source) {
                yield item;
            }
        }
    }
}
function WhileAsyncIterable_tsickle_Closure_declarations() {
    /** @type {function(): (boolean|!Promise<boolean>)} */
    WhileAsyncIterable.prototype._condition;
    /** @type {!AsyncIterable<TSource>} */
    WhileAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {function(): (boolean|!Promise<boolean>)} condition
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function _while(condition, source) {
    return new WhileAsyncIterable(condition, source);
}
exports._while = _while;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3doaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCx3QkFBaUMsU0FBUSw4QkFBd0I7SUFXakU7OztPQUdHO0lBVkQsWUFBWSxTQUEyQyxFQUFDLE1BQStCO1FBWXJGLEtBWEssRUFBRSxDQUFDO1FBWVIsSUFYSSxDQUFDLFVBQVUsR0FBRSxTQUFVLENBQUM7UUFZNUIsSUFYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7SUFZeEIsQ0FBQztJQUNIOztPQUVHO0lBWkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWMzQixPQWJPLE1BQUssSUFBSyxDQUFDLFVBQVUsRUFBRSxFQUFDLENBQUU7WUFjL0IsR0FiRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7Z0JBQUEsTUFBTSxJQUFLLENBQUM7WUFBQSxDQUFFO1FBY3RELENBYkM7SUFjSCxDQWJDO0NBQ0g7QUFlQTtJQUNBLHNEQUFzRDtJQUN0RCxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQ3hDLHNDQUFzQztJQUN0QyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ3JDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxnQkEyQkksU0ExQjJDLEVBMkIzQyxNQTFCOEI7SUEyQmhDLE1BMUJNLENBQUEsSUFBSSxrQkFBbUIsQ0FBVSxTQUFTLEVBQUMsTUFBTyxDQUFDLENBQUM7QUEyQjVELENBMUJDO0FBSkQsd0JBSUMiLCJmaWxlIjoid2hpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgV2hpbGVBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfY29uZGl0aW9uOiAoKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbigpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbmRpdGlvblxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKGNvbmRpdGlvbjogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICB3aGlsZSAoYXdhaXQgdGhpcy5fY29uZGl0aW9uKCkpIHtcbiAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBXaGlsZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuV2hpbGVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fY29uZGl0aW9uO1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbldoaWxlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbmRpdGlvblxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF93aGlsZTxUU291cmNlPihcbiAgICBjb25kaXRpb246ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBXaGlsZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4oY29uZGl0aW9uLCBzb3VyY2UpO1xufVxuIl19