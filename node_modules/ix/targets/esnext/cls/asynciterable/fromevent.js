goog.module('targets.esnext.cls.asynciterable.fromevent'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/fromevent.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var fromeventpattern_1 = goog.require('targets.esnext.cls.asynciterable.fromeventpattern');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.fromeventpattern");
/** @typedef {{addListener: function(string, !Function): void, removeListener: function(string, !Function): void}} */
exports.NodeEventEmitter;
/** @typedef {(boolean|{capture: boolean, passive: boolean, once: boolean})} */
exports.EventListenerOptions;
/** @typedef {({addListener: function(string, !Function): void, removeListener: function(string, !Function): void}|!EventTarget)} */
exports.EventedTarget;
/**
 * @param {?} obj
 * @return {boolean}
 */
function isNodeEventEmitter(obj) {
    return !!obj && typeof obj.addListener === 'function' && typeof obj.removeListener === 'function';
}
/**
 * @param {?} obj
 * @return {boolean}
 */
function isEventTarget(obj) {
    return !!obj && typeof obj.addEventListener === 'function' && typeof obj.removeEventListener === 'function';
}
/**
 * @template TSource
 * @param {({addListener: function(string, !Function): void, removeListener: function(string, !Function): void}|!EventTarget)} obj
 * @param {string} type
 * @param {(boolean|{capture: boolean, passive: boolean, once: boolean})=} options
 * @return {!AsyncIterable<TSource>}
 */
function fromEvent(obj, type, options) {
    if (isEventTarget(obj)) {
        const /** @type {!EventTarget} */ target = ((obj));
        return fromeventpattern_1.fromEventPattern(h => target.addEventListener(type, /** @type {!EventListener} */ ((h)), options), h => target.removeEventListener(type, /** @type {!EventListener} */ ((h)), options));
    }
    else if (isNodeEventEmitter(obj)) {
        const /** @type {{addListener: function(string, !Function): void, removeListener: function(string, !Function): void}} */ target = ((obj));
        return fromeventpattern_1.fromEventPattern(h => target.addListener(type, h), h => target.removeListener(type, h));
    }
    else {
        throw new TypeError('Unsupported event target');
    }
}
exports.fromEvent = fromEvent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2Zyb21ldmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgseURBTHlCO0FBTXpCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw0REFBNEQsQ0FBQyxDQU43RDtBQVl0RCxxSEFBcUg7QUFDckgsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0FBUXpCLCtFQUErRTtBQUMvRSxPQUFPLENBQUMsb0JBQW9CLENBQUM7QUFJN0Isb0lBQW9JO0FBQ3BJLE9BQU8sQ0FBQyxhQUFhLENBQUM7QUFFdEI7OztHQUdHO0FBakJILDRCQUE0QixHQUFRO0lBbUJsQyxNQWxCTSxDQUFBLENBQUUsQ0FBQyxHQUFHLElBQUcsT0FBTyxHQUFJLENBQUMsV0FBVyxLQUFJLFVBQVcsSUFBRyxPQUFPLEdBQUksQ0FBQyxjQUFjLEtBQUksVUFBVyxDQUFDO0FBbUJwRyxDQUFDO0FBQ0Q7OztHQUdHO0FBcEJILHVCQUF1QixHQUFRO0lBc0I3QixNQXJCTSxDQUFBLENBQUUsQ0FBQyxHQUFHLElBQUcsT0FBTyxHQUFJLENBQUMsZ0JBQWdCLEtBQUksVUFBVyxJQUFHLE9BQU8sR0FBSSxDQUFDLG1CQUFtQixLQUFJLFVBQVcsQ0FBQztBQXNCOUcsQ0FBQztBQUNEOzs7Ozs7R0FNRztBQTFCSCxtQkE0QkksR0EzQmtCLEVBNEJsQixJQTNCWSxFQTRCWixPQTNCOEI7SUE0QmhDLEVBQUUsQ0FBQyxDQTNCQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFFO1FBNEJ2QixNQUFNLDJCQTNCRCxDQUFBLE1BQU8sR0FBQSxDQUFnQixDQUFDLEdBQUcsQ0FBQSxDQUFDLENBQUM7UUE0QmxDLE1BM0JNLENBQUEsbUNBQWlCLENBNEJyQixDQTNCQyxJQUFHLE1BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUEsNkJBQUEsQ0FBQSxDQUFpQixDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsT0FBUSxDQUFDLEVBNEIvRCxDQTNCQyxJQUFHLE1BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUEsNkJBQUEsQ0FBQSxDQUFpQixDQUFDLENBQUMsQ0FBQSxDQUFDLEVBQUMsT0FBUSxDQUFDLENBQ25FLENBQUM7SUE0QkosQ0EzQkM7SUFBQSxJQUFLLENBQUEsRUFBQSxDQUFBLENBQUssa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQSxDQUFFO1FBNEJuQyxNQUFNLGtIQTNCRCxDQUFBLE1BQU8sR0FBQSxDQUFxQixDQUFDLEdBQUcsQ0FBQSxDQUFDLENBQUM7UUE0QnZDLE1BM0JNLENBQUEsbUNBQWlCLENBNEJyQixDQTNCQyxJQUFHLE1BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFDLENBQUUsQ0FBQyxFQTRCaEMsQ0EzQkMsSUFBRyxNQUFPLENBQUMsY0FBYyxDQUFDLElBQUksRUFBQyxDQUFFLENBQUMsQ0FDcEMsQ0FBQztJQTRCSixDQTNCQztJQUFBLElBQUssQ0FBQSxDQUFFO1FBNEJOLE1BM0JLLElBQUksU0FBVSxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUE0QmxELENBM0JDO0FBNEJILENBM0JDO0FBbkJELDhCQW1CQyIsImZpbGUiOiJmcm9tZXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBmcm9tRXZlbnRQYXR0ZXJuIH0gZnJvbSAnLi9mcm9tZXZlbnRwYXR0ZXJuJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUuZnJvbWV2ZW50cGF0dGVyblwiKTtcblxuZXhwb3J0IHR5cGUgTm9kZUV2ZW50RW1pdHRlciAgPSB7XG4gIGFkZExpc3RlbmVyOiAoZXZlbnROYW1lOiBzdHJpbmcsIGhhbmRsZXI6IEZ1bmN0aW9uKSA9PiB2b2lkO1xuICByZW1vdmVMaXN0ZW5lcjogKGV2ZW50TmFtZTogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbikgPT4gdm9pZDtcbn07XG4vKiogQHR5cGVkZWYge3thZGRMaXN0ZW5lcjogZnVuY3Rpb24oc3RyaW5nLCAhRnVuY3Rpb24pOiB2b2lkLCByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24oc3RyaW5nLCAhRnVuY3Rpb24pOiB2b2lkfX0gKi9cbmV4cG9ydHMuTm9kZUV2ZW50RW1pdHRlcjtcblxuXG5leHBvcnQgdHlwZSBFdmVudExpc3RlbmVyT3B0aW9ucyA9IHtcbiAgY2FwdHVyZT86IGJvb2xlYW47XG4gIHBhc3NpdmU/OiBib29sZWFuO1xuICBvbmNlPzogYm9vbGVhbjtcbn0gfCBib29sZWFuO1xuLyoqIEB0eXBlZGVmIHsoYm9vbGVhbnx7Y2FwdHVyZTogYm9vbGVhbiwgcGFzc2l2ZTogYm9vbGVhbiwgb25jZTogYm9vbGVhbn0pfSAqL1xuZXhwb3J0cy5FdmVudExpc3RlbmVyT3B0aW9ucztcblxuXG5leHBvcnQgdHlwZSBFdmVudGVkVGFyZ2V0ID0gRXZlbnRUYXJnZXQgfCBOb2RlRXZlbnRFbWl0dGVyO1xuLyoqIEB0eXBlZGVmIHsoe2FkZExpc3RlbmVyOiBmdW5jdGlvbihzdHJpbmcsICFGdW5jdGlvbik6IHZvaWQsIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbihzdHJpbmcsICFGdW5jdGlvbik6IHZvaWR9fCFFdmVudFRhcmdldCl9ICovXG5leHBvcnRzLkV2ZW50ZWRUYXJnZXQ7XG5cbi8qKlxuICogQHBhcmFtIHs/fSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzTm9kZUV2ZW50RW1pdHRlcihvYmo6IGFueSk6IG9iaiBpcyBOb2RlRXZlbnRFbWl0dGVyIHtcbiAgcmV0dXJuICEhb2JqICYmIHR5cGVvZiBvYmouYWRkTGlzdGVuZXIgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5yZW1vdmVMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogQHBhcmFtIHs/fSBvYmpcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQob2JqOiBhbnkpOiBvYmogaXMgRXZlbnRUYXJnZXQge1xuICByZXR1cm4gISFvYmogJiYgdHlwZW9mIG9iai5hZGRFdmVudExpc3RlbmVyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBvYmoucmVtb3ZlRXZlbnRMaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7KHthZGRMaXN0ZW5lcjogZnVuY3Rpb24oc3RyaW5nLCAhRnVuY3Rpb24pOiB2b2lkLCByZW1vdmVMaXN0ZW5lcjogZnVuY3Rpb24oc3RyaW5nLCAhRnVuY3Rpb24pOiB2b2lkfXwhRXZlbnRUYXJnZXQpfSBvYmpcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gKiBAcGFyYW0geyhib29sZWFufHtjYXB0dXJlOiBib29sZWFuLCBwYXNzaXZlOiBib29sZWFuLCBvbmNlOiBib29sZWFufSk9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZyb21FdmVudDxUU291cmNlPihcbiAgICBvYmo6IEV2ZW50ZWRUYXJnZXQsXG4gICAgdHlwZTogc3RyaW5nLFxuICAgIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucykge1xuICBpZiAoaXNFdmVudFRhcmdldChvYmopKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshRXZlbnRUYXJnZXR9ICovIHRhcmdldCA9IC8qKiBAdHlwZSB7IUV2ZW50VGFyZ2V0fSAqLygoIDxFdmVudFRhcmdldD4ob2JqKSkpO1xuICAgIHJldHVybiBmcm9tRXZlbnRQYXR0ZXJuPFRTb3VyY2U+KFxuICAgICAgaCA9PiB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCAvKiogQHR5cGUgeyFFdmVudExpc3RlbmVyfSAqLygoIDxFdmVudExpc3RlbmVyPihoKSkpLCBvcHRpb25zKSxcbiAgICAgIGggPT4gdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgLyoqIEB0eXBlIHshRXZlbnRMaXN0ZW5lcn0gKi8oKCA8RXZlbnRMaXN0ZW5lcj4oaCkpKSwgb3B0aW9ucylcbiAgICApO1xuICB9IGVsc2UgaWYgKGlzTm9kZUV2ZW50RW1pdHRlcihvYmopKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHt7YWRkTGlzdGVuZXI6IGZ1bmN0aW9uKHN0cmluZywgIUZ1bmN0aW9uKTogdm9pZCwgcmVtb3ZlTGlzdGVuZXI6IGZ1bmN0aW9uKHN0cmluZywgIUZ1bmN0aW9uKTogdm9pZH19ICovIHRhcmdldCA9IC8qKiBAdHlwZSB7e2FkZExpc3RlbmVyOiBmdW5jdGlvbihzdHJpbmcsICFGdW5jdGlvbik6IHZvaWQsIHJlbW92ZUxpc3RlbmVyOiBmdW5jdGlvbihzdHJpbmcsICFGdW5jdGlvbik6IHZvaWR9fSAqLygoIDxOb2RlRXZlbnRFbWl0dGVyPihvYmopKSk7XG4gICAgcmV0dXJuIGZyb21FdmVudFBhdHRlcm48VFNvdXJjZT4oXG4gICAgICBoID0+IHRhcmdldC5hZGRMaXN0ZW5lcih0eXBlLCBoKSxcbiAgICAgIGggPT4gdGFyZ2V0LnJlbW92ZUxpc3RlbmVyKHR5cGUsIGgpXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnN1cHBvcnRlZCBldmVudCB0YXJnZXQnKTtcbiAgfVxufVxuIl19