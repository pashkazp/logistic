goog.module('targets.esnext.cls.asynciterable.timeout'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/timeout.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _sleep_1 = goog.require('targets.esnext.cls.asynciterable._sleep');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._sleep");
class TimeoutError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, TimeoutError.prototype);
        this.message = 'Timeout has occurred';
    }
}
exports.TimeoutError = TimeoutError;
const /** @type {string} */ VALUE_TYPE = 'value';
const /** @type {string} */ ERROR_TYPE = 'error';
/**
 * @record
 * @template T
 */
function TimeoutOperation() { }
function TimeoutOperation_tsickle_Closure_declarations() {
    /** @type {string} */
    TimeoutOperation.prototype.type;
    /** @type {!IteratorResult<T>} */
    TimeoutOperation.prototype.value;
}
/**
 * @template TSource
 */
class TimeoutAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} dueTime
     */
    constructor(source, dueTime) {
        super();
        this._source = source;
        this._dueTime = dueTime;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
        while (1) {
            const { type, value } = await Promise.race([
                it.next().then(value => { return { type: VALUE_TYPE, value }; }),
                _sleep_1.sleep(this._dueTime).then(() => { return { type: ERROR_TYPE }; })
            ]);
            if (type === ERROR_TYPE) {
                throw new TimeoutError();
            }
            if (value.done) {
                break;
            }
            yield value.value;
        }
    }
}
function TimeoutAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TimeoutAsyncIterable.prototype._source;
    /** @type {number} */
    TimeoutAsyncIterable.prototype._dueTime;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} dueTime
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function timeout(source, dueTime) {
    return new TimeoutAsyncIterable(source, dueTime);
}
exports.timeout = timeout;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3RpbWVvdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQscUNBTmM7QUFPZCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsa0RBQWtELENBQUMsQ0FBQztBQUwxRyxrQkFBeUIsU0FBUSxLQUFNO0lBQ3JDO1FBT0UsS0FOSyxFQUFFLENBQUM7UUFPUixNQU5NLENBQUMsY0FBYyxDQUFDLElBQUksRUFBQyxZQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFPcEQsSUFOSSxDQUFDLE9BQU8sR0FBRSxzQkFBdUIsQ0FBQztJQU94QyxDQU5DO0NBQ0Y7QUFORCxvQ0FNQztBQVFELE1BQU0scUJBTkQsQ0FBQSxVQUFXLEdBQUUsT0FBUSxDQUFDO0FBTzNCLE1BQU0scUJBTkQsQ0FBQSxVQUFXLEdBQUUsT0FBUSxDQUFBO0FBTzFCOzs7R0FHRztBQUNILDhCQUE2QixDQUFDO0FBRzlCO0lBQ0EscUJBQXFCO0lBQ3JCLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDaEMsaUNBQWlDO0lBQ2pDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDakMsQ0FBQztBQU9EOztHQUVHO0FBckJILDBCQUFtQyxTQUFRLDhCQUF3QjtJQXlCbkU7OztPQUdHO0lBeEJELFlBQVksTUFBOEIsRUFBQyxPQUFnQjtRQTBCekQsS0F6QkssRUFBRSxDQUFDO1FBMEJSLElBekJJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQTBCdEIsSUF6QkksQ0FBQyxRQUFRLEdBQUUsT0FBUSxDQUFDO0lBMEIxQixDQUFDO0lBQ0g7O09BRUc7SUExQkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQTRCM0IsTUFBTSxzQ0EzQkQsQ0FBQSxFQUFHLEdBQUUsSUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQTRCaEQsT0EzQk8sQ0FBQyxFQUFDLENBQUU7WUE0QlQsTUEzQkssRUFBRSxJQUFLLEVBQUMsS0FBTSxFQUFFLEdBQUUsTUFBTSxPQUFRLENBQUMsSUFBSSxDQUE0QjtnQkE0QnBFLEVBM0JFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssTUFBSyxNQUFPLENBQUEsRUFBRSxJQUFLLEVBQUMsVUFBVyxFQUFDLEtBQU0sRUFBRSxDQUFDLENBQUEsQ0FBRSxDQUFDO2dCQTRCaEUsY0EzQkssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQU8sTUFBTyxDQUFBLEVBQUUsSUFBSyxFQUFDLFVBQVcsRUFBRSxDQUFDLENBQUEsQ0FBRSxDQUFDO2FBQ2xFLENBQUMsQ0FBQztZQTZCSCxFQUFFLENBQUMsQ0EzQkMsSUFBSSxLQUFJLFVBQVcsQ0FBQyxDQUFBLENBQUU7Z0JBNEJ4QixNQTNCSyxJQUFJLFlBQWEsRUFBRSxDQUFDO1lBNEIzQixDQTNCQztZQTZCRCxFQUFFLENBQUMsQ0EzQkMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7Z0JBQUEsS0FBQSxDQUFPO1lBQUEsQ0FBRTtZQTRCMUIsTUEzQkssS0FBTSxDQUFDLEtBQUssQ0FBQztRQTRCcEIsQ0EzQkM7SUE0QkgsQ0EzQkM7Q0FDSDtBQTZCQTtJQUNBLHNDQUFzQztJQUN0QyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3ZDLHFCQUFxQjtJQUNyQixvQkFBb0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ3hDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXZDSCxpQkF5Q0ksTUF4QzhCLEVBeUM5QixPQXhDZTtJQXlDakIsTUF4Q00sQ0FBQSxJQUFJLG9CQUFxQixDQUFVLE1BQU0sRUFBQyxPQUFRLENBQUMsQ0FBQztBQXlDNUQsQ0FBQztBQTVDRCwwQkE0Q0MiLCJmaWxlIjoidGltZW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuL19zbGVlcCc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLl9zbGVlcFwiKTtcbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5jb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUaW1lb3V0RXJyb3IucHJvdG90eXBlKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnVGltZW91dCBoYXMgb2NjdXJyZWQnO1xuICB9XG59XG5cbmNvbnN0IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyBWQUxVRV9UWVBFID0gJ3ZhbHVlJztcbmNvbnN0IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyBFUlJPUl9UWVBFID0gJ2Vycm9yJztcbi8qKlxuICogQHJlY29yZFxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gVGltZW91dE9wZXJhdGlvbigpIHt9XG5cblxuZnVuY3Rpb24gVGltZW91dE9wZXJhdGlvbl90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5UaW1lb3V0T3BlcmF0aW9uLnByb3RvdHlwZS50eXBlO1xuLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VD59ICovXG5UaW1lb3V0T3BlcmF0aW9uLnByb3RvdHlwZS52YWx1ZTtcbn1cblxuXG5pbnRlcmZhY2UgVGltZW91dE9wZXJhdGlvbjxUPiB7XG4gIHR5cGU6IHN0cmluZztcbiAgdmFsdWU/OiBJdGVyYXRvclJlc3VsdDxUPjtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgVGltZW91dEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9kdWVUaW1lOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGR1ZVRpbWVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBkdWVUaW1lOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9kdWVUaW1lID0gZHVlVGltZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlPFRpbWVvdXRPcGVyYXRpb248VFNvdXJjZT4+KFtcbiAgICAgICAgaXQubmV4dCgpLnRoZW4odmFsdWUgPT4geyByZXR1cm4geyB0eXBlOiBWQUxVRV9UWVBFLCB2YWx1ZSB9OyB9KSxcbiAgICAgICAgc2xlZXAodGhpcy5fZHVlVGltZSkudGhlbigoKSA9PiB7IHJldHVybiB7IHR5cGU6IEVSUk9SX1RZUEUgfTsgfSlcbiAgICAgIF0pO1xuXG4gICAgICBpZiAodHlwZSA9PT0gRVJST1JfVFlQRSkge1xuICAgICAgICB0aHJvdyBuZXcgVGltZW91dEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5kb25lKSB7IGJyZWFrOyB9XG4gICAgICB5aWVsZCB2YWx1ZS52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVGltZW91dEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5UaW1lb3V0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuVGltZW91dEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9kdWVUaW1lO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdWVUaW1lXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQ8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGR1ZVRpbWU6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0QXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGR1ZVRpbWUpO1xufSJdfQ==