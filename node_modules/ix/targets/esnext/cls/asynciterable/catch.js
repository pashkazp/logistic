goog.module('targets.esnext.cls.asynciterable.catch'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/catch.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var returniterator_1 = goog.require('targets.esnext.cls.internal.returniterator');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.returniterator");
/**
 * @template TSource
 */
class CatchAllAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!Iterable<!AsyncIterable<TSource>>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {?} */ error = null, /** @type {boolean} */ hasError = false;
        for (let /** @type {!AsyncIterable<TSource>} */ source of this._source) {
            const /** @type {!AsyncIterator<TSource>} */ it = source[Symbol.asyncIterator]();
            error = null;
            hasError = false;
            while (1) {
                let /** @type {TSource} */ c = ({});
                try {
                    const { done, value } = await it.next();
                    if (done) {
                        await returniterator_1.returnAsyncIterator(it);
                        break;
                    }
                    c = value;
                }
                catch (e) {
                    error = e;
                    hasError = true;
                    await returniterator_1.returnAsyncIterator(it);
                    break;
                }
                yield c;
            }
            if (!hasError) {
                break;
            }
        }
        if (hasError) {
            throw error;
        }
    }
}
function CatchAllAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!AsyncIterable<TSource>>} */
    CatchAllAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!Iterable<!AsyncIterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function _catchAll(source) {
    return new CatchAllAsyncIterable(source);
}
exports._catchAll = _catchAll;
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {...!AsyncIterable<T>} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function _catch(source, ...args) {
    return _catchAll([source].concat(args));
}
exports._catch = _catch;
/**
 * @template T
 * @param {...!AsyncIterable<T>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function _catchStatic(...source) {
    return _catchAll(source);
}
exports._catchStatic = _catchStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2NhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELCtEQU40QjtBQU81QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMscURBQXFELENBQUMsQ0FBQztBQUM3Rzs7R0FFRztBQVJILDJCQUFvQyxTQUFRLDhCQUF3QjtJQVdwRTs7T0FFRztJQVZELFlBQVksTUFBd0M7UUFZbEQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztJQVl4QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBYzNCLElBQUksZ0JBYkQsQ0FBQSxLQUFNLEdBQUUsSUFBSyxFQUFBLHNCQUFDLENBQUEsUUFBUyxHQUFFLEtBQU0sQ0FBQztRQWVuQyxHQUFHLENBQUMsQ0FiQyxJQUFBLHNDQUFHLENBQUEsTUFBTyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBY2hDLE1BQU0sc0NBYkQsQ0FBQSxFQUFHLEdBQUUsTUFBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBZTFDLEtBYkssR0FBRSxJQUFLLENBQUM7WUFjYixRQWJRLEdBQUUsS0FBTSxDQUFDO1lBZWpCLE9BYk8sQ0FBQyxFQUFDLENBQUU7Z0JBY1QsSUFBSSxzQkFiRCxDQUFBLENBQUUsR0FBQSxDQUFZLEVBQUEsQ0FBRSxDQUFDO2dCQWVwQixJQWJHLENBQUU7b0JBY0gsTUFiSyxFQUFFLElBQUssRUFBQyxLQUFNLEVBQUUsR0FBRSxNQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFjeEMsRUFBRSxDQUFDLENBYkMsSUFBSSxDQUFDLENBQUEsQ0FBRTt3QkFjVCxNQWJLLG9DQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQWM5QixLQUFLLENBYkM7b0JBY1IsQ0FiQztvQkFjRCxDQWJDLEdBQUUsS0FBTSxDQUFDO2dCQWNaLENBYkM7Z0JBQUEsS0FBQSxDQUFBLENBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTtvQkFjWCxLQWJLLEdBQUUsQ0FBRSxDQUFDO29CQWNWLFFBYlEsR0FBRSxJQUFLLENBQUM7b0JBY2hCLE1BYkssb0NBQW9CLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBYzlCLEtBQUssQ0FiQztnQkFjUixDQWJDO2dCQWVELE1BYkssQ0FBRSxDQUFDO1lBY1YsQ0FiQztZQWVELEVBQUUsQ0FBQyxDQWJDLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTtnQkFBQSxLQUFBLENBQU87WUFBQSxDQUFFO1FBYzNCLENBYkM7UUFlRCxFQUFFLENBQUMsQ0FiQyxRQUFRLENBQUMsQ0FBQSxDQUFFO1lBQUEsTUFBTSxLQUFNLENBQUM7UUFBQSxDQUFFO0lBY2hDLENBYkM7Q0FDSDtBQWVBO0lBQ0EsaURBQWlEO0lBQ2pELHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7O0dBSUc7QUF0QkgsbUJBQW1DLE1BQXdDO0lBd0J6RSxNQXZCTSxDQUFBLElBQUkscUJBQXNCLENBQVUsTUFBTSxDQUFDLENBQUM7QUF3QnBELENBQUM7QUF6QkQsOEJBeUJDO0FBQ0Q7Ozs7O0dBS0c7QUEzQkgsZ0JBQTBCLE1BQXdCLEVBQUMsR0FBSSxJQUF3QjtJQTZCN0UsTUE1Qk0sQ0FBQSxTQUFVLENBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQTZCN0MsQ0FBQztBQTlCRCx3QkE4QkM7QUFDRDs7OztHQUlHO0FBL0JILHNCQUFnQyxHQUFHLE1BQTBCO0lBaUMzRCxNQWhDTSxDQUFBLFNBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQWlDM0IsQ0FoQ0M7QUFGRCxvQ0FFQyIsImZpbGUiOiJjYXRjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgcmV0dXJuQXN5bmNJdGVyYXRvciB9IGZyb20gJy4uL2ludGVybmFsL3JldHVybml0ZXJhdG9yJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLnJldHVybml0ZXJhdG9yXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBDYXRjaEFsbEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7P30gKi8gZXJyb3IgPSBudWxsLCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc0Vycm9yID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLyBzb3VyY2Ugb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcblxuICAgICAgZXJyb3IgPSBudWxsO1xuICAgICAgaGFzRXJyb3IgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgbGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gYyA9IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8oKCA8VFNvdXJjZT57fSkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgaXQubmV4dCgpO1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBhd2FpdCByZXR1cm5Bc3luY0l0ZXJhdG9yKGl0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjID0gdmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKCAvKiogQHR5cGUgez99ICovZSkge1xuICAgICAgICAgIGVycm9yID0gZTtcbiAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgYXdhaXQgcmV0dXJuQXN5bmNJdGVyYXRvcihpdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB5aWVsZCBjO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc0Vycm9yKSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgaWYgKGhhc0Vycm9yKSB7IHRocm93IGVycm9yOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQ2F0Y2hBbGxBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj59ICovXG5DYXRjaEFsbEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaEFsbDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENhdGNoQWxsQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0gey4uLiFBc3luY0l0ZXJhYmxlPFQ+fSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaDxUPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sIC4uLmFyZ3M6IEFzeW5jSXRlcmFibGU8VD5bXSk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIF9jYXRjaEFsbDxUPihbc291cmNlXS5jb25jYXQoYXJncykpO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHsuLi4hQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaFN0YXRpYzxUPiguLi5zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD5bXSk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIF9jYXRjaEFsbChzb3VyY2UpO1xufVxuIl19