goog.module('targets.esnext.cls.asynciterable.innerjoin'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/innerjoin.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _grouping_1 = goog.require('targets.esnext.cls.asynciterable._grouping');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._grouping");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @template TOuter, TInner, TKey, TResult
 */
class JoinAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TOuter>} outer
     * @param {!AsyncIterable<TInner>} inner
     * @param {function(TOuter): (TKey|!Promise<TKey>)} outerSelector
     * @param {function(TInner): (TKey|!Promise<TKey>)} innerSelector
     * @param {function(TOuter, TInner): (TResult|!Promise<TResult>)} resultSelector
     */
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!Map<TKey, !Array<?>>} */ map = await _grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity);
        for await (let /** @type {TOuter} */ outerElement of this._outer) {
            const /** @type {TKey} */ outerKey = await this._outerSelector(outerElement);
            if (map.has(outerKey)) {
                for (let /** @type {?} */ innerElement of ((map.get(outerKey)))) {
                    yield await this._resultSelector(outerElement, innerElement);
                }
            }
        }
    }
}
function JoinAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TOuter>} */
    JoinAsyncIterable.prototype._outer;
    /** @type {!AsyncIterable<TInner>} */
    JoinAsyncIterable.prototype._inner;
    /** @type {function(TOuter): (TKey|!Promise<TKey>)} */
    JoinAsyncIterable.prototype._outerSelector;
    /** @type {function(TInner): (TKey|!Promise<TKey>)} */
    JoinAsyncIterable.prototype._innerSelector;
    /** @type {function(TOuter, TInner): (TResult|!Promise<TResult>)} */
    JoinAsyncIterable.prototype._resultSelector;
}
/**
 * @template TOuter, TInner, TKey, TResult
 * @param {!AsyncIterable<TOuter>} outer
 * @param {!AsyncIterable<TInner>} inner
 * @param {function(TOuter): (TKey|!Promise<TKey>)} outerSelector
 * @param {function(TInner): (TKey|!Promise<TKey>)} innerSelector
 * @param {function(TOuter, TInner): (TResult|!Promise<TResult>)} resultSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function innerJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new JoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.innerJoin = innerJoin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2lubmVyam9pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwyQ0FOdUI7QUFPdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFEQUFxRCxDQUFDLENBUC9EO0FBUTdDLG1EQVBpQjtBQVFqQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7R0FFRztBQVRILHVCQUFzRCxTQUFRLDhCQUF3QjtJQWdCdEY7Ozs7OztPQU1HO0lBZkQsWUFpQkUsS0FoQjRCLEVBaUI1QixLQWhCNEIsRUFpQjVCLGFBaEJzRCxFQWlCdEQsYUFoQnNELEVBaUJ0RCxjQWhCNEU7UUFpQjVFLEtBaEJLLEVBQUUsQ0FBQztRQWlCUixJQWhCSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFpQnBCLElBaEJJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWlCcEIsSUFoQkksQ0FBQyxjQUFjLEdBQUUsYUFBYyxDQUFDO1FBaUJwQyxJQWhCSSxDQUFDLGNBQWMsR0FBRSxhQUFjLENBQUM7UUFpQnBDLElBaEJJLENBQUMsZUFBZSxHQUFFLGNBQWUsQ0FBQztJQWlCeEMsQ0FBQztJQUNIOztPQUVHO0lBakJELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFtQjNCLE1BQU0sb0NBbEJELENBQUEsR0FBSSxHQUFFLE1BQU0sMEJBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLElBQUssQ0FBQyxjQUFjLEVBQUMsbUJBQVMsQ0FBQyxDQUFDO1FBbUI3RSxHQWxCRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEscUJBQUcsQ0FBQSxZQUFhLElBQUcsSUFBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUU7WUFtQjNDLE1BQU0sbUJBbEJELENBQUEsUUFBUyxHQUFFLE1BQU0sSUFBSyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQW1CekQsRUFBRSxDQUFDLENBbEJDLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQW1CdEIsR0FBRyxDQUFDLENBbEJDLElBQUEsZ0JBQUcsQ0FBQSxZQUFhLElBQUEsQ0FBQSxDQUFHLEdBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFBLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBRTtvQkFtQjVDLE1BbEJLLE1BQU0sSUFBSyxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUMsWUFBYSxDQUFDLENBQUM7Z0JBbUIvRCxDQWxCQztZQW1CSCxDQWxCQztRQW1CSCxDQWxCQztJQW1CSCxDQWxCQztDQUNIO0FBb0JBO0lBQ0EscUNBQXFDO0lBQ3JDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDbkMscUNBQXFDO0lBQ3JDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsc0RBQXNEO0lBQ3RELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7SUFDM0Msc0RBQXNEO0lBQ3RELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7SUFDM0Msb0VBQW9FO0lBQ3BFLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7QUFDNUMsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBdkNILG1CQXlDSSxLQXhDNEIsRUF5QzVCLEtBeEM0QixFQXlDNUIsYUF4Q3NELEVBeUN0RCxhQXhDc0QsRUF5Q3RELGNBeEM0RTtJQXlDOUUsTUF4Q00sQ0FBQSxJQUFJLGlCQUFrQixDQXlDMUIsS0F4Q0ssRUF5Q0wsS0F4Q0ssRUF5Q0wsYUF4Q2EsRUF5Q2IsYUF4Q2EsRUF5Q2IsY0F4Q2MsQ0FBQyxDQUFDO0FBeUNwQixDQXhDQztBQVpELDhCQVlDIiwiZmlsZSI6ImlubmVyam9pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgY3JlYXRlR3JvdXBpbmcgfSBmcm9tICcuL19ncm91cGluZyc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLl9ncm91cGluZ1wiKTtcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMyA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdFxuICovXG5jbGFzcyBKb2luQXN5bmNJdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9vdXRlcjogQXN5bmNJdGVyYWJsZTxUT3V0ZXI+O1xucHJpdmF0ZSBfaW5uZXI6IEFzeW5jSXRlcmFibGU8VElubmVyPjtcbnByaXZhdGUgX291dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbnByaXZhdGUgX2lubmVyU2VsZWN0b3I6ICh2YWx1ZTogVElubmVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbnByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IFRJbm5lcikgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VE91dGVyPn0gb3V0ZXJcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VElubmVyPn0gaW5uZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVE91dGVyKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBvdXRlclNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRJbm5lcik6IChUS2V5fCFQcm9taXNlPFRLZXk+KX0gaW5uZXJTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUT3V0ZXIsIFRJbm5lcik6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gcmVzdWx0U2VsZWN0b3JcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPixcbiAgICBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+LFxuICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogVElubmVyKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fb3V0ZXIgPSBvdXRlcjtcbiAgICB0aGlzLl9pbm5lciA9IGlubmVyO1xuICAgIHRoaXMuX291dGVyU2VsZWN0b3IgPSBvdXRlclNlbGVjdG9yO1xuICAgIHRoaXMuX2lubmVyU2VsZWN0b3IgPSBpbm5lclNlbGVjdG9yO1xuICAgIHRoaXMuX3Jlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshTWFwPFRLZXksICFBcnJheTw/Pj59ICovIG1hcCA9IGF3YWl0IGNyZWF0ZUdyb3VwaW5nKHRoaXMuX2lubmVyLCB0aGlzLl9pbm5lclNlbGVjdG9yLCBpZGVudGl0eSk7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUT3V0ZXJ9ICovIG91dGVyRWxlbWVudCBvZiB0aGlzLl9vdXRlcikge1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHtUS2V5fSAqLyBvdXRlcktleSA9IGF3YWl0IHRoaXMuX291dGVyU2VsZWN0b3Iob3V0ZXJFbGVtZW50KTtcbiAgICAgIGlmIChtYXAuaGFzKG91dGVyS2V5KSkge1xuICAgICAgICBmb3IgKGxldCAvKiogQHR5cGUgez99ICovIGlubmVyRWxlbWVudCBvZiAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8oKCBtYXAuZ2V0KG91dGVyS2V5KSkpKSB7XG4gICAgICAgICAgeWllbGQgYXdhaXQgdGhpcy5fcmVzdWx0U2VsZWN0b3Iob3V0ZXJFbGVtZW50LCBpbm5lckVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEpvaW5Bc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRPdXRlcj59ICovXG5Kb2luQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX291dGVyO1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUSW5uZXI+fSAqL1xuSm9pbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9pbm5lcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVE91dGVyKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSAqL1xuSm9pbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9vdXRlclNlbGVjdG9yO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUSW5uZXIpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9ICovXG5Kb2luQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2lubmVyU2VsZWN0b3I7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRPdXRlciwgVElubmVyKTogKFRSZXN1bHR8IVByb21pc2U8VFJlc3VsdD4pfSAqL1xuSm9pbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9yZXN1bHRTZWxlY3Rvcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VE91dGVyPn0gb3V0ZXJcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VElubmVyPn0gaW5uZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVE91dGVyKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBvdXRlclNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRJbm5lcik6IChUS2V5fCFQcm9taXNlPFRLZXk+KX0gaW5uZXJTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUT3V0ZXIsIFRJbm5lcik6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gcmVzdWx0U2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5uZXJKb2luPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcjogQXN5bmNJdGVyYWJsZTxUT3V0ZXI+LFxuICAgIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4sXG4gICAgb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGlubmVyU2VsZWN0b3I6ICh2YWx1ZTogVElubmVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICByZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBUSW5uZXIpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEpvaW5Bc3luY0l0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcixcbiAgICBpbm5lcixcbiAgICBvdXRlclNlbGVjdG9yLFxuICAgIGlubmVyU2VsZWN0b3IsXG4gICAgcmVzdWx0U2VsZWN0b3IpO1xufVxuIl19