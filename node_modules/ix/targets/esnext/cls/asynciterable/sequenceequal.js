goog.module('targets.esnext.cls.asynciterable.sequenceequal'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/sequenceequal.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var comparer_1 = goog.require('targets.esnext.cls.internal.comparer');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {!AsyncIterable<T>} other
 * @param {function(T, T): (boolean|!Promise<boolean>)=} comparer
 * @return {!Promise<boolean>}
 */
async function sequenceEqual(source, other, comparer = comparer_1.comparerAsync) {
    const /** @type {!AsyncIterator<T>} */ it1 = source[Symbol.asyncIterator](), /** @type {!AsyncIterator<T>} */ it2 = other[Symbol.asyncIterator]();
    let /** @type {!IteratorResult<T>} */ next1, /** @type {!IteratorResult<T>} */ next2;
    while (!(next1 = await it1.next()).done) {
        if (!(!(next2 = await it2.next()).done && await comparer(next1.value, next2.value))) {
            return false;
        }
    }
    return (await it2.next()).done;
}
exports.sequenceEqual = sequenceEqual;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NlcXVlbmNlZXF1YWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG1EQUxzQjtBQU10QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7Ozs7O0dBTUc7QUFYRyxLQUFNLHdCQWFSLE1BWndCLEVBYXhCLEtBWnVCLEVBYXZCLFdBWitELHdCQUFjO0lBYS9FLE1BQU0sZ0NBWkQsQ0FBQSxHQUFJLEdBQUUsTUFBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFBLGdDQUFDLENBQUEsR0FBSSxHQUFFLEtBQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztJQWFoRixJQUFJLGlDQVpELENBQUEsS0FBeUIsRUFBQSxpQ0FBQyxDQUFBLEtBQXlCLENBQUM7SUFhdkQsT0FaTyxDQUFDLENBQUMsS0FBSyxHQUFFLE1BQU0sR0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUU7UUFheEMsRUFBRSxDQUFDLENBWkMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUUsTUFBTSxHQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUcsTUFBTSxRQUFTLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBQyxLQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUU7WUFhcEYsTUFaTSxDQUFBLEtBQU0sQ0FBQztRQWFmLENBWkM7SUFhSCxDQVpDO0lBY0QsTUFaTSxDQUFBLENBQUUsTUFBSyxHQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFhakMsQ0FaQztBQWJELHNDQWFDIiwiZmlsZSI6InNlcXVlbmNlZXF1YWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBjb21wYXJlckFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuY29tcGFyZXJcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IG90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQsIFQpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPik9fSBjb21wYXJlclxuICogQHJldHVybiB7IVByb21pc2U8Ym9vbGVhbj59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBzZXF1ZW5jZUVxdWFsPFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBvdGhlcjogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBjb21wYXJlcjogKGZpcnN0OiBULCBzZWNvbmQ6IFQpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFQ+fSAqLyBpdDEgPSBzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCksIC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VD59ICovIGl0MiA9IG90aGVyW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICBsZXQgLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VD59ICovIG5leHQxOiBJdGVyYXRvclJlc3VsdDxUPiwgLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VD59ICovIG5leHQyOiBJdGVyYXRvclJlc3VsdDxUPjtcbiAgd2hpbGUgKCEobmV4dDEgPSBhd2FpdCBpdDEubmV4dCgpKS5kb25lKSB7XG4gICAgaWYgKCEoIShuZXh0MiA9IGF3YWl0IGl0Mi5uZXh0KCkpLmRvbmUgJiYgYXdhaXQgY29tcGFyZXIobmV4dDEudmFsdWUsIG5leHQyLnZhbHVlKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGF3YWl0IGl0Mi5uZXh0KCkpLmRvbmU7XG59XG4iXX0=