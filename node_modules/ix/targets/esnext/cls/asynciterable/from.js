goog.module('targets.esnext.cls.asynciterable.from'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/from.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.esnext.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var tolength_1 = goog.require('targets.esnext.cls.internal.tolength');
const tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.tolength");
var isiterable_1 = goog.require('targets.esnext.cls.internal.isiterable');
const tsickle_forward_declare_5 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.isiterable");
const tsickle_forward_declare_6 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
/**
 * @template TSource, TResult
 */
class FromArrayIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!ArrayLike<TSource>} source
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {number} */ i = 0;
        const /** @type {number} */ length = tolength_1.toLength(((this._source)).length);
        while (i < length) {
            yield await this._selector(this._source[i], i++);
        }
    }
}
function FromArrayIterable_tsickle_Closure_declarations() {
    /** @type {!ArrayLike<TSource>} */
    FromArrayIterable.prototype._source;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromArrayIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 */
class FromAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {number} */ i = 0;
        for await (let /** @type {TSource} */ item of (this._source)) {
            yield await this._selector(item, i++);
        }
    }
}
function FromAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} */
    FromAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromAsyncIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 */
class FromPromiseIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!PromiseLike<TSource>} source
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {TSource} */ item = await this._source;
        yield await this._selector(item, 0);
    }
}
function FromPromiseIterable_tsickle_Closure_declarations() {
    /** @type {!PromiseLike<TSource>} */
    FromPromiseIterable.prototype._source;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromPromiseIterable.prototype._selector;
}
/**
 * @template TSource
 */
class AsyncObserver {
    constructor() {
        this.values = [];
        this.hasCompleted = false;
        this.hasError = false;
        this.errorValue = null;
        this.closed = false;
    }
    /**
     * @param {TSource} value
     * @return {void}
     */
    next(value) {
        if (!this.closed) {
            this.values.push(value);
        }
    }
    /**
     * @param {?} err
     * @return {void}
     */
    error(err) {
        if (!this.closed) {
            this.closed = true;
            this.hasError = true;
            this.errorValue = err;
        }
    }
    /**
     * @return {void}
     */
    complete() {
        if (!this.closed) {
            this.closed = true;
        }
    }
}
function AsyncObserver_tsickle_Closure_declarations() {
    /** @type {!Array<TSource>} */
    AsyncObserver.prototype.values;
    /** @type {boolean} */
    AsyncObserver.prototype.hasError;
    /** @type {boolean} */
    AsyncObserver.prototype.hasCompleted;
    /** @type {?} */
    AsyncObserver.prototype.errorValue;
    /** @type {boolean} */
    AsyncObserver.prototype.closed;
}
/**
 * @template TSource, TResult
 */
class FromObservableAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!tsickle_forward_declare_6.Observable<TSource>} observable
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    constructor(observable, selector) {
        super();
        this._observable = observable;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!AsyncObserver<TSource>} */ observer = new AsyncObserver();
        const /** @type {!Subscription} */ subscription = this._observable.subscribe(observer);
        let /** @type {number} */ i = 0;
        while (1) {
            if (observer.values.length > 0) {
                yield await this._selector(observer.values.shift(), i++);
            }
            else if (observer.closed) {
                subscription.unsubscribe();
                if (observer.hasError) {
                    throw observer.errorValue;
                }
                else {
                    break;
                }
            }
        }
    }
}
function FromObservableAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!tsickle_forward_declare_6.Observable<TSource>} */
    FromObservableAsyncIterable.prototype._observable;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromObservableAsyncIterable.prototype._selector;
}
/** @typedef {(!PromiseLike<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>|!ArrayLike<TSource>|!tsickle_forward_declare_6.Observable<TSource>)} */
exports.AsyncIterableInput;
/**
 * @param {?} x
 * @return {boolean}
 */
function isPromise(x) {
    return x != null && Object(x) === x && typeof x['then'] === 'function';
}
/**
 * @param {?} x
 * @return {boolean}
 */
function isObservable(x) {
    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';
}
/**
 * @param {?} x
 * @return {boolean}
 */
function isArrayLike(x) {
    return x != null && Object(x) === x && typeof x['length'] === 'number';
}
/**
 * @template TSource, TResult
 * @param {(!PromiseLike<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>|!ArrayLike<TSource>|!tsickle_forward_declare_6.Observable<TSource>)} source
 * @param {function(TSource, number): (TResult|!Promise<TResult>)=} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function from(source, selector = identity_1.identityAsync, thisArg) {
    const /** @type {?} */ fn = bindcallback_1.bindCallback(selector, thisArg, 2);
    if (isiterable_1.isIterable(source) || isiterable_1.isAsyncIterable(source)) {
        return new FromAsyncIterable(source, fn);
    }
    if (isPromise(source)) {
        return new FromPromiseIterable(source, fn);
    }
    if (isObservable(source)) {
        return new FromObservableAsyncIterable(source, fn);
    }
    if (isArrayLike(source)) {
        return new FromArrayIterable(source, fn);
    }
    throw new TypeError('Input type not supported');
}
exports.from = from;
//# sourceMappingURL=data:application/json;base64,