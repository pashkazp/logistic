goog.module('targets.esnext.cls.asynciterable.skipuntil'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/skipuntil.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class SkipUntilAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {!Promise<?>} other
     */
    constructor(source, other) {
        super();
        this._source = source;
        this._other = other;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {boolean} */ otherDone = false;
        this._other.then(() => otherDone = true);
        for await (let /** @type {TSource} */ item of this._source) {
            if (otherDone) {
                yield item;
            }
        }
    }
}
function SkipUntilAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    SkipUntilAsyncIterable.prototype._source;
    /** @type {!Promise<?>} */
    SkipUntilAsyncIterable.prototype._other;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {!Promise<?>} other
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function skipUntil(source, other) {
    return new SkipUntilAsyncIterable(source, other);
}
exports.skipUntil = skipUntil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NraXB1bnRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgsNEJBQXFDLFNBQVEsOEJBQXdCO0lBV3JFOzs7T0FHRztJQVZELFlBQVksTUFBOEIsRUFBQyxLQUFvQjtRQVk3RCxLQVhLLEVBQUUsQ0FBQztRQVlSLElBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLElBWEksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO0lBWXRCLENBQUM7SUFDSDs7T0FFRztJQVpELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFjM0IsSUFBSSxzQkFiRCxDQUFBLFNBQVUsR0FBRSxLQUFNLENBQUM7UUFjdEIsSUFiSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBSyxTQUFVLEdBQUUsSUFBSyxDQUFDLENBQUM7UUFjekMsR0FiRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFjcEMsRUFBRSxDQUFDLENBYkMsU0FBUyxDQUFDLENBQUEsQ0FBRTtnQkFBQSxNQUFNLElBQUssQ0FBQztZQUFBLENBQUU7UUFjaEMsQ0FiQztJQWNILENBYkM7Q0FDSDtBQWVBO0lBQ0Esc0NBQXNDO0lBQ3RDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDekMsMEJBQTBCO0lBQzFCLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILG1CQTJCSSxNQTFCOEIsRUEyQjlCLEtBMUJtQjtJQTJCckIsTUExQk0sQ0FBQSxJQUFJLHNCQUF1QixDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTJCNUQsQ0ExQkM7QUFKRCw4QkFJQyIsImZpbGUiOiJza2lwdW50aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgU2tpcFVudGlsQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX290aGVyOiBQcm9taXNlPGFueT47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHshUHJvbWlzZTw/Pn0gb3RoZXJcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBvdGhlcjogUHJvbWlzZTxhbnk+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fb3RoZXIgPSBvdGhlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBvdGhlckRvbmUgPSBmYWxzZTtcbiAgICB0aGlzLl9vdGhlci50aGVuKCgpID0+IG90aGVyRG9uZSA9IHRydWUpO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChvdGhlckRvbmUpIHsgeWllbGQgaXRlbTsgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBTa2lwVW50aWxBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuU2tpcFVudGlsQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7IVByb21pc2U8Pz59ICovXG5Ta2lwVW50aWxBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fb3RoZXI7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHshUHJvbWlzZTw/Pn0gb3RoZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcFVudGlsPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBvdGhlcjogUHJvbWlzZTxhbnk+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFNraXBVbnRpbEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBvdGhlcik7XG59XG4iXX0=