goog.module('targets.esnext.cls.asynciterable.flatten'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/flatten.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var isiterable_1 = goog.require('targets.esnext.cls.internal.isiterable');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.isiterable");
/**
 * @template TSource
 */
class FlattenAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} depth
     */
    constructor(source, depth) {
        super();
        this._source = source;
        this._depth = depth;
    }
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} depth
     * @return {!AsyncIterable<TSource>}
     */
    async *_flatten(source, depth) {
        if (depth === 0) {
            for await (let /** @type {TSource} */ item of source) {
                yield item;
            }
            return;
        }
        for await (let /** @type {TSource} */ item of source) {
            if (isiterable_1.isAsyncIterable(item)) {
                for await (let /** @type {TSource} */ innerItem of this._flatten(item, depth - 1)) {
                    yield innerItem;
                }
            }
            else {
                yield item;
            }
        }
    }
    /**
     * @return {!AsyncIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return this._flatten(this._source, this._depth)[Symbol.asyncIterator]();
    }
}
function FlattenAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    FlattenAsyncIterable.prototype._source;
    /** @type {number} */
    FlattenAsyncIterable.prototype._depth;
}
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {number=} depth
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function flatten(source, depth = Infinity) {
    return new FlattenAsyncIterable(source, depth);
}
exports.flatten = flatten;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ZsYXR0ZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsdURBTndCO0FBT3hCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxpREFBaUQsQ0FBQyxDQUFDO0FBQ3pHOztHQUVHO0FBUkgsMEJBQW1DLFNBQVEsOEJBQXdCO0lBWW5FOzs7T0FHRztJQVhELFlBQVksTUFBOEIsRUFBQyxLQUFjO1FBYXZELEtBWkssRUFBRSxDQUFDO1FBYVIsSUFaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsSUFaSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7SUFhdEIsQ0FBQztJQUNIOzs7O09BSUc7SUFmTSxLQUFNLEVBQUUsUUFBUSxDQUFDLE1BQThCLEVBQUMsS0FBYztRQWtCbkUsRUFBRSxDQUFDLENBakJDLEtBQUssS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO1lBa0JoQixHQWpCRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsTUFBTyxDQUFDLENBQUEsQ0FBRTtnQkFBQSxNQUFNLElBQUssQ0FBQztZQUFBLENBQUU7WUFrQjlDLE1BQU0sQ0FqQkM7UUFrQlQsQ0FqQkM7UUFrQkQsR0FqQkcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLE1BQU8sQ0FBQyxDQUFBLENBQUU7WUFrQjlCLEVBQUUsQ0FBQyxDQWpCQyw0QkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQkFrQjFCLEdBakJHLENBQUEsS0FBTSxDQUFOLENBQVEsSUFBQSxzQkFBRyxDQUFBLFNBQVUsSUFBRyxJQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBQyxLQUFNLEdBQUUsQ0FBRSxDQUFDLENBQUMsQ0FBQSxDQUFFO29CQUFBLE1BQU0sU0FBVSxDQUFDO2dCQUFBLENBQUU7WUFrQmxGLENBakJDO1lBQUEsSUFBSyxDQUFBLENBQUU7Z0JBa0JOLE1BakJLLElBQUssQ0FBQztZQWtCYixDQWpCQztRQWtCSCxDQWpCQztJQWtCSCxDQUFDO0lBQ0g7O09BRUc7SUFsQkQsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBb0JwQixNQW5CTSxDQUFBLElBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxJQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7SUFvQjFFLENBbkJDO0NBQ0g7QUFxQkE7SUFDQSxzQ0FBc0M7SUFDdEMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN2QyxxQkFBcUI7SUFDckIsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUN0QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUEvQkgsaUJBQTJCLE1BQXdCLEVBQUMsUUFBZ0IsUUFBUztJQWlDM0UsTUFoQ00sQ0FBQSxJQUFJLG9CQUFxQixDQUFJLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQWlDcEQsQ0FoQ0M7QUFGRCwwQkFFQyIsImZpbGUiOiJmbGF0dGVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi9pbnRlcm5hbC9pc2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlzaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIEZsYXR0ZW5Bc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfZGVwdGg6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gZGVwdGhcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBkZXB0aDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZGVwdGggPSBkZXB0aDtcbiAgfVxuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBkZXB0aFxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59XG4gKi9cblxucHJpdmF0ZSBhc3luYyAqX2ZsYXR0ZW4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBkZXB0aDogbnVtYmVyKTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiB7XG4gICAgaWYgKGRlcHRoID09PSAwKSB7XG4gICAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2Ygc291cmNlKSB7IHlpZWxkIGl0ZW07IH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHNvdXJjZSkge1xuICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpdGVtKSkge1xuICAgICAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGlubmVySXRlbSBvZiB0aGlzLl9mbGF0dGVuKGl0ZW0sIGRlcHRoIC0gMSkpIHsgeWllbGQgaW5uZXJJdGVtOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmxhdHRlbih0aGlzLl9zb3VyY2UsIHRoaXMuX2RlcHRoKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBGbGF0dGVuQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkZsYXR0ZW5Bc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5GbGF0dGVuQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2RlcHRoO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyPX0gZGVwdGhcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sIGRlcHRoOiBudW1iZXIgPSBJbmZpbml0eSk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIG5ldyBGbGF0dGVuQXN5bmNJdGVyYWJsZTxUPihzb3VyY2UsIGRlcHRoKTtcbn1cbiJdfQ==