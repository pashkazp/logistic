goog.module('targets.esnext.cls.asynciterable.map'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/map.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.esnext.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource, TResult
 */
class MapAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {number} */ i = 0;
        for await (let /** @type {TSource} */ item of ((this._source))) {
            let /** @type {TResult} */ result = await this._selector(item, i++);
            yield result;
        }
    }
}
function MapAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    MapAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    MapAsyncIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function map(source, selector, thisArg) {
    return new MapAsyncIterable(source, bindcallback_1.bindCallback(selector, thisArg, 2));
}
exports.map = map;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL21hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwyREFOcUI7QUFPckIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7O0dBRUc7QUFSSCxzQkFBd0MsU0FBUSw4QkFBd0I7SUFZeEU7OztPQUdHO0lBWEQsWUFhRSxNQVo4QixFQWE5QixRQVp1RTtRQWF2RSxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxTQUFTLEdBQUUsUUFBUyxDQUFDO0lBYTVCLENBQUM7SUFDSDs7T0FFRztJQWJELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFlM0IsSUFBSSxxQkFkRCxDQUFBLENBQUUsR0FBRSxDQUFFLENBQUM7UUFlVixHQWRHLENBQUEsS0FBTSxDQUFOLENBQVEsSUFBQSxzQkFBRyxDQUFBLElBQUssSUFBQSxDQUE0QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBRTtZQWU5RCxJQUFJLHNCQWRELENBQUEsTUFBTyxHQUFFLE1BQU0sSUFBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQztZQWU3QyxNQWRLLE1BQU8sQ0FBQztRQWVmLENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxzQ0FBc0M7SUFDdEMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNuQyxxRUFBcUU7SUFDckUsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUNyQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBM0JILGFBNkJJLE1BNUI4QixFQTZCOUIsUUE1QnVFLEVBNkJ2RSxPQTVCYTtJQTZCZixNQTVCTSxDQUFBLElBQUksZ0JBQWlCLENBQW1CLE1BQU0sRUFBQywyQkFBYSxDQUFDLFFBQVEsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQTZCNUYsQ0E1QkM7QUFMRCxrQkFLQyIsImZpbGUiOiJtYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5iaW5kY2FsbGJhY2tcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKi9cbmNsYXNzIE1hcEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9zZWxlY3RvcjogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBQcm9taXNlPFRSZXN1bHQ+IHwgVFJlc3VsdDtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gc2VsZWN0b3JcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IFByb21pc2U8VFJlc3VsdD4gfCBUUmVzdWx0KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLygoIDxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pih0aGlzLl9zb3VyY2UpKSkpIHtcbiAgICAgIGxldCAvKiogQHR5cGUge1RSZXN1bHR9ICovIHJlc3VsdCA9IGF3YWl0IHRoaXMuX3NlbGVjdG9yKGl0ZW0sIGkrKyk7XG4gICAgICB5aWVsZCByZXN1bHQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIE1hcEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5NYXBBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9ICovXG5NYXBBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc2VsZWN0b3I7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRSZXN1bHRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9IHNlbGVjdG9yXG4gKiBAcGFyYW0gez89fSB0aGlzQXJnXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gUHJvbWlzZTxUUmVzdWx0PiB8IFRSZXN1bHQsXG4gICAgdGhpc0FyZz86IGFueSk6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBNYXBBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+KHNvdXJjZSwgYmluZENhbGxiYWNrKHNlbGVjdG9yLCB0aGlzQXJnLCAyKSk7XG59XG4iXX0=