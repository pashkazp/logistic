goog.module('targets.esnext.cls.asynciterable.publish'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/publish.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _refcountlist_1 = goog.require('targets.esnext.cls.iterable._refcountlist');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.esnext.cls.asynciterable.create');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.create");
/**
 * @template T
 */
class PublishedAsyncBuffer extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterator<T>} source
     */
    constructor(source) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = new _refcountlist_1.RefCountList(0);
    }
    /**
     * @param {number} i
     * @return {!AsyncIterable<T>}
     */
    async *_getIterable(i) {
        try {
            while (1) {
                let /** @type {boolean} */ hasValue = false, /** @type {T} */ current = ({});
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let /** @type {!IteratorResult<T>} */ next = await this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        if (this._error) {
                            throw this._error;
                        }
                        else {
                            break;
                        }
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
    /**
     * @return {!AsyncIterator<T>}
     */
    [Symbol.asyncIterator]() {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.asyncIterator]();
    }
}
function PublishedAsyncBuffer_tsickle_Closure_declarations() {
    /** @type {!tsickle_forward_declare_2.RefCountList<T>} */
    PublishedAsyncBuffer.prototype._buffer;
    /** @type {!AsyncIterator<T>} */
    PublishedAsyncBuffer.prototype._source;
    /** @type {?} */
    PublishedAsyncBuffer.prototype._error;
    /** @type {boolean} */
    PublishedAsyncBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {function(!AsyncIterable<TSource>): !AsyncIterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(TSource|TResult)>}
 */
function publish(source, selector) {
    return selector ?
        create_1.create(async () => selector(publish(source))[Symbol.asyncIterator]()) :
        new PublishedAsyncBuffer(source[Symbol.asyncIterator]());
}
exports.publish = publish;
//# sourceMappingURL=data:application/json;base64,