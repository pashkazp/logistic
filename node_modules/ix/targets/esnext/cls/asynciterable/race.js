goog.module('targets.esnext.cls.asynciterable.race'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/race.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class RaceAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} left
     * @param {!AsyncIterable<TSource>} right
     */
    constructor(left, right) {
        super();
        this._left = left;
        this._right = right;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        const /** @type {!AsyncIterator<TSource>} */ leftIt = this._left[Symbol.asyncIterator](), /** @type {!AsyncIterator<TSource>} */ rightIt = this._right[Symbol.asyncIterator]();
        let /** @type {boolean} */ leftWins = false, /** @type {boolean} */ rightWins = false;
        const { value, done } = await Promise.race([
            leftIt.next().then(x => { leftWins = true; return x; }),
            rightIt.next().then(x => { rightWins = true; return x; }),
        ]);
        if (!done) {
            yield value;
        }
        let /** @type {!AsyncIterator<TSource>} */ resultIterator, /** @type {!AsyncIterator<TSource>} */ otherIterator;
        if (leftWins) {
            resultIterator = leftIt;
            otherIterator = rightIt;
        }
        else {
            resultIterator = rightIt;
            otherIterator = leftIt;
        }
        // Cancel/finish other iterator
        if (otherIterator.return) {
            await otherIterator.return();
        }
        let /** @type {?} */ next;
        while (!(next = await resultIterator.next()).done) {
            yield next.value;
        }
    }
}
function RaceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    RaceAsyncIterable.prototype._left;
    /** @type {!AsyncIterable<TSource>} */
    RaceAsyncIterable.prototype._right;
}
/**
 * Propagates the async sequence that reacts first.
 * @template TSource
 * @param {!AsyncIterable<TSource>} left
 * @param {!AsyncIterable<TSource>} right
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function race(left, right) {
    return new RaceAsyncIterable(left, right);
}
exports.race = race;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBILHVCQUFnQyxTQUFRLDhCQUF3QjtJQVdoRTs7O09BR0c7SUFWRCxZQUFZLElBQTRCLEVBQUMsS0FBOEI7UUFZckUsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztRQVlsQixJQVhJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBYzNCLE1BQU0sc0NBYkQsQ0FBQSxNQUFPLEdBQUUsSUFBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBQSxzQ0FBQyxDQUFBLE9BQVEsR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBY2pHLElBQUksc0JBYkQsQ0FBQSxRQUFTLEdBQUUsS0FBTSxFQUFBLHNCQUFDLENBQUEsU0FBVSxHQUFFLEtBQU0sQ0FBQztRQWN4QyxNQWJLLEVBQUUsS0FBTSxFQUFDLElBQUssRUFBRSxHQUFFLE1BQU0sT0FBUSxDQUFDLElBQUksQ0FBQztZQWN6QyxNQWJNLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBSyxRQUFTLEdBQUUsSUFBSyxDQUFDLENBQUEsTUFBTyxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUUsQ0FBQztZQWN2RCxPQWJPLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBSyxTQUFVLEdBQUUsSUFBSyxDQUFDLENBQUEsTUFBTyxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUUsQ0FBQztTQUMxRCxDQUFDLENBQUM7UUFlSCxFQUFFLENBQUMsQ0FiQyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7WUFjVixNQWJLLEtBQU0sQ0FBQztRQWNkLENBYkM7UUFlRCxJQUFJLHNDQWJELENBQUEsY0FBdUMsRUFBQSxzQ0FBQyxDQUFBLGFBQXNDLENBQUM7UUFjbEYsRUFBRSxDQUFDLENBYkMsUUFBUSxDQUFDLENBQUEsQ0FBRTtZQWNiLGNBYmMsR0FBRSxNQUFPLENBQUM7WUFjeEIsYUFiYSxHQUFFLE9BQVEsQ0FBQztRQWMxQixDQWJDO1FBQUEsSUFBSyxDQUFBLENBQUU7WUFjTixjQWJjLEdBQUUsT0FBUSxDQUFDO1lBY3pCLGFBYmEsR0FBRSxNQUFPLENBQUM7UUFjekIsQ0FiQztRQWVELCtCQUErQjtRQUMvQixFQUFFLENBQUMsQ0FiQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBRTtZQUFBLE1BQU0sYUFBYyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQUEsQ0FBRTtRQWUzRCxJQUFJLGdCQWJELENBQUEsSUFBSyxDQUFDO1FBY1QsT0FiTyxDQUFDLENBQUMsSUFBSSxHQUFFLE1BQU0sY0FBZSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUU7WUFjbEQsTUFiSyxJQUFLLENBQUMsS0FBSyxDQUFDO1FBY25CLENBYkM7SUFjSCxDQWJDO0NBQ0g7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ2xDLHNDQUFzQztJQUN0QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQ25DLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFwQkgsY0FzQkksSUFyQjRCLEVBc0I1QixLQXJCNkI7SUFzQi9CLE1BckJNLENBQUEsSUFBSSxpQkFBa0IsQ0FBVSxJQUFJLEVBQUMsS0FBTSxDQUFDLENBQUM7QUFzQnJELENBckJDO0FBSkQsb0JBSUMiLCJmaWxlIjoicmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBSYWNlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX2xlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9yaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gbGVmdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gcmlnaHRcbiAqL1xuY29uc3RydWN0b3IobGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3JpZ2h0ID0gcmlnaHQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gbGVmdEl0ID0gdGhpcy5fbGVmdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSwgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gcmlnaHRJdCA9IHRoaXMuX3JpZ2h0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGxlZnRXaW5zID0gZmFsc2UsIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gcmlnaHRXaW5zID0gZmFsc2U7XG4gICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgIGxlZnRJdC5uZXh0KCkudGhlbih4ID0+IHsgbGVmdFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgICByaWdodEl0Lm5leHQoKS50aGVuKHggPT4geyByaWdodFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgXSk7XG5cbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cblxuICAgIGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyByZXN1bHRJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPiwgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gb3RoZXJJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPjtcbiAgICBpZiAobGVmdFdpbnMpIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gbGVmdEl0O1xuICAgICAgb3RoZXJJdGVyYXRvciA9IHJpZ2h0SXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gcmlnaHRJdDtcbiAgICAgIG90aGVySXRlcmF0b3IgPSBsZWZ0SXQ7XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsL2ZpbmlzaCBvdGhlciBpdGVyYXRvclxuICAgIGlmIChvdGhlckl0ZXJhdG9yLnJldHVybikgeyBhd2FpdCBvdGhlckl0ZXJhdG9yLnJldHVybigpOyB9XG5cbiAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgIHdoaWxlICghKG5leHQgPSBhd2FpdCByZXN1bHRJdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFJhY2VBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuUmFjZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9sZWZ0O1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblJhY2VBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fcmlnaHQ7XG59XG5cbi8qKlxuICogUHJvcGFnYXRlcyB0aGUgYXN5bmMgc2VxdWVuY2UgdGhhdCByZWFjdHMgZmlyc3QuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gbGVmdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gcmlnaHRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFjZTxUU291cmNlPihcbiAgICBsZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFJhY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KGxlZnQsIHJpZ2h0KTtcbn1cbiJdfQ==