goog.module('targets.esnext.cls.asynciterable.startwith'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/startwith.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class StartWithAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {!Array<TSource>} args
     */
    constructor(source, args) {
        super();
        this._source = source;
        this._args = args;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        for (let /** @type {TSource} */ x of this._args) {
            yield x;
        }
        for await (let /** @type {TSource} */ item of this._source) {
            yield item;
        }
    }
}
function StartWithAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    StartWithAsyncIterable.prototype._source;
    /** @type {!Array<TSource>} */
    StartWithAsyncIterable.prototype._args;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {...TSource} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function startWith(source, ...args) {
    return new StartWithAsyncIterable(source, args);
}
exports.startWith = startWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3N0YXJ0d2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgsNEJBQXFDLFNBQVEsOEJBQXdCO0lBV3JFOzs7T0FHRztJQVZELFlBQVksTUFBOEIsRUFBQyxJQUFnQjtRQVl6RCxLQVhLLEVBQUUsQ0FBQztRQVlSLElBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLElBWEksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDO0lBWXBCLENBQUM7SUFDSDs7T0FFRztJQVpELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFjM0IsR0FBRyxDQUFDLENBYkMsSUFBQSxzQkFBRyxDQUFBLENBQUUsSUFBRyxJQUFLLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBRTtZQUFBLE1BQU0sQ0FBRSxDQUFDO1FBQUEsQ0FBRTtRQWN0QyxHQWJHLENBQUEsS0FBTSxDQUFOLENBQVEsSUFBQSxzQkFBRyxDQUFBLElBQUssSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtZQUFBLE1BQU0sSUFBSyxDQUFDO1FBQUEsQ0FBRTtJQWN0RCxDQWJDO0NBQ0g7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3pDLDhCQUE4QjtJQUM5QixzQkFBc0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ3ZDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxtQkEyQkksTUExQjhCLEVBMkI5QixHQTFCRyxJQUFlO0lBMkJwQixNQTFCTSxDQUFBLElBQUksc0JBQXVCLENBQVUsTUFBTSxFQUFDLElBQUssQ0FBQyxDQUFDO0FBMkIzRCxDQTFCQztBQUpELDhCQUlDIiwiZmlsZSI6InN0YXJ0d2l0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBTdGFydFdpdGhBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfYXJnczogVFNvdXJjZVtdO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7IUFycmF5PFRTb3VyY2U+fSBhcmdzXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgYXJnczogVFNvdXJjZVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fYXJncyA9IGFyZ3M7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyB4IG9mIHRoaXMuX2FyZ3MpIHsgeWllbGQgeDsgfVxuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFN0YXJ0V2l0aEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5TdGFydFdpdGhBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHshQXJyYXk8VFNvdXJjZT59ICovXG5TdGFydFdpdGhBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fYXJncztcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0gey4uLlRTb3VyY2V9IGFyZ3NcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAuLi5hcmdzOiBUU291cmNlW10pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgU3RhcnRXaXRoQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGFyZ3MpO1xufVxuIl19