goog.module('targets.esnext.cls.asynciterable.max'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/max.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!AsyncIterable<?>} source
 * @param {function(?): (number|!Promise<number>)=} selector
 * @return {!Promise<number>}
 */
async function max(source, selector = identity_1.identityAsync) {
    let /** @type {boolean} */ atleastOnce = false;
    let /** @type {number} */ value = -Infinity;
    for await (let /** @type {?} */ item of source) {
        if (!atleastOnce) {
            atleastOnce = true;
        }
        let /** @type {number} */ x = await selector(item);
        if (x > value) {
            value = x;
        }
    }
    if (!atleastOnce) {
        throw new Error('Sequence contains no elements');
    }
    return value;
}
exports.max = max;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL21heC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsbURBTHNCO0FBTXRCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQU5qRDtBQWNyRDs7OztHQUlHO0FBVkcsS0FBTSxjQVlSLE1BWDBCLEVBWTFCLFdBWGdELHdCQUFjO0lBWWhFLElBQUksc0JBWEQsQ0FBQSxXQUFZLEdBQUUsS0FBTSxDQUFDO0lBWXhCLElBQUkscUJBWEQsQ0FBQSxLQUFNLEdBQUUsQ0FBRSxRQUFRLENBQUM7SUFZdEIsR0FYRyxDQUFBLEtBQU0sQ0FBTixDQUFRLElBQUEsZ0JBQUcsQ0FBQSxJQUFLLElBQUcsTUFBTyxDQUFDLENBQUEsQ0FBRTtRQVk5QixFQUFFLENBQUMsQ0FYQyxDQUFDLFdBQVcsQ0FBQyxDQUFBLENBQUU7WUFZakIsV0FYVyxHQUFFLElBQUssQ0FBQztRQVlyQixDQVhDO1FBWUQsSUFBSSxxQkFYRCxDQUFBLENBQUUsR0FBRSxNQUFNLFFBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQVk3QixFQUFFLENBQUMsQ0FYQyxDQUFDLEdBQUUsS0FBTSxDQUFDLENBQUEsQ0FBRTtZQUFBLEtBQU0sR0FBRSxDQUFFLENBQUM7UUFBQSxDQUFFO0lBWS9CLENBWEM7SUFZRCxFQUFFLENBQUMsQ0FYQyxDQUFDLFdBQVcsQ0FBQyxDQUFBLENBQUU7UUFZakIsTUFYSyxJQUFJLEtBQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO0lBWW5ELENBWEM7SUFhRCxNQVhNLENBQUEsS0FBTSxDQUFDO0FBWWYsQ0FYQztBQWpCRCxrQkFpQkMiLCJmaWxlIjoibWF4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgaWRlbnRpdHlBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWF4KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxudW1iZXI+LFxuICAgIHNlbGVjdG9yPzogKHg6IG51bWJlcikgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+KTogUHJvbWlzZTxudW1iZXI+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1heDxUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgc2VsZWN0b3I6ICh4OiBUKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBQcm9taXNlPG51bWJlcj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8Pz59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbig/KTogKG51bWJlcnwhUHJvbWlzZTxudW1iZXI+KT19IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxudW1iZXI+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWF4KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxhbnk+LFxuICAgIHNlbGVjdG9yOiAoeDogYW55KSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4gPSBpZGVudGl0eUFzeW5jKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gYXRsZWFzdE9uY2UgPSBmYWxzZTtcbiAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyB2YWx1ZSA9IC1JbmZpbml0eTtcbiAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHs/fSAqLyBpdGVtIG9mIHNvdXJjZSkge1xuICAgIGlmICghYXRsZWFzdE9uY2UpIHtcbiAgICAgIGF0bGVhc3RPbmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyB4ID0gYXdhaXQgc2VsZWN0b3IoaXRlbSk7XG4gICAgaWYgKHggPiB2YWx1ZSkgeyB2YWx1ZSA9IHg7IH1cbiAgfVxuICBpZiAoIWF0bGVhc3RPbmNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBubyBlbGVtZW50cycpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuIl19