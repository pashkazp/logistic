goog.module('targets.esnext.cls.asynciterable.takelast'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/takelast.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class TakeLastAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        if (this._count === 0) {
            return;
        }
        let /** @type {!Array<?>} */ q = [];
        for await (let /** @type {TSource} */ item of this._source) {
            if (q.length >= this._count) {
                q.shift();
            }
            q.push(item);
        }
        while (q.length > 0) {
            yield ((q.shift()));
        }
    }
}
function TakeLastAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TakeLastAsyncIterable.prototype._source;
    /** @type {number} */
    TakeLastAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function takeLast(source, count) {
    return new TakeLastAsyncIterable(source, count);
}
exports.takeLast = takeLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rha2VsYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCwyQkFBb0MsU0FBUSw4QkFBd0I7SUFXcEU7OztPQUdHO0lBVkQsWUFBWSxNQUE4QixFQUFDLEtBQWM7UUFZdkQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBYzNCLEVBQUUsQ0FBQyxDQWJDLElBQUksQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTtZQUFBLE1BQUEsQ0FBUTtRQUFBLENBQUU7UUFlbEMsSUFBSSx3QkFiRCxDQUFBLENBQUUsR0FBRSxFQUFHLENBQUM7UUFjWCxHQWJHLENBQUEsS0FBTSxDQUFOLENBQVEsSUFBQSxzQkFBRyxDQUFBLElBQUssSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtZQWNwQyxFQUFFLENBQUMsQ0FiQyxDQUFDLENBQUMsTUFBTSxJQUFHLElBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFFO2dCQWM1QixDQWJDLENBQUMsS0FBSyxFQUFFLENBQUM7WUFjWixDQWJDO1lBY0QsQ0FiQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQWNmLENBYkM7UUFlRCxPQWJPLENBQUMsQ0FBQyxNQUFNLEdBQUUsQ0FBRSxFQUFDLENBQUU7WUFjcEIsTUFBNEIsQ0FBQyxDQWJ4QixDQUFFLENBQUMsS0FBSyxFQUFBLENBQUEsQ0FBRyxDQUFDO1FBY25CLENBYkM7SUFjSCxDQWJDO0NBQ0g7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3hDLHFCQUFxQjtJQUNyQixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQ3ZDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxrQkFBa0MsTUFBOEIsRUFBQyxLQUFjO0lBMkI3RSxNQTFCTSxDQUFBLElBQUkscUJBQXNCLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBMkIzRCxDQTFCQztBQUZELDRCQUVDIiwiZmlsZSI6InRha2VsYXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFRha2VMYXN0QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgaWYgKHRoaXMuX2NvdW50ID09PSAwKSB7IHJldHVybjsgfVxuXG4gICAgbGV0IC8qKiBAdHlwZSB7IUFycmF5PD8+fSAqLyBxID0gW107XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKHEubGVuZ3RoID49IHRoaXMuX2NvdW50KSB7XG4gICAgICAgIHEuc2hpZnQoKTtcbiAgICAgIH1cbiAgICAgIHEucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICB3aGlsZSAocS5sZW5ndGggPiAwKSB7XG4gICAgICB5aWVsZCAvKiogQHR5cGUge1RTb3VyY2V9ICovKCggcS5zaGlmdCgpKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFRha2VMYXN0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblRha2VMYXN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuVGFrZUxhc3RBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fY291bnQ7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VMYXN0PFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYWtlTGFzdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBjb3VudCk7XG59XG4iXX0=