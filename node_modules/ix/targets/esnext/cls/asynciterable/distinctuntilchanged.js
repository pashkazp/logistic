goog.module('targets.esnext.cls.asynciterable.distinctuntilchanged'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/distinctuntilchanged.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var identity_1 = goog.require('targets.esnext.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var comparer_1 = goog.require('targets.esnext.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource, TKey
 */
class DistinctUntilChangedAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TKey, TKey): (boolean|!Promise<boolean>)} comparer
     */
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {TKey} */ currentKey, /** @type {boolean} */ hasCurrentKey = false;
        for await (let /** @type {TSource} */ item of this._source) {
            let /** @type {TKey} */ key = await this._keySelector(item);
            let /** @type {boolean} */ comparerEquals = false;
            if (hasCurrentKey) {
                comparerEquals = await this._comparer(/** @type {TKey} */ ((currentKey)), key);
            }
            if (!hasCurrentKey || !comparerEquals) {
                hasCurrentKey = true;
                currentKey = key;
                yield item;
            }
        }
    }
}
function DistinctUntilChangedAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    DistinctUntilChangedAsyncIterable.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    DistinctUntilChangedAsyncIterable.prototype._keySelector;
    /** @type {function(TKey, TKey): (boolean|!Promise<boolean>)} */
    DistinctUntilChangedAsyncIterable.prototype._comparer;
}
/**
 * @template TSource, TKey
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)=} keySelector
 * @param {function(TKey, TKey): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function distinctUntilChanged(source, keySelector = identity_1.identityAsync, comparer = comparer_1.comparerAsync) {
    return new DistinctUntilChangedAsyncIterable(source, keySelector, comparer);
}
exports.distinctUntilChanged = distinctUntilChanged;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2Rpc3RpbmN0dW50aWxjaGFuZ2VkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELG1EQU5zQjtBQU90QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FQakQ7QUFRckQsbURBUHNCO0FBUXRCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQ3ZHOztHQUVHO0FBVEgsdUNBQXNELFNBQVEsOEJBQXdCO0lBY3RGOzs7O09BSUc7SUFiRCxZQWVJLE1BZDhCLEVBZTlCLFdBZHFELEVBZXJELFFBZG1FO1FBZXJFLEtBZEssRUFBRSxDQUFDO1FBZVIsSUFkSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFldEIsSUFkSSxDQUFDLFlBQVksR0FBRSxXQUFZLENBQUM7UUFlaEMsSUFkSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFlNUIsQ0FBQztJQUNIOztPQUVHO0lBZkQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWlCM0IsSUFBSSxtQkFoQkQsQ0FBQSxVQUE2QixFQUFBLHNCQUFDLENBQUEsYUFBYyxHQUFFLEtBQU0sQ0FBQztRQWlCeEQsR0FoQkcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBaUJwQyxJQUFJLG1CQWhCRCxDQUFBLEdBQUksR0FBRSxNQUFNLElBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFpQnhDLElBQUksc0JBaEJELENBQUEsY0FBZSxHQUFFLEtBQU0sQ0FBQztZQWlCM0IsRUFBRSxDQUFDLENBaEJDLGFBQWEsQ0FBQyxDQUFBLENBQUU7Z0JBQUEsY0FBZSxHQUFFLE1BQU0sSUFBSyxDQUFDLFNBQVMsQ0FBQSxtQkFBQSxDQUFBLENBQUEsQ0FBQyxVQUFBLENBQUEsQ0FBVyxFQUFDLEdBQUksQ0FBQyxDQUFDO1lBQUEsQ0FBRTtZQWlCL0UsRUFBRSxDQUFDLENBaEJDLENBQUMsYUFBYSxJQUFHLENBQUUsY0FBYyxDQUFDLENBQUEsQ0FBRTtnQkFpQnRDLGFBaEJhLEdBQUUsSUFBSyxDQUFDO2dCQWlCckIsVUFoQlUsR0FBRSxHQUFJLENBQUM7Z0JBaUJqQixNQWhCSyxJQUFLLENBQUM7WUFpQmIsQ0FoQkM7UUFpQkgsQ0FoQkM7SUFpQkgsQ0FoQkM7Q0FDSDtBQWtCQTtJQUNBLHNDQUFzQztJQUN0QyxpQ0FBaUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BELHVEQUF1RDtJQUN2RCxpQ0FBaUMsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ3pELGdFQUFnRTtJQUNoRSxpQ0FBaUMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ3RELENBQUM7QUFFRDs7Ozs7O0dBTUc7QUEvQkgsOEJBaUNJLE1BaEM4QixFQWlDOUIsY0FoQ3VELHdCQUFjLEVBaUNyRSxXQWhDcUUsd0JBQWM7SUFpQ3JGLE1BaENNLENBQUEsSUFBSSxpQ0FBa0MsQ0FBZ0IsTUFBTSxFQUFDLFdBQVksRUFBQyxRQUFTLENBQUMsQ0FBQztBQWlDN0YsQ0FoQ0M7QUFMRCxvREFLQyIsImZpbGUiOiJkaXN0aW5jdHVudGlsY2hhbmdlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgaWRlbnRpdHlBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICovXG5jbGFzcyBEaXN0aW5jdFVudGlsQ2hhbmdlZEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbnByaXZhdGUgX2NvbXBhcmVyOiAoeDogVEtleSwgeTogVEtleSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgICAgY29tcGFyZXI6IChmaXJzdDogVEtleSwgc2Vjb25kOiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyBjdXJyZW50S2V5OiBUS2V5IHwgdW5kZWZpbmVkLCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc0N1cnJlbnRLZXkgPSBmYWxzZTtcbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyBrZXkgPSBhd2FpdCB0aGlzLl9rZXlTZWxlY3RvcihpdGVtKTtcbiAgICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGNvbXBhcmVyRXF1YWxzID0gZmFsc2U7XG4gICAgICBpZiAoaGFzQ3VycmVudEtleSkgeyBjb21wYXJlckVxdWFscyA9IGF3YWl0IHRoaXMuX2NvbXBhcmVyKCAvKiogQHR5cGUge1RLZXl9ICovKChjdXJyZW50S2V5KSksIGtleSk7IH1cbiAgICAgIGlmICghaGFzQ3VycmVudEtleSB8fCAhY29tcGFyZXJFcXVhbHMpIHtcbiAgICAgICAgaGFzQ3VycmVudEtleSA9IHRydWU7XG4gICAgICAgIGN1cnJlbnRLZXkgPSBrZXk7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIERpc3RpbmN0VW50aWxDaGFuZ2VkQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkRpc3RpbmN0VW50aWxDaGFuZ2VkQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IChUS2V5fCFQcm9taXNlPFRLZXk+KX0gKi9cbkRpc3RpbmN0VW50aWxDaGFuZ2VkQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2tleVNlbGVjdG9yO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuRGlzdGluY3RVbnRpbENoYW5nZWRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fY29tcGFyZXI7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXlcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pPX0ga2V5U2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KT19IGNvbXBhcmVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0VW50aWxDaGFuZ2VkPFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PiA9IGlkZW50aXR5QXN5bmMsXG4gICAgY29tcGFyZXI6IChmaXJzdDogVEtleSwgc2Vjb25kOiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiA9IGNvbXBhcmVyQXN5bmMpOiAgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IERpc3RpbmN0VW50aWxDaGFuZ2VkQXN5bmNJdGVyYWJsZTxUU291cmNlLCBUS2V5Pihzb3VyY2UsIGtleVNlbGVjdG9yLCBjb21wYXJlcik7XG59XG4iXX0=