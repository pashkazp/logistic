goog.module('targets.esnext.cls.asynciterable.generate'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/generate.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TState, TResult
 */
class GenerateAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {TState} initialState
     * @param {function(TState): (boolean|!Promise<boolean>)} condition
     * @param {function(TState): (TState|!Promise<TState>)} iterate
     * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
     */
    constructor(initialState, condition, iterate, resultSelector) {
        super();
        this._initialState = initialState;
        this._condition = condition;
        this._iterate = iterate;
        this._resultSelector = resultSelector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    async *[Symbol.asyncIterator]() {
        for (let /** @type {TState} */ i = this._initialState; await this._condition(i); i = await this._iterate(i)) {
            yield await this._resultSelector(i);
        }
    }
}
function GenerateAsyncIterable_tsickle_Closure_declarations() {
    /** @type {TState} */
    GenerateAsyncIterable.prototype._initialState;
    /** @type {function(TState): (boolean|!Promise<boolean>)} */
    GenerateAsyncIterable.prototype._condition;
    /** @type {function(TState): (TState|!Promise<TState>)} */
    GenerateAsyncIterable.prototype._iterate;
    /** @type {function(TState): (TResult|!Promise<TResult>)} */
    GenerateAsyncIterable.prototype._resultSelector;
}
/**
 * @template TState, TResult
 * @param {TState} initialState
 * @param {function(TState): (boolean|!Promise<boolean>)} condition
 * @param {function(TState): (TState|!Promise<TState>)} iterate
 * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function generate(initialState, condition, iterate, resultSelector) {
    return new GenerateAsyncIterable(initialState, condition, iterate, resultSelector);
}
exports.generate = generate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2dlbmVyYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCwyQkFBNEMsU0FBUSw4QkFBd0I7SUFhNUU7Ozs7O09BS0c7SUFaRCxZQWNJLFlBYm9CLEVBY3BCLFNBYndELEVBY3hELE9BYm9ELEVBY3BELGNBYjZEO1FBYy9ELEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLGFBQWEsR0FBRSxZQUFhLENBQUM7UUFjbEMsSUFiSSxDQUFDLFVBQVUsR0FBRSxTQUFVLENBQUM7UUFjNUIsSUFiSSxDQUFDLFFBQVEsR0FBRSxPQUFRLENBQUM7UUFjeEIsSUFiSSxDQUFDLGVBQWUsR0FBRSxjQUFlLENBQUM7SUFjeEMsQ0FBQztJQUNIOztPQUVHO0lBZEQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWdCM0IsR0FBRyxDQUFDLENBZkMsSUFBQSxxQkFBRyxDQUFBLENBQUUsR0FBRSxJQUFLLENBQUMsYUFBYSxFQUFDLE1BQU0sSUFBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFFLEdBQUUsTUFBTSxJQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUU7WUFnQnRGLE1BZkssTUFBTSxJQUFLLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBZ0J0QyxDQWZDO0lBZ0JILENBZkM7Q0FDSDtBQWlCQTtJQUNBLHFCQUFxQjtJQUNyQixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0lBQzlDLDREQUE0RDtJQUM1RCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0lBQzNDLDBEQUEwRDtJQUMxRCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0lBQ3pDLDREQUE0RDtJQUM1RCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDO0FBQ2hELENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBakNILGtCQW1DSSxZQWxDb0IsRUFtQ3BCLFNBbEN3RCxFQW1DeEQsT0FsQ29ELEVBbUNwRCxjQWxDNkQ7SUFtQy9ELE1BbENNLENBQUEsSUFBSSxxQkFBc0IsQ0FBa0IsWUFBWSxFQUFDLFNBQVUsRUFBQyxPQUFRLEVBQUMsY0FBZSxDQUFDLENBQUM7QUFtQ3RHLENBbENDO0FBTkQsNEJBTUMiLCJmaWxlIjoiZ2VuZXJhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTdGF0ZSwgVFJlc3VsdFxuICovXG5jbGFzcyBHZW5lcmF0ZUFzeW5jSXRlcmFibGU8VFN0YXRlLCBUUmVzdWx0PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbnByaXZhdGUgX2luaXRpYWxTdGF0ZTogVFN0YXRlO1xucHJpdmF0ZSBfY29uZGl0aW9uOiAodmFsdWU6IFRTdGF0ZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG5wcml2YXRlIF9pdGVyYXRlOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFN0YXRlIHwgUHJvbWlzZTxUU3RhdGU+O1xucHJpdmF0ZSBfcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pjtcbi8qKlxuICogQHBhcmFtIHtUU3RhdGV9IGluaXRpYWxTdGF0ZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbmRpdGlvblxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAoVFN0YXRlfCFQcm9taXNlPFRTdGF0ZT4pfSBpdGVyYXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gcmVzdWx0U2VsZWN0b3JcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBpbml0aWFsU3RhdGU6IFRTdGF0ZSxcbiAgICAgIGNvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgICAgaXRlcmF0ZTogKHZhbHVlOiBUU3RhdGUpID0+IFRTdGF0ZSB8IFByb21pc2U8VFN0YXRlPixcbiAgICAgIHJlc3VsdFNlbGVjdG9yOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2luaXRpYWxTdGF0ZSA9IGluaXRpYWxTdGF0ZTtcbiAgICB0aGlzLl9jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgdGhpcy5faXRlcmF0ZSA9IGl0ZXJhdGU7XG4gICAgdGhpcy5fcmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTdGF0ZX0gKi8gaSA9IHRoaXMuX2luaXRpYWxTdGF0ZTsgYXdhaXQgdGhpcy5fY29uZGl0aW9uKGkpOyBpID0gYXdhaXQgdGhpcy5faXRlcmF0ZShpKSkge1xuICAgICAgeWllbGQgYXdhaXQgdGhpcy5fcmVzdWx0U2VsZWN0b3IoaSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEdlbmVyYXRlQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtUU3RhdGV9ICovXG5HZW5lcmF0ZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9pbml0aWFsU3RhdGU7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTdGF0ZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cbkdlbmVyYXRlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvbmRpdGlvbjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRTdGF0ZXwhUHJvbWlzZTxUU3RhdGU+KX0gKi9cbkdlbmVyYXRlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2l0ZXJhdGU7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTdGF0ZSk6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gKi9cbkdlbmVyYXRlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3Jlc3VsdFNlbGVjdG9yO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU3RhdGUsIFRSZXN1bHRcbiAqIEBwYXJhbSB7VFN0YXRlfSBpbml0aWFsU3RhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBjb25kaXRpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRTdGF0ZXwhUHJvbWlzZTxUU3RhdGU+KX0gaXRlcmF0ZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9IHJlc3VsdFNlbGVjdG9yXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlPFRTdGF0ZSwgVFJlc3VsdD4oXG4gICAgaW5pdGlhbFN0YXRlOiBUU3RhdGUsXG4gICAgY29uZGl0aW9uOiAodmFsdWU6IFRTdGF0ZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgaXRlcmF0ZTogKHZhbHVlOiBUU3RhdGUpID0+IFRTdGF0ZSB8IFByb21pc2U8VFN0YXRlPixcbiAgICByZXN1bHRTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEdlbmVyYXRlQXN5bmNJdGVyYWJsZTxUU3RhdGUsIFRSZXN1bHQ+KGluaXRpYWxTdGF0ZSwgY29uZGl0aW9uLCBpdGVyYXRlLCByZXN1bHRTZWxlY3Rvcik7XG59XG4iXX0=