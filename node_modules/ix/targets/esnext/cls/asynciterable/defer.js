goog.module('targets.esnext.cls.asynciterable.defer'); exports = {}; var module = {id: 'targets/esnext/cls/asynciterable/defer.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.esnext.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class DeferAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {function(): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} fn
     */
    constructor(fn) {
        super();
        this._fn = fn;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    async *[Symbol.asyncIterator]() {
        let /** @type {!AsyncIterable<TSource>} */ items = await this._fn();
        for await (let /** @type {TSource} */ item of items) {
            yield item;
        }
    }
}
function DeferAsyncIterable_tsickle_Closure_declarations() {
    /** @type {function(): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} */
    DeferAsyncIterable.prototype._fn;
}
/**
 * @template TSource
 * @param {function(): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} factory
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function defer(factory) {
    return new DeferAsyncIterable(factory);
}
exports.defer = defer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2RlZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCx3QkFBaUMsU0FBUSw4QkFBd0I7SUFVakU7O09BRUc7SUFURCxZQUFZLEVBQWtFO1FBVzVFLEtBVkssRUFBRSxDQUFDO1FBV1IsSUFWSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7SUFXaEIsQ0FBQztJQUNIOztPQUVHO0lBWEQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQWEzQixJQUFJLHNDQVpELENBQUEsS0FBTSxHQUFFLE1BQU0sSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBYTdCLEdBWkcsQ0FBQSxLQUFNLENBQU4sQ0FBUSxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLEtBQU0sQ0FBQyxDQUFBLENBQUU7WUFBQSxNQUFNLElBQUssQ0FBQztRQUFBLENBQUU7SUFhL0MsQ0FaQztDQUNIO0FBY0E7SUFDQSxzRkFBc0Y7SUFDdEYsa0JBQWtCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUNqQyxDQUFDO0FBRUQ7Ozs7R0FJRztBQXJCSCxlQXVCSSxPQXRCdUU7SUF1QnpFLE1BdEJNLENBQUEsSUFBSSxrQkFBbUIsQ0FBVSxPQUFPLENBQUMsQ0FBQztBQXVCbEQsQ0F0QkM7QUFIRCxzQkFHQyIsImZpbGUiOiJkZWZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBEZWZlckFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9mbjogKCkgPT4gQXN5bmNJdGVyYWJsZTxUU291cmNlPiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUU291cmNlPj47XG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogKCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fCFQcm9taXNlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pil9IGZuXG4gKi9cbmNvbnN0cnVjdG9yKGZuOiAoKSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi8gaXRlbXMgPSBhd2FpdCB0aGlzLl9mbigpO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiBpdGVtcykgeyB5aWVsZCBpdGVtOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRGVmZXJBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge2Z1bmN0aW9uKCk6ICghQXN5bmNJdGVyYWJsZTxUU291cmNlPnwhUHJvbWlzZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj4pfSAqL1xuRGVmZXJBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogKCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fCFQcm9taXNlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pil9IGZhY3RvcnlcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmZXI8VFNvdXJjZT4oXG4gICAgZmFjdG9yeTogKCkgPT4gQXN5bmNJdGVyYWJsZTxUU291cmNlPiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGVmZXJBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KGZhY3RvcnkpO1xufVxuIl19