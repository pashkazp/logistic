Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
const bindcallback_1 = require("../internal/bindcallback");
const identity_1 = require("../internal/identity");
const tolength_1 = require("../internal/tolength");
const isiterable_1 = require("../internal/isiterable");
class FromArrayIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    async *[Symbol.asyncIterator]() {
        let i = 0;
        const length = tolength_1.toLength(this._source.length);
        while (i < length) {
            yield await this._selector(this._source[i], i++);
        }
    }
}
class FromAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    async *[Symbol.asyncIterator]() {
        let i = 0;
        for await (let item of this._source) {
            yield await this._selector(item, i++);
        }
    }
}
class FromPromiseIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    async *[Symbol.asyncIterator]() {
        const item = await this._source;
        yield await this._selector(item, 0);
    }
}
class AsyncObserver {
    constructor() {
        this.values = [];
        this.hasCompleted = false;
        this.hasError = false;
        this.errorValue = null;
        this.closed = false;
    }
    next(value) {
        if (!this.closed) {
            this.values.push(value);
        }
    }
    error(err) {
        if (!this.closed) {
            this.closed = true;
            this.hasError = true;
            this.errorValue = err;
        }
    }
    complete() {
        if (!this.closed) {
            this.closed = true;
        }
    }
}
class FromObservableAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(observable, selector) {
        super();
        this._observable = observable;
        this._selector = selector;
    }
    async *[Symbol.asyncIterator]() {
        const observer = new AsyncObserver();
        const subscription = this._observable.subscribe(observer);
        let i = 0;
        while (1) {
            if (observer.values.length > 0) {
                yield await this._selector(observer.values.shift(), i++);
            }
            else if (observer.closed) {
                subscription.unsubscribe();
                if (observer.hasError) {
                    throw observer.errorValue;
                }
                else {
                    break;
                }
            }
        }
    }
}
function isPromise(x) {
    return x != null && Object(x) === x && typeof x['then'] === 'function';
}
function isObservable(x) {
    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';
}
function isArrayLike(x) {
    return x != null && Object(x) === x && typeof x['length'] === 'number';
}
function from(source, selector = identity_1.identityAsync, thisArg) {
    const fn = bindcallback_1.bindCallback(selector, thisArg, 2);
    if (isiterable_1.isIterable(source) || isiterable_1.isAsyncIterable(source)) {
        return new FromAsyncIterable(source, fn);
    }
    if (isPromise(source)) {
        return new FromPromiseIterable(source, fn);
    }
    if (isObservable(source)) {
        return new FromObservableAsyncIterable(source, fn);
    }
    if (isArrayLike(source)) {
        return new FromArrayIterable(source, fn);
    }
    throw new TypeError('Input type not supported');
}
exports.from = from;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
