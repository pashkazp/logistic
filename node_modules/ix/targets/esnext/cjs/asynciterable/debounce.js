Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
const foreach_1 = require("./foreach");
class DebounceAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    async *[Symbol.asyncIterator]() {
        let noValue;
        let lastItem;
        let deferred;
        let resolver;
        let done = false;
        let hasError = false;
        let error;
        const reset = (hasNoValue) => {
            noValue = hasNoValue;
            lastItem = undefined;
            deferred = new Promise(r => resolver = r);
        };
        const run = () => {
            if (lastItem === undefined) {
                noValue = true;
                return;
            }
            const item = lastItem;
            const res = resolver;
            reset(false);
            setTimeout(run, this._time);
            res(item);
        };
        reset(true);
        foreach_1.forEach(this._source, item => {
            lastItem = item;
            if (noValue) {
                run();
            }
        })
            .then(() => done = true)
            .catch(err => { hasError = true; error = err; });
        while (1) {
            if (done) {
                break;
            }
            if (hasError) {
                throw error;
            }
            yield await deferred;
        }
    }
}
function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}
exports.debounce = debounce;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGVib3VuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9EQUFrRDtBQUNsRCx1Q0FBb0M7QUFFcEMsMkJBQXFDLFNBQVEsOEJBQXVCO0lBSWxFLFlBQVksTUFBOEIsRUFBRSxJQUFZO1FBQ3RELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDM0IsSUFBSSxPQUFnQixDQUFDO1FBQ3JCLElBQUksUUFBNkIsQ0FBQztRQUNsQyxJQUFJLFFBQTBCLENBQUM7UUFDL0IsSUFBSSxRQUFzRSxDQUFDO1FBQzNFLElBQUksSUFBSSxHQUFZLEtBQUssQ0FBQztRQUMxQixJQUFJLFFBQVEsR0FBWSxLQUFLLENBQUM7UUFDOUIsSUFBSSxLQUFVLENBQUM7UUFFZixNQUFNLEtBQUssR0FBRyxDQUFDLFVBQW1CO1lBQ2hDLE9BQU8sR0FBRyxVQUFVLENBQUM7WUFDckIsUUFBUSxHQUFHLFNBQVMsQ0FBQztZQUNyQixRQUFRLEdBQUcsSUFBSSxPQUFPLENBQVUsQ0FBQyxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNyRCxDQUFDLENBQUM7UUFFRixNQUFNLEdBQUcsR0FBRztZQUNWLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDO2dCQUNmLE1BQU0sQ0FBQztZQUNULENBQUM7WUFFRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUM7WUFDdEIsTUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDO1lBQ3JCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNiLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLENBQUMsQ0FBQztRQUVGLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLGlCQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJO1lBQ3hCLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDaEIsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztnQkFBQyxHQUFHLEVBQUUsQ0FBQztZQUFDLENBQUM7UUFDekIsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQzthQUN2QixLQUFLLENBQUMsR0FBRyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFakQsT0FBTyxDQUFDLEVBQUUsQ0FBQztZQUNULEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQUMsS0FBSyxDQUFDO1lBQUMsQ0FBQztZQUNwQixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUFDLE1BQU0sS0FBSyxDQUFDO1lBQUMsQ0FBQztZQUM5QixNQUFNLE1BQU0sUUFBUyxDQUFDO1FBQ3hCLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxrQkFBa0MsTUFBOEIsRUFBRSxJQUFZO0lBQzVFLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixDQUFVLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRkQsNEJBRUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9kZWJvdW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBmb3JFYWNoIH0gZnJvbSAnLi9mb3JlYWNoJztcblxuY2xhc3MgRGVib3VuY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX3RpbWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IG5vVmFsdWU6IGJvb2xlYW47XG4gICAgbGV0IGxhc3RJdGVtOiBUU291cmNlIHwgdW5kZWZpbmVkO1xuICAgIGxldCBkZWZlcnJlZDogUHJvbWlzZTxUU291cmNlPjtcbiAgICBsZXQgcmVzb2x2ZXI6ICh2YWx1ZT86IFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPiB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICBsZXQgZG9uZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCBoYXNFcnJvcjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCBlcnJvcjogYW55O1xuXG4gICAgY29uc3QgcmVzZXQgPSAoaGFzTm9WYWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgbm9WYWx1ZSA9IGhhc05vVmFsdWU7XG4gICAgICBsYXN0SXRlbSA9IHVuZGVmaW5lZDtcbiAgICAgIGRlZmVycmVkID0gbmV3IFByb21pc2U8VFNvdXJjZT4ociA9PiByZXNvbHZlciA9IHIpO1xuICAgIH07XG5cbiAgICBjb25zdCBydW4gPSAoKSA9PiB7XG4gICAgICBpZiAobGFzdEl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpdGVtID0gbGFzdEl0ZW07XG4gICAgICBjb25zdCByZXMgPSByZXNvbHZlcjtcbiAgICAgIHJlc2V0KGZhbHNlKTtcbiAgICAgIHNldFRpbWVvdXQocnVuLCB0aGlzLl90aW1lKTtcbiAgICAgIHJlcyhpdGVtKTtcbiAgICB9O1xuXG4gICAgcmVzZXQodHJ1ZSk7XG4gICAgZm9yRWFjaCh0aGlzLl9zb3VyY2UsIGl0ZW0gPT4ge1xuICAgICAgbGFzdEl0ZW0gPSBpdGVtO1xuICAgICAgaWYgKG5vVmFsdWUpIHsgcnVuKCk7IH1cbiAgICB9KVxuICAgIC50aGVuKCgpID0+IGRvbmUgPSB0cnVlKVxuICAgIC5jYXRjaChlcnIgPT4geyBoYXNFcnJvciA9IHRydWU7IGVycm9yID0gZXJyOyB9KTtcblxuICAgIHdoaWxlICgxKSB7XG4gICAgICBpZiAoZG9uZSkgeyBicmVhazsgfVxuICAgICAgaWYgKGhhc0Vycm9yKSB7IHRocm93IGVycm9yOyB9XG4gICAgICB5aWVsZCBhd2FpdCBkZWZlcnJlZCE7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEZWJvdW5jZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCB0aW1lKTtcbn1cbiJdfQ==
