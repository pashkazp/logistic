Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
/**
 * @ignore
 */
async function defaultCompareAsync(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
exports.defaultCompareAsync = defaultCompareAsync;
/**
 * @ignore
 */
class ExtremaByAsyncIterator extends asynciterable_1.AsyncIterableX {
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    async *[Symbol.asyncIterator]() {
        let result = [], done, next;
        const it = this._source[Symbol.asyncIterator]();
        done = (next = await it.next()).done;
        if (done) {
            throw new Error('Sequence contains no elements');
        }
        let current = next.value;
        let resKey = await this._keyFn(current);
        done = (next = await it.next()).done;
        while (!done) {
            let curr = next.value;
            let key = await this._keyFn(curr);
            const c = await this._cmp(key, resKey);
            if (c === 0) {
                result.push(curr);
            }
            else if (c > 0) {
                result = [curr];
                resKey = key;
            }
            done = (next = await it.next()).done;
        }
        yield* result;
    }
}
/**
 * @ignore
 */
function extremaBy(source, keyFn, cmp) {
    return new ExtremaByAsyncIterator(source, keyFn, cmp);
}
exports.extremaBy = extremaBy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvX2V4dHJlbWFieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0RBQWtEO0FBRWxEOztHQUVHO0FBQ0ksS0FBSyw4QkFBaUMsR0FBTSxFQUFFLFFBQVc7SUFDOUQsTUFBTSxDQUFDLEdBQUcsR0FBRyxRQUFRLEdBQUcsQ0FBQyxHQUFHLEdBQUcsR0FBRyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3RELENBQUM7QUFGRCxrREFFQztBQUVEOztHQUVHO0FBQ0gsNEJBQTRDLFNBQVEsOEJBQXVCO0lBS3pFLFlBQ0ksTUFBOEIsRUFDOUIsS0FBMkMsRUFDM0MsR0FBbUQ7UUFDckQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBRUQsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUMzQixJQUFJLE1BQU0sR0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztRQUN2QyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBQ2hELElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDckMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUN0QixJQUFJLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLEdBQUcsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUN2QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQixNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQztZQUNELElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUN2QyxDQUFDO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxtQkFDSSxNQUE4QixFQUM5QixLQUEyQyxFQUMzQyxHQUFtRDtJQUNyRCxNQUFNLENBQUMsSUFBSSxzQkFBc0IsQ0FBZ0IsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN2RSxDQUFDO0FBTEQsOEJBS0MiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9fZXh0cmVtYWJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyZUFzeW5jPFQ+KGtleTogVCwgbWluVmFsdWU6IFQpOiBQcm9taXNlPG51bWJlcj4ge1xuICByZXR1cm4ga2V5ID4gbWluVmFsdWUgPyAxIDoga2V5IDwgbWluVmFsdWUgPyAtMSA6IDA7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBFeHRyZW1hQnlBc3luY0l0ZXJhdG9yPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2tleUZuOiAoeDogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT47XG4gIHByaXZhdGUgX2NtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleUZuOiAoeDogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlGbiA9IGtleUZuO1xuICAgIHRoaXMuX2NtcCA9IGNtcDtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCByZXN1bHQ6IFRTb3VyY2VbXSA9IFtdLCBkb25lLCBuZXh0O1xuICAgIGNvbnN0IGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIGRvbmUgPSAobmV4dCA9IGF3YWl0IGl0Lm5leHQoKSkuZG9uZTtcbiAgICBpZiAoZG9uZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBubyBlbGVtZW50cycpO1xuICAgIH1cblxuICAgIGxldCBjdXJyZW50ID0gbmV4dC52YWx1ZTtcbiAgICBsZXQgcmVzS2V5ID0gYXdhaXQgdGhpcy5fa2V5Rm4oY3VycmVudCk7XG4gICAgZG9uZSA9IChuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lO1xuICAgIHdoaWxlICghZG9uZSkge1xuICAgICAgbGV0IGN1cnIgPSBuZXh0LnZhbHVlO1xuICAgICAgbGV0IGtleSA9IGF3YWl0IHRoaXMuX2tleUZuKGN1cnIpO1xuICAgICAgY29uc3QgYyA9IGF3YWl0IHRoaXMuX2NtcChrZXksIHJlc0tleSk7XG4gICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICByZXN1bHQucHVzaChjdXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoYyA+IDApIHtcbiAgICAgICAgcmVzdWx0ID0gW2N1cnJdO1xuICAgICAgICByZXNLZXkgPSBrZXk7XG4gICAgICB9XG4gICAgICBkb25lID0gKG5leHQgPSBhd2FpdCBpdC5uZXh0KCkpLmRvbmU7XG4gICAgfVxuXG4gICAgeWllbGQqIHJlc3VsdDtcbiAgfVxufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJlbWFCeTxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRXh0cmVtYUJ5QXN5bmNJdGVyYXRvcjxUU291cmNlLCBUS2V5Pihzb3VyY2UsIGtleUZuLCBjbXApO1xufVxuIl19
