Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
const toarray_1 = require("./toarray");
const sorter_1 = require("../internal/sorter");
class OrderedAsyncIterableBaseX extends asynciterable_1.AsyncIterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    async *[Symbol.asyncIterator]() {
        const array = await toarray_1.toArray(this._source);
        const len = array.length;
        const indices = new Array(len);
        for (let i = 0, len = array.length; i < len; i++) {
            indices[i] = i;
        }
        indices.sort(this._getSorter(array));
        for (const index of indices) {
            yield array[index];
        }
    }
    thenBy(keySelector, comparer = sorter_1.sorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedAsyncIterableX(this._source, keySelector, comparer, false, this);
    }
    thenByDescending(keySelector, comparer = sorter_1.sorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedAsyncIterableX(this._source, keySelector, comparer, true, this);
    }
}
exports.OrderedAsyncIterableBaseX = OrderedAsyncIterableBaseX;
class OrderedAsyncIterableX extends OrderedAsyncIterableBaseX {
    constructor(source, keySelector, comparer, descending, parent) {
        super(source);
        this._keySelector = keySelector;
        this._comparer = comparer;
        this._descending = descending;
        this._parent = parent;
    }
    _getSorter(elements, next) {
        const keys = elements.map(this._keySelector);
        const comparer = this._comparer;
        const parent = this._parent;
        const descending = this._descending;
        const sorter = (x, y) => {
            const result = comparer(keys[x], keys[y]);
            if (result === 0) {
                return next ? next(x, y) : x - y;
            }
            return descending ? -result : result;
        };
        return parent ? parent._getSorter(elements, sorter) : sorter;
    }
}
exports.OrderedAsyncIterableX = OrderedAsyncIterableX;
function orderBy(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source, keySelector, comparer, false);
}
exports.orderBy = orderBy;
function orderByDescending(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source, keySelector, comparer, true);
}
exports.orderByDescending = orderByDescending;
function thenBy(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source._source, keySelector, comparer, false, source);
}
exports.thenBy = thenBy;
function thenByDescending(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source._source, keySelector, comparer, true, source);
}
exports.thenByDescending = thenByDescending;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
