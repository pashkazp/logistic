Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
const _sleep_1 = require("./_sleep");
class GenerateTimeAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(initialState, condition, iterate, resultSelector, timeSelector) {
        super();
        this._initialState = initialState;
        this._condition = condition;
        this._iterate = iterate;
        this._resultSelector = resultSelector;
        this._timeSelector = timeSelector;
    }
    async *[Symbol.asyncIterator]() {
        for (let i = this._initialState; await this._condition(i); i = await this._iterate(i)) {
            await _sleep_1.sleep(await this._timeSelector(i));
            yield await this._resultSelector(i);
        }
    }
}
function generateTime(initialState, condition, iterate, resultSelector, timeSelector) {
    return new GenerateTimeAsyncIterable(initialState, condition, iterate, resultSelector, timeSelector);
}
exports.generateTime = generateTime;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZ2VuZXJhdGV0aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvREFBa0Q7QUFDbEQscUNBQWlDO0FBRWpDLCtCQUFpRCxTQUFRLDhCQUF1QjtJQU85RSxZQUNJLFlBQW9CLEVBQ3BCLFNBQXdELEVBQ3hELE9BQW9ELEVBQ3BELGNBQTZELEVBQzdELFlBQXlEO1FBQzNELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7UUFDbEMsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7UUFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7UUFDeEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7SUFDcEMsQ0FBQztJQUVELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDM0IsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ3RGLE1BQU0sY0FBSyxDQUFDLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3pDLE1BQU0sTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxzQkFDSSxZQUFvQixFQUNwQixTQUF3RCxFQUN4RCxPQUFvRCxFQUNwRCxjQUE2RCxFQUM3RCxZQUF5RDtJQUMzRCxNQUFNLENBQUMsSUFBSSx5QkFBeUIsQ0FDbEMsWUFBWSxFQUNaLFNBQVMsRUFDVCxPQUFPLEVBQ1AsY0FBYyxFQUNkLFlBQVksQ0FBQyxDQUFDO0FBQ2xCLENBQUM7QUFaRCxvQ0FZQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2dlbmVyYXRldGltZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4vX3NsZWVwJztcblxuY2xhc3MgR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZTxUU3RhdGUsIFRSZXN1bHQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICBwcml2YXRlIF9pbml0aWFsU3RhdGU6IFRTdGF0ZTtcbiAgcHJpdmF0ZSBfY29uZGl0aW9uOiAodmFsdWU6IFRTdGF0ZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG4gIHByaXZhdGUgX2l0ZXJhdGU6ICh2YWx1ZTogVFN0YXRlKSA9PiBUU3RhdGUgfCBQcm9taXNlPFRTdGF0ZT47XG4gIHByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD47XG4gIHByaXZhdGUgX3RpbWVTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIGluaXRpYWxTdGF0ZTogVFN0YXRlLFxuICAgICAgY29uZGl0aW9uOiAodmFsdWU6IFRTdGF0ZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgICBpdGVyYXRlOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFN0YXRlIHwgUHJvbWlzZTxUU3RhdGU+LFxuICAgICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PixcbiAgICAgIHRpbWVTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIHRoaXMuX2NvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICB0aGlzLl9pdGVyYXRlID0gaXRlcmF0ZTtcbiAgICB0aGlzLl9yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIHRoaXMuX3RpbWVTZWxlY3RvciA9IHRpbWVTZWxlY3RvcjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLl9pbml0aWFsU3RhdGU7IGF3YWl0IHRoaXMuX2NvbmRpdGlvbihpKTsgaSA9IGF3YWl0IHRoaXMuX2l0ZXJhdGUoaSkpIHtcbiAgICAgIGF3YWl0IHNsZWVwKGF3YWl0IHRoaXMuX3RpbWVTZWxlY3RvcihpKSk7XG4gICAgICB5aWVsZCBhd2FpdCB0aGlzLl9yZXN1bHRTZWxlY3RvcihpKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlVGltZTxUU3RhdGUsIFRSZXN1bHQ+KFxuICAgIGluaXRpYWxTdGF0ZTogVFN0YXRlLFxuICAgIGNvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgIGl0ZXJhdGU6ICh2YWx1ZTogVFN0YXRlKSA9PiBUU3RhdGUgfCBQcm9taXNlPFRTdGF0ZT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PixcbiAgICB0aW1lU2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZTxUU3RhdGUsIFRSZXN1bHQ+KFxuICAgIGluaXRpYWxTdGF0ZSxcbiAgICBjb25kaXRpb24sXG4gICAgaXRlcmF0ZSxcbiAgICByZXN1bHRTZWxlY3RvcixcbiAgICB0aW1lU2VsZWN0b3IpO1xufVxuIl19
