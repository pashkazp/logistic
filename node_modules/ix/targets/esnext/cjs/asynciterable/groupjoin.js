Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
const _grouping_1 = require("./_grouping");
const empty_1 = require("./empty");
const from_1 = require("./from");
const identity_1 = require("../internal/identity");
class GroupJoinAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    async *[Symbol.asyncIterator]() {
        const map = await _grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity);
        for await (let outerElement of this._outer) {
            const outerKey = await this._outerSelector(outerElement);
            const innerElements = map.has(outerKey) ? map.get(outerKey) : empty_1.empty();
            yield await this._resultSelector(outerElement, from_1.from(innerElements));
        }
    }
}
function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.groupJoin = groupJoin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZ3JvdXBqb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvREFBa0Q7QUFDbEQsMkNBQTZDO0FBQzdDLG1DQUFnQztBQUNoQyxpQ0FBOEI7QUFDOUIsbURBQWdEO0FBRWhELDRCQUE0RCxTQUFRLDhCQUF1QjtJQU96RixZQUNJLEtBQTRCLEVBQzVCLEtBQTRCLEVBQzVCLGFBQXNELEVBQ3RELGFBQXNELEVBQ3RELGNBQTJGO1FBQzdGLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLENBQUM7UUFDcEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7SUFDeEMsQ0FBQztJQUVELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDM0IsTUFBTSxHQUFHLEdBQUcsTUFBTSwwQkFBYyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxtQkFBUSxDQUFDLENBQUM7UUFDN0UsR0FBRyxDQUFDLEtBQUssQ0FBTCxDQUFPLElBQUksWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzNDLE1BQU0sUUFBUSxHQUFHLE1BQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN6RCxNQUFNLGFBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFxQixHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLGFBQUssRUFBVSxDQUFDO1lBQ2hHLE1BQU0sTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxXQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN0RSxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQsbUJBQ0ksS0FBNEIsRUFDNUIsS0FBNEIsRUFDNUIsYUFBc0QsRUFDdEQsYUFBc0QsRUFDdEQsY0FBMkY7SUFDN0YsTUFBTSxDQUFDLElBQUksc0JBQXNCLENBQy9CLEtBQUssRUFDTCxLQUFLLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLENBQUMsQ0FBQztBQUNwQixDQUFDO0FBWkQsOEJBWUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9ncm91cGpvaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlR3JvdXBpbmcgfSBmcm9tICcuL19ncm91cGluZyc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vZW1wdHknO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcblxuY2xhc3MgR3JvdXBKb2luQXN5bmNJdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX291dGVyOiBBc3luY0l0ZXJhYmxlPFRPdXRlcj47XG4gIHByaXZhdGUgX2lubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj47XG4gIHByaXZhdGUgX291dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+O1xuICBwcml2YXRlIF9yZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4pID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPixcbiAgICAgIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4sXG4gICAgICBvdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICByZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4pID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9vdXRlciA9IG91dGVyO1xuICAgIHRoaXMuX2lubmVyID0gaW5uZXI7XG4gICAgdGhpcy5fb3V0ZXJTZWxlY3RvciA9IG91dGVyU2VsZWN0b3I7XG4gICAgdGhpcy5faW5uZXJTZWxlY3RvciA9IGlubmVyU2VsZWN0b3I7XG4gICAgdGhpcy5fcmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IG1hcCA9IGF3YWl0IGNyZWF0ZUdyb3VwaW5nKHRoaXMuX2lubmVyLCB0aGlzLl9pbm5lclNlbGVjdG9yLCBpZGVudGl0eSk7XG4gICAgZm9yIGF3YWl0IChsZXQgb3V0ZXJFbGVtZW50IG9mIHRoaXMuX291dGVyKSB7XG4gICAgICBjb25zdCBvdXRlcktleSA9IGF3YWl0IHRoaXMuX291dGVyU2VsZWN0b3Iob3V0ZXJFbGVtZW50KTtcbiAgICAgIGNvbnN0IGlubmVyRWxlbWVudHMgPSBtYXAuaGFzKG91dGVyS2V5KSA/IDxJdGVyYWJsZTxUSW5uZXI+Pm1hcC5nZXQob3V0ZXJLZXkpIDogZW1wdHk8VElubmVyPigpO1xuICAgICAgeWllbGQgYXdhaXQgdGhpcy5fcmVzdWx0U2VsZWN0b3Iob3V0ZXJFbGVtZW50LCBmcm9tKGlubmVyRWxlbWVudHMpKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwSm9pbjxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPixcbiAgICBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+LFxuICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+KSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBHcm91cEpvaW5Bc3luY0l0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcixcbiAgICBpbm5lcixcbiAgICBvdXRlclNlbGVjdG9yLFxuICAgIGlubmVyU2VsZWN0b3IsXG4gICAgcmVzdWx0U2VsZWN0b3IpO1xufVxuIl19
