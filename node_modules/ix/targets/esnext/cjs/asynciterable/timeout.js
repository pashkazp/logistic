Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
const _sleep_1 = require("./_sleep");
class TimeoutError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, TimeoutError.prototype);
        this.message = 'Timeout has occurred';
    }
}
exports.TimeoutError = TimeoutError;
const VALUE_TYPE = 'value';
const ERROR_TYPE = 'error';
class TimeoutAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, dueTime) {
        super();
        this._source = source;
        this._dueTime = dueTime;
    }
    async *[Symbol.asyncIterator]() {
        const it = this._source[Symbol.asyncIterator]();
        while (1) {
            const { type, value } = await Promise.race([
                it.next().then(value => { return { type: VALUE_TYPE, value }; }),
                _sleep_1.sleep(this._dueTime).then(() => { return { type: ERROR_TYPE }; })
            ]);
            if (type === ERROR_TYPE) {
                throw new TimeoutError();
            }
            if (value.done) {
                break;
            }
            yield value.value;
        }
    }
}
function timeout(source, dueTime) {
    return new TimeoutAsyncIterable(source, dueTime);
}
exports.timeout = timeout;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvdGltZW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0RBQWtEO0FBQ2xELHFDQUFpQztBQUVqQyxrQkFBMEIsU0FBUSxLQUFLO0lBQ3JDO1FBQ0UsS0FBSyxFQUFFLENBQUM7UUFDUixNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxzQkFBc0IsQ0FBQztJQUN4QyxDQUFDO0NBQ0Y7QUFORCxvQ0FNQztBQUVELE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQztBQUMzQixNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFPM0IsMEJBQW9DLFNBQVEsOEJBQXVCO0lBSWpFLFlBQVksTUFBOEIsRUFBRSxPQUFlO1FBQ3pELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUM7SUFDMUIsQ0FBQztJQUVELEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDM0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztRQUNoRCxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ1QsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQTRCO2dCQUNwRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssTUFBTSxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoRSxjQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNsRSxDQUFDLENBQUM7WUFFSCxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztnQkFDeEIsTUFBTSxJQUFJLFlBQVksRUFBRSxDQUFDO1lBQzNCLENBQUM7WUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFBQyxLQUFLLENBQUM7WUFBQyxDQUFDO1lBQzFCLE1BQU0sS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNwQixDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQsaUJBQ0ksTUFBOEIsRUFDOUIsT0FBZTtJQUNqQixNQUFNLENBQUMsSUFBSSxvQkFBb0IsQ0FBVSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUpELDBCQUlDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvdGltZW91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4vX3NsZWVwJztcblxuZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgVGltZW91dEVycm9yLnByb3RvdHlwZSk7XG4gICAgdGhpcy5tZXNzYWdlID0gJ1RpbWVvdXQgaGFzIG9jY3VycmVkJztcbiAgfVxufVxuXG5jb25zdCBWQUxVRV9UWVBFID0gJ3ZhbHVlJztcbmNvbnN0IEVSUk9SX1RZUEUgPSAnZXJyb3InO1xuXG5pbnRlcmZhY2UgVGltZW91dE9wZXJhdGlvbjxUPiB7XG4gIHR5cGU6IHN0cmluZztcbiAgdmFsdWU/OiBJdGVyYXRvclJlc3VsdDxUPjtcbn1cblxuY2xhc3MgVGltZW91dEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfZHVlVGltZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgZHVlVGltZTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZHVlVGltZSA9IGR1ZVRpbWU7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlPFRpbWVvdXRPcGVyYXRpb248VFNvdXJjZT4+KFtcbiAgICAgICAgaXQubmV4dCgpLnRoZW4odmFsdWUgPT4geyByZXR1cm4geyB0eXBlOiBWQUxVRV9UWVBFLCB2YWx1ZSB9OyB9KSxcbiAgICAgICAgc2xlZXAodGhpcy5fZHVlVGltZSkudGhlbigoKSA9PiB7IHJldHVybiB7IHR5cGU6IEVSUk9SX1RZUEUgfTsgfSlcbiAgICAgIF0pO1xuXG4gICAgICBpZiAodHlwZSA9PT0gRVJST1JfVFlQRSkge1xuICAgICAgICB0aHJvdyBuZXcgVGltZW91dEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5kb25lKSB7IGJyZWFrOyB9XG4gICAgICB5aWVsZCB2YWx1ZS52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQ8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGR1ZVRpbWU6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0QXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGR1ZVRpbWUpO1xufSJdfQ==
