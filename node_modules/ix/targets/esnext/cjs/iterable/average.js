Object.defineProperty(exports, "__esModule", { value: true });
const identity_1 = require("../internal/identity");
/**
 * Computes the average of a sequence of values from the sequence either from the sequence itself
 * or from the selector function.
 * @example
 * // Using non chained version
 * const result = average([1, 2, 3]);
 * const result = Ix.Iterable.of(1, 2, 3).average();
 * console.log(result);
 * @param {Iterable<any>} source A sequence of values to calculate the average of.
 * @param {function(x: any): number} [selector] A transform function to apply to each element.
 * @returns {number} The average of the sequence of values.
 */
function average(source, selector = identity_1.identity) {
    let sum = 0;
    let count = 0;
    for (let item of source) {
        sum += selector(item);
        count++;
    }
    if (count === 0) {
        throw new Error('Empty collection');
    }
    return sum / count;
}
exports.average = average;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2F2ZXJhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG1EQUFnRDtBQUtoRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILGlCQUF3QixNQUFxQixFQUFFLFdBQStCLG1CQUFRO0lBQ3BGLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNaLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDeEIsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN0QixLQUFLLEVBQUUsQ0FBQztJQUNWLENBQUM7SUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDO0FBQ3JCLENBQUM7QUFiRCwwQkFhQyIsImZpbGUiOiJpdGVyYWJsZS9hdmVyYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBhdmVyYWdlKHNvdXJjZTogSXRlcmFibGU8bnVtYmVyPiwgc2VsZWN0b3I/OiAoeDogbnVtYmVyKSA9PiBudW1iZXIpOiBudW1iZXI7XG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZTxUPihzb3VyY2U6IEl0ZXJhYmxlPFQ+LCBzZWxlY3Rvcj86ICh4OiBUKSA9PiBudW1iZXIpOiBudW1iZXI7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIGF2ZXJhZ2Ugb2YgYSBzZXF1ZW5jZSBvZiB2YWx1ZXMgZnJvbSB0aGUgc2VxdWVuY2UgZWl0aGVyIGZyb20gdGhlIHNlcXVlbmNlIGl0c2VsZlxuICogb3IgZnJvbSB0aGUgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICogLy8gVXNpbmcgbm9uIGNoYWluZWQgdmVyc2lvblxuICogY29uc3QgcmVzdWx0ID0gYXZlcmFnZShbMSwgMiwgM10pO1xuICogY29uc3QgcmVzdWx0ID0gSXguSXRlcmFibGUub2YoMSwgMiwgMykuYXZlcmFnZSgpO1xuICogY29uc29sZS5sb2cocmVzdWx0KTtcbiAqIEBwYXJhbSB7SXRlcmFibGU8YW55Pn0gc291cmNlIEEgc2VxdWVuY2Ugb2YgdmFsdWVzIHRvIGNhbGN1bGF0ZSB0aGUgYXZlcmFnZSBvZi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogYW55KTogbnVtYmVyfSBbc2VsZWN0b3JdIEEgdHJhbnNmb3JtIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggZWxlbWVudC5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBhdmVyYWdlIG9mIHRoZSBzZXF1ZW5jZSBvZiB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhdmVyYWdlKHNvdXJjZTogSXRlcmFibGU8YW55Piwgc2VsZWN0b3I6ICh4OiBhbnkpID0+IG51bWJlciA9IGlkZW50aXR5KTogbnVtYmVyIHtcbiAgbGV0IHN1bSA9IDA7XG4gIGxldCBjb3VudCA9IDA7XG4gIGZvciAobGV0IGl0ZW0gb2Ygc291cmNlKSB7XG4gICAgc3VtICs9IHNlbGVjdG9yKGl0ZW0pO1xuICAgIGNvdW50Kys7XG4gIH1cblxuICBpZiAoY291bnQgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VtcHR5IGNvbGxlY3Rpb24nKTtcbiAgfVxuXG4gIHJldHVybiBzdW0gLyBjb3VudDtcbn1cbiJdfQ==
