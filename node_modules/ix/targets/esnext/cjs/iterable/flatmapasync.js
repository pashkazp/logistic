Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
const bindcallback_1 = require("../internal/bindcallback");
class FlatMapAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    async *[Symbol.asyncIterator]() {
        for await (let outer of (this._source)) {
            for await (let inner of (this._selector(outer))) {
                yield inner;
            }
        }
    }
}
/**
 * Projects each element of a sequence to a potentially async iterable and flattens the
 * resulting sequences into one sequence.
 * @param {Iterable<T | Promise<T>> | AsyncIterable<T>} source Source sequence
 * @param {function:(value: T): Iterable<R | Promise<R>> | AsyncIterable<R>} selector A transform function to apply to each element.
 * @param {Object} [thisArg] An optional "this" binding for the selector function.
 * @returns {AsyncIterable<R>} An async iterable whose elements are the result of invoking the one-to-many
 * transform function on each element of the input sequence.
 */
function flatMapAsync(source, selector, thisArg) {
    return new FlatMapAsyncIterable(source, bindcallback_1.bindCallback(selector, thisArg, 1));
}
exports.flatMapAsync = flatMapAsync;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZsYXRtYXBhc3luYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0RBQWtEO0FBQ2xELDJEQUF3RDtBQUV4RCwwQkFBNkMsU0FBUSw4QkFBdUI7SUFJMUUsWUFDRSxNQUF5RSxFQUN6RSxRQUErRjtRQUMvRixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFRCxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQzNCLEdBQUcsQ0FBQyxLQUFLLENBQUwsQ0FBTyxJQUFJLEtBQUssSUFBNEIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9ELEdBQUcsQ0FBQyxLQUFLLENBQUwsQ0FBTyxJQUFJLEtBQUssSUFBNEIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4RSxNQUFNLEtBQUssQ0FBQztZQUNkLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQ7Ozs7Ozs7O0dBUUc7QUFDSCxzQkFDSSxNQUF5RSxFQUN6RSxRQUErRixFQUMvRixPQUFhO0lBQ2YsTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQW1CLE1BQU0sRUFBRSwyQkFBWSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNoRyxDQUFDO0FBTEQsb0NBS0MiLCJmaWxlIjoiaXRlcmFibGUvZmxhdG1hcGFzeW5jLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5cbmNsYXNzIEZsYXRNYXBBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9zZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUUmVzdWx0IHwgUHJvbWlzZUxpa2U8VFJlc3VsdD4+IHwgQXN5bmNJdGVyYWJsZTxUUmVzdWx0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQgfCBQcm9taXNlTGlrZTxUUmVzdWx0Pj4gfCBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGZvciBhd2FpdCAobGV0IG91dGVyIG9mIDxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pih0aGlzLl9zb3VyY2UpKSB7XG4gICAgICBmb3IgYXdhaXQgKGxldCBpbm5lciBvZiA8QXN5bmNJdGVyYWJsZTxUUmVzdWx0Pj4odGhpcy5fc2VsZWN0b3Iob3V0ZXIpKSkge1xuICAgICAgICB5aWVsZCBpbm5lcjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9qZWN0cyBlYWNoIGVsZW1lbnQgb2YgYSBzZXF1ZW5jZSB0byBhIHBvdGVudGlhbGx5IGFzeW5jIGl0ZXJhYmxlIGFuZCBmbGF0dGVucyB0aGVcbiAqIHJlc3VsdGluZyBzZXF1ZW5jZXMgaW50byBvbmUgc2VxdWVuY2UuXG4gKiBAcGFyYW0ge0l0ZXJhYmxlPFQgfCBQcm9taXNlPFQ+PiB8IEFzeW5jSXRlcmFibGU8VD59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb246KHZhbHVlOiBUKTogSXRlcmFibGU8UiB8IFByb21pc2U8Uj4+IHwgQXN5bmNJdGVyYWJsZTxSPn0gc2VsZWN0b3IgQSB0cmFuc2Zvcm0gZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCBlbGVtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IFt0aGlzQXJnXSBBbiBvcHRpb25hbCBcInRoaXNcIiBiaW5kaW5nIGZvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7QXN5bmNJdGVyYWJsZTxSPn0gQW4gYXN5bmMgaXRlcmFibGUgd2hvc2UgZWxlbWVudHMgYXJlIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIG9uZS10by1tYW55XG4gKiB0cmFuc2Zvcm0gZnVuY3Rpb24gb24gZWFjaCBlbGVtZW50IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXRNYXBBc3luYzxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQgfCBQcm9taXNlTGlrZTxUUmVzdWx0Pj4gfCBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+LFxuICAgIHRoaXNBcmc/OiBhbnkpOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgRmxhdE1hcEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4oc291cmNlLCBiaW5kQ2FsbGJhY2soc2VsZWN0b3IsIHRoaXNBcmcsIDEpKTtcbn1cbiJdfQ==
