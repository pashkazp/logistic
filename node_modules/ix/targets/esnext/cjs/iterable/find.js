Object.defineProperty(exports, "__esModule", { value: true });
const bindcallback_1 = require("../internal/bindcallback");
/**
 * Returns the value of the first element in the sequence that satisfies the provided testing function.
 * Otherwise undefined is returned.
 * @param {Iterable<T>} source Source sequence.
 * @param {function(value: T, index: number): boolean} predicate Function to execute for every item in the sequence.
 * @param {Object} [thisArg] Object to use as this when executing callback.
 * @return {T | undefined} The value of the first element in the sequence that satisfies the provided testing function.
 * Otherwise undefined is returned.
 */
function find(source, predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError();
    }
    const f = bindcallback_1.bindCallback(predicate, thisArg, 2);
    let i = 0;
    for (let item of source) {
        if (f(item, i++)) {
            return item;
        }
    }
    return undefined;
}
exports.find = find;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZpbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDJEQUF3RDtBQUV4RDs7Ozs7Ozs7R0FRRztBQUNILGNBQ0ksTUFBbUIsRUFDbkIsU0FBK0MsRUFDL0MsT0FBYTtJQUNmLEVBQUUsQ0FBQyxDQUFDLE9BQU8sU0FBUyxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLElBQUksU0FBUyxFQUFFLENBQUM7SUFBQyxDQUFDO0lBQy9ELE1BQU0sQ0FBQyxHQUFHLDJCQUFZLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFVixHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxDQUFDLElBQUksQ0FBQztRQUNkLENBQUM7SUFDSCxDQUFDO0lBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBZEQsb0JBY0MiLCJmaWxlIjoiaXRlcmFibGUvZmluZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNlcXVlbmNlIHRoYXQgc2F0aXNmaWVzIHRoZSBwcm92aWRlZCB0ZXN0aW5nIGZ1bmN0aW9uLlxuICogT3RoZXJ3aXNlIHVuZGVmaW5lZCBpcyByZXR1cm5lZC5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VD59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgZm9yIGV2ZXJ5IGl0ZW0gaW4gdGhlIHNlcXVlbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IFt0aGlzQXJnXSBPYmplY3QgdG8gdXNlIGFzIHRoaXMgd2hlbiBleGVjdXRpbmcgY2FsbGJhY2suXG4gKiBAcmV0dXJuIHtUIHwgdW5kZWZpbmVkfSBUaGUgdmFsdWUgb2YgdGhlIGZpcnN0IGVsZW1lbnQgaW4gdGhlIHNlcXVlbmNlIHRoYXQgc2F0aXNmaWVzIHRoZSBwcm92aWRlZCB0ZXN0aW5nIGZ1bmN0aW9uLlxuICogT3RoZXJ3aXNlIHVuZGVmaW5lZCBpcyByZXR1cm5lZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmQ8VD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICBwcmVkaWNhdGU6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbixcbiAgICB0aGlzQXJnPzogYW55KTogVCB8IHVuZGVmaW5lZCB7XG4gIGlmICh0eXBlb2YgcHJlZGljYXRlICE9PSAnZnVuY3Rpb24nKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoKTsgfVxuICBjb25zdCBmID0gYmluZENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMik7XG4gIGxldCBpID0gMDtcblxuICBmb3IgKGxldCBpdGVtIG9mIHNvdXJjZSkge1xuICAgIGlmIChmKGl0ZW0sIGkrKykpIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuIl19
