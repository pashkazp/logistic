Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
const identity_1 = require("../internal/identity");
const _grouping_1 = require("./_grouping");
class GroupedIterable extends iterable_1.IterableX {
    constructor(key, source) {
        super();
        this.key = key;
        this._source = source;
    }
    [Symbol.iterator]() {
        return this._source[Symbol.iterator]();
    }
}
exports.GroupedIterable = GroupedIterable;
class GroupByIterable extends iterable_1.IterableX {
    constructor(source, keySelector, elementSelector) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._elementSelector = elementSelector;
    }
    *[Symbol.iterator]() {
        const map = _grouping_1.createGrouping(this._source, this._keySelector, this._elementSelector);
        for (let [key, values] of map) {
            yield new GroupedIterable(key, values);
        }
    }
}
exports.GroupByIterable = GroupByIterable;
function groupBy(source, keySelector, elementSelector = identity_1.identity) {
    return new GroupByIterable(source, keySelector, elementSelector);
}
exports.groupBy = groupBy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2dyb3VwYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUF3QztBQUN4QyxtREFBZ0Q7QUFDaEQsMkNBQTZDO0FBRTdDLHFCQUEyQyxTQUFRLG9CQUFpQjtJQUlsRSxZQUFZLEdBQVMsRUFBRSxNQUF3QjtRQUM3QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVELENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNmLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBQ3pDLENBQUM7Q0FDRjtBQWJELDBDQWFDO0FBRUQscUJBQW9ELFNBQVEsb0JBQXdDO0lBS2xHLFlBQ0ksTUFBeUIsRUFDekIsV0FBcUMsRUFDckMsZUFBMkM7UUFDN0MsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDO0lBQzFDLENBQUM7SUFFRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQixNQUFNLEdBQUcsR0FBRywwQkFBYyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUNuRixHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDOUIsTUFBTSxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDekMsQ0FBQztJQUNILENBQUM7Q0FDRjtBQXJCRCwwQ0FxQkM7QUFTRCxpQkFDSSxNQUF5QixFQUN6QixXQUFxQyxFQUNyQyxrQkFBOEMsbUJBQVE7SUFDeEQsTUFBTSxDQUFDLElBQUksZUFBZSxDQUF3QixNQUFNLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQzFGLENBQUM7QUFMRCwwQkFLQyIsImZpbGUiOiJpdGVyYWJsZS9ncm91cGJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBjcmVhdGVHcm91cGluZyB9IGZyb20gJy4vX2dyb3VwaW5nJztcblxuZXhwb3J0IGNsYXNzIEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+IGV4dGVuZHMgSXRlcmFibGVYPFRWYWx1ZT4ge1xuICBwdWJsaWMgcmVhZG9ubHkga2V5OiBUS2V5O1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRWYWx1ZT47XG5cbiAgY29uc3RydWN0b3Ioa2V5OiBUS2V5LCBzb3VyY2U6IEl0ZXJhYmxlPFRWYWx1ZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHcm91cEJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleSwgVFZhbHVlPiBleHRlbmRzIEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5O1xuICBwcml2YXRlIF9lbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgICBlbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgbWFwID0gY3JlYXRlR3JvdXBpbmcodGhpcy5fc291cmNlLCB0aGlzLl9rZXlTZWxlY3RvciwgdGhpcy5fZWxlbWVudFNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZXNdIG9mIG1hcCkge1xuICAgICAgeWllbGQgbmV3IEdyb3VwZWRJdGVyYWJsZShrZXksIHZhbHVlcyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSk6IEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFNvdXJjZT4+O1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihcbiAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSxcbiAgZWxlbWVudFNlbGVjdG9yPzogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUpOiBJdGVyYWJsZVg8R3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+O1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgZWxlbWVudFNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRWYWx1ZSA9IGlkZW50aXR5KTogSXRlcmFibGVYPEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+PiB7XG4gIHJldHVybiBuZXcgR3JvdXBCeUl0ZXJhYmxlPFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oc291cmNlLCBrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yKTtcbn1cbiJdfQ==
