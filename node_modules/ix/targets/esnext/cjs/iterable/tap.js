Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
class TapIterable extends iterable_1.IterableX {
    constructor(source, observer) {
        super();
        this._source = source;
        this._observer = observer;
    }
    *[Symbol.iterator]() {
        const it = this._source[Symbol.iterator]();
        while (1) {
            let next;
            try {
                next = it.next();
                if (next.done) {
                    break;
                }
            }
            catch (e) {
                if (this._observer.error) {
                    this._observer.error(e);
                }
                throw e;
            }
            if (this._observer.next) {
                this._observer.next(next.value);
            }
            yield next.value;
        }
        if (this._observer.complete) {
            this._observer.complete();
        }
    }
}
/**
 * Lazily invokes observer methods for each value in the sequence, and upon successful or exceptional termination.
 * @param {Iterable<TSource>} source Source sequence.
 * @param {PartialObserver<TSource>} observer Observer to invoke notification calls on.<
 * @return {Ierable<TSource>} Sequence exhibiting the side-effects of observer method invocation upon iteration.
 */
function tap(source, observer) {
    return new TapIterable(source, observer);
}
exports.tap = tap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3RhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQXdDO0FBR3hDLGlCQUEyQixTQUFRLG9CQUFrQjtJQUluRCxZQUFZLE1BQXlCLEVBQUUsUUFBa0M7UUFDdkUsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUMzQyxPQUFPLENBQUMsRUFBRSxDQUFDO1lBQ1QsSUFBSSxJQUFJLENBQUM7WUFDVCxJQUFJLENBQUM7Z0JBQ0gsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDakIsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQUMsS0FBSyxDQUFDO2dCQUFDLENBQUM7WUFDM0IsQ0FBQztZQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1gsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO29CQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLENBQUM7Z0JBQ3RELE1BQU0sQ0FBQyxDQUFDO1lBQ1YsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQzdELE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQztRQUNuQixDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNGO0FBRUQ7Ozs7O0dBS0c7QUFDSCxhQUE2QixNQUF5QixFQUFFLFFBQWtDO0lBQ3hGLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBVSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQUZELGtCQUVDIiwiZmlsZSI6Iml0ZXJhYmxlL3RhcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IFBhcnRpYWxPYnNlcnZlciB9IGZyb20gJy4uL29ic2VydmVyJztcblxuY2xhc3MgVGFwSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9vYnNlcnZlcjogUGFydGlhbE9ic2VydmVyPFRTb3VyY2U+O1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIG9ic2VydmVyOiBQYXJ0aWFsT2JzZXJ2ZXI8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9vYnNlcnZlciA9IG9ic2VydmVyO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgbGV0IG5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBuZXh0ID0gaXQubmV4dCgpO1xuICAgICAgICBpZiAobmV4dC5kb25lKSB7IGJyZWFrOyB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYnNlcnZlci5lcnJvcikgeyB0aGlzLl9vYnNlcnZlci5lcnJvcihlKTsgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fb2JzZXJ2ZXIubmV4dCkgeyB0aGlzLl9vYnNlcnZlci5uZXh0KG5leHQudmFsdWUpOyB9XG4gICAgICB5aWVsZCBuZXh0LnZhbHVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9vYnNlcnZlci5jb21wbGV0ZSkgeyB0aGlzLl9vYnNlcnZlci5jb21wbGV0ZSgpOyB9XG4gIH1cbn1cblxuLyoqXG4gKiBMYXppbHkgaW52b2tlcyBvYnNlcnZlciBtZXRob2RzIGZvciBlYWNoIHZhbHVlIGluIHRoZSBzZXF1ZW5jZSwgYW5kIHVwb24gc3VjY2Vzc2Z1bCBvciBleGNlcHRpb25hbCB0ZXJtaW5hdGlvbi5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcGFyYW0ge1BhcnRpYWxPYnNlcnZlcjxUU291cmNlPn0gb2JzZXJ2ZXIgT2JzZXJ2ZXIgdG8gaW52b2tlIG5vdGlmaWNhdGlvbiBjYWxscyBvbi48XG4gKiBAcmV0dXJuIHtJZXJhYmxlPFRTb3VyY2U+fSBTZXF1ZW5jZSBleGhpYml0aW5nIHRoZSBzaWRlLWVmZmVjdHMgb2Ygb2JzZXJ2ZXIgbWV0aG9kIGludm9jYXRpb24gdXBvbiBpdGVyYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YXA8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgb2JzZXJ2ZXI6IFBhcnRpYWxPYnNlcnZlcjxUU291cmNlPik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGFwSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBvYnNlcnZlcik7XG59XG4iXX0=
