Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
const bindcallback_1 = require("../internal/bindcallback");
class FlatMapIterable extends iterable_1.IterableX {
    constructor(source, fn) {
        super();
        this._source = source;
        this._fn = fn;
    }
    *[Symbol.iterator]() {
        for (let outerItem of this._source) {
            for (let innerItem of this._fn(outerItem)) {
                yield innerItem;
            }
        }
    }
}
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * @param {Iterable<T>} source Source sequence
 * @param {function:(value: T): Iterable<R>} selector A transform function to apply to each element.
 * @param {Object} [thisArg] An optional "this" binding for the selector function.
 * @returns {Iterable<R>} An iterable whose elements are the result of invoking the one-to-many
 * transform function on each element of the input sequence.
 */
function flatMap(source, selector, thisArg) {
    return new FlatMapIterable(source, bindcallback_1.bindCallback(selector, thisArg, 1));
}
exports.flatMap = flatMap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZsYXRtYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUF3QztBQUN4QywyREFBd0Q7QUFFeEQscUJBQXdDLFNBQVEsb0JBQWtCO0lBSWhFLFlBQVksTUFBeUIsRUFBRSxFQUF5QztRQUM5RSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNuQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFNBQVMsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDMUMsTUFBTSxTQUFTLENBQUM7WUFDbEIsQ0FBQztRQUNILENBQUM7SUFDSCxDQUFDO0NBQ0Y7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILGlCQUNJLE1BQXlCLEVBQ3pCLFFBQStDLEVBQy9DLE9BQWE7SUFDZixNQUFNLENBQUMsSUFBSSxlQUFlLENBQW1CLE1BQU0sRUFBRSwyQkFBWSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDO0FBTEQsMEJBS0MiLCJmaWxlIjoiaXRlcmFibGUvZmxhdG1hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5cbmNsYXNzIEZsYXRNYXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0PiBleHRlbmRzIEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2ZuOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+O1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGZuOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCBvdXRlckl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBmb3IgKGxldCBpbm5lckl0ZW0gb2YgdGhpcy5fZm4ob3V0ZXJJdGVtKSkge1xuICAgICAgICB5aWVsZCBpbm5lckl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHJvamVjdHMgZWFjaCBlbGVtZW50IG9mIGEgc2VxdWVuY2UgdG8gaXRlcmFibGUgYW5kIGZsYXR0ZW5zIHRoZSByZXN1bHRpbmcgc2VxdWVuY2VzIGludG9cbiAqIG9uZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VD59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb246KHZhbHVlOiBUKTogSXRlcmFibGU8Uj59IHNlbGVjdG9yIEEgdHJhbnNmb3JtIGZ1bmN0aW9uIHRvIGFwcGx5IHRvIGVhY2ggZWxlbWVudC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbdGhpc0FyZ10gQW4gb3B0aW9uYWwgXCJ0aGlzXCIgYmluZGluZyBmb3IgdGhlIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICogQHJldHVybnMge0l0ZXJhYmxlPFI+fSBBbiBpdGVyYWJsZSB3aG9zZSBlbGVtZW50cyBhcmUgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgb25lLXRvLW1hbnlcbiAqIHRyYW5zZm9ybSBmdW5jdGlvbiBvbiBlYWNoIGVsZW1lbnQgb2YgdGhlIGlucHV0IHNlcXVlbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdE1hcDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+LFxuICAgIHRoaXNBcmc/OiBhbnkpOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEZsYXRNYXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0Pihzb3VyY2UsIGJpbmRDYWxsYmFjayhzZWxlY3RvciwgdGhpc0FyZywgMSkpO1xufVxuIl19
