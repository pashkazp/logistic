Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
const arrayindexof_1 = require("../internal/arrayindexof");
const comparer_1 = require("../internal/comparer");
class ExceptIterable extends iterable_1.IterableX {
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    *[Symbol.iterator]() {
        let map = [];
        for (let secondItem of this._second) {
            map.push(secondItem);
        }
        for (let firstItem of this._first) {
            if (arrayindexof_1.arrayIndexOf(map, firstItem, this._comparer) === -1) {
                map.push(firstItem);
                yield firstItem;
            }
        }
    }
}
/**
 * Produces the set difference of two sequences by using the an equality comparer to compare values.
 * @param {Iterable<T>} first A sequence whose elements that are not also in second will be returned.
 * @param {Iterable<T>} second A sequence whose elements that also occur in the first sequence will cause those
 * elements to be removed from the returned sequence.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<T>} A sequence that contains the set difference of the elements of two sequences.
 */
function except(first, second, comparer = comparer_1.comparer) {
    return new ExceptIterable(first, second, comparer);
}
exports.except = except;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2V4Y2VwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQXdDO0FBQ3hDLDJEQUF3RDtBQUN4RCxtREFBbUU7QUFFbkUsb0JBQThCLFNBQVEsb0JBQWtCO0lBS3RELFlBQVksS0FBd0IsRUFBRSxNQUF5QixFQUFFLFFBQTZDO1FBQzVHLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQUVELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLElBQUksVUFBVSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkIsQ0FBQztRQUVELEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLEVBQUUsQ0FBQyxDQUFDLDJCQUFZLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN4RCxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2dCQUNwQixNQUFNLFNBQVMsQ0FBQztZQUNsQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVEOzs7Ozs7O0dBT0c7QUFDSCxnQkFDSSxLQUF3QixFQUN4QixNQUF5QixFQUN6QixXQUFnRCxtQkFBZTtJQUNqRSxNQUFNLENBQUMsSUFBSSxjQUFjLENBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM5RCxDQUFDO0FBTEQsd0JBS0MiLCJmaWxlIjoiaXRlcmFibGUvZXhjZXB0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mIH0gZnJvbSAnLi4vaW50ZXJuYWwvYXJyYXlpbmRleG9mJztcbmltcG9ydCB7IGNvbXBhcmVyIGFzIGRlZmF1bHRDb21wYXJlciB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcblxuY2xhc3MgRXhjZXB0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9maXJzdDogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX3NlY29uZDogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2NvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sIHNlY29uZDogSXRlcmFibGU8VFNvdXJjZT4sIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZmlyc3QgPSBmaXJzdDtcbiAgICB0aGlzLl9zZWNvbmQgPSBzZWNvbmQ7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgbWFwID0gW107XG4gICAgZm9yIChsZXQgc2Vjb25kSXRlbSBvZiB0aGlzLl9zZWNvbmQpIHtcbiAgICAgIG1hcC5wdXNoKHNlY29uZEl0ZW0pO1xuICAgIH1cblxuICAgIGZvciAobGV0IGZpcnN0SXRlbSBvZiB0aGlzLl9maXJzdCkge1xuICAgICAgaWYgKGFycmF5SW5kZXhPZihtYXAsIGZpcnN0SXRlbSwgdGhpcy5fY29tcGFyZXIpID09PSAtMSkge1xuICAgICAgICBtYXAucHVzaChmaXJzdEl0ZW0pO1xuICAgICAgICB5aWVsZCBmaXJzdEl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHJvZHVjZXMgdGhlIHNldCBkaWZmZXJlbmNlIG9mIHR3byBzZXF1ZW5jZXMgYnkgdXNpbmcgdGhlIGFuIGVxdWFsaXR5IGNvbXBhcmVyIHRvIGNvbXBhcmUgdmFsdWVzLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUPn0gZmlyc3QgQSBzZXF1ZW5jZSB3aG9zZSBlbGVtZW50cyB0aGF0IGFyZSBub3QgYWxzbyBpbiBzZWNvbmQgd2lsbCBiZSByZXR1cm5lZC5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VD59IHNlY29uZCBBIHNlcXVlbmNlIHdob3NlIGVsZW1lbnRzIHRoYXQgYWxzbyBvY2N1ciBpbiB0aGUgZmlyc3Qgc2VxdWVuY2Ugd2lsbCBjYXVzZSB0aG9zZVxuICogZWxlbWVudHMgdG8gYmUgcmVtb3ZlZCBmcm9tIHRoZSByZXR1cm5lZCBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogVEtleSwgeTogVEtleSk6IGJvb2xlYW59IFtjb21wYXJlcl0gQ29tcGFyZXIgdXNlZCB0byBjb21wYXJlIGtleSB2YWx1ZXMuXG4gKiBAcmV0dXJuIHtJdGVyYWJsZTxUPn0gQSBzZXF1ZW5jZSB0aGF0IGNvbnRhaW5zIHRoZSBzZXQgZGlmZmVyZW5jZSBvZiB0aGUgZWxlbWVudHMgb2YgdHdvIHNlcXVlbmNlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VwdDxUU291cmNlPihcbiAgICBmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEV4Y2VwdEl0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==
