Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
const identity_1 = require("../internal/identity");
const arrayindexof_1 = require("../internal/arrayindexof");
const comparer_1 = require("../internal/comparer");
class DistinctIterable extends iterable_1.IterableX {
    constructor(source, keySelector, cmp) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._cmp = cmp;
    }
    *[Symbol.iterator]() {
        let set = [];
        for (let item of this._source) {
            let key = this._keySelector(item);
            if (arrayindexof_1.arrayIndexOf(set, key, this._cmp) === -1) {
                set.push(key);
                yield item;
            }
        }
    }
}
/**
 * Returns elements with a distinct key value by using the specified comparer to compare key values.
 * @param source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<T>} Sequence that contains the elements from the source sequence with distinct key values.
 */
function distinct(source, keySelector = identity_1.identity, comparer = comparer_1.comparer) {
    return new DistinctIterable(source, keySelector, comparer);
}
exports.distinct = distinct;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2Rpc3RpbmN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSwwQ0FBd0M7QUFDeEMsbURBQWdEO0FBQ2hELDJEQUF3RDtBQUN4RCxtREFBbUU7QUFFbkUsc0JBQXNDLFNBQVEsb0JBQWtCO0lBSzlELFlBQVksTUFBeUIsRUFBRSxXQUFxQyxFQUFFLEdBQWtDO1FBQzlHLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7UUFDaEMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUVELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUViLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzlCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbEMsRUFBRSxDQUFDLENBQUMsMkJBQVksQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2QsTUFBTSxJQUFJLENBQUM7WUFDYixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVEOzs7Ozs7R0FNRztBQUNILGtCQUNJLE1BQXlCLEVBQ3pCLGNBQXdDLG1CQUFRLEVBQ2hELFdBQTBDLG1CQUFlO0lBQzNELE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUxELDRCQUtDIiwiZmlsZSI6Iml0ZXJhYmxlL2Rpc3RpbmN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBhcnJheUluZGV4T2YgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuaW1wb3J0IHsgY29tcGFyZXIgYXMgZGVmYXVsdENvbXBhcmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuXG5jbGFzcyBEaXN0aW5jdEl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfa2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleTtcbiAgcHJpdmF0ZSBfY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gYm9vbGVhbjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5LCBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9jbXAgPSBjbXA7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IHNldCA9IFtdO1xuXG4gICAgZm9yIChsZXQgaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGxldCBrZXkgPSB0aGlzLl9rZXlTZWxlY3RvcihpdGVtKTtcbiAgICAgIGlmIChhcnJheUluZGV4T2Yoc2V0LCBrZXksIHRoaXMuX2NtcCkgPT09IC0xKSB7XG4gICAgICAgIHNldC5wdXNoKGtleSk7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBlbGVtZW50cyB3aXRoIGEgZGlzdGluY3Qga2V5IHZhbHVlIGJ5IHVzaW5nIHRoZSBzcGVjaWZpZWQgY29tcGFyZXIgdG8gY29tcGFyZSBrZXkgdmFsdWVzLlxuICogQHBhcmFtIHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBUU291cmNlKTogVEtleX0gW2tleVNlbGVjdG9yXSBLZXkgc2VsZWN0b3IuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHg6IFRLZXksIHk6IFRLZXkpOiBib29sZWFufSBbY29tcGFyZXJdIENvbXBhcmVyIHVzZWQgdG8gY29tcGFyZSBrZXkgdmFsdWVzLlxuICogQHJldHVybiB7SXRlcmFibGU8VD59IFNlcXVlbmNlIHRoYXQgY29udGFpbnMgdGhlIGVsZW1lbnRzIGZyb20gdGhlIHNvdXJjZSBzZXF1ZW5jZSB3aXRoIGRpc3RpbmN0IGtleSB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdDxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgPSBpZGVudGl0eSxcbiAgICBjb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IERpc3RpbmN0SXRlcmFibGUoc291cmNlLCBrZXlTZWxlY3RvciwgY29tcGFyZXIpO1xufVxuIl19
