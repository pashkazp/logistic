import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
var ZipIterable = (function (_super) {
    tslib_1.__extends(ZipIterable, _super);
    function ZipIterable(left, right, fn) {
        var _this = _super.call(this) || this;
        _this._left = left;
        _this._right = right;
        _this._fn = fn;
        return _this;
    }
    ZipIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var it1, it2, _a, next1, next2;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        it1 = this._left[Symbol.asyncIterator]();
                        it2 = this._right[Symbol.asyncIterator]();
                        _b.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 7];
                        return [4 /*yield*/, tslib_1.__await(Promise.all([it1.next(), it2.next()]))];
                    case 2:
                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), next1 = _a[0], next2 = _a[1];
                        if (!(!next1.done && !next2.done)) return [3 /*break*/, 5];
                        return [4 /*yield*/, tslib_1.__await(this._fn(next1.value, next2.value))];
                    case 3: return [4 /*yield*/, _b.sent()];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5: return [3 /*break*/, 7];
                    case 6: return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return ZipIterable;
}(AsyncIterableX));
export function zip(left, right, fn) {
    return new ZipIterable(left, right, fn);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvemlwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQ7SUFBNEMsdUNBQXVCO0lBS2pFLHFCQUNJLElBQTRCLEVBQzVCLEtBQTZCLEVBQzdCLEVBQWlFO1FBSHJFLFlBSUUsaUJBQU8sU0FJUjtRQUhDLEtBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLEtBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDOztJQUNoQixDQUFDO0lBRU0sc0JBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNRLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO3dCQUN6QyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQzs7OzZCQUN6QyxDQUFDO3dCQUNpQixxQ0FBTSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxFQUFFLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLEdBQUE7O3dCQUE1RCxLQUFBLDhCQUFpQixTQUEyQyxLQUFBLEVBQTNELEtBQUssUUFBQSxFQUFFLEtBQUssUUFBQTs2QkFDZixDQUFBLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUEsRUFBMUIsd0JBQTBCO3dCQUN0QixxQ0FBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFBOzRCQUE5QyxxQkFBTSxTQUF3QyxFQUFBOzt3QkFBOUMsU0FBOEMsQ0FBQzs7NEJBRS9DLHdCQUFNOzs7Ozs7S0FHWDtJQUNILGtCQUFDO0FBQUQsQ0EzQkEsQUEyQkMsQ0EzQjJDLGNBQWMsR0EyQnpEO0FBRUQsTUFBTSxjQUNGLElBQTRCLEVBQzVCLEtBQTZCLEVBQzdCLEVBQWlFO0lBQ25FLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBbUIsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvemlwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcblxuY2xhc3MgWmlwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX2xlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX3JpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9mbjogKGxlZnQ6IFRTb3VyY2UsIHJpZ2h0OiBUU291cmNlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIGxlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGZuOiAobGVmdDogVFNvdXJjZSwgcmlnaHQ6IFRTb3VyY2UpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9sZWZ0ID0gbGVmdDtcbiAgICB0aGlzLl9yaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMuX2ZuID0gZm47XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBpdDEgPSB0aGlzLl9sZWZ0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIGNvbnN0IGl0MiA9IHRoaXMuX3JpZ2h0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBjb25zdCBbbmV4dDEsIG5leHQyXSA9IGF3YWl0IFByb21pc2UuYWxsKFtpdDEubmV4dCgpLCBpdDIubmV4dCgpXSk7XG4gICAgICBpZiAoIW5leHQxLmRvbmUgJiYgIW5leHQyLmRvbmUpIHtcbiAgICAgICAgeWllbGQgYXdhaXQgdGhpcy5fZm4obmV4dDEudmFsdWUsIG5leHQyLnZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gemlwPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIGxlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgWmlwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4obGVmdCwgcmlnaHQsIGZuKTtcbn1cbiJdfQ==
