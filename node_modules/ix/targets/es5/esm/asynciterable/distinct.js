import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { identityAsync } from '../internal/identity';
import { arrayIndexOfAsync } from '../internal/arrayindexof';
import { comparerAsync } from '../internal/comparer';
var DistinctAsyncIterable = (function (_super) {
    tslib_1.__extends(DistinctAsyncIterable, _super);
    function DistinctAsyncIterable(source, keySelector, comparer) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._comparer = comparer;
        return _this;
    }
    DistinctAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var set, _a, _b, item, key, e_1_1, e_1, _c;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        set = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 10, 11, 16]);
                        _a = tslib_1.__asyncValues((this._source));
                        _d.label = 2;
                    case 2: return [4 /*yield*/, tslib_1.__await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 9];
                        return [4 /*yield*/, tslib_1.__await(_b.value)];
                    case 4:
                        item = _d.sent();
                        return [4 /*yield*/, tslib_1.__await(this._keySelector(item))];
                    case 5:
                        key = _d.sent();
                        return [4 /*yield*/, tslib_1.__await(arrayIndexOfAsync(set, key, this._comparer))];
                    case 6:
                        if (!((_d.sent()) === -1)) return [3 /*break*/, 8];
                        set.push(key);
                        return [4 /*yield*/, item];
                    case 7:
                        _d.sent();
                        _d.label = 8;
                    case 8: return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _d.trys.push([11, , 14, 15]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 13];
                        return [4 /*yield*/, tslib_1.__await(_c.call(_a))];
                    case 12:
                        _d.sent();
                        _d.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return DistinctAsyncIterable;
}(AsyncIterableX));
export function distinct(source, keySelector, comparer) {
    if (keySelector === void 0) { keySelector = identityAsync; }
    if (comparer === void 0) { comparer = comparerAsync; }
    return new DistinctAsyncIterable(source, keySelector, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGlzdGluY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXJEO0lBQW1ELGlEQUF1QjtJQUt4RSwrQkFDSSxNQUE4QixFQUM5QixXQUFxRCxFQUNyRCxRQUEwRDtRQUg5RCxZQUlFLGlCQUFPLFNBSVI7UUFIQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixLQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxLQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQzs7SUFDNUIsQ0FBQztJQUVNLGdDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozt3QkFDTSxHQUFHLEdBQUcsRUFBRSxDQUFDOzs7O3dCQUVVLEtBQUEsc0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFBOzs7Ozs7O3dCQUE5QyxJQUFJLFlBQUE7d0JBQ1AscUNBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBQTs7d0JBQW5DLEdBQUcsR0FBRyxTQUE2Qjt3QkFDbkMscUNBQU0saUJBQWlCLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUE7OzZCQUFqRCxDQUFBLENBQUEsU0FBaUQsTUFBSyxDQUFDLENBQUMsQ0FBQSxFQUF4RCx3QkFBd0Q7d0JBQzFELEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ2QscUJBQU0sSUFBSSxFQUFBOzt3QkFBVixTQUFVLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdoQjtJQUNILDRCQUFDO0FBQUQsQ0ExQkEsQUEwQkMsQ0ExQmtELGNBQWMsR0EwQmhFO0FBRUQsTUFBTSxtQkFDRixNQUE4QixFQUM5QixXQUFxRSxFQUNyRSxRQUEwRTtJQUQxRSw0QkFBQSxFQUFBLDJCQUFxRTtJQUNyRSx5QkFBQSxFQUFBLHdCQUEwRTtJQUM1RSxNQUFNLENBQUMsSUFBSSxxQkFBcUIsQ0FBZ0IsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNqRixDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvZGlzdGluY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgaWRlbnRpdHlBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmltcG9ydCB7IGFycmF5SW5kZXhPZkFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvYXJyYXlpbmRleG9mJztcbmltcG9ydCB7IGNvbXBhcmVyQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5cbmNsYXNzIERpc3RpbmN0QXN5bmNJdGVyYWJsZTxUU291cmNlLCBUS2V5PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2UgPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGUgPFRTb3VyY2U+O1xuICBwcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgICAgY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBzZXQgPSBbXTtcblxuICAgIGZvciBhd2FpdCAobGV0IGl0ZW0gb2YgPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KHRoaXMuX3NvdXJjZSkpIHtcbiAgICAgIGxldCBrZXkgPSBhd2FpdCB0aGlzLl9rZXlTZWxlY3RvcihpdGVtKTtcbiAgICAgIGlmIChhd2FpdCBhcnJheUluZGV4T2ZBc3luYyhzZXQsIGtleSwgdGhpcy5fY29tcGFyZXIpID09PSAtMSkge1xuICAgICAgICBzZXQucHVzaChrZXkpO1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3Q8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+ID0gaWRlbnRpdHlBc3luYyxcbiAgICBjb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEaXN0aW5jdEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVEtleT4oc291cmNlLCBrZXlTZWxlY3RvciwgY29tcGFyZXIpO1xufVxuIl19
