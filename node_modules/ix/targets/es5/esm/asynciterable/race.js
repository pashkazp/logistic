import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
var RaceAsyncIterable = (function (_super) {
    tslib_1.__extends(RaceAsyncIterable, _super);
    function RaceAsyncIterable(left, right) {
        var _this = _super.call(this) || this;
        _this._left = left;
        _this._right = right;
        return _this;
    }
    RaceAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var leftIt, rightIt, leftWins, rightWins, _a, value, done, resultIterator, otherIterator, next;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        leftIt = this._left[Symbol.asyncIterator](), rightIt = this._right[Symbol.asyncIterator]();
                        leftWins = false, rightWins = false;
                        return [4 /*yield*/, tslib_1.__await(Promise.race([
                                leftIt.next().then(function (x) { leftWins = true; return x; }),
                                rightIt.next().then(function (x) { rightWins = true; return x; }),
                            ]))];
                    case 1:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        if (!!done) return [3 /*break*/, 3];
                        return [4 /*yield*/, value];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        if (leftWins) {
                            resultIterator = leftIt;
                            otherIterator = rightIt;
                        }
                        else {
                            resultIterator = rightIt;
                            otherIterator = leftIt;
                        }
                        if (!otherIterator.return) return [3 /*break*/, 5];
                        return [4 /*yield*/, tslib_1.__await(otherIterator.return())];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5: return [4 /*yield*/, tslib_1.__await(resultIterator.next())];
                    case 6:
                        if (!!(next = _b.sent()).done) return [3 /*break*/, 8];
                        return [4 /*yield*/, next.value];
                    case 7:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return RaceAsyncIterable;
}(AsyncIterableX));
/**
 * Propagates the async sequence that reacts first.
 * @param {AsyncIterable<T>} left First async sequence.
 * @param {AsyncIterable<T>} right Second async sequence.
 * @return {AsyncIterable<T>} An async sequence that surfaces either of the given sequences, whichever reacted first.
 */
export function race(left, right) {
    return new RaceAsyncIterable(left, right);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvcmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxEO0lBQXlDLDZDQUF1QjtJQUk5RCwyQkFBWSxJQUE0QixFQUFFLEtBQTZCO1FBQXZFLFlBQ0UsaUJBQU8sU0FHUjtRQUZDLEtBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1FBQ2xCLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDOztJQUN0QixDQUFDO0lBRU0sNEJBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNRLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFFLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO3dCQUM3RixRQUFRLEdBQUcsS0FBSyxFQUFFLFNBQVMsR0FBRyxLQUFLLENBQUM7d0JBQ2hCLHFDQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0NBQ3pDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ3ZELE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxDQUFDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7NkJBQzFELENBQUMsR0FBQTs7d0JBSEksS0FBa0IsU0FHdEIsRUFITSxLQUFLLFdBQUEsRUFBRSxJQUFJLFVBQUE7NkJBS2YsQ0FBQyxJQUFJLEVBQUwsd0JBQUs7d0JBQ1AscUJBQU0sS0FBSyxFQUFBOzt3QkFBWCxTQUFXLENBQUM7Ozt3QkFJZCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOzRCQUNiLGNBQWMsR0FBRyxNQUFNLENBQUM7NEJBQ3hCLGFBQWEsR0FBRyxPQUFPLENBQUM7d0JBQzFCLENBQUM7d0JBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ04sY0FBYyxHQUFHLE9BQU8sQ0FBQzs0QkFDekIsYUFBYSxHQUFHLE1BQU0sQ0FBQzt3QkFDekIsQ0FBQzs2QkFHRyxhQUFhLENBQUMsTUFBTSxFQUFwQix3QkFBb0I7d0JBQUkscUNBQU0sYUFBYSxDQUFDLE1BQU0sRUFBRSxHQUFBOzt3QkFBNUIsU0FBNEIsQ0FBQzs7NEJBR3pDLHFDQUFNLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBQTs7NkJBQXBDLENBQUMsQ0FBQyxJQUFJLEdBQUcsU0FBMkIsQ0FBQyxDQUFDLElBQUk7d0JBQy9DLHFCQUFNLElBQUksQ0FBQyxLQUFLLEVBQUE7O3dCQUFoQixTQUFnQixDQUFDOzs7Ozs7S0FFcEI7SUFDSCx3QkFBQztBQUFELENBdkNBLEFBdUNDLENBdkN3QyxjQUFjLEdBdUN0RDtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSxlQUNGLElBQTRCLEVBQzVCLEtBQTZCO0lBQy9CLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFVLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNyRCxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvcmFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5cbmNsYXNzIFJhY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9sZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9yaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcblxuICBjb25zdHJ1Y3RvcihsZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5fcmlnaHQgPSByaWdodDtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGxlZnRJdCA9IHRoaXMuX2xlZnRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCksIHJpZ2h0SXQgPSB0aGlzLl9yaWdodFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICBsZXQgbGVmdFdpbnMgPSBmYWxzZSwgcmlnaHRXaW5zID0gZmFsc2U7XG4gICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgIGxlZnRJdC5uZXh0KCkudGhlbih4ID0+IHsgbGVmdFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgICByaWdodEl0Lm5leHQoKS50aGVuKHggPT4geyByaWdodFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgXSk7XG5cbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHRJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPiwgb3RoZXJJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPjtcbiAgICBpZiAobGVmdFdpbnMpIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gbGVmdEl0O1xuICAgICAgb3RoZXJJdGVyYXRvciA9IHJpZ2h0SXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gcmlnaHRJdDtcbiAgICAgIG90aGVySXRlcmF0b3IgPSBsZWZ0SXQ7XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsL2ZpbmlzaCBvdGhlciBpdGVyYXRvclxuICAgIGlmIChvdGhlckl0ZXJhdG9yLnJldHVybikgeyBhd2FpdCBvdGhlckl0ZXJhdG9yLnJldHVybigpOyB9XG5cbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoIShuZXh0ID0gYXdhaXQgcmVzdWx0SXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICB5aWVsZCBuZXh0LnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFByb3BhZ2F0ZXMgdGhlIGFzeW5jIHNlcXVlbmNlIHRoYXQgcmVhY3RzIGZpcnN0LlxuICogQHBhcmFtIHtBc3luY0l0ZXJhYmxlPFQ+fSBsZWZ0IEZpcnN0IGFzeW5jIHNlcXVlbmNlLlxuICogQHBhcmFtIHtBc3luY0l0ZXJhYmxlPFQ+fSByaWdodCBTZWNvbmQgYXN5bmMgc2VxdWVuY2UuXG4gKiBAcmV0dXJuIHtBc3luY0l0ZXJhYmxlPFQ+fSBBbiBhc3luYyBzZXF1ZW5jZSB0aGF0IHN1cmZhY2VzIGVpdGhlciBvZiB0aGUgZ2l2ZW4gc2VxdWVuY2VzLCB3aGljaGV2ZXIgcmVhY3RlZCBmaXJzdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhY2U8VFNvdXJjZT4oXG4gICAgbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBSYWNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihsZWZ0LCByaWdodCk7XG59XG4iXX0=
