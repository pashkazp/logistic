import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
var ScanAsyncIterable = (function (_super) {
    tslib_1.__extends(ScanAsyncIterable, _super);
    function ScanAsyncIterable(source, fn) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        _this._hasSeed = args.length === 1;
        _this._seed = args[0];
        return _this;
    }
    ScanAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var i, hasValue, _a, _b, item, _c, e_1_1, e_1, _d;
            return tslib_1.__generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        i = 0, hasValue = false;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 10, 11, 16]);
                        _a = tslib_1.__asyncValues(this._source);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, tslib_1.__await(_a.next())];
                    case 3:
                        if (!(_b = _e.sent(), !_b.done)) return [3 /*break*/, 9];
                        return [4 /*yield*/, tslib_1.__await(_b.value)];
                    case 4:
                        item = _e.sent();
                        if (!(hasValue || (hasValue = this._hasSeed))) return [3 /*break*/, 7];
                        _c = this;
                        return [4 /*yield*/, tslib_1.__await(this._fn(this._seed, item, i++))];
                    case 5:
                        _c._seed = _e.sent();
                        return [4 /*yield*/, this._seed];
                    case 6:
                        _e.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        this._seed = item;
                        hasValue = true;
                        i++;
                        _e.label = 8;
                    case 8: return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _e.trys.push([11, , 14, 15]);
                        if (!(_b && !_b.done && (_d = _a.return))) return [3 /*break*/, 13];
                        return [4 /*yield*/, tslib_1.__await(_d.call(_a))];
                    case 12:
                        _e.sent();
                        _e.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return ScanAsyncIterable;
}(AsyncIterableX));
export function scan(source, accumulator) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return new (ScanAsyncIterable.bind.apply(ScanAsyncIterable, tslib_1.__spread([void 0, source, accumulator], args)))();
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvc2Nhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxEO0lBQXNDLDZDQUFpQjtJQU1yRCwyQkFDSSxNQUF3QixFQUN4QixFQUF1RDtRQUN2RCxjQUFrQjthQUFsQixVQUFrQixFQUFsQixxQkFBa0IsRUFBbEIsSUFBa0I7WUFBbEIsNkJBQWtCOztRQUh0QixZQUlFLGlCQUFPLFNBS1I7UUFKQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixLQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLEtBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7UUFDbEMsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7O0lBQ3ZCLENBQUM7SUFFTSw0QkFBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ00sQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsS0FBSyxDQUFDOzs7O3dCQUNMLEtBQUEsc0JBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBcEIsSUFBSSxZQUFBOzZCQUNiLENBQUEsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQSxFQUF0Qyx3QkFBc0M7d0JBQ3hDLEtBQUEsSUFBSSxDQUFBO3dCQUFTLHFDQUFNLElBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsR0FBQTs7d0JBQXJELEdBQUssS0FBSyxHQUFHLFNBQXdDLENBQUM7d0JBQ3RELHFCQUFNLElBQUksQ0FBQyxLQUFLLEVBQUE7O3dCQUFoQixTQUFnQixDQUFDOzs7d0JBRWpCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO3dCQUNsQixRQUFRLEdBQUcsSUFBSSxDQUFDO3dCQUNoQixDQUFDLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR1Q7SUFDSCx3QkFBQztBQUFELENBOUJBLEFBOEJDLENBOUJxQyxjQUFjLEdBOEJuRDtBQVNELE1BQU0sZUFDRixNQUF3QixFQUN4QixXQUFvRTtJQUNwRSxjQUFrQjtTQUFsQixVQUFrQixFQUFsQixxQkFBa0IsRUFBbEIsSUFBa0I7UUFBbEIsNkJBQWtCOztJQUNwQixNQUFNLE1BQUssaUJBQWlCLFlBQWpCLGlCQUFpQiw0QkFBQyxNQUFNLEVBQUUsV0FBVyxHQUFLLElBQUksTUFBRTtBQUM3RCxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvc2Nhbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5cbmNsYXNzIFNjYW5Bc3luY0l0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8Uj4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD47XG4gIHByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj47XG4gIHByaXZhdGUgX3NlZWQ/OiBUIHwgUjtcbiAgcHJpdmF0ZSBfaGFzU2VlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICAgIGZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgICAuLi5hcmdzOiAoVCB8IFIpW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICAgIHRoaXMuX2hhc1NlZWQgPSBhcmdzLmxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLl9zZWVkID0gYXJnc1swXTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBpID0gMCwgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICBmb3IgYXdhaXQgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKGhhc1ZhbHVlIHx8IChoYXNWYWx1ZSA9IHRoaXMuX2hhc1NlZWQpKSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBhd2FpdCB0aGlzLl9mbig8Uj50aGlzLl9zZWVkLCBpdGVtLCBpKyspO1xuICAgICAgICB5aWVsZCB0aGlzLl9zZWVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGl0ZW07XG4gICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhbjxUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogVCwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFQgfCBQcm9taXNlPFQ+KTogQXN5bmNJdGVyYWJsZVg8VD47XG5leHBvcnQgZnVuY3Rpb24gc2NhbjxULCBSID0gVD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgc2VlZDogUik6IEFzeW5jSXRlcmFibGVYPFI+O1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW48VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBBc3luY0l0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5Bc3luY0l0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19
