import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
/**
 * @ignore
 */
export function defaultCompareAsync(key, minValue) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, key > minValue ? 1 : key < minValue ? -1 : 0];
        });
    });
}
/**
 * @ignore
 */
var ExtremaByAsyncIterator = (function (_super) {
    tslib_1.__extends(ExtremaByAsyncIterator, _super);
    function ExtremaByAsyncIterator(source, keyFn, cmp) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keyFn = keyFn;
        _this._cmp = cmp;
        return _this;
    }
    ExtremaByAsyncIterator.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var result, done, next, it, current, resKey, curr, key, c;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = [];
                        it = this._source[Symbol.asyncIterator]();
                        return [4 /*yield*/, tslib_1.__await(it.next())];
                    case 1:
                        done = (next = _a.sent()).done;
                        if (done) {
                            throw new Error('Sequence contains no elements');
                        }
                        current = next.value;
                        return [4 /*yield*/, tslib_1.__await(this._keyFn(current))];
                    case 2:
                        resKey = _a.sent();
                        return [4 /*yield*/, tslib_1.__await(it.next())];
                    case 3:
                        done = (next = _a.sent()).done;
                        _a.label = 4;
                    case 4:
                        if (!!done) return [3 /*break*/, 8];
                        curr = next.value;
                        return [4 /*yield*/, tslib_1.__await(this._keyFn(curr))];
                    case 5:
                        key = _a.sent();
                        return [4 /*yield*/, tslib_1.__await(this._cmp(key, resKey))];
                    case 6:
                        c = _a.sent();
                        if (c === 0) {
                            result.push(curr);
                        }
                        else if (c > 0) {
                            result = [curr];
                            resKey = key;
                        }
                        return [4 /*yield*/, tslib_1.__await(it.next())];
                    case 7:
                        done = (next = _a.sent()).done;
                        return [3 /*break*/, 4];
                    case 8: return [5 /*yield**/, tslib_1.__values(tslib_1.__asyncDelegator(tslib_1.__asyncValues(result)))];
                    case 9: return [4 /*yield*/, tslib_1.__await.apply(void 0, [_a.sent()])];
                    case 10:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return ExtremaByAsyncIterator;
}(AsyncIterableX));
/**
 * @ignore
 */
export function extremaBy(source, keyFn, cmp) {
    return new ExtremaByAsyncIterator(source, keyFn, cmp);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvX2V4dHJlbWFieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxEOztHQUVHO0FBQ0gsTUFBTSw4QkFBdUMsR0FBTSxFQUFFLFFBQVc7OztZQUM5RCxzQkFBTyxHQUFHLEdBQUcsUUFBUSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBQzs7O0NBQ3JEO0FBRUQ7O0dBRUc7QUFDSDtJQUFvRCxrREFBdUI7SUFLekUsZ0NBQ0ksTUFBOEIsRUFDOUIsS0FBMkMsRUFDM0MsR0FBbUQ7UUFIdkQsWUFJRSxpQkFBTyxTQUlSO1FBSEMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSSxDQUFDLElBQUksR0FBRyxHQUFHLENBQUM7O0lBQ2xCLENBQUM7SUFFTSxpQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ00sTUFBTSxHQUFjLEVBQUUsQ0FBYTt3QkFDakMsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7d0JBQ2pDLHFDQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBQTs7d0JBQTlCLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxTQUFlLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQ3JDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7NEJBQ1QsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO3dCQUNuRCxDQUFDO3dCQUVHLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO3dCQUNaLHFDQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUE7O3dCQUFuQyxNQUFNLEdBQUcsU0FBMEI7d0JBQ3hCLHFDQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBQTs7d0JBQTlCLElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxTQUFlLENBQUMsQ0FBQyxJQUFJLENBQUM7Ozs2QkFDOUIsQ0FBQyxJQUFJO3dCQUNOLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO3dCQUNaLHFDQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUE7O3dCQUE3QixHQUFHLEdBQUcsU0FBdUI7d0JBQ3ZCLHFDQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxHQUFBOzt3QkFBaEMsQ0FBQyxHQUFHLFNBQTRCO3dCQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDWixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNwQixDQUFDO3dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDakIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ2hCLE1BQU0sR0FBRyxHQUFHLENBQUM7d0JBQ2YsQ0FBQzt3QkFDYyxxQ0FBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUE7O3dCQUE5QixJQUFJLEdBQUcsQ0FBQyxJQUFJLEdBQUcsU0FBZSxDQUFDLENBQUMsSUFBSSxDQUFDOzs0QkFHdkMsc0JBQUEsaUJBQU8seUJBQUEsc0JBQUEsTUFBTSxDQUFBLENBQUEsQ0FBQSxFQUFBOzRCQUFiLG9EQUFBLFNBQWEsSUFBQTs7d0JBQWIsU0FBYSxDQUFDOzs7OztLQUNmO0lBQ0gsNkJBQUM7QUFBRCxDQXpDQSxBQXlDQyxDQXpDbUQsY0FBYyxHQXlDakU7QUFFRDs7R0FFRztBQUNILE1BQU0sb0JBQ0YsTUFBOEIsRUFDOUIsS0FBMkMsRUFDM0MsR0FBbUQ7SUFDckQsTUFBTSxDQUFDLElBQUksc0JBQXNCLENBQWdCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdkUsQ0FBQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL19leHRyZW1hYnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlQXN5bmM8VD4oa2V5OiBULCBtaW5WYWx1ZTogVCk6IFByb21pc2U8bnVtYmVyPiB7XG4gIHJldHVybiBrZXkgPiBtaW5WYWx1ZSA/IDEgOiBrZXkgPCBtaW5WYWx1ZSA/IC0xIDogMDtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIEV4dHJlbWFCeUFzeW5jSXRlcmF0b3I8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfa2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleUZuID0ga2V5Rm47XG4gICAgdGhpcy5fY21wID0gY21wO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IHJlc3VsdDogVFNvdXJjZVtdID0gW10sIGRvbmUsIG5leHQ7XG4gICAgY29uc3QgaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgZG9uZSA9IChuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lO1xuICAgIGlmIChkb25lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnQgPSBuZXh0LnZhbHVlO1xuICAgIGxldCByZXNLZXkgPSBhd2FpdCB0aGlzLl9rZXlGbihjdXJyZW50KTtcbiAgICBkb25lID0gKG5leHQgPSBhd2FpdCBpdC5uZXh0KCkpLmRvbmU7XG4gICAgd2hpbGUgKCFkb25lKSB7XG4gICAgICBsZXQgY3VyciA9IG5leHQudmFsdWU7XG4gICAgICBsZXQga2V5ID0gYXdhaXQgdGhpcy5fa2V5Rm4oY3Vycik7XG4gICAgICBjb25zdCBjID0gYXdhaXQgdGhpcy5fY21wKGtleSwgcmVzS2V5KTtcbiAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGN1cnIpO1xuICAgICAgfSBlbHNlIGlmIChjID4gMCkge1xuICAgICAgICByZXN1bHQgPSBbY3Vycl07XG4gICAgICAgIHJlc0tleSA9IGtleTtcbiAgICAgIH1cbiAgICAgIGRvbmUgPSAobmV4dCA9IGF3YWl0IGl0Lm5leHQoKSkuZG9uZTtcbiAgICB9XG5cbiAgICB5aWVsZCogcmVzdWx0O1xuICB9XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmVtYUJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeHRyZW1hQnlBc3luY0l0ZXJhdG9yPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5Rm4sIGNtcCk7XG59XG4iXX0=
