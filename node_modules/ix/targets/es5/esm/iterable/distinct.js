import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { identity } from '../internal/identity';
import { arrayIndexOf } from '../internal/arrayindexof';
import { comparer as defaultComparer } from '../internal/comparer';
var DistinctIterable = (function (_super) {
    tslib_1.__extends(DistinctIterable, _super);
    function DistinctIterable(source, keySelector, cmp) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._cmp = cmp;
        return _this;
    }
    DistinctIterable.prototype[Symbol.iterator] = function () {
        var set, _a, _b, item, key, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    set = [];
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    key = this._keySelector(item);
                    if (!(arrayIndexOf(set, key, this._cmp) === -1)) return [3 /*break*/, 4];
                    set.push(key);
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return DistinctIterable;
}(IterableX));
/**
 * Returns elements with a distinct key value by using the specified comparer to compare key values.
 * @param source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<T>} Sequence that contains the elements from the source sequence with distinct key values.
 */
export function distinct(source, keySelector, comparer) {
    if (keySelector === void 0) { keySelector = identity; }
    if (comparer === void 0) { comparer = defaultComparer; }
    return new DistinctIterable(source, keySelector, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2Rpc3RpbmN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFFBQVEsSUFBSSxlQUFlLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVuRTtJQUE4Qyw0Q0FBa0I7SUFLOUQsMEJBQVksTUFBeUIsRUFBRSxXQUFxQyxFQUFFLEdBQWtDO1FBQWhILFlBQ0UsaUJBQU8sU0FJUjtRQUhDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2hDLEtBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDOztJQUNsQixDQUFDO0lBRUEsMkJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBQ00sR0FBRyxHQUFHLEVBQUUsQ0FBQzs7OztvQkFFSSxLQUFBLGlCQUFBLElBQUksQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXBCLElBQUk7b0JBQ1AsR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7eUJBQzlCLENBQUEsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBLEVBQXhDLHdCQUF3QztvQkFDMUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztvQkFDZCxxQkFBTSxJQUFJLEVBQUE7O29CQUFWLFNBQVUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdoQjtJQUNILHVCQUFDO0FBQUQsQ0F2QkEsQUF1QkMsQ0F2QjZDLFNBQVMsR0F1QnREO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxtQkFDRixNQUF5QixFQUN6QixXQUFnRCxFQUNoRCxRQUF5RDtJQUR6RCw0QkFBQSxFQUFBLHNCQUFnRDtJQUNoRCx5QkFBQSxFQUFBLDBCQUF5RDtJQUMzRCxNQUFNLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQzdELENBQUMiLCJmaWxlIjoiaXRlcmFibGUvZGlzdGluY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmltcG9ydCB7IGFycmF5SW5kZXhPZiB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5pbXBvcnQgeyBjb21wYXJlciBhcyBkZWZhdWx0Q29tcGFyZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5cbmNsYXNzIERpc3RpbmN0SXRlcmFibGU8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5O1xuICBwcml2YXRlIF9jbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2NtcCA9IGNtcDtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgc2V0ID0gW107XG5cbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgbGV0IGtleSA9IHRoaXMuX2tleVNlbGVjdG9yKGl0ZW0pO1xuICAgICAgaWYgKGFycmF5SW5kZXhPZihzZXQsIGtleSwgdGhpcy5fY21wKSA9PT0gLTEpIHtcbiAgICAgICAgc2V0LnB1c2goa2V5KTtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGVsZW1lbnRzIHdpdGggYSBkaXN0aW5jdCBrZXkgdmFsdWUgYnkgdXNpbmcgdGhlIHNwZWNpZmllZCBjb21wYXJlciB0byBjb21wYXJlIGtleSB2YWx1ZXMuXG4gKiBAcGFyYW0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFRTb3VyY2UpOiBUS2V5fSBba2V5U2VsZWN0b3JdIEtleSBzZWxlY3Rvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogVEtleSwgeTogVEtleSk6IGJvb2xlYW59IFtjb21wYXJlcl0gQ29tcGFyZXIgdXNlZCB0byBjb21wYXJlIGtleSB2YWx1ZXMuXG4gKiBAcmV0dXJuIHtJdGVyYWJsZTxUPn0gU2VxdWVuY2UgdGhhdCBjb250YWlucyB0aGUgZWxlbWVudHMgZnJvbSB0aGUgc291cmNlIHNlcXVlbmNlIHdpdGggZGlzdGluY3Qga2V5IHZhbHVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSA9IGlkZW50aXR5LFxuICAgIGNvbXBhcmVyOiAoeDogVEtleSwgeTogVEtleSkgPT4gYm9vbGVhbiA9IGRlZmF1bHRDb21wYXJlcik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGlzdGluY3RJdGVyYWJsZShzb3VyY2UsIGtleVNlbGVjdG9yLCBjb21wYXJlcik7XG59XG4iXX0=
