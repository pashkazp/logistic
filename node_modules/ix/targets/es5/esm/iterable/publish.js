import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { RefCountList } from './_refcountlist';
import { create } from './create';
var PublishedBuffer = (function (_super) {
    tslib_1.__extends(PublishedBuffer, _super);
    function PublishedBuffer(source) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = new RefCountList(0);
        return _this;
    }
    PublishedBuffer.prototype._getIterable = function (i) {
        var hasValue, current, next;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, , 6, 7]);
                    _a.label = 1;
                case 1:
                    if (!1) return [3 /*break*/, 5];
                    hasValue = false, current = {};
                    if (i >= this._buffer.count) {
                        if (!this._stopped) {
                            try {
                                next = this._source.next();
                                hasValue = !next.done;
                                if (hasValue) {
                                    current = next.value;
                                }
                            }
                            catch (e) {
                                this._error = e;
                                this._stopped = true;
                            }
                        }
                        if (this._stopped) {
                            if (this._error) {
                                throw this._error;
                            }
                            else {
                                return [3 /*break*/, 5];
                            }
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                    }
                    else {
                        hasValue = true;
                    }
                    if (!hasValue) return [3 /*break*/, 3];
                    return [4 /*yield*/, this._buffer.get(i)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3: return [3 /*break*/, 5];
                case 4:
                    i++;
                    return [3 /*break*/, 1];
                case 5: return [3 /*break*/, 7];
                case 6:
                    this._buffer.done();
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    PublishedBuffer.prototype[Symbol.iterator] = function () {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.iterator]();
    };
    return PublishedBuffer;
}(IterableX));
export function publish(source, selector) {
    return selector ?
        create(function () { return selector(publish(source))[Symbol.iterator](); }) :
        new PublishedBuffer(source[Symbol.iterator]());
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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TSxDQUFDLFFBQVE7UUFDYixNQUFNLENBQUMsY0FBTSxPQUFBLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBNUMsQ0FBNEMsQ0FBQztRQUMxRCxJQUFJLGVBQWUsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL3B1Ymxpc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBSZWZDb3VudExpc3QgfSBmcm9tICcuL19yZWZjb3VudGxpc3QnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUnO1xuXG5jbGFzcyBQdWJsaXNoZWRCdWZmZXI8VD4gZXh0ZW5kcyBJdGVyYWJsZVg8VD4ge1xuICBwcml2YXRlIF9idWZmZXI6IFJlZkNvdW50TGlzdDxUPjtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYXRvcjxUPjtcbiAgcHJpdmF0ZSBfZXJyb3I6IGFueTtcbiAgcHJpdmF0ZSBfc3RvcHBlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmF0b3I8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9idWZmZXIgPSBuZXcgUmVmQ291bnRMaXN0PFQ+KDApO1xuICB9XG5cbiAgcHJpdmF0ZSAqX2dldEl0ZXJhYmxlKGk6IG51bWJlcik6IEl0ZXJhYmxlPFQ+IHtcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgbGV0IGhhc1ZhbHVlID0gZmFsc2UsIGN1cnJlbnQgPSA8VD57fTtcbiAgICAgICAgaWYgKGkgPj0gdGhpcy5fYnVmZmVyLmNvdW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMuX3NvdXJjZS5uZXh0KCk7XG4gICAgICAgICAgICAgIGhhc1ZhbHVlID0gIW5leHQuZG9uZTtcbiAgICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IGN1cnJlbnQgPSBuZXh0LnZhbHVlOyB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZTtcbiAgICAgICAgICAgICAgdGhpcy5fc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyB0aGlzLl9idWZmZXIucHVzaChjdXJyZW50KTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgIHlpZWxkIHRoaXMuX2J1ZmZlci5nZXQoaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuX2J1ZmZlci5kb25lKCk7XG4gICAgfVxuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8VD4ge1xuICAgIHRoaXMuX2J1ZmZlci5yZWFkZXJDb3VudCsrO1xuICAgIHJldHVybiB0aGlzLl9nZXRJdGVyYWJsZSh0aGlzLl9idWZmZXIuY291bnQpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+KTogSXRlcmFibGVYPFRTb3VyY2U+O1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gIHNlbGVjdG9yPzogKHZhbHVlOiBJdGVyYWJsZTxUU291cmNlPikgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFJlc3VsdD47XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yPzogKHZhbHVlOiBJdGVyYWJsZTxUU291cmNlPikgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFNvdXJjZSB8IFRSZXN1bHQ+IHtcbiAgcmV0dXJuIHNlbGVjdG9yID9cbiAgICBjcmVhdGUoKCkgPT4gc2VsZWN0b3IocHVibGlzaChzb3VyY2UpKVtTeW1ib2wuaXRlcmF0b3JdKCkpIDpcbiAgICBuZXcgUHVibGlzaGVkQnVmZmVyPFRTb3VyY2U+KHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCkpO1xufVxuIl19
