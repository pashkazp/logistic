import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
/**
 * @ignore
 */
export function defaultCompare(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
/**
 * @ignore
 */
var ExtremaByIterable = (function (_super) {
    tslib_1.__extends(ExtremaByIterable, _super);
    function ExtremaByIterable(source, keyFn, cmp) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keyFn = keyFn;
        _this._cmp = cmp;
        return _this;
    }
    ExtremaByIterable.prototype[Symbol.iterator] = function () {
        var result, next, it, current, resKey, curr, key, c;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    result = [];
                    it = this._source[Symbol.iterator]();
                    if ((next = it.next()).done) {
                        throw new Error('Sequence contains no elements');
                    }
                    current = next.value, resKey = this._keyFn(current);
                    result.push(current);
                    while (!(next = it.next()).done) {
                        curr = next.value, key = this._keyFn(curr);
                        c = this._cmp(key, resKey);
                        if (c === 0) {
                            result.push(curr);
                        }
                        else if (c > 0) {
                            result = [curr];
                            resKey = key;
                        }
                    }
                    return [5 /*yield**/, tslib_1.__values(result)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    };
    return ExtremaByIterable;
}(IterableX));
/**
 * @ignore
 */
export function extremaBy(source, keyFn, cmp) {
    return new ExtremaByIterable(source, keyFn, cmp);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL19leHRyZW1hYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEM7O0dBRUc7QUFDSCxNQUFNLHlCQUE0QixHQUFNLEVBQUUsUUFBVztJQUNuRCxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUVEOztHQUVHO0FBQ0g7SUFBK0MsNkNBQWtCO0lBSy9ELDJCQUNJLE1BQXlCLEVBQ3pCLEtBQTJCLEVBQzNCLEdBQWlDO1FBSHJDLFlBSUUsaUJBQU8sU0FJUjtRQUhDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLEtBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDOztJQUNsQixDQUFDO0lBRUEsNEJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBQ00sTUFBTSxHQUFjLEVBQUUsQ0FBTztvQkFDM0IsRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7b0JBQzNDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQzVCLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztvQkFDbkQsQ0FBQztvQkFFRyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDckIsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO3dCQUM1QixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDekMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFDO3dCQUNqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDWixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNwQixDQUFDO3dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzs0QkFDakIsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7NEJBQ2hCLE1BQU0sR0FBRyxHQUFHLENBQUM7d0JBQ2YsQ0FBQztvQkFDSCxDQUFDO29CQUVELHNCQUFBLGlCQUFPLE1BQU0sQ0FBQSxFQUFBOztvQkFBYixTQUFhLENBQUM7Ozs7S0FDZjtJQUNILHdCQUFDO0FBQUQsQ0FyQ0EsQUFxQ0MsQ0FyQzhDLFNBQVMsR0FxQ3ZEO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLG9CQUNGLE1BQXlCLEVBQ3pCLEtBQTJCLEVBQzNCLEdBQWlDO0lBQ25DLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFnQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xFLENBQUMiLCJmaWxlIjoiaXRlcmFibGUvX2V4dHJlbWFieS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyZTxUPihrZXk6IFQsIG1pblZhbHVlOiBUKTogbnVtYmVyIHtcbiAgcmV0dXJuIGtleSA+IG1pblZhbHVlID8gMSA6IGtleSA8IG1pblZhbHVlID8gLTEgOiAwO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuY2xhc3MgRXh0cmVtYUJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9rZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXk7XG4gIHByaXZhdGUgX2NtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgICBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlGbiA9IGtleUZuO1xuICAgIHRoaXMuX2NtcCA9IGNtcDtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgcmVzdWx0OiBUU291cmNlW10gPSBbXSwgbmV4dDtcbiAgICBjb25zdCBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgaWYgKChuZXh0ID0gaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnQgPSBuZXh0LnZhbHVlLCByZXNLZXkgPSB0aGlzLl9rZXlGbihjdXJyZW50KTtcbiAgICByZXN1bHQucHVzaChjdXJyZW50KTtcbiAgICB3aGlsZSAoIShuZXh0ID0gaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICBsZXQgY3VyciA9IG5leHQudmFsdWUsIGtleSA9IHRoaXMuX2tleUZuKGN1cnIpO1xuICAgICAgY29uc3QgYyA9IHRoaXMuX2NtcChrZXksIHJlc0tleSk7XG4gICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICByZXN1bHQucHVzaChjdXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoYyA+IDApIHtcbiAgICAgICAgcmVzdWx0ID0gW2N1cnJdO1xuICAgICAgICByZXNLZXkgPSBrZXk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgeWllbGQqIHJlc3VsdDtcbiAgfVxufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJlbWFCeTxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleUZuOiAoeDogVFNvdXJjZSkgPT4gVEtleSxcbiAgICBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEV4dHJlbWFCeUl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5Rm4sIGNtcCk7XG59XG4iXX0=
