import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { toArray } from './toarray';
var ScanRightIterable = (function (_super) {
    tslib_1.__extends(ScanRightIterable, _super);
    function ScanRightIterable(source, fn) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        _this._hasSeed = args.length === 1;
        _this._seed = args[0];
        return _this;
    }
    ScanRightIterable.prototype[Symbol.iterator] = function () {
        var hasValue, source, offset, item;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hasValue = false;
                    source = toArray(this._source);
                    offset = source.length - 1;
                    _a.label = 1;
                case 1:
                    if (!(offset >= 0)) return [3 /*break*/, 5];
                    item = source[offset];
                    if (!(hasValue || (hasValue = this._hasSeed))) return [3 /*break*/, 3];
                    this._seed = this._fn(this._seed, item, offset);
                    return [4 /*yield*/, this._seed];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    this._seed = item;
                    hasValue = true;
                    _a.label = 4;
                case 4:
                    offset--;
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/];
            }
        });
    };
    return ScanRightIterable;
}(IterableX));
export function scanRight(source, accumulator) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return new (ScanRightIterable.bind.apply(ScanRightIterable, tslib_1.__spread([void 0, source, accumulator], args)))();
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3NjYW5yaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDO0lBQXNDLDZDQUFZO0lBTWhELDJCQUNJLE1BQW1CLEVBQ25CLEVBQTBDO1FBQzFDLGNBQWtCO2FBQWxCLFVBQWtCLEVBQWxCLHFCQUFrQixFQUFsQixJQUFrQjtZQUFsQiw2QkFBa0I7O1FBSHRCLFlBSUUsaUJBQU8sU0FLUjtRQUpDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsS0FBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQUNsQyxLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7SUFDdkIsQ0FBQztJQUVBLDRCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNNLFFBQVEsR0FBRyxLQUFLLENBQUM7b0JBQ2YsTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzVCLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7Ozt5QkFBRSxDQUFBLE1BQU0sSUFBSSxDQUFDLENBQUE7b0JBQ3hDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7eUJBQ3hCLENBQUEsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQSxFQUF0Qyx3QkFBc0M7b0JBQ3hDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDbkQscUJBQU0sSUFBSSxDQUFDLEtBQUssRUFBQTs7b0JBQWhCLFNBQWdCLENBQUM7OztvQkFFakIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7b0JBQ2xCLFFBQVEsR0FBRyxJQUFJLENBQUM7OztvQkFQOEIsTUFBTSxFQUFFLENBQUE7Ozs7O0tBVTNEO0lBQ0gsd0JBQUM7QUFBRCxDQS9CQSxBQStCQyxDQS9CcUMsU0FBUyxHQStCOUM7QUFTRCxNQUFNLG9CQUNGLE1BQW1CLEVBQ25CLFdBQXVEO0lBQ3ZELGNBQWtCO1NBQWxCLFVBQWtCLEVBQWxCLHFCQUFrQixFQUFsQixJQUFrQjtRQUFsQiw2QkFBa0I7O0lBQ3BCLE1BQU0sTUFBSyxpQkFBaUIsWUFBakIsaUJBQWlCLDRCQUFDLE1BQU0sRUFBRSxXQUFXLEdBQUssSUFBSSxNQUFFO0FBQzdELENBQUMiLCJmaWxlIjoiaXRlcmFibGUvc2NhbnJpZ2h0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdG9hcnJheSc7XG5cbmNsYXNzIFNjYW5SaWdodEl0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgSXRlcmFibGVYPFI+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUPjtcbiAgcHJpdmF0ZSBfZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSO1xuICBwcml2YXRlIF9zZWVkPzogVCB8IFI7XG4gIHByaXZhdGUgX2hhc1NlZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgICAgZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSLFxuICAgICAgLi4uYXJnczogKFQgfCBSKVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgICB0aGlzLl9oYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gICAgdGhpcy5fc2VlZCA9IGFyZ3NbMF07XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgY29uc3Qgc291cmNlID0gdG9BcnJheSh0aGlzLl9zb3VyY2UpO1xuICAgIGZvciAobGV0IG9mZnNldCA9IHNvdXJjZS5sZW5ndGggLSAxOyBvZmZzZXQgPj0gMDsgb2Zmc2V0LS0pIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBzb3VyY2Vbb2Zmc2V0XTtcbiAgICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSB0aGlzLl9oYXNTZWVkKSkge1xuICAgICAgICB0aGlzLl9zZWVkID0gdGhpcy5fZm4oPFI+dGhpcy5fc2VlZCwgaXRlbSwgb2Zmc2V0KTtcbiAgICAgICAgeWllbGQgdGhpcy5fc2VlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBpdGVtO1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCk6IEl0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gIHNlZWQ6IFIpOiBJdGVyYWJsZVg8Uj47XG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIGFjY3VtdWxhdG9yOiAoYWNjOiBUIHwgUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogSXRlcmFibGVYPFQgfCBSPiB7XG4gIHJldHVybiBuZXcgU2NhblJpZ2h0SXRlcmFibGUoc291cmNlLCBhY2N1bXVsYXRvciwgLi4uYXJncyk7XG59XG4iXX0=
