import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { bindCallback } from '../internal/bindcallback';
var FlatMapIterable = (function (_super) {
    tslib_1.__extends(FlatMapIterable, _super);
    function FlatMapIterable(source, fn) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        return _this;
    }
    FlatMapIterable.prototype[Symbol.iterator] = function () {
        var _a, _b, outerItem, _c, _d, innerItem, e_1_1, e_2_1, e_2, _e, e_1, _f;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _g.trys.push([0, 11, 12, 13]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _g.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 10];
                    outerItem = _b.value;
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 7, 8, 9]);
                    _c = tslib_1.__values(this._fn(outerItem)), _d = _c.next();
                    _g.label = 3;
                case 3:
                    if (!!_d.done) return [3 /*break*/, 6];
                    innerItem = _d.value;
                    return [4 /*yield*/, innerItem];
                case 4:
                    _g.sent();
                    _g.label = 5;
                case 5:
                    _d = _c.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 10: return [3 /*break*/, 13];
                case 11:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 13];
                case 12:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 13: return [2 /*return*/];
            }
        });
    };
    return FlatMapIterable;
}(IterableX));
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * @param {Iterable<T>} source Source sequence
 * @param {function:(value: T): Iterable<R>} selector A transform function to apply to each element.
 * @param {Object} [thisArg] An optional "this" binding for the selector function.
 * @returns {Iterable<R>} An iterable whose elements are the result of invoking the one-to-many
 * transform function on each element of the input sequence.
 */
export function flatMap(source, selector, thisArg) {
    return new FlatMapIterable(source, bindCallback(selector, thisArg, 1));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZsYXRtYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRXhEO0lBQWdELDJDQUFrQjtJQUloRSx5QkFBWSxNQUF5QixFQUFFLEVBQXlDO1FBQWhGLFlBQ0UsaUJBQU8sU0FHUjtRQUZDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDOztJQUNoQixDQUFDO0lBRUEsMEJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7O29CQUN3QixLQUFBLGlCQUFBLElBQUksQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXpCLFNBQVM7Ozs7b0JBQ00sS0FBQSxpQkFBQSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBOzs7O29CQUFoQyxTQUFTO29CQUNoQixxQkFBTSxTQUFTLEVBQUE7O29CQUFmLFNBQWUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR3JCO0lBQ0gsc0JBQUM7QUFBRCxDQWpCQSxBQWlCQyxDQWpCK0MsU0FBUyxHQWlCeEQ7QUFFRDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sa0JBQ0YsTUFBeUIsRUFDekIsUUFBK0MsRUFDL0MsT0FBYTtJQUNmLE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBbUIsTUFBTSxFQUFFLFlBQVksQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDM0YsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9mbGF0bWFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcblxuY2xhc3MgRmxhdE1hcEl0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+IGV4dGVuZHMgSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfZm46ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFJlc3VsdD47XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgZm46ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGZvciAobGV0IG91dGVySXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGZvciAobGV0IGlubmVySXRlbSBvZiB0aGlzLl9mbihvdXRlckl0ZW0pKSB7XG4gICAgICAgIHlpZWxkIGlubmVySXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBQcm9qZWN0cyBlYWNoIGVsZW1lbnQgb2YgYSBzZXF1ZW5jZSB0byBpdGVyYWJsZSBhbmQgZmxhdHRlbnMgdGhlIHJlc3VsdGluZyBzZXF1ZW5jZXMgaW50b1xuICogb25lIHNlcXVlbmNlLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZVxuICogQHBhcmFtIHtmdW5jdGlvbjoodmFsdWU6IFQpOiBJdGVyYWJsZTxSPn0gc2VsZWN0b3IgQSB0cmFuc2Zvcm0gZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCBlbGVtZW50LlxuICogQHBhcmFtIHtPYmplY3R9IFt0aGlzQXJnXSBBbiBvcHRpb25hbCBcInRoaXNcIiBiaW5kaW5nIGZvciB0aGUgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7SXRlcmFibGU8Uj59IEFuIGl0ZXJhYmxlIHdob3NlIGVsZW1lbnRzIGFyZSB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBvbmUtdG8tbWFueVxuICogdHJhbnNmb3JtIGZ1bmN0aW9uIG9uIGVhY2ggZWxlbWVudCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0TWFwPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFJlc3VsdD4sXG4gICAgdGhpc0FyZz86IGFueSk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgRmxhdE1hcEl0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+KHNvdXJjZSwgYmluZENhbGxiYWNrKHNlbGVjdG9yLCB0aGlzQXJnLCAxKSk7XG59XG4iXX0=
