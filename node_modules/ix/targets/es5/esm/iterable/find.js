import * as tslib_1 from "tslib";
import { bindCallback } from '../internal/bindcallback';
/**
 * Returns the value of the first element in the sequence that satisfies the provided testing function.
 * Otherwise undefined is returned.
 * @param {Iterable<T>} source Source sequence.
 * @param {function(value: T, index: number): boolean} predicate Function to execute for every item in the sequence.
 * @param {Object} [thisArg] Object to use as this when executing callback.
 * @return {T | undefined} The value of the first element in the sequence that satisfies the provided testing function.
 * Otherwise undefined is returned.
 */
export function find(source, predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError();
    }
    var f = bindCallback(predicate, thisArg, 2);
    var i = 0;
    try {
        for (var source_1 = tslib_1.__values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
            var item = source_1_1.value;
            if (f(item, i++)) {
                return item;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return undefined;
    var e_1, _a;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZpbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUV4RDs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sZUFDRixNQUFtQixFQUNuQixTQUErQyxFQUMvQyxPQUFhO0lBQ2YsRUFBRSxDQUFDLENBQUMsT0FBTyxTQUFTLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQztRQUFDLE1BQU0sSUFBSSxTQUFTLEVBQUUsQ0FBQztJQUFDLENBQUM7SUFDL0QsSUFBTSxDQUFDLEdBQUcsWUFBWSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDOztRQUVWLEdBQUcsQ0FBQyxDQUFhLElBQUEsV0FBQSxpQkFBQSxNQUFNLENBQUEsOEJBQUE7WUFBbEIsSUFBSSxJQUFJLG1CQUFBO1lBQ1gsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDakIsTUFBTSxDQUFDLElBQUksQ0FBQztZQUNkLENBQUM7U0FDRjs7Ozs7Ozs7O0lBQ0QsTUFBTSxDQUFDLFNBQVMsQ0FBQzs7QUFDbkIsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9maW5kLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2VxdWVuY2UgdGhhdCBzYXRpc2ZpZXMgdGhlIHByb3ZpZGVkIHRlc3RpbmcgZnVuY3Rpb24uXG4gKiBPdGhlcndpc2UgdW5kZWZpbmVkIGlzIHJldHVybmVkLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsIGluZGV4OiBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGUgRnVuY3Rpb24gdG8gZXhlY3V0ZSBmb3IgZXZlcnkgaXRlbSBpbiB0aGUgc2VxdWVuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gW3RoaXNBcmddIE9iamVjdCB0byB1c2UgYXMgdGhpcyB3aGVuIGV4ZWN1dGluZyBjYWxsYmFjay5cbiAqIEByZXR1cm4ge1QgfCB1bmRlZmluZWR9IFRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgZWxlbWVudCBpbiB0aGUgc2VxdWVuY2UgdGhhdCBzYXRpc2ZpZXMgdGhlIHByb3ZpZGVkIHRlc3RpbmcgZnVuY3Rpb24uXG4gKiBPdGhlcndpc2UgdW5kZWZpbmVkIGlzIHJldHVybmVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmluZDxUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuLFxuICAgIHRoaXNBcmc/OiBhbnkpOiBUIHwgdW5kZWZpbmVkIHtcbiAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT09ICdmdW5jdGlvbicpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigpOyB9XG4gIGNvbnN0IGYgPSBiaW5kQ2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAyKTtcbiAgbGV0IGkgPSAwO1xuXG4gIGZvciAobGV0IGl0ZW0gb2Ygc291cmNlKSB7XG4gICAgaWYgKGYoaXRlbSwgaSsrKSkge1xuICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4iXX0=
