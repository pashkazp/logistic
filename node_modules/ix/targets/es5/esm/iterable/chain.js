import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
var ChainIterable = (function (_super) {
    tslib_1.__extends(ChainIterable, _super);
    function ChainIterable(result) {
        var _this = _super.call(this) || this;
        _this._result = result;
        return _this;
    }
    ChainIterable.prototype[Symbol.iterator] = function () {
        return this._result[Symbol.iterator]();
    };
    return ChainIterable;
}(IterableX));
/**
 * Returns an iterable sequence that is the result of invoking the selector on the source sequence,
 * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use
 * the same sequence multiple times.
 * @param {Iterable<TSource>} source Source sequence that will be shared in the selector function.
 * @param {function(source: Iterable<TSource>): Iterable<TResult>} selector Selector function which can use
 * the source sequence as many times as needed, without sharing subscriptions to the source sequence.
 * @returns An iterable sequence that contains the elements of a sequence produced by multicasting the source
 * sequence within a selector function.
 */
export function chain(source, selector) {
    return new ChainIterable(selector(source));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2NoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDO0lBQXFDLHlDQUFrQjtJQUdyRCx1QkFBWSxNQUF5QjtRQUFyQyxZQUNFLGlCQUFPLFNBRVI7UUFEQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQzs7SUFDeEIsQ0FBQztJQUVELHdCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBakI7UUFDRSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBQ0gsb0JBQUM7QUFBRCxDQVhBLEFBV0MsQ0FYb0MsU0FBUyxHQVc3QztBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sZ0JBQ0YsTUFBeUIsRUFDekIsUUFBMEQ7SUFDNUQsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFVLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ3RELENBQUMiLCJmaWxlIjoiaXRlcmFibGUvY2hhaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5cbmNsYXNzIENoYWluSXRlcmFibGU8VFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICBwcml2YXRlIF9yZXN1bHQ6IEl0ZXJhYmxlPFRSZXN1bHQ+O1xuXG4gIGNvbnN0cnVjdG9yKHJlc3VsdDogSXRlcmFibGU8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3Jlc3VsdCA9IHJlc3VsdDtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXN1bHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpdGVyYWJsZSBzZXF1ZW5jZSB0aGF0IGlzIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIHNlbGVjdG9yIG9uIHRoZSBzb3VyY2Ugc2VxdWVuY2UsXG4gKiB3aXRob3V0IHNoYXJpbmcgc3Vic2NyaXB0aW9ucy4gIFRoaXMgb3BlcmF0b3IgYWxsb3dzIGZvciBhIGZsdWVudCBzdHlsZSBvZiB3cml0aW5nIHF1ZXJpZXMgdGhhdCB1c2VcbiAqIHRoZSBzYW1lIHNlcXVlbmNlIG11bHRpcGxlIHRpbWVzLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUU291cmNlPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZSB0aGF0IHdpbGwgYmUgc2hhcmVkIGluIHRoZSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPik6IEl0ZXJhYmxlPFRSZXN1bHQ+fSBzZWxlY3RvciBTZWxlY3RvciBmdW5jdGlvbiB3aGljaCBjYW4gdXNlXG4gKiB0aGUgc291cmNlIHNlcXVlbmNlIGFzIG1hbnkgdGltZXMgYXMgbmVlZGVkLCB3aXRob3V0IHNoYXJpbmcgc3Vic2NyaXB0aW9ucyB0byB0aGUgc291cmNlIHNlcXVlbmNlLlxuICogQHJldHVybnMgQW4gaXRlcmFibGUgc2VxdWVuY2UgdGhhdCBjb250YWlucyB0aGUgZWxlbWVudHMgb2YgYSBzZXF1ZW5jZSBwcm9kdWNlZCBieSBtdWx0aWNhc3RpbmcgdGhlIHNvdXJjZVxuICogc2VxdWVuY2Ugd2l0aGluIGEgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbjxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAoc291cmNlOiBJdGVyYWJsZTxUU291cmNlPikgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IENoYWluSXRlcmFibGU8VFJlc3VsdD4oc2VsZWN0b3Ioc291cmNlKSk7XG59XG4iXX0=
