import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
var ConcatIterable = (function (_super) {
    tslib_1.__extends(ConcatIterable, _super);
    function ConcatIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    ConcatIterable.prototype[Symbol.iterator] = function () {
        var _a, _b, outer, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    outer = _b.value;
                    return [5 /*yield**/, tslib_1.__values(outer)];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    return ConcatIterable;
}(IterableX));
/**
 * Concatenates the input sequences.
 * @param {Iterable<Iterable<TSource>>} source Source sequences.
 * @return {Iterable<TSource>} Sequence with the elements of the source sequences concatenated.
 */
export function concatAll(source) {
    return new ConcatIterable(source);
}
/**
 * Concatenates the input sequences.
 * @param {Iterable<TSource>} source The first source sequence.
 * @param {...Iterable<TSource>} args The rest of the source sequences.
 * @return {Iterable<TSource>} Sequence with the elements of the source sequences concatenated.
 */
export function concat(source) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new ConcatIterable(tslib_1.__spread([source], args));
}
/**
 * Concatenates the input sequences.
 * @param {...Iterable<TSource>} args Source sequences.
 * @return {Iterable<TSource>} Sequence with the elements of the source sequences concatenated.
 */
export function concatStatic() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new ConcatIterable(args);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2NvbmNhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUV4QztJQUFzQywwQ0FBa0I7SUFHdEQsd0JBQVksTUFBbUM7UUFBL0MsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7O0lBQ3hCLENBQUM7SUFFQSx5QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7Ozs7b0JBQ29CLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQTs7OztvQkFBckIsS0FBSztvQkFBb0Isc0JBQUEsaUJBQU8sS0FBSyxDQUFBLEVBQUE7O29CQUFaLFNBQVksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUNoRDtJQUNILHFCQUFDO0FBQUQsQ0FYQSxBQVdDLENBWHFDLFNBQVMsR0FXOUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxvQkFBNkIsTUFBbUM7SUFDcEUsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBQzdDLENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0saUJBQW9CLE1BQW1CO0lBQUUsY0FBc0I7U0FBdEIsVUFBc0IsRUFBdEIscUJBQXNCLEVBQXRCLElBQXNCO1FBQXRCLDZCQUFzQjs7SUFDbkUsTUFBTSxDQUFDLElBQUksY0FBYyxtQkFBRSxNQUFNLEdBQUssSUFBSSxFQUFFLENBQUM7QUFDL0MsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNO0lBQTBCLGNBQXNCO1NBQXRCLFVBQXNCLEVBQXRCLHFCQUFzQixFQUF0QixJQUFzQjtRQUF0Qix5QkFBc0I7O0lBQ3BELE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUNsQyxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL2NvbmNhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcblxuY2xhc3MgQ29uY2F0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPEl0ZXJhYmxlPFRTb3VyY2U+PjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPEl0ZXJhYmxlPFRTb3VyY2U+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGZvciAobGV0IG91dGVyIG9mIHRoaXMuX3NvdXJjZSkgeyB5aWVsZCogb3V0ZXI7IH1cbiAgfVxufVxuXG4vKipcbiAqIENvbmNhdGVuYXRlcyB0aGUgaW5wdXQgc2VxdWVuY2VzLlxuICogQHBhcmFtIHtJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2VzLlxuICogQHJldHVybiB7SXRlcmFibGU8VFNvdXJjZT59IFNlcXVlbmNlIHdpdGggdGhlIGVsZW1lbnRzIG9mIHRoZSBzb3VyY2Ugc2VxdWVuY2VzIGNvbmNhdGVuYXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPEl0ZXJhYmxlPFRTb3VyY2U+Pik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ29uY2F0SXRlcmFibGU8VFNvdXJjZT4oc291cmNlKTtcbn1cblxuLyoqXG4gKiBDb25jYXRlbmF0ZXMgdGhlIGlucHV0IHNlcXVlbmNlcy5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZSBUaGUgZmlyc3Qgc291cmNlIHNlcXVlbmNlLlxuICogQHBhcmFtIHsuLi5JdGVyYWJsZTxUU291cmNlPn0gYXJncyBUaGUgcmVzdCBvZiB0aGUgc291cmNlIHNlcXVlbmNlcy5cbiAqIEByZXR1cm4ge0l0ZXJhYmxlPFRTb3VyY2U+fSBTZXF1ZW5jZSB3aXRoIHRoZSBlbGVtZW50cyBvZiB0aGUgc291cmNlIHNlcXVlbmNlcyBjb25jYXRlbmF0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQ8VD4oc291cmNlOiBJdGVyYWJsZTxUPiwgLi4uYXJnczogSXRlcmFibGU8VD5bXSk6IEl0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgQ29uY2F0SXRlcmFibGUoW3NvdXJjZSwgLi4uYXJnc10pO1xufVxuXG4vKipcbiAqIENvbmNhdGVuYXRlcyB0aGUgaW5wdXQgc2VxdWVuY2VzLlxuICogQHBhcmFtIHsuLi5JdGVyYWJsZTxUU291cmNlPn0gYXJncyBTb3VyY2Ugc2VxdWVuY2VzLlxuICogQHJldHVybiB7SXRlcmFibGU8VFNvdXJjZT59IFNlcXVlbmNlIHdpdGggdGhlIGVsZW1lbnRzIG9mIHRoZSBzb3VyY2Ugc2VxdWVuY2VzIGNvbmNhdGVuYXRlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdFN0YXRpYzxUPiguLi5hcmdzOiBJdGVyYWJsZTxUPltdKTogSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIG5ldyBDb25jYXRJdGVyYWJsZShhcmdzKTtcbn1cbiJdfQ==
