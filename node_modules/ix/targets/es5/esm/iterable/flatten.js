import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { isIterable } from '../internal/isiterable';
var FlattenIterable = (function (_super) {
    tslib_1.__extends(FlattenIterable, _super);
    function FlattenIterable(source, depth) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._depth = depth;
        return _this;
    }
    FlattenIterable.prototype._flatten = function (source, depth) {
        var source_1, source_1_1, item, e_1_1, source_2, source_2_1, item, _a, _b, innerItem, e_2_1, e_3_1, e_1, _c, e_3, _d, e_2, _e;
        return tslib_1.__generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (!(depth === 0)) return [3 /*break*/, 9];
                    _f.label = 1;
                case 1:
                    _f.trys.push([1, 6, 7, 8]);
                    source_1 = tslib_1.__values(source), source_1_1 = source_1.next();
                    _f.label = 2;
                case 2:
                    if (!!source_1_1.done) return [3 /*break*/, 5];
                    item = source_1_1.value;
                    return [4 /*yield*/, item];
                case 3:
                    _f.sent();
                    _f.label = 4;
                case 4:
                    source_1_1 = source_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _f.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (source_1_1 && !source_1_1.done && (_c = source_1.return)) _c.call(source_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
                case 9:
                    _f.trys.push([9, 23, 24, 25]);
                    source_2 = tslib_1.__values(source), source_2_1 = source_2.next();
                    _f.label = 10;
                case 10:
                    if (!!source_2_1.done) return [3 /*break*/, 22];
                    item = source_2_1.value;
                    if (!isIterable(item)) return [3 /*break*/, 19];
                    _f.label = 11;
                case 11:
                    _f.trys.push([11, 16, 17, 18]);
                    _a = tslib_1.__values(this._flatten(item, depth - 1)), _b = _a.next();
                    _f.label = 12;
                case 12:
                    if (!!_b.done) return [3 /*break*/, 15];
                    innerItem = _b.value;
                    return [4 /*yield*/, innerItem];
                case 13:
                    _f.sent();
                    _f.label = 14;
                case 14:
                    _b = _a.next();
                    return [3 /*break*/, 12];
                case 15: return [3 /*break*/, 18];
                case 16:
                    e_2_1 = _f.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 18];
                case 17:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 18: return [3 /*break*/, 21];
                case 19: return [4 /*yield*/, item];
                case 20:
                    _f.sent();
                    _f.label = 21;
                case 21:
                    source_2_1 = source_2.next();
                    return [3 /*break*/, 10];
                case 22: return [3 /*break*/, 25];
                case 23:
                    e_3_1 = _f.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 25];
                case 24:
                    try {
                        if (source_2_1 && !source_2_1.done && (_d = source_2.return)) _d.call(source_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 25: return [2 /*return*/];
            }
        });
    };
    FlattenIterable.prototype[Symbol.iterator] = function () {
        return this._flatten(this._source, this._depth)[Symbol.iterator]();
    };
    return FlattenIterable;
}(IterableX));
/**
 * Flattens the source sequence until the specified depth.
 * @param {Iterable<T>} source Source sequence.
 * @param {Number} depth The depth to flatten the source sequence.
 * @returns {Iterable<T>} The flattened sequence, flattened to the specified depth.
 */
export function flatten(source, depth) {
    if (depth === void 0) { depth = Infinity; }
    return new FlattenIterable(source, depth);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZsYXR0ZW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXBEO0lBQXVDLDJDQUFrQjtJQUl2RCx5QkFBWSxNQUF5QixFQUFFLEtBQWE7UUFBcEQsWUFDRSxpQkFBTyxTQUdSO1FBRkMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O0lBQ3RCLENBQUM7SUFFUSxrQ0FBUSxHQUFqQixVQUFrQixNQUF5QixFQUFFLEtBQWE7Ozs7O3lCQUNwRCxDQUFBLEtBQUssS0FBSyxDQUFDLENBQUEsRUFBWCx3QkFBVzs7OztvQkFDSSxXQUFBLGlCQUFBLE1BQU0sQ0FBQTs7OztvQkFBZCxJQUFJO29CQUFjLHFCQUFNLElBQUksRUFBQTs7b0JBQVYsU0FBVSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUN0QyxzQkFBTzs7O29CQUVRLFdBQUEsaUJBQUEsTUFBTSxDQUFBOzs7O29CQUFkLElBQUk7eUJBQ1AsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFoQix5QkFBZ0I7Ozs7b0JBQ0ksS0FBQSxpQkFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUE7Ozs7b0JBQTNDLFNBQVM7b0JBQXNDLHFCQUFNLFNBQVMsRUFBQTs7b0JBQWYsU0FBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozt5QkFFeEUscUJBQU0sSUFBSSxFQUFBOztvQkFBVixTQUFVLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHaEI7SUFFRCwwQkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDckUsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0EzQkEsQUEyQkMsQ0EzQnNDLFNBQVMsR0EyQi9DO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLGtCQUFxQixNQUFtQixFQUFFLEtBQXdCO0lBQXhCLHNCQUFBLEVBQUEsZ0JBQXdCO0lBQ3RFLE1BQU0sQ0FBQyxJQUFJLGVBQWUsQ0FBSSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9mbGF0dGVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL2ludGVybmFsL2lzaXRlcmFibGUnO1xuXG5jbGFzcyBGbGF0dGVuSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9kZXB0aDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGRlcHRoOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9kZXB0aCA9IGRlcHRoO1xuICB9XG5cbiAgcHJpdmF0ZSAqX2ZsYXR0ZW4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgZGVwdGg6IG51bWJlcik6IEl0ZXJhYmxlPFRTb3VyY2U+IHtcbiAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgIGZvciAobGV0IGl0ZW0gb2Ygc291cmNlKSB7IHlpZWxkIGl0ZW07IH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIChsZXQgaXRlbSBvZiBzb3VyY2UpIHtcbiAgICAgIGlmIChpc0l0ZXJhYmxlKGl0ZW0pKSB7XG4gICAgICAgIGZvciAobGV0IGlubmVySXRlbSBvZiB0aGlzLl9mbGF0dGVuKGl0ZW0sIGRlcHRoIC0gMSkpIHsgeWllbGQgaW5uZXJJdGVtOyB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9mbGF0dGVuKHRoaXMuX3NvdXJjZSwgdGhpcy5fZGVwdGgpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG4vKipcbiAqIEZsYXR0ZW5zIHRoZSBzb3VyY2Ugc2VxdWVuY2UgdW50aWwgdGhlIHNwZWNpZmllZCBkZXB0aC5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VD59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcGFyYW0ge051bWJlcn0gZGVwdGggVGhlIGRlcHRoIHRvIGZsYXR0ZW4gdGhlIHNvdXJjZSBzZXF1ZW5jZS5cbiAqIEByZXR1cm5zIHtJdGVyYWJsZTxUPn0gVGhlIGZsYXR0ZW5lZCBzZXF1ZW5jZSwgZmxhdHRlbmVkIHRvIHRoZSBzcGVjaWZpZWQgZGVwdGguXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0dGVuPFQ+KHNvdXJjZTogSXRlcmFibGU8VD4sIGRlcHRoOiBudW1iZXIgPSBJbmZpbml0eSk6IEl0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgRmxhdHRlbkl0ZXJhYmxlPFQ+KHNvdXJjZSwgZGVwdGgpO1xufVxuIl19
