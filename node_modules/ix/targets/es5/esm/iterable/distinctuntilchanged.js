import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { identity } from '../internal/identity';
import { comparer as defaultComparer } from '../internal/comparer';
var DistinctUntilChangedIterable = (function (_super) {
    tslib_1.__extends(DistinctUntilChangedIterable, _super);
    function DistinctUntilChangedIterable(source, keySelector, comparer) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._comparer = comparer;
        return _this;
    }
    DistinctUntilChangedIterable.prototype[Symbol.iterator] = function () {
        var currentKey, hasCurrentKey, _a, _b, item, key, comparerEquals, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    currentKey = {}, hasCurrentKey = false;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    key = this._keySelector(item);
                    comparerEquals = false;
                    if (hasCurrentKey) {
                        comparerEquals = this._comparer(currentKey, key);
                    }
                    if (!(!hasCurrentKey || !comparerEquals)) return [3 /*break*/, 4];
                    hasCurrentKey = true;
                    currentKey = key;
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return DistinctUntilChangedIterable;
}(IterableX));
/**
 * Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
 * @param {Iterable<TSource>} source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<TSource>} Sequence without adjacent non-distinct elements.
 */
export function distinctUntilChanged(source, keySelector, comparer) {
    if (keySelector === void 0) { keySelector = identity; }
    if (comparer === void 0) { comparer = defaultComparer; }
    return new DistinctUntilChangedIterable(source, keySelector, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2Rpc3RpbmN0dW50aWxjaGFuZ2VkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsUUFBUSxJQUFJLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5FO0lBQTBELHdEQUFrQjtJQUsxRSxzQ0FDSSxNQUF5QixFQUN6QixXQUFxQyxFQUNyQyxRQUFnRDtRQUhwRCxZQUlFLGlCQUFPLFNBSVI7UUFIQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixLQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxLQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQzs7SUFDNUIsQ0FBQztJQUVBLHVDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNNLFVBQVUsR0FBUyxFQUFFLEVBQUUsYUFBYSxHQUFHLEtBQUssQ0FBQzs7OztvQkFDaEMsS0FBQSxpQkFBQSxJQUFJLENBQUMsT0FBTyxDQUFBOzs7O29CQUFwQixJQUFJO29CQUNQLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUM5QixjQUFjLEdBQUcsS0FBSyxDQUFDO29CQUMzQixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO3dCQUFDLGNBQWMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQztvQkFBQyxDQUFDO3lCQUNwRSxDQUFBLENBQUMsYUFBYSxJQUFJLENBQUMsY0FBYyxDQUFBLEVBQWpDLHdCQUFpQztvQkFDbkMsYUFBYSxHQUFHLElBQUksQ0FBQztvQkFDckIsVUFBVSxHQUFHLEdBQUcsQ0FBQztvQkFDakIscUJBQU0sSUFBSSxFQUFBOztvQkFBVixTQUFVLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHaEI7SUFDSCxtQ0FBQztBQUFELENBNUJBLEFBNEJDLENBNUJ5RCxTQUFTLEdBNEJsRTtBQUVEOzs7Ozs7R0FNRztBQUNILE1BQU0sK0JBQ0YsTUFBeUIsRUFDekIsV0FBZ0QsRUFDaEQsUUFBa0U7SUFEbEUsNEJBQUEsRUFBQSxzQkFBZ0Q7SUFDaEQseUJBQUEsRUFBQSwwQkFBa0U7SUFDcEUsTUFBTSxDQUFDLElBQUksNEJBQTRCLENBQWdCLE1BQU0sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDeEYsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9kaXN0aW5jdHVudGlsY2hhbmdlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuaW1wb3J0IHsgY29tcGFyZXIgYXMgZGVmYXVsdENvbXBhcmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuXG5jbGFzcyBEaXN0aW5jdFVudGlsQ2hhbmdlZEl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfa2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleTtcbiAgcHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgICBjb21wYXJlcjogKGZpcnN0OiBUS2V5LCBzZWNvbmQ6IFRLZXkpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IGN1cnJlbnRLZXkgPSA8VEtleT57fSwgaGFzQ3VycmVudEtleSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBsZXQga2V5ID0gdGhpcy5fa2V5U2VsZWN0b3IoaXRlbSk7XG4gICAgICBsZXQgY29tcGFyZXJFcXVhbHMgPSBmYWxzZTtcbiAgICAgIGlmIChoYXNDdXJyZW50S2V5KSB7IGNvbXBhcmVyRXF1YWxzID0gdGhpcy5fY29tcGFyZXIoY3VycmVudEtleSwga2V5KTsgfVxuICAgICAgaWYgKCFoYXNDdXJyZW50S2V5IHx8ICFjb21wYXJlckVxdWFscykge1xuICAgICAgICBoYXNDdXJyZW50S2V5ID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudEtleSA9IGtleTtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGNvbnNlY3V0aXZlIGRpc3RpbmN0IGVsZW1lbnRzIGJhc2VkIG9uIGEga2V5IHZhbHVlIGJ5IHVzaW5nIHRoZSBzcGVjaWZpZWQgZXF1YWxpdHkgY29tcGFyZXIgdG8gY29tcGFyZSBrZXkgdmFsdWVzLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUU291cmNlPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFRTb3VyY2UpOiBUS2V5fSBba2V5U2VsZWN0b3JdIEtleSBzZWxlY3Rvci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oeDogVEtleSwgeTogVEtleSk6IGJvb2xlYW59IFtjb21wYXJlcl0gQ29tcGFyZXIgdXNlZCB0byBjb21wYXJlIGtleSB2YWx1ZXMuXG4gKiBAcmV0dXJuIHtJdGVyYWJsZTxUU291cmNlPn0gU2VxdWVuY2Ugd2l0aG91dCBhZGphY2VudCBub24tZGlzdGluY3QgZWxlbWVudHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZDxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgPSBpZGVudGl0eSxcbiAgICBjb21wYXJlcjogKGZpcnN0OiBUS2V5LCBzZWNvbmQ6IFRLZXkpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiAgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEaXN0aW5jdFVudGlsQ2hhbmdlZEl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5U2VsZWN0b3IsIGNvbXBhcmVyKTtcbn1cbiJdfQ==
