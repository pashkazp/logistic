import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { identity } from '../internal/identity';
import { createGrouping } from './_grouping';
var GroupedIterable = (function (_super) {
    tslib_1.__extends(GroupedIterable, _super);
    function GroupedIterable(key, source) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this._source = source;
        return _this;
    }
    GroupedIterable.prototype[Symbol.iterator] = function () {
        return this._source[Symbol.iterator]();
    };
    return GroupedIterable;
}(IterableX));
export { GroupedIterable };
var GroupByIterable = (function (_super) {
    tslib_1.__extends(GroupByIterable, _super);
    function GroupByIterable(source, keySelector, elementSelector) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._elementSelector = elementSelector;
        return _this;
    }
    GroupByIterable.prototype[Symbol.iterator] = function () {
        var map, map_1, map_1_1, _a, key, values, e_1_1, e_1, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    map = createGrouping(this._source, this._keySelector, this._elementSelector);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 6, 7, 8]);
                    map_1 = tslib_1.__values(map), map_1_1 = map_1.next();
                    _c.label = 2;
                case 2:
                    if (!!map_1_1.done) return [3 /*break*/, 5];
                    _a = tslib_1.__read(map_1_1.value, 2), key = _a[0], values = _a[1];
                    return [4 /*yield*/, new GroupedIterable(key, values)];
                case 3:
                    _c.sent();
                    _c.label = 4;
                case 4:
                    map_1_1 = map_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (map_1_1 && !map_1_1.done && (_b = map_1.return)) _b.call(map_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return GroupByIterable;
}(IterableX));
export { GroupByIterable };
export function groupBy(source, keySelector, elementSelector) {
    if (elementSelector === void 0) { elementSelector = identity; }
    return new GroupByIterable(source, keySelector, elementSelector);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2dyb3VwYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDeEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFN0M7SUFBbUQsMkNBQWlCO0lBSWxFLHlCQUFZLEdBQVMsRUFBRSxNQUF3QjtRQUEvQyxZQUNFLGlCQUFPLFNBR1I7UUFGQyxLQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNmLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDOztJQUN4QixDQUFDO0lBRUQsMEJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFDSCxzQkFBQztBQUFELENBYkEsQUFhQyxDQWJrRCxTQUFTLEdBYTNEOztBQUVEO0lBQTRELDJDQUF3QztJQUtsRyx5QkFDSSxNQUF5QixFQUN6QixXQUFxQyxFQUNyQyxlQUEyQztRQUgvQyxZQUlFLGlCQUFPLFNBSVI7UUFIQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixLQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxLQUFJLENBQUMsZ0JBQWdCLEdBQUcsZUFBZSxDQUFDOztJQUMxQyxDQUFDO0lBRUEsMEJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBQ1EsR0FBRyxHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Ozs7b0JBQ3pELFFBQUEsaUJBQUEsR0FBRyxDQUFBOzs7O29CQUFwQixLQUFBLGdDQUFhLEVBQVosR0FBRyxRQUFBLEVBQUUsTUFBTSxRQUFBO29CQUNuQixxQkFBTSxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUE7O29CQUF0QyxTQUFzQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBRTFDO0lBQ0gsc0JBQUM7QUFBRCxDQXJCQSxBQXFCQyxDQXJCMkQsU0FBUyxHQXFCcEU7O0FBU0QsTUFBTSxrQkFDRixNQUF5QixFQUN6QixXQUFxQyxFQUNyQyxlQUFzRDtJQUF0RCxnQ0FBQSxFQUFBLDBCQUFzRDtJQUN4RCxNQUFNLENBQUMsSUFBSSxlQUFlLENBQXdCLE1BQU0sRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDMUYsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9ncm91cGJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5pbXBvcnQgeyBjcmVhdGVHcm91cGluZyB9IGZyb20gJy4vX2dyb3VwaW5nJztcblxuZXhwb3J0IGNsYXNzIEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+IGV4dGVuZHMgSXRlcmFibGVYPFRWYWx1ZT4ge1xuICBwdWJsaWMgcmVhZG9ubHkga2V5OiBUS2V5O1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRWYWx1ZT47XG5cbiAgY29uc3RydWN0b3Ioa2V5OiBUS2V5LCBzb3VyY2U6IEl0ZXJhYmxlPFRWYWx1ZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuXG4gIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHcm91cEJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleSwgVFZhbHVlPiBleHRlbmRzIEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5O1xuICBwcml2YXRlIF9lbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgICBlbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9lbGVtZW50U2VsZWN0b3IgPSBlbGVtZW50U2VsZWN0b3I7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgbWFwID0gY3JlYXRlR3JvdXBpbmcodGhpcy5fc291cmNlLCB0aGlzLl9rZXlTZWxlY3RvciwgdGhpcy5fZWxlbWVudFNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZXNdIG9mIG1hcCkge1xuICAgICAgeWllbGQgbmV3IEdyb3VwZWRJdGVyYWJsZShrZXksIHZhbHVlcyk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSk6IEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFNvdXJjZT4+O1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihcbiAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSxcbiAgZWxlbWVudFNlbGVjdG9yPzogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUpOiBJdGVyYWJsZVg8R3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+O1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgZWxlbWVudFNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRWYWx1ZSA9IGlkZW50aXR5KTogSXRlcmFibGVYPEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+PiB7XG4gIHJldHVybiBuZXcgR3JvdXBCeUl0ZXJhYmxlPFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oc291cmNlLCBrZXlTZWxlY3RvciwgZWxlbWVudFNlbGVjdG9yKTtcbn1cbiJdfQ==
