import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { createGrouping } from './_grouping';
import { empty } from './empty';
import { identity } from '../internal/identity';
var GroupJoinIterable = (function (_super) {
    tslib_1.__extends(GroupJoinIterable, _super);
    function GroupJoinIterable(outer, inner, outerSelector, innerSelector, resultSelector) {
        var _this = _super.call(this) || this;
        _this._outer = outer;
        _this._inner = inner;
        _this._outerSelector = outerSelector;
        _this._innerSelector = innerSelector;
        _this._resultSelector = resultSelector;
        return _this;
    }
    GroupJoinIterable.prototype[Symbol.iterator] = function () {
        var map, _a, _b, outerElement, outerKey, innerElements, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    map = createGrouping(this._inner, this._innerSelector, identity);
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._outer), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    outerElement = _b.value;
                    outerKey = this._outerSelector(outerElement);
                    innerElements = map.has(outerKey) ? map.get(outerKey) : empty();
                    return [4 /*yield*/, this._resultSelector(outerElement, innerElements)];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return GroupJoinIterable;
}(IterableX));
export function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2dyb3Vwam9pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQzdDLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWhEO0lBQStELDZDQUFrQjtJQU8vRSwyQkFDSSxLQUF1QixFQUN2QixLQUF1QixFQUN2QixhQUFzQyxFQUN0QyxhQUFzQyxFQUN0QyxjQUFtRTtRQUx2RSxZQU1FLGlCQUFPLFNBTVI7UUFMQyxLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixLQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxLQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxLQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQzs7SUFDeEMsQ0FBQztJQUVBLDRCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNRLEdBQUcsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDOzs7O29CQUM5QyxLQUFBLGlCQUFBLElBQUksQ0FBQyxNQUFNLENBQUE7Ozs7b0JBQTNCLFlBQVk7b0JBQ2IsUUFBUSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7b0JBQzdDLGFBQWEsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFxQixHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxHQUFHLEtBQUssRUFBVSxDQUFDO29CQUNoRyxxQkFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxhQUFhLENBQUMsRUFBQTs7b0JBQXZELFNBQXVELENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FFM0Q7SUFDSCx3QkFBQztBQUFELENBN0JBLEFBNkJDLENBN0I4RCxTQUFTLEdBNkJ2RTtBQUVELE1BQU0sb0JBQ0YsS0FBdUIsRUFDdkIsS0FBdUIsRUFDdkIsYUFBc0MsRUFDdEMsYUFBc0MsRUFDdEMsY0FBbUU7SUFDckUsTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQzFCLEtBQUssRUFDTCxLQUFLLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixjQUFjLENBQUMsQ0FBQztBQUNwQixDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL2dyb3Vwam9pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUdyb3VwaW5nIH0gZnJvbSAnLi9fZ3JvdXBpbmcnO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL2VtcHR5JztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuXG5jbGFzcyBHcm91cEpvaW5JdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICBwcml2YXRlIF9vdXRlcjogSXRlcmFibGU8VE91dGVyPjtcbiAgcHJpdmF0ZSBfaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj47XG4gIHByaXZhdGUgX291dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5O1xuICBwcml2YXRlIF9pbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleTtcbiAgcHJpdmF0ZSBfcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogSXRlcmFibGU8VElubmVyPikgPT4gVFJlc3VsdDtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIG91dGVyOiBJdGVyYWJsZTxUT3V0ZXI+LFxuICAgICAgaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj4sXG4gICAgICBvdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSxcbiAgICAgIGlubmVyU2VsZWN0b3I6ICh2YWx1ZTogVElubmVyKSA9PiBUS2V5LFxuICAgICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogSXRlcmFibGU8VElubmVyPikgPT4gVFJlc3VsdCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fb3V0ZXIgPSBvdXRlcjtcbiAgICB0aGlzLl9pbm5lciA9IGlubmVyO1xuICAgIHRoaXMuX291dGVyU2VsZWN0b3IgPSBvdXRlclNlbGVjdG9yO1xuICAgIHRoaXMuX2lubmVyU2VsZWN0b3IgPSBpbm5lclNlbGVjdG9yO1xuICAgIHRoaXMuX3Jlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgbWFwID0gY3JlYXRlR3JvdXBpbmcodGhpcy5faW5uZXIsIHRoaXMuX2lubmVyU2VsZWN0b3IsIGlkZW50aXR5KTtcbiAgICBmb3IgKGxldCBvdXRlckVsZW1lbnQgb2YgdGhpcy5fb3V0ZXIpIHtcbiAgICAgIGNvbnN0IG91dGVyS2V5ID0gdGhpcy5fb3V0ZXJTZWxlY3RvcihvdXRlckVsZW1lbnQpO1xuICAgICAgY29uc3QgaW5uZXJFbGVtZW50cyA9IG1hcC5oYXMob3V0ZXJLZXkpID8gPEl0ZXJhYmxlPFRJbm5lcj4+bWFwLmdldChvdXRlcktleSkgOiBlbXB0eTxUSW5uZXI+KCk7XG4gICAgICB5aWVsZCB0aGlzLl9yZXN1bHRTZWxlY3RvcihvdXRlckVsZW1lbnQsIGlubmVyRWxlbWVudHMpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBKb2luPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcjogSXRlcmFibGU8VE91dGVyPixcbiAgICBpbm5lcjogSXRlcmFibGU8VElubmVyPixcbiAgICBvdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSxcbiAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSxcbiAgICByZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBJdGVyYWJsZTxUSW5uZXI+KSA9PiBUUmVzdWx0KTogSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBHcm91cEpvaW5JdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXIsXG4gICAgaW5uZXIsXG4gICAgb3V0ZXJTZWxlY3RvcixcbiAgICBpbm5lclNlbGVjdG9yLFxuICAgIHJlc3VsdFNlbGVjdG9yKTtcbn1cbiJdfQ==
