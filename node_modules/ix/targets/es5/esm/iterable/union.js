import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { arrayIndexOf } from '../internal/arrayindexof';
import { comparer as defaultComparer } from '../internal/comparer';
var UnionIterable = (function (_super) {
    tslib_1.__extends(UnionIterable, _super);
    function UnionIterable(left, right, comparer) {
        var _this = _super.call(this) || this;
        _this._left = left;
        _this._right = right;
        _this._comparer = comparer;
        return _this;
    }
    UnionIterable.prototype[Symbol.iterator] = function () {
        var map, _a, _b, lItem, e_1_1, _c, _d, rItem, e_2_1, e_1, _e, e_2, _f;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    map = [];
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._left), _b = _a.next();
                    _g.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    lItem = _b.value;
                    if (!(arrayIndexOf(map, lItem, this._comparer) === -1)) return [3 /*break*/, 4];
                    map.push(lItem);
                    return [4 /*yield*/, lItem];
                case 3:
                    _g.sent();
                    _g.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8:
                    _g.trys.push([8, 13, 14, 15]);
                    _c = tslib_1.__values(this._right), _d = _c.next();
                    _g.label = 9;
                case 9:
                    if (!!_d.done) return [3 /*break*/, 12];
                    rItem = _d.value;
                    if (!(arrayIndexOf(map, rItem, this._comparer) === -1)) return [3 /*break*/, 11];
                    map.push(rItem);
                    return [4 /*yield*/, rItem];
                case 10:
                    _g.sent();
                    _g.label = 11;
                case 11:
                    _d = _c.next();
                    return [3 /*break*/, 9];
                case 12: return [3 /*break*/, 15];
                case 13:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 15];
                case 14:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 15: return [2 /*return*/];
            }
        });
    };
    return UnionIterable;
}(IterableX));
export function union(left, right, comparer) {
    if (comparer === void 0) { comparer = defaultComparer; }
    return new UnionIterable(left, right, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3VuaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsUUFBUSxJQUFJLGVBQWUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRW5FO0lBQXFDLHlDQUFrQjtJQUtyRCx1QkFBWSxJQUF1QixFQUFFLEtBQXdCLEVBQUUsUUFBNkM7UUFBNUcsWUFDRSxpQkFBTyxTQUlSO1FBSEMsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7O0lBQzVCLENBQUM7SUFFQSx3QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDTSxHQUFHLEdBQUcsRUFBRSxDQUFDOzs7O29CQUNLLEtBQUEsaUJBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQTs7OztvQkFBbkIsS0FBSzt5QkFDUixDQUFBLFlBQVksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQSxFQUEvQyx3QkFBK0M7b0JBQ2pELEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ2hCLHFCQUFNLEtBQUssRUFBQTs7b0JBQVgsU0FBVyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBSUUsS0FBQSxpQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFBOzs7O29CQUFwQixLQUFLO3lCQUNSLENBQUEsWUFBWSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBLEVBQS9DLHlCQUErQztvQkFDakQsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDaEIscUJBQU0sS0FBSyxFQUFBOztvQkFBWCxTQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHakI7SUFDSCxvQkFBQztBQUFELENBNUJBLEFBNEJDLENBNUJvQyxTQUFTLEdBNEI3QztBQUVELE1BQU0sZ0JBQ0YsSUFBdUIsRUFDdkIsS0FBd0IsRUFDeEIsUUFBK0Q7SUFBL0QseUJBQUEsRUFBQSwwQkFBK0Q7SUFDakUsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFVLElBQUksRUFBRSxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDM0QsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS91bmlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGFycmF5SW5kZXhPZiB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5pbXBvcnQgeyBjb21wYXJlciBhcyBkZWZhdWx0Q29tcGFyZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5cbmNsYXNzIFVuaW9uSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9sZWZ0OiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfcmlnaHQ6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9jb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IobGVmdDogSXRlcmFibGU8VFNvdXJjZT4sIHJpZ2h0OiBJdGVyYWJsZTxUU291cmNlPiwgY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9sZWZ0ID0gbGVmdDtcbiAgICB0aGlzLl9yaWdodCA9IHJpZ2h0O1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IG1hcCA9IFtdO1xuICAgIGZvciAobGV0IGxJdGVtIG9mIHRoaXMuX2xlZnQpIHtcbiAgICAgIGlmIChhcnJheUluZGV4T2YobWFwLCBsSXRlbSwgdGhpcy5fY29tcGFyZXIpID09PSAtMSkge1xuICAgICAgICBtYXAucHVzaChsSXRlbSk7XG4gICAgICAgIHlpZWxkIGxJdGVtO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IHJJdGVtIG9mIHRoaXMuX3JpZ2h0KSB7XG4gICAgICBpZiAoYXJyYXlJbmRleE9mKG1hcCwgckl0ZW0sIHRoaXMuX2NvbXBhcmVyKSA9PT0gLTEpIHtcbiAgICAgICAgbWFwLnB1c2gockl0ZW0pO1xuICAgICAgICB5aWVsZCBySXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaW9uPFRTb3VyY2U+KFxuICAgIGxlZnQ6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJpZ2h0OiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFVuaW9uSXRlcmFibGU8VFNvdXJjZT4obGVmdCwgcmlnaHQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==
