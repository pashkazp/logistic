import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
var SkipLastIterable = (function (_super) {
    tslib_1.__extends(SkipLastIterable, _super);
    function SkipLastIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    SkipLastIterable.prototype[Symbol.iterator] = function () {
        var q, _a, _b, item, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    q = [];
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    q.push(item);
                    if (!(q.length > this._count)) return [3 /*break*/, 4];
                    return [4 /*yield*/, q.shift()];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return SkipLastIterable;
}(IterableX));
export function skipLast(source, count) {
    return new SkipLastIterable(source, count);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3NraXBsYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXhDO0lBQXdDLDRDQUFrQjtJQUl4RCwwQkFBWSxNQUF5QixFQUFFLEtBQWE7UUFBcEQsWUFDRSxpQkFBTyxTQUdSO1FBRkMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7O0lBQ3RCLENBQUM7SUFFQSwyQkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDTSxDQUFDLEdBQUcsRUFBRSxDQUFDOzs7O29CQUNNLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQTs7OztvQkFBcEIsSUFBSTtvQkFDWCxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO3lCQUNULENBQUEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFBLEVBQXRCLHdCQUFzQjtvQkFDeEIscUJBQU0sQ0FBQyxDQUFDLEtBQUssRUFBRyxFQUFBOztvQkFBaEIsU0FBZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUd0QjtJQUNILHVCQUFDO0FBQUQsQ0FuQkEsQUFtQkMsQ0FuQnVDLFNBQVMsR0FtQmhEO0FBRUQsTUFBTSxtQkFBNEIsTUFBeUIsRUFBRSxLQUFhO0lBQ3hFLE1BQU0sQ0FBQyxJQUFJLGdCQUFnQixDQUFVLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUN0RCxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL3NraXBsYXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuXG5jbGFzcyBTa2lwTGFzdEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfY291bnQ6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgcSA9IFtdO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBxLnB1c2goaXRlbSk7XG4gICAgICBpZiAocS5sZW5ndGggPiB0aGlzLl9jb3VudCkge1xuICAgICAgICB5aWVsZCBxLnNoaWZ0KCkhO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2tpcExhc3Q8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgU2tpcExhc3RJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGNvdW50KTtcbn1cbiJdfQ==
