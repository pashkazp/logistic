import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { MaxRefCountList, RefCountList } from './_refcountlist';
import { create } from './create';
var MemoizeBuffer = (function (_super) {
    tslib_1.__extends(MemoizeBuffer, _super);
    function MemoizeBuffer(source, buffer) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = buffer;
        return _this;
    }
    MemoizeBuffer.prototype[Symbol.iterator] = function () {
        var i, hasValue, current, next;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 7, 8]);
                    _a.label = 2;
                case 2:
                    if (!1) return [3 /*break*/, 6];
                    hasValue = false, current = {};
                    if (i >= this._buffer.count) {
                        if (!this._stopped) {
                            try {
                                next = this._source.next();
                                hasValue = !next.done;
                                if (hasValue) {
                                    current = next.value;
                                }
                            }
                            catch (e) {
                                this._error = e;
                                this._stopped = true;
                            }
                        }
                        if (this._stopped) {
                            throw this._error;
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                    }
                    else {
                        hasValue = true;
                    }
                    if (!hasValue) return [3 /*break*/, 4];
                    return [4 /*yield*/, this._buffer.get(i)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4: return [3 /*break*/, 6];
                case 5:
                    i++;
                    return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 8];
                case 7:
                    this._buffer.done();
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return MemoizeBuffer;
}(IterableX));
export function memoize(source, readerCount, selector) {
    if (readerCount === void 0) { readerCount = -1; }
    if (readerCount === -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new RefCountList(readerCount));
    }
    return create(function () { return selector(memoize(source, readerCount))[Symbol.iterator](); });
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxZQUFZLENBQVUsV0FBVyxDQUFDLENBQUMsQ0FBQztJQUN2RyxDQUFDO0lBRUQsTUFBTSxDQUFDLE1BQU0sQ0FBb0IsY0FBTSxPQUFBLFFBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQTFELENBQTBELENBQUMsQ0FBQztBQUNyRyxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL21lbW9pemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBJUmVmQ291bnRMaXN0LCBNYXhSZWZDb3VudExpc3QsIFJlZkNvdW50TGlzdCB9IGZyb20gJy4vX3JlZmNvdW50bGlzdCc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICcuL2NyZWF0ZSc7XG5cbmNsYXNzIE1lbW9pemVCdWZmZXI8VD4gZXh0ZW5kcyBJdGVyYWJsZVg8VD4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhdG9yPFQ+O1xuICBwcml2YXRlIF9idWZmZXI6IElSZWZDb3VudExpc3Q8VD47XG4gIHByaXZhdGUgX2Vycm9yOiBhbnk7XG4gIHByaXZhdGUgX3N0b3BwZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhdG9yPFQ+LCBidWZmZXI6IElSZWZDb3VudExpc3Q8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgaGFzVmFsdWUgPSBmYWxzZSwgY3VycmVudCA9IDxUPnt9O1xuICAgICAgICBpZiAoaSA+PSB0aGlzLl9idWZmZXIuY291bnQpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5fc291cmNlLm5leHQoKTtcbiAgICAgICAgICAgICAgaGFzVmFsdWUgPSAhbmV4dC5kb25lO1xuICAgICAgICAgICAgICBpZiAoaGFzVmFsdWUpIHsgY3VycmVudCA9IG5leHQudmFsdWU7IH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlO1xuICAgICAgICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5fc3RvcHBlZCkge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5fZXJyb3I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IHRoaXMuX2J1ZmZlci5wdXNoKGN1cnJlbnQpOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgeWllbGQgdGhpcy5fYnVmZmVyLmdldChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fYnVmZmVyLmRvbmUoKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2U+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICByZWFkZXJDb3VudD86IG51bWJlcik6IEl0ZXJhYmxlWDxUU291cmNlPjtcbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICByZWFkZXJDb3VudD86IG51bWJlcixcbiAgc2VsZWN0b3I/OiAodmFsdWU6IEl0ZXJhYmxlPFRTb3VyY2U+KSA9PiBJdGVyYWJsZTxUUmVzdWx0Pik6IEl0ZXJhYmxlWDxUUmVzdWx0PjtcbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2UsIFRSZXN1bHQgPSBUU291cmNlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJlYWRlckNvdW50OiBudW1iZXIgPSAtMSxcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRTb3VyY2UgfCBUUmVzdWx0PiB7XG4gIGlmIChyZWFkZXJDb3VudCA9PT0gLTEgJiYgIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBNZW1vaXplQnVmZmVyPFRTb3VyY2U+KHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCksIG5ldyBNYXhSZWZDb3VudExpc3Q8VFNvdXJjZT4oKSk7XG4gIH1cblxuICBpZiAocmVhZGVyQ291bnQgIT09IC0xICYmICFzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgTWVtb2l6ZUJ1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpLCBuZXcgUmVmQ291bnRMaXN0PFRTb3VyY2U+KHJlYWRlckNvdW50KSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlPFRTb3VyY2UgfCBUUmVzdWx0PigoKSA9PiBzZWxlY3RvciEobWVtb2l6ZShzb3VyY2UsIHJlYWRlckNvdW50KSlbU3ltYm9sLml0ZXJhdG9yXSgpKTtcbn1cbiJdfQ==
