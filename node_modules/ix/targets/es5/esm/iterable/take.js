import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
var TakeIterable = (function (_super) {
    tslib_1.__extends(TakeIterable, _super);
    function TakeIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    TakeIterable.prototype[Symbol.iterator] = function () {
        var i, _a, _b, item, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    i = this._count;
                    if (!(i > 0)) return [3 /*break*/, 8];
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    if (--i === 0) {
                        return [3 /*break*/, 5];
                    }
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return TakeIterable;
}(IterableX));
export function take(source, count) {
    return new TakeIterable(source, count);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3Rha2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEM7SUFBb0Msd0NBQWtCO0lBSXBELHNCQUFZLE1BQXlCLEVBQUUsS0FBYTtRQUFwRCxZQUNFLGlCQUFPLFNBR1I7UUFGQyxLQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzs7SUFDdEIsQ0FBQztJQUVBLHVCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNNLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO3lCQUNoQixDQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsRUFBTCx3QkFBSzs7OztvQkFDVSxLQUFBLGlCQUFBLElBQUksQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXBCLElBQUk7b0JBQ1gscUJBQU0sSUFBSSxFQUFBOztvQkFBVixTQUFVLENBQUM7b0JBQ1gsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFBQyxNQUFNLGtCQUFBO29CQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHOUI7SUFDSCxtQkFBQztBQUFELENBbkJBLEFBbUJDLENBbkJtQyxTQUFTLEdBbUI1QztBQUVELE1BQU0sZUFBd0IsTUFBeUIsRUFBRSxLQUFhO0lBQ3BFLE1BQU0sQ0FBQyxJQUFJLFlBQVksQ0FBVSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDbEQsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS90YWtlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuXG5jbGFzcyBUYWtlSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9jb3VudDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCBpID0gdGhpcy5fY291bnQ7XG4gICAgaWYgKGkgPiAwKSB7XG4gICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgICBpZiAoLS1pID09PSAwKSB7IGJyZWFrOyB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWtlPFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRha2VJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGNvdW50KTtcbn1cbiJdfQ==
