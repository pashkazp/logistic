import * as tslib_1 from "tslib";
import { IterableX } from '../iterable';
import { bindCallback } from '../internal/bindcallback';
var FilterIterable = (function (_super) {
    tslib_1.__extends(FilterIterable, _super);
    function FilterIterable(source, predicate) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._predicate = predicate;
        return _this;
    }
    FilterIterable.prototype[Symbol.iterator] = function () {
        var i, _a, _b, item, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    i = 0;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    if (!this._predicate(item, i++)) return [3 /*break*/, 4];
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return FilterIterable;
}(IterableX));
/**
 * Filters a sequence of values based on a predicate.
 * @param {Iterable<T>} source Source sequence.
 * @param {function(value: T, index: number): boolean} predicate A function to test each source element for a condition.
 * @param {Object} [thisArg] Value to use as this when executing callback.
 * @return {Iterable<T>} Sequence that contains elements from the input sequence that satisfy the condition.
 */
export function filter(source, predicate, thisArg) {
    return new FilterIterable(source, bindCallback(predicate, thisArg, 2));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFeEQ7SUFBc0MsMENBQWtCO0lBSXRELHdCQUFZLE1BQXlCLEVBQUUsU0FBcUQ7UUFBNUYsWUFDRSxpQkFBTyxTQUdSO1FBRkMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7O0lBQzlCLENBQUM7SUFFQSx5QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDTSxDQUFDLEdBQUcsQ0FBQyxDQUFDOzs7O29CQUNPLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQTs7OztvQkFBcEIsSUFBSTt5QkFDUCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUExQix3QkFBMEI7b0JBQzVCLHFCQUFNLElBQUksRUFBQTs7b0JBQVYsU0FBVSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR2hCO0lBQ0gscUJBQUM7QUFBRCxDQWxCQSxBQWtCQyxDQWxCcUMsU0FBUyxHQWtCOUM7QUFFRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLGlCQUNGLE1BQW1CLEVBQ25CLFNBQStDLEVBQy9DLE9BQWE7SUFDZixNQUFNLENBQUMsSUFBSSxjQUFjLENBQUksTUFBTSxFQUFFLFlBQVksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQyIsImZpbGUiOiJpdGVyYWJsZS9maWx0ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuXG5jbGFzcyBGaWx0ZXJJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX3ByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKHRoaXMuX3ByZWRpY2F0ZShpdGVtLCBpKyspKSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRmlsdGVycyBhIHNlcXVlbmNlIG9mIHZhbHVlcyBiYXNlZCBvbiBhIHByZWRpY2F0ZS5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VD59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlIEEgZnVuY3Rpb24gdG8gdGVzdCBlYWNoIHNvdXJjZSBlbGVtZW50IGZvciBhIGNvbmRpdGlvbi5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbdGhpc0FyZ10gVmFsdWUgdG8gdXNlIGFzIHRoaXMgd2hlbiBleGVjdXRpbmcgY2FsbGJhY2suXG4gKiBAcmV0dXJuIHtJdGVyYWJsZTxUPn0gU2VxdWVuY2UgdGhhdCBjb250YWlucyBlbGVtZW50cyBmcm9tIHRoZSBpbnB1dCBzZXF1ZW5jZSB0aGF0IHNhdGlzZnkgdGhlIGNvbmRpdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcjxUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuLFxuICAgIHRoaXNBcmc/OiBhbnkpOiBJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IEZpbHRlckl0ZXJhYmxlPFQ+KHNvdXJjZSwgYmluZENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMikpO1xufVxuIl19
