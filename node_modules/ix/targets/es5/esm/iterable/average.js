import * as tslib_1 from "tslib";
import { identity } from '../internal/identity';
/**
 * Computes the average of a sequence of values from the sequence either from the sequence itself
 * or from the selector function.
 * @example
 * // Using non chained version
 * const result = average([1, 2, 3]);
 * const result = Ix.Iterable.of(1, 2, 3).average();
 * console.log(result);
 * @param {Iterable<any>} source A sequence of values to calculate the average of.
 * @param {function(x: any): number} [selector] A transform function to apply to each element.
 * @returns {number} The average of the sequence of values.
 */
export function average(source, selector) {
    if (selector === void 0) { selector = identity; }
    var sum = 0;
    var count = 0;
    try {
        for (var source_1 = tslib_1.__values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
            var item = source_1_1.value;
            sum += selector(item);
            count++;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (count === 0) {
        throw new Error('Empty collection');
    }
    return sum / count;
    var e_1, _a;
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2F2ZXJhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUtoRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQU0sa0JBQWtCLE1BQXFCLEVBQUUsUUFBdUM7SUFBdkMseUJBQUEsRUFBQSxtQkFBdUM7SUFDcEYsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQ1osSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDOztRQUNkLEdBQUcsQ0FBQyxDQUFhLElBQUEsV0FBQSxpQkFBQSxNQUFNLENBQUEsOEJBQUE7WUFBbEIsSUFBSSxJQUFJLG1CQUFBO1lBQ1gsR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN0QixLQUFLLEVBQUUsQ0FBQztTQUNUOzs7Ozs7Ozs7SUFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxHQUFHLEdBQUcsS0FBSyxDQUFDOztBQUNyQixDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL2F2ZXJhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcblxuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2Uoc291cmNlOiBJdGVyYWJsZTxudW1iZXI+LCBzZWxlY3Rvcj86ICh4OiBudW1iZXIpID0+IG51bWJlcik6IG51bWJlcjtcbmV4cG9ydCBmdW5jdGlvbiBhdmVyYWdlPFQ+KHNvdXJjZTogSXRlcmFibGU8VD4sIHNlbGVjdG9yPzogKHg6IFQpID0+IG51bWJlcik6IG51bWJlcjtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgYXZlcmFnZSBvZiBhIHNlcXVlbmNlIG9mIHZhbHVlcyBmcm9tIHRoZSBzZXF1ZW5jZSBlaXRoZXIgZnJvbSB0aGUgc2VxdWVuY2UgaXRzZWxmXG4gKiBvciBmcm9tIHRoZSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKiAvLyBVc2luZyBub24gY2hhaW5lZCB2ZXJzaW9uXG4gKiBjb25zdCByZXN1bHQgPSBhdmVyYWdlKFsxLCAyLCAzXSk7XG4gKiBjb25zdCByZXN1bHQgPSBJeC5JdGVyYWJsZS5vZigxLCAyLCAzKS5hdmVyYWdlKCk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICogQHBhcmFtIHtJdGVyYWJsZTxhbnk+fSBzb3VyY2UgQSBzZXF1ZW5jZSBvZiB2YWx1ZXMgdG8gY2FsY3VsYXRlIHRoZSBhdmVyYWdlIG9mLlxuICogQHBhcmFtIHtmdW5jdGlvbih4OiBhbnkpOiBudW1iZXJ9IFtzZWxlY3Rvcl0gQSB0cmFuc2Zvcm0gZnVuY3Rpb24gdG8gYXBwbHkgdG8gZWFjaCBlbGVtZW50LlxuICogQHJldHVybnMge251bWJlcn0gVGhlIGF2ZXJhZ2Ugb2YgdGhlIHNlcXVlbmNlIG9mIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2Uoc291cmNlOiBJdGVyYWJsZTxhbnk+LCBzZWxlY3RvcjogKHg6IGFueSkgPT4gbnVtYmVyID0gaWRlbnRpdHkpOiBudW1iZXIge1xuICBsZXQgc3VtID0gMDtcbiAgbGV0IGNvdW50ID0gMDtcbiAgZm9yIChsZXQgaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBzdW0gKz0gc2VsZWN0b3IoaXRlbSk7XG4gICAgY291bnQrKztcbiAgfVxuXG4gIGlmIChjb3VudCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRW1wdHkgY29sbGVjdGlvbicpO1xuICB9XG5cbiAgcmV0dXJuIHN1bSAvIGNvdW50O1xufVxuIl19
