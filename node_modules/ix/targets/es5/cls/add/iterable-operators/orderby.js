goog.module('targets.es5.cls.add.iterable_operators.orderby'); exports = {}; var module = {id: 'targets/es5/cls/add/iterable-operators/orderby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var orderby_1 = goog.require('targets.es5.cls.iterable.orderby');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.orderby");
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.orderby");
/**
 * @ignore
 * @template TKey, TSource
 * @this {!Iterable<TSource>}
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!tsickle_forward_declare_2.OrderedIterableX<TKey, TSource>}
 */
function orderByProto(keySelector, comparer) {
    return orderby_1.orderBy(this, keySelector, comparer);
}
exports.orderByProto = orderByProto;
/**
 * @ignore
 * @template TKey, TSource
 * @this {!Iterable<TSource>}
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!tsickle_forward_declare_2.OrderedIterableX<TKey, TSource>}
 */
function orderByDescendingProto(keySelector, comparer) {
    return orderby_1.orderByDescending(this, keySelector, comparer);
}
exports.orderByDescendingProto = orderByDescendingProto;
iterable_1.IterableX.prototype.orderBy = orderByProto;
iterable_1.IterableX.prototype.orderByDescending = orderByDescendingProto;
exports.iterable = iterable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZGQvaXRlcmFibGUtb3BlcmF0b3JzL29yZGVyYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDJDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FObEQ7QUFPM0Msa0RBTnFEO0FBT3JELElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw4Q0FBOEMsQ0FBQyxDQVBmO0FBU3RGLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0FBQ3RHOzs7Ozs7O0dBT0c7QUFYSCxzQkFjTSxXQVpvQyxFQWFwQyxRQVoyQztJQWEvQyxNQVpNLENBQUEsaUJBQVEsQ0FBZ0IsSUFBSSxFQUFDLFdBQVksRUFBQyxRQUFTLENBQUMsQ0FBQztBQWE3RCxDQUFDO0FBakJELG9DQWlCQztBQUNEOzs7Ozs7O0dBT0c7QUFmSCxnQ0FrQk0sV0FoQm9DLEVBaUJwQyxRQWhCMkM7SUFpQi9DLE1BaEJNLENBQUEsMkJBQWtCLENBQWdCLElBQUksRUFBQyxXQUFZLEVBQUMsUUFBUyxDQUFDLENBQUM7QUFpQnZFLENBaEJDO0FBTEQsd0RBS0M7QUFrQkQsb0JBaEJTLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRSxZQUFhLENBQUM7QUFpQjNDLG9CQWhCUyxDQUFDLFNBQVMsQ0FBQyxpQkFBaUIsR0FBRSxzQkFBdUIsQ0FBQztBQXNCL0QsT0FBTyxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUMiLCJmaWxlIjoib3JkZXJieS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uLy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgb3JkZXJCeSwgb3JkZXJCeURlc2NlbmRpbmcsIE9yZGVyZWRJdGVyYWJsZVggfSBmcm9tICcuLi8uLi9pdGVyYWJsZS9vcmRlcmJ5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLm9yZGVyYnlcIik7XG5pbXBvcnQgeyB0aGVuQnkgYXMgX3RoZW5CeSwgdGhlbkJ5RGVzY2VuZGluZyBhcyBfdGhlbkJ5RGVzY2VuZGluZyB9IGZyb20gJy4uLy4uL2l0ZXJhYmxlL29yZGVyYnknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMyA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUub3JkZXJieVwiKTtcbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRLZXksIFRTb3VyY2VcbiAqIEB0aGlzIHshSXRlcmFibGU8VFNvdXJjZT59XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogbnVtYmVyPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yLk9yZGVyZWRJdGVyYWJsZVg8VEtleSwgVFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcmRlckJ5UHJvdG88VEtleSwgVFNvdXJjZT4oXG4gICAgICB0aGlzOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAoaXRlbTogVFNvdXJjZSkgPT4gVEtleSxcbiAgICAgIGNvbXBhcmVyPzogKGZzdDogVEtleSwgc25kOiBUS2V5KSA9PiBudW1iZXIpOiBPcmRlcmVkSXRlcmFibGVYPFRLZXksIFRTb3VyY2U+IHtcbiAgcmV0dXJuIG9yZGVyQnk8VEtleSwgVFNvdXJjZT4odGhpcywga2V5U2VsZWN0b3IsIGNvbXBhcmVyKTtcbn1cbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRLZXksIFRTb3VyY2VcbiAqIEB0aGlzIHshSXRlcmFibGU8VFNvdXJjZT59XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogbnVtYmVyPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yLk9yZGVyZWRJdGVyYWJsZVg8VEtleSwgVFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvcmRlckJ5RGVzY2VuZGluZ1Byb3RvPFRLZXksIFRTb3VyY2U+KFxuICAgICAgdGhpczogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlTZWxlY3RvcjogKGl0ZW06IFRTb3VyY2UpID0+IFRLZXksXG4gICAgICBjb21wYXJlcj86IChmc3Q6IFRLZXksIHNuZDogVEtleSkgPT4gbnVtYmVyKTogT3JkZXJlZEl0ZXJhYmxlWDxUS2V5LCBUU291cmNlPiB7XG4gIHJldHVybiBvcmRlckJ5RGVzY2VuZGluZzxUS2V5LCBUU291cmNlPih0aGlzLCBrZXlTZWxlY3RvciwgY29tcGFyZXIpO1xufVxuXG5JdGVyYWJsZVgucHJvdG90eXBlLm9yZGVyQnkgPSBvcmRlckJ5UHJvdG87XG5JdGVyYWJsZVgucHJvdG90eXBlLm9yZGVyQnlEZXNjZW5kaW5nID0gb3JkZXJCeURlc2NlbmRpbmdQcm90bztcblxuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIGl0ZXJhYmxlIHtcbiAgbGV0IHRoZW5CeTogdHlwZW9mIF90aGVuQnk7XG4gIGxldCB0aGVuQnlEZXNjZW5kaW5nOiB0eXBlb2YgX3RoZW5CeURlc2NlbmRpbmc7XG59XG5leHBvcnRzLml0ZXJhYmxlID0gaXRlcmFibGU7XG5cblxuZGVjbGFyZSBtb2R1bGUgJy4uLy4uL2l0ZXJhYmxlJyB7XG4gIGludGVyZmFjZSBJdGVyYWJsZVg8VD4ge1xuICAgIG9yZGVyQnk6IHR5cGVvZiBvcmRlckJ5UHJvdG87XG4gICAgb3JkZXJCeURlc2NlbmRpbmc6IHR5cGVvZiBvcmRlckJ5RGVzY2VuZGluZ1Byb3RvO1xuICB9XG59Il19