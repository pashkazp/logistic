goog.module('targets.es5.cls.add.asynciterable_operators.sequenceequal'); exports = {}; var module = {id: 'targets/es5/cls/add/asynciterable-operators/sequenceequal.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var sequenceequal_1 = goog.require('targets.es5.cls.asynciterable.sequenceequal');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.sequenceequal");
var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @ignore
 * @template T
 * @this {!tsickle_forward_declare_1.AsyncIterableX<T>}
 * @param {!AsyncIterable<T>} other
 * @param {function(T, T): (boolean|!Promise<boolean>)=} comparer
 * @return {!Promise<boolean>}
 */
function sequenceEqualProto(other, comparer) {
    if (comparer === void 0) { comparer = comparer_1.comparerAsync; }
    return sequenceequal_1.sequenceEqual(this, other, comparer);
}
exports.sequenceEqualProto = sequenceEqualProto;
asynciterable_1.AsyncIterableX.prototype.sequenceEqual = sequenceEqualProto;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZGQvYXN5bmNpdGVyYWJsZS1vcGVyYXRvcnMvc2VxdWVuY2VlcXVhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgscURBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU43QztBQU9yRCxtRUFOc0I7QUFPdEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHlEQUF5RCxDQUFDLENBUDlDO0FBUWxFLG9EQVBzQjtBQVF0QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7Ozs7OztHQU9HO0FBWEgsNEJBY0ksS0FadUIsRUFhdkIsUUFaNkU7SUFZN0UseUJBQUEsRUFBQSxXQVorRCx3QkFBYztJQWEvRSxNQVpNLENBQUEsNkJBQWMsQ0FBQyxJQUFJLEVBQUMsS0FBTSxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBYTlDLENBWkM7QUFMRCxnREFLQztBQWNELDhCQVpjLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBRSxrQkFBbUIsQ0FBQyIsImZpbGUiOiJzZXF1ZW5jZWVxdWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi8uLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBzZXF1ZW5jZUVxdWFsIH0gZnJvbSAnLi4vLi4vYXN5bmNpdGVyYWJsZS9zZXF1ZW5jZWVxdWFsJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUuc2VxdWVuY2VlcXVhbFwiKTtcbmltcG9ydCB7IGNvbXBhcmVyQXN5bmMgfSBmcm9tICcuLi8uLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRcbiAqIEB0aGlzIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUPn1cbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IG90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQsIFQpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPik9fSBjb21wYXJlclxuICogQHJldHVybiB7IVByb21pc2U8Ym9vbGVhbj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW5jZUVxdWFsUHJvdG88VD4oXG4gICAgdGhpczogQXN5bmNJdGVyYWJsZVg8VD4sXG4gICAgb3RoZXI6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgY29tcGFyZXI6IChmaXJzdDogVCwgc2Vjb25kOiBUKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiA9IGNvbXBhcmVyQXN5bmMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgcmV0dXJuIHNlcXVlbmNlRXF1YWwodGhpcywgb3RoZXIsIGNvbXBhcmVyKTtcbn1cblxuQXN5bmNJdGVyYWJsZVgucHJvdG90eXBlLnNlcXVlbmNlRXF1YWwgPSBzZXF1ZW5jZUVxdWFsUHJvdG87XG5cbmRlY2xhcmUgbW9kdWxlICcuLi8uLi9hc3luY2l0ZXJhYmxlJyB7XG4gIGludGVyZmFjZSBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gICAgc2VxdWVuY2VFcXVhbDogdHlwZW9mIHNlcXVlbmNlRXF1YWxQcm90bztcbiAgfVxufSJdfQ==