goog.module('targets.es5.cls.add.asynciterable_operators.orderby'); exports = {}; var module = {id: 'targets/es5/cls/add/asynciterable-operators/orderby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var orderby_1 = goog.require('targets.es5.cls.asynciterable.orderby');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.orderby");
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.orderby");
/**
 * @ignore
 * @template TKey, TSource
 * @this {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!tsickle_forward_declare_2.OrderedAsyncIterableX<TKey, TSource>}
 */
function orderByProto(keySelector, comparer) {
    return orderby_1.orderBy(this, keySelector, comparer);
}
exports.orderByProto = orderByProto;
/**
 * @ignore
 * @template TKey, TSource
 * @this {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!tsickle_forward_declare_2.OrderedAsyncIterableX<TKey, TSource>}
 */
function orderByDescendingProto(keySelector, comparer) {
    return orderby_1.orderByDescending(this, keySelector, comparer);
}
exports.orderByDescendingProto = orderByDescendingProto;
asynciterable_1.AsyncIterableX.prototype.orderBy = orderByProto;
asynciterable_1.AsyncIterableX.prototype.orderByDescending = orderByDescendingProto;
exports.asynciterable = asynciterable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hZGQvYXN5bmNpdGVyYWJsZS1vcGVyYXRvcnMvb3JkZXJieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgscURBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU43QztBQU9yRCx1REFOMEQ7QUFPMUQsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBUFY7QUFTaEcsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7Ozs7Ozs7R0FPRztBQVhILHNCQWNJLFdBWm9DLEVBYXBDLFFBWjJDO0lBYTdDLE1BWk0sQ0FBQSxpQkFBUSxDQUFnQixJQUFJLEVBQUMsV0FBWSxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBYTdELENBQUM7QUFqQkQsb0NBaUJDO0FBQ0Q7Ozs7Ozs7R0FPRztBQWZILGdDQWtCSSxXQWhCb0MsRUFpQnBDLFFBaEIyQztJQWlCN0MsTUFoQk0sQ0FBQSwyQkFBa0IsQ0FBZ0IsSUFBSSxFQUFDLFdBQVksRUFBQyxRQUFTLENBQUMsQ0FBQztBQWlCdkUsQ0FoQkM7QUFMRCx3REFLQztBQWtCRCw4QkFoQmMsQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFFLFlBQWEsQ0FBQztBQWlCaEQsOEJBaEJjLENBQUMsU0FBUyxDQUFDLGlCQUFpQixHQUFFLHNCQUF1QixDQUFDO0FBc0JwRSxPQUFPLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQyIsImZpbGUiOiJvcmRlcmJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi8uLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBvcmRlckJ5LCBvcmRlckJ5RGVzY2VuZGluZywgT3JkZXJlZEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vLi4vYXN5bmNpdGVyYWJsZS9vcmRlcmJ5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUub3JkZXJieVwiKTtcbmltcG9ydCB7IHRoZW5CeSBhcyBfdGhlbkJ5LCB0aGVuQnlEZXNjZW5kaW5nIGFzIF90aGVuQnlEZXNjZW5kaW5nIH0gZnJvbSAnLi4vLi4vYXN5bmNpdGVyYWJsZS9vcmRlcmJ5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUub3JkZXJieVwiKTtcbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRLZXksIFRTb3VyY2VcbiAqIEB0aGlzIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBudW1iZXI9fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuT3JkZXJlZEFzeW5jSXRlcmFibGVYPFRLZXksIFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb3JkZXJCeVByb3RvPFRLZXksIFRTb3VyY2U+KFxuICAgIHRoaXM6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAoaXRlbTogVFNvdXJjZSkgPT4gVEtleSxcbiAgICBjb21wYXJlcj86IChmc3Q6IFRLZXksIHNuZDogVEtleSkgPT4gbnVtYmVyKTogT3JkZXJlZEFzeW5jSXRlcmFibGVYPFRLZXksIFRTb3VyY2U+IHtcbiAgcmV0dXJuIG9yZGVyQnk8VEtleSwgVFNvdXJjZT4odGhpcywga2V5U2VsZWN0b3IsIGNvbXBhcmVyKTtcbn1cbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRLZXksIFRTb3VyY2VcbiAqIEB0aGlzIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBudW1iZXI9fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuT3JkZXJlZEFzeW5jSXRlcmFibGVYPFRLZXksIFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb3JkZXJCeURlc2NlbmRpbmdQcm90bzxUS2V5LCBUU291cmNlPihcbiAgICB0aGlzOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKGl0ZW06IFRTb3VyY2UpID0+IFRLZXksXG4gICAgY29tcGFyZXI/OiAoZnN0OiBUS2V5LCBzbmQ6IFRLZXkpID0+IG51bWJlcik6IE9yZGVyZWRBc3luY0l0ZXJhYmxlWDxUS2V5LCBUU291cmNlPiB7XG4gIHJldHVybiBvcmRlckJ5RGVzY2VuZGluZzxUS2V5LCBUU291cmNlPih0aGlzLCBrZXlTZWxlY3RvciwgY29tcGFyZXIpO1xufVxuXG5Bc3luY0l0ZXJhYmxlWC5wcm90b3R5cGUub3JkZXJCeSA9IG9yZGVyQnlQcm90bztcbkFzeW5jSXRlcmFibGVYLnByb3RvdHlwZS5vcmRlckJ5RGVzY2VuZGluZyA9IG9yZGVyQnlEZXNjZW5kaW5nUHJvdG87XG5cbmV4cG9ydCBkZWNsYXJlIG5hbWVzcGFjZSBhc3luY2l0ZXJhYmxlIHtcbiAgbGV0IHRoZW5CeTogdHlwZW9mIF90aGVuQnk7XG4gIGxldCB0aGVuQnlEZXNjZW5kaW5nOiB0eXBlb2YgX3RoZW5CeURlc2NlbmRpbmc7XG59XG5leHBvcnRzLmFzeW5jaXRlcmFibGUgPSBhc3luY2l0ZXJhYmxlO1xuXG5cbmRlY2xhcmUgbW9kdWxlICcuLi8uLi9hc3luY2l0ZXJhYmxlJyB7XG4gIGludGVyZmFjZSBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gICAgb3JkZXJCeTogdHlwZW9mIG9yZGVyQnlQcm90bztcbiAgICBvcmRlckJ5RGVzY2VuZGluZzogdHlwZW9mIG9yZGVyQnlEZXNjZW5kaW5nUHJvdG87XG4gIH1cbn0iXX0=