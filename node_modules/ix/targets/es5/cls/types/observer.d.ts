/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Subscription } from './subscription';
/**
 * @record
 * @template T
 */
export declare function NextObserver(): void;
export interface NextObserver<T> {
    next: (value: T) => void;
    error?: (err: any) => void;
    complete?: () => void;
}
/**
 * @record
 * @template T
 */
export declare function ErrorObserver(): void;
export interface ErrorObserver<T> {
    next?: (value: T) => void;
    error: (err: any) => void;
    complete?: () => void;
}
/**
 * @record
 * @template T
 */
export declare function CompletionObserver(): void;
export interface CompletionObserver<T> {
    next?: (value: T) => void;
    error?: (err: any) => void;
    complete: () => void;
}
export declare type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;
/**
 * @record
 * @template T
 */
export declare function NextAsyncObserver(): void;
export interface NextAsyncObserver<T> {
    next: (value: T) => void | Promise<void>;
    error?: (err: any) => void | Promise<void>;
    complete?: () => void | Promise<void>;
}
/**
 * @record
 * @template T
 */
export declare function ErrorAsyncObserver(): void;
export interface ErrorAsyncObserver<T> {
    next?: (value: T) => void | Promise<void>;
    error: (err: any) => void | Promise<void>;
    complete?: () => void | Promise<void>;
}
/**
 * @record
 * @template T
 */
export declare function CompletionAsyncObserver(): void;
export interface CompletionAsyncObserver<T> {
    next?: (value: T) => void | Promise<void>;
    error?: (err: any) => void | Promise<void>;
    complete: () => void | Promise<void>;
}
export declare type PartialAsyncObserver<T> = NextAsyncObserver<T> | ErrorAsyncObserver<T> | CompletionAsyncObserver<T>;
/**
 * @record
 * @template T
 */
export declare function Observer(): void;
export interface Observer<T> {
    closed?: boolean;
    next: (value: T) => void;
    error: (err: any) => void;
    complete: () => void;
}
/**
 * @record
 * @template T
 */
export declare function Observable(): void;
export interface Observable<T> {
    subscribe: (observer: Observer<T>) => Subscription;
}
