/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { AsyncIterableX } from '../asynciterable';
import { Observable } from '../observer';
export declare type AsyncIterableInput<TSource> = Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource> | ArrayLike<TSource> | PromiseLike<TSource> | Observable<TSource>;
/**
 * @template TSource, TResult
 * @param {(!PromiseLike<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>|!ArrayLike<TSource>|!tsickle_forward_declare_6.Observable<TSource>)} source
 * @param {function(TSource, number): (TResult|!Promise<TResult>)=} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
export declare function from<TSource, TResult = TSource>(source: AsyncIterableInput<TSource>, selector?: (value: TSource, index: number) => TResult | Promise<TResult>, thisArg?: any): AsyncIterableX<TResult>;
