/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { IterableX } from '../iterable';
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * transform function on each element of the input sequence.
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): !Iterable<TResult>} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
export declare function flatMap<TSource, TResult>(source: Iterable<TSource>, selector: (value: TSource) => Iterable<TResult>, thisArg?: any): IterableX<TResult>;
