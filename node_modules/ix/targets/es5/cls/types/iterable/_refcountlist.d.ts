/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @ignore
 * @record
 * @template T
 */
export declare function RefCount(): void;
/**
 * @ignore
 */
export interface RefCount<T> {
    value: T;
    count: number;
}
/**
 * @ignore
 * @record
 * @template T
 */
export declare function IRefCountList(): void;
/**
 * @ignore
 */
export interface IRefCountList<T> {
    clear(): void;
    readonly count: number;
    get(index: number): T;
    push(value: T): void;
    done(): void;
}
/**
 * @ignore
 * @template T
 * @implements {IRefCountList}
 */
export declare class MaxRefCountList<T> implements IRefCountList<T> {
    private _list;
    /**
     * @return {void}
     */
    clear(): void;
    /**
     * @return {number}
     */
    readonly count: number;
    /**
     * @param {number} index
     * @return {T}
     */
    get(index: number): T;
    /**
     * @param {T} value
     * @return {void}
     */
    push(value: T): void;
    /**
     * @return {void}
     */
    done(): void;
}
/**
 * @ignore
 * @template T
 * @implements {IRefCountList}
 */
export declare class RefCountList<T> implements IRefCountList<T> {
    private _readerCount;
    private _list;
    private _count;
    /**
     * @param {number} readerCount
     */
    constructor(readerCount: number);
    /**
     * @return {void}
     */
    clear(): void;
    /**
     * @return {number}
     */
    readonly count: number;
    /**
     * @return {number}
     */
    /**
     * @param {number} value
     * @return {void}
     */
    readerCount: number;
    /**
     * @return {void}
     */
    done(): void;
    /**
     * @param {number} index
     * @return {T}
     */
    get(index: number): T;
    /**
     * @param {T} value
     * @return {void}
     */
    push(value: T): void;
}
