/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { AsyncIterableX } from '../asynciterable';
/**
 * Projects each element of a sequence to a potentially async iterable and flattens the
 * resulting sequences into one sequence.
 * transform function on each element of the input sequence.
 * @template TSource, TResult
 * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
 * @param {function(TSource): (!Iterable<(TResult|!PromiseLike<TResult>)>|!AsyncIterable<TResult>)} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
export declare function flatMapAsync<TSource, TResult>(source: Iterable<TSource | PromiseLike<TSource>> | AsyncIterable<TSource>, selector: (value: TSource) => Iterable<TResult | PromiseLike<TResult>> | AsyncIterable<TResult>, thisArg?: any): AsyncIterableX<TResult>;
