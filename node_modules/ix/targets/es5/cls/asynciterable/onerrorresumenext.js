goog.module('targets.es5.cls.asynciterable.onerrorresumenext'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/onerrorresumenext.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var OnErrorResumeNextAsyncIterable = (function (_super) {
    __extends(OnErrorResumeNextAsyncIterable, _super);
    /**
     * @param {!Iterable<!AsyncIterable<TSource>>} source
     */
    function OnErrorResumeNextAsyncIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    OnErrorResumeNextAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var _a, _b, item, it, next, e_1, e_2_1, e_2, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 10, 11, 12]);
                        _a = __values(this._source), _b = _a.next();
                        _d.label = 1;
                    case 1:
                        if (!!_b.done) return [3 /*break*/, 9];
                        item = _b.value;
                        it = item[Symbol.asyncIterator]();
                        _d.label = 2;
                    case 2:
                        if (!1) return [3 /*break*/, 8];
                        next = void 0;
                        _d.label = 3;
                    case 3:
                        _d.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, __await(it.next())];
                    case 4:
                        next = _d.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _d.sent();
                        return [3 /*break*/, 8];
                    case 6:
                        if (next.done) {
                            return [3 /*break*/, 8];
                        }
                        return [4 /*yield*/, next.value];
                    case 7:
                        _d.sent();
                        return [3 /*break*/, 2];
                    case 8:
                        _b = _a.next();
                        return [3 /*break*/, 1];
                    case 9: return [3 /*break*/, 12];
                    case 10:
                        e_2_1 = _d.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 12];
                    case 11:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    return OnErrorResumeNextAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function OnErrorResumeNextAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!AsyncIterable<TSource>>} */
    OnErrorResumeNextAsyncIterable.prototype._source;
}
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {...!AsyncIterable<T>} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function onErrorResumeNext(source) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new OnErrorResumeNextAsyncIterable(__spread([source], args));
}
exports.onErrorResumeNext = onErrorResumeNext;
/**
 * @template T
 * @param {...!AsyncIterable<T>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function onErrorResumeNextStatic() {
    var source = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        source[_i] = arguments[_i];
    }
    return new OnErrorResumeNextAsyncIterable(source);
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL29uZXJyb3JyZXN1bWVuZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUFxRCxrREFBd0I7SUFVN0U7O09BRUc7SUFURCx3Q0FBWSxNQUF3QztRQUFwRCxZQVdFLGlCQVZPLFNBWVI7UUFEQyxLQVZJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQzs7SUFXeEIsQ0FBQztJQUNIOztPQUVHO0lBWE0seUNBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7Ozt3QkFDa0IsS0FBQSxTQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7d0JBQXJCLElBQUs7d0JBQ1IsRUFBRyxHQUFFLElBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQzs7OzZCQUMvQixDQUFDO3dCQUNILElBQUssU0FBQSxDQUFDOzs7O3dCQUVELDZCQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBQTs7d0JBWXRCLElBWkksR0FBRSxTQUFnQixDQUFDOzs7O3dCQWN2Qix3QkFaTTs7d0JBZVIsRUFBRSxDQUFDLENBWkMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7NEJBQUEsTUFBTyxrQkFBQTt3QkFBQSxDQUFFO3dCQWF6QixxQkFaSyxJQUFLLENBQUMsS0FBSyxFQUFBOzt3QkFZaEIsU0FaZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHdEI7SUFDSCxxQ0FBQTtBQUFBLENBeEJBLEFBd0JBLENBeEJxRCw4QkFBZSxHQXdCcEU7QUFjQTtJQUNBLGlEQUFpRDtJQUNqRCw4QkFBOEIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ2pELENBQUM7QUFFRDs7Ozs7R0FLRztBQXRCSCwyQkFBcUMsTUFBd0I7SUFBQyxjQUE0QjtTQUE1QixVQUE0QixFQUE1QixxQkFBNEIsRUFBNUIsSUFBNEI7UUFBNUIsNkJBQTRCOztJQXdCeEYsTUF2Qk0sQ0FBQSxJQUFJLDhCQUErQixXQUFLLE1BQU0sR0FBSyxJQUFJLEVBQUUsQ0FBQztBQXdCbEUsQ0FBQztBQXpCRCw4Q0F5QkM7QUFDRDs7OztHQUlHO0FBMUJIO0lBQTJDLGdCQUE2QjtTQUE3QixVQUE2QixFQUE3QixxQkFBNkIsRUFBN0IsSUFBNkI7UUFBN0IsMkJBQTZCOztJQTRCdEUsTUEzQk0sQ0FBQSxJQUFJLDhCQUErQixDQUFJLE1BQU0sQ0FBQyxDQUFDO0FBNEJ2RCxDQTNCQztBQUZELDBEQUVDIiwiZmlsZSI6Im9uZXJyb3JyZXN1bWVuZXh0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIE9uRXJyb3JSZXN1bWVOZXh0QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8QXN5bmNJdGVyYWJsZTxUU291cmNlPj47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gaXRlbVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCAvKiogQHR5cGUgez99ICovIG5leHQ7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbmV4dCA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dC5kb25lKSB7IGJyZWFrOyB9XG4gICAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIE9uRXJyb3JSZXN1bWVOZXh0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+fSAqL1xuT25FcnJvclJlc3VtZU5leHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7Li4uIUFzeW5jSXRlcmFibGU8VD59IGFyZ3NcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHQ8VD4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LCAuLi5hcmdzOiBBc3luY0l0ZXJhYmxlPFQ+W10pOiBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgT25FcnJvclJlc3VtZU5leHRBc3luY0l0ZXJhYmxlPFQ+KFtzb3VyY2UsIC4uLmFyZ3NdKTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7Li4uIUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbkVycm9yUmVzdW1lTmV4dFN0YXRpYzxUPiguLi5zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD5bXSk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIG5ldyBPbkVycm9yUmVzdW1lTmV4dEFzeW5jSXRlcmFibGU8VD4oc291cmNlKTtcbn1cbiJdfQ==