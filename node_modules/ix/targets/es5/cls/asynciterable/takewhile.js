goog.module('targets.es5.cls.asynciterable.takewhile'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/takewhile.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var TakeWhileAsyncIterable = (function (_super) {
    __extends(TakeWhileAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
     */
    function TakeWhileAsyncIterable(source, predicate) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._predicate = predicate;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    TakeWhileAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        i = 0;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 9, 10, 15]);
                        _a = __asyncValues(this._source);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        return [4 /*yield*/, __await(this._predicate(item, i++))];
                    case 5:
                        if (!(_d.sent())) {
                            return [3 /*break*/, 8];
                        }
                        return [4 /*yield*/, item];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7: return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _d.trys.push([10, , 13, 14]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 11:
                        _d.sent();
                        _d.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    return TakeWhileAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function TakeWhileAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TakeWhileAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (boolean|!Promise<boolean>)} */
    TakeWhileAsyncIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function takeWhile(source, predicate) {
    return new TakeWhileAsyncIterable(source, predicate);
}
exports.takeWhile = takeWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rha2V3aGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEg7SUFBNkMsMENBQXdCO0lBV3JFOzs7T0FHRztJQVZELGdDQVlJLE1BWDhCLEVBWTlCLFNBWHdFO1FBRjVFLFlBY0UsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLEtBWEksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDOztJQVk5QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxpQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ0ssQ0FBRSxHQUFFLENBQUUsQ0FBQzs7Ozt3QkFDWSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBO3dCQUNYLDZCQUFLLElBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFDLENBQUUsRUFBRSxDQUFDLEdBQUE7O3dCQWF0QyxFQUFFLENBQUMsQ0FiQyxDQUFDLENBQUMsU0FBZ0MsQ0FBQyxDQUFDLENBQUEsQ0FBRTs0QkFBQSxNQUFPLGtCQUFBO3dCQUFBLENBQUU7d0JBY25ELHFCQWJLLElBQUssRUFBQTs7d0JBYVYsU0FiVSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FFZDtJQUNILDZCQUFBO0FBQUEsQ0FuQkEsQUFtQkEsQ0FuQjZDLDhCQUFlLEdBbUI1RDtBQWVBO0lBQ0Esc0NBQXNDO0lBQ3RDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDekMscUVBQXFFO0lBQ3JFLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDNUMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILG1CQTJCSSxNQTFCOEIsRUEyQjlCLFNBMUJ1RTtJQTJCekUsTUExQk0sQ0FBQSxJQUFJLHNCQUF1QixDQUFVLE1BQU0sRUFBQyxTQUFVLENBQUMsQ0FBQztBQTJCaEUsQ0ExQkM7QUFKRCw4QkFJQyIsImZpbGUiOiJ0YWtld2hpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgVGFrZVdoaWxlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3ByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gcHJlZGljYXRlXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKCEoYXdhaXQgdGhpcy5fcHJlZGljYXRlKGl0ZW0sIGkrKykpKSB7IGJyZWFrOyB9XG4gICAgICB5aWVsZCBpdGVtO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYWtlV2hpbGVBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuVGFrZVdoaWxlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuVGFrZVdoaWxlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3ByZWRpY2F0ZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gcHJlZGljYXRlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VXaGlsZTxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW58IFByb21pc2U8Ym9vbGVhbj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGFrZVdoaWxlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIHByZWRpY2F0ZSk7XG59XG4iXX0=