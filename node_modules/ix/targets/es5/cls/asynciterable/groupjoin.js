goog.module('targets.es5.cls.asynciterable.groupjoin'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/groupjoin.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _grouping_1 = goog.require('targets.es5.cls.asynciterable._grouping');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._grouping");
var empty_1 = goog.require('targets.es5.cls.asynciterable.empty');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.empty");
var from_1 = goog.require('targets.es5.cls.asynciterable.from');
var tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.from");
var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_5 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @template TOuter, TInner, TKey, TResult
 */
var GroupJoinAsyncIterable = (function (_super) {
    __extends(GroupJoinAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TOuter>} outer
     * @param {!AsyncIterable<TInner>} inner
     * @param {function(TOuter): (TKey|!Promise<TKey>)} outerSelector
     * @param {function(TInner): (TKey|!Promise<TKey>)} innerSelector
     * @param {function(TOuter, !AsyncIterable<TInner>): (TResult|!Promise<TResult>)} resultSelector
     */
    function GroupJoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector) {
        var _this = _super.call(this) || this;
        _this._outer = outer;
        _this._inner = inner;
        _this._outerSelector = outerSelector;
        _this._innerSelector = innerSelector;
        _this._resultSelector = resultSelector;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    GroupJoinAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var map, _a, _b, outerElement, outerKey, innerElements, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, __await(_grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity))];
                    case 1:
                        map = _d.sent();
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 11, 12, 17]);
                        _a = __asyncValues(this._outer);
                        _d.label = 3;
                    case 3: return [4 /*yield*/, __await(_a.next())];
                    case 4:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 10];
                        return [4 /*yield*/, __await(_b.value)];
                    case 5:
                        outerElement = _d.sent();
                        return [4 /*yield*/, __await(this._outerSelector(outerElement))];
                    case 6:
                        outerKey = _d.sent();
                        innerElements = map.has(outerKey) ? (map.get(outerKey)) : empty_1.empty();
                        return [4 /*yield*/, __await(this._resultSelector(outerElement, from_1.from(innerElements)))];
                    case 7: return [4 /*yield*/, _d.sent()];
                    case 8:
                        _d.sent();
                        _d.label = 9;
                    case 9: return [3 /*break*/, 3];
                    case 10: return [3 /*break*/, 17];
                    case 11:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 17];
                    case 12:
                        _d.trys.push([12, , 15, 16]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 14];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 13:
                        _d.sent();
                        _d.label = 14;
                    case 14: return [3 /*break*/, 16];
                    case 15:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 16: return [7 /*endfinally*/];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    return GroupJoinAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function GroupJoinAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TOuter>} */
    GroupJoinAsyncIterable.prototype._outer;
    /** @type {!AsyncIterable<TInner>} */
    GroupJoinAsyncIterable.prototype._inner;
    /** @type {function(TOuter): (TKey|!Promise<TKey>)} */
    GroupJoinAsyncIterable.prototype._outerSelector;
    /** @type {function(TInner): (TKey|!Promise<TKey>)} */
    GroupJoinAsyncIterable.prototype._innerSelector;
    /** @type {function(TOuter, !AsyncIterable<TInner>): (TResult|!Promise<TResult>)} */
    GroupJoinAsyncIterable.prototype._resultSelector;
}
/**
 * @template TOuter, TInner, TKey, TResult
 * @param {!AsyncIterable<TOuter>} outer
 * @param {!AsyncIterable<TInner>} inner
 * @param {function(TOuter): (TKey|!Promise<TKey>)} outerSelector
 * @param {function(TInner): (TKey|!Promise<TKey>)} innerSelector
 * @param {function(TOuter, !AsyncIterable<TInner>): (TResult|!Promise<TResult>)} resultSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.groupJoin = groupJoin;
//# sourceMappingURL=data:application/json;base64,