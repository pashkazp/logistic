goog.module('targets.es5.cls.asynciterable.repeat'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/repeat.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var of_1 = goog.require('targets.es5.cls.asynciterable.of');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.of");
var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var RepeatAsyncIterable = (function (_super) {
    __extends(RepeatAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    function RepeatAsyncIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    RepeatAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var _a, _b, item, e_1_1, i, _c, _d, item, e_2_1, e_1, _e, e_2, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (!(this._count === -1)) return [3 /*break*/, 17];
                        _g.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 16];
                        _g.label = 2;
                    case 2:
                        _g.trys.push([2, 9, 10, 15]);
                        _a = __asyncValues(this._source);
                        _g.label = 3;
                    case 3: return [4 /*yield*/, __await(_a.next())];
                    case 4:
                        if (!(_b = _g.sent(), !_b.done)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __await(_b.value)];
                    case 5:
                        item = _g.sent();
                        return [4 /*yield*/, item];
                    case 6:
                        _g.sent();
                        _g.label = 7;
                    case 7: return [3 /*break*/, 3];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_1_1 = _g.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _g.trys.push([10, , 13, 14]);
                        if (!(_b && !_b.done && (_e = _a.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await(_e.call(_a))];
                    case 11:
                        _g.sent();
                        _g.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15: return [3 /*break*/, 1];
                    case 16: return [3 /*break*/, 33];
                    case 17:
                        i = 0;
                        _g.label = 18;
                    case 18:
                        if (!(i < this._count)) return [3 /*break*/, 33];
                        _g.label = 19;
                    case 19:
                        _g.trys.push([19, 26, 27, 32]);
                        _c = __asyncValues(this._source);
                        _g.label = 20;
                    case 20: return [4 /*yield*/, __await(_c.next())];
                    case 21:
                        if (!(_d = _g.sent(), !_d.done)) return [3 /*break*/, 25];
                        return [4 /*yield*/, __await(_d.value)];
                    case 22:
                        item = _g.sent();
                        return [4 /*yield*/, item];
                    case 23:
                        _g.sent();
                        _g.label = 24;
                    case 24: return [3 /*break*/, 20];
                    case 25: return [3 /*break*/, 32];
                    case 26:
                        e_2_1 = _g.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 32];
                    case 27:
                        _g.trys.push([27, , 30, 31]);
                        if (!(_d && !_d.done && (_f = _c.return))) return [3 /*break*/, 29];
                        return [4 /*yield*/, __await(_f.call(_c))];
                    case 28:
                        _g.sent();
                        _g.label = 29;
                    case 29: return [3 /*break*/, 31];
                    case 30:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 31: return [7 /*endfinally*/];
                    case 32:
                        i++;
                        return [3 /*break*/, 18];
                    case 33: return [2 /*return*/];
                }
            });
        });
    };
    return RepeatAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function RepeatAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    RepeatAsyncIterable.prototype._source;
    /** @type {number} */
    RepeatAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.AsyncIterableX<TSource>}
 */
function repeat(source, count) {
    if (count === void 0) { count = -1; }
    return new RepeatAsyncIterable(source, count);
}
exports.repeat = repeat;
/**
 * @template TSource
 * @param {TSource} value
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.AsyncIterableX<TSource>}
 */
function repeatStatic(value, count) {
    if (count === void 0) { count = -1; }
    return new RepeatAsyncIterable(of_1.of(value), count);
}
exports.repeatStatic = repeatStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JlcGVhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMkJBTFc7QUFNWCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsOENBQThDLENBQUMsQ0FOM0U7QUFPMUIsa0RBTnVCO0FBT3ZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUkg7SUFBMEMsdUNBQXdCO0lBWWxFOzs7T0FHRztJQVhELDZCQUFZLE1BQThCLEVBQUMsS0FBYztRQUF6RCxZQWFFLGlCQVpPLFNBZVI7UUFGQyxLQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixLQVpJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQzs7SUFhdEIsQ0FBQztJQUNIOztPQUVHO0lBYk0sOEJBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7OzZCQUNNLENBQUEsSUFBSSxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUMsQ0FBQSxFQUFsQix5QkFBa0I7Ozs2QkFDYixDQUFDOzs7O3dCQUNnQixLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBO3dCQUFtQixxQkFBTSxJQUFLLEVBQUE7O3dCQUFYLFNBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBRzVDLENBQUUsR0FBRSxDQUFFOzs7NkJBQUMsQ0FBQSxDQUFFLEdBQUUsSUFBSyxDQUFDLE1BQU0sQ0FBQTs7Ozt3QkFDUCxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBO3dCQUFtQixxQkFBTSxJQUFLLEVBQUE7O3dCQUFYLFNBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQURwQixDQUFFLEVBQUUsQ0FBQTs7Ozs7O0tBSXZDO0lBQ0gsMEJBQUE7QUFBQSxDQXJCQSxBQXFCQSxDQXJCMEMsOEJBQWUsR0FxQnpEO0FBZ0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdEMscUJBQXFCO0lBQ3JCLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDckMsQ0FBQztBQUVEOzs7OztHQUtHO0FBMUJILGdCQUFnQyxNQUE4QixFQUFDLEtBQW1CO0lBQW5CLHNCQUFBLEVBQUEsU0FBa0IsQ0FBQztJQTRCaEYsTUEzQk0sQ0FBQSxJQUFJLG1CQUFvQixDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTRCekQsQ0FBQztBQTdCRCx3QkE2QkM7QUFDRDs7Ozs7R0FLRztBQS9CSCxzQkFBc0MsS0FBYyxFQUFDLEtBQW1CO0lBQW5CLHNCQUFBLEVBQUEsU0FBa0IsQ0FBQztJQWlDdEUsTUFoQ00sQ0FBQSxJQUFJLG1CQUFvQixDQUFVLE9BQUUsQ0FBQyxLQUFLLENBQUMsRUFBQyxLQUFNLENBQUMsQ0FBQztBQWlDNUQsQ0FoQ0M7QUFGRCxvQ0FFQyIsImZpbGUiOiJyZXBlYXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBvZiB9IGZyb20gJy4vb2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5vZlwiKTtcbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBSZXBlYXRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfY291bnQ6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBpZiAodGhpcy5fY291bnQgPT09IC0xKSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7IHlpZWxkIGl0ZW07IH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwOyBpIDwgdGhpcy5fY291bnQ7IGkrKykge1xuICAgICAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7IHlpZWxkIGl0ZW07IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVwZWF0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblJlcGVhdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblJlcGVhdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb3VudDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcj19IGNvdW50XG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMi5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdDxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIgPSAtMSk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBSZXBlYXRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQpO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHtUU291cmNlfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXBlYXRTdGF0aWM8VFNvdXJjZT4odmFsdWU6IFRTb3VyY2UsIGNvdW50OiBudW1iZXIgPSAtMSk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBSZXBlYXRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KG9mKHZhbHVlKSwgY291bnQpO1xufVxuIl19