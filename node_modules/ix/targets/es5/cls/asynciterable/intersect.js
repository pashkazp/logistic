goog.module('targets.es5.cls.asynciterable.intersect'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/intersect.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var arrayindexof_1 = goog.require('targets.es5.cls.internal.arrayindexof');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): (boolean|!Promise<boolean>)} comparer
 * @return {!Promise<boolean>}
 */
function arrayRemove(array, item, comparer) {
    return __awaiter(this, void 0, void 0, function () {
        var idx;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, arrayindexof_1.arrayIndexOfAsync(array, item, comparer)];
                case 1:
                    idx = _a.sent();
                    if (idx === -1) {
                        return [2 /*return*/, false];
                    }
                    array.splice(idx, 1);
                    return [2 /*return*/, true];
            }
        });
    });
}
/**
 * @template TSource
 */
var IntersectAsyncIterable = (function (_super) {
    __extends(IntersectAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} first
     * @param {!AsyncIterable<TSource>} second
     * @param {function(TSource, TSource): (boolean|!Promise<boolean>)} comparer
     */
    function IntersectAsyncIterable(first, second, comparer) {
        var _this = _super.call(this) || this;
        _this._first = first;
        _this._second = second;
        _this._comparer = comparer;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    IntersectAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var map, _a, _b, secondItem, e_1_1, _c, _d, firstItem, e_2_1, e_1, _e, e_2, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        map = [];
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 7, 8, 13]);
                        _a = __asyncValues(this._second);
                        _g.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _g.sent(), !_b.done)) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        secondItem = _g.sent();
                        map.push(secondItem);
                        _g.label = 5;
                    case 5: return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_1_1 = _g.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _g.trys.push([8, , 11, 12]);
                        if (!(_b && !_b.done && (_e = _a.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, __await(_e.call(_a))];
                    case 9:
                        _g.sent();
                        _g.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13:
                        _g.trys.push([13, 21, 22, 27]);
                        _c = __asyncValues(this._first);
                        _g.label = 14;
                    case 14: return [4 /*yield*/, __await(_c.next())];
                    case 15:
                        if (!(_d = _g.sent(), !_d.done)) return [3 /*break*/, 20];
                        return [4 /*yield*/, __await(_d.value)];
                    case 16:
                        firstItem = _g.sent();
                        return [4 /*yield*/, __await(arrayRemove(map, firstItem, this._comparer))];
                    case 17:
                        if (!_g.sent()) return [3 /*break*/, 19];
                        return [4 /*yield*/, firstItem];
                    case 18:
                        _g.sent();
                        _g.label = 19;
                    case 19: return [3 /*break*/, 14];
                    case 20: return [3 /*break*/, 27];
                    case 21:
                        e_2_1 = _g.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 27];
                    case 22:
                        _g.trys.push([22, , 25, 26]);
                        if (!(_d && !_d.done && (_f = _c.return))) return [3 /*break*/, 24];
                        return [4 /*yield*/, __await(_f.call(_c))];
                    case 23:
                        _g.sent();
                        _g.label = 24;
                    case 24: return [3 /*break*/, 26];
                    case 25:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 26: return [7 /*endfinally*/];
                    case 27: return [2 /*return*/];
                }
            });
        });
    };
    return IntersectAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function IntersectAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    IntersectAsyncIterable.prototype._first;
    /** @type {!AsyncIterable<TSource>} */
    IntersectAsyncIterable.prototype._second;
    /** @type {function(TSource, TSource): (boolean|!Promise<boolean>)} */
    IntersectAsyncIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} first
 * @param {!AsyncIterable<TSource>} second
 * @param {function(TSource, TSource): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function intersect(first, second, comparer) {
    if (comparer === void 0) { comparer = comparer_1.comparerAsync; }
    return new IntersectAsyncIterable(first, second, comparer);
}
exports.intersect = intersect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ludGVyc2VjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCx5REFOMEI7QUFPMUIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBUDdDO0FBUTdELGlEQVBzQjtBQVF0QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7Ozs7O0dBTUc7QUFiSCxxQkFlSSxLQWRVLEVBQUMsSUFBUSxFQWVuQixRQWRvRDs7Ozs7d0JBQzdDLHFCQUFNLGdDQUFrQixDQUFDLEtBQUssRUFBQyxJQUFLLEVBQUMsUUFBUyxDQUFDLEVBQUE7O29CQUFyRCxHQUFJLEdBQUUsU0FBK0M7b0JBZXhELEVBQUUsQ0FBQyxDQWRDLEdBQUcsS0FBSSxDQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBQUEsTUFBTyxnQkFBQSxLQUFNLEVBQUM7b0JBQUEsQ0FBRTtvQkFlakMsS0FkSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUMsQ0FBRSxDQUFDLENBQUM7b0JBZXJCLHNCQWRNLElBQUssRUFBQzs7OztDQWViO0FBQ0Q7O0dBRUc7QUFmSDtJQUE2QywwQ0FBd0I7SUFvQnJFOzs7O09BSUc7SUFuQkQsZ0NBcUJFLEtBcEI2QixFQXFCN0IsTUFwQjhCLEVBcUI5QixRQXBCZ0U7UUFIbEUsWUF3QkUsaUJBcEJPLFNBd0JSO1FBSEMsS0FwQkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBcUJwQixLQXBCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFxQnRCLEtBcEJJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQzs7SUFxQjVCLENBQUM7SUFDSDs7T0FFRztJQXJCTSxpQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ0ssR0FBSSxHQUFFLEVBQUcsQ0FBQzs7Ozt3QkFDZSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBM0IsVUFBVyxZQUFBO3dCQXVCdkIsR0F0QkcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBR0ksS0FBQSxjQUFBLElBQUssQ0FBQyxNQUFNLENBQUE7Ozs7Ozs7d0JBQXpCLFNBQVUsWUFBQTt3QkFDbEIsNkJBQUssV0FBWSxDQUFDLEdBQUcsRUFBQyxTQUFVLEVBQUMsSUFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFBOzs2QkFBakQsU0FBaUQsRUFBakQseUJBQWlEO3dCQXVCbkQscUJBdEJLLFNBQVUsRUFBQTs7d0JBc0JmLFNBdEJlLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdyQjtJQUNILDZCQUFBO0FBQUEsQ0EzQkEsQUEyQkEsQ0EzQjZDLDhCQUFlLEdBMkI1RDtBQXdCQTtJQUNBLHNDQUFzQztJQUN0QyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ3hDLHNDQUFzQztJQUN0QyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3pDLHNFQUFzRTtJQUN0RSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQzNDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFyQ0gsbUJBdUNJLEtBdEM2QixFQXVDN0IsTUF0QzhCLEVBdUM5QixRQXRDZ0Y7SUFzQ2hGLHlCQUFBLEVBQUEsV0F0Q2tFLHdCQUFjO0lBdUNsRixNQXRDTSxDQUFBLElBQUksc0JBQXVCLENBQVUsS0FBSyxFQUFDLE1BQU8sRUFBQyxRQUFTLENBQUMsQ0FBQztBQXVDdEUsQ0F0Q0M7QUFMRCw4QkFLQyIsImZpbGUiOiJpbnRlcnNlY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGFycmF5SW5kZXhPZkFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvYXJyYXlpbmRleG9mJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmFycmF5aW5kZXhvZlwiKTtcbmltcG9ydCB7IGNvbXBhcmVyQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUFycmF5PFQ+fSBhcnJheVxuICogQHBhcmFtIHtUfSBpdGVtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQsIFQpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbXBhcmVyXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxib29sZWFuPn1cbiAqL1xuYXN5bmMgZnVuY3Rpb24gYXJyYXlSZW1vdmU8VD4oXG4gICAgYXJyYXk6IFRbXSwgaXRlbTogVCxcbiAgICBjb21wYXJlcjogKHg6IFQsIHk6IFQpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KTogUHJvbWlzZTxib29sZWFuPiB7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaWR4ID0gYXdhaXQgYXJyYXlJbmRleE9mQXN5bmMoYXJyYXksIGl0ZW0sIGNvbXBhcmVyKTtcbiAgaWYgKGlkeCA9PT0gLTEpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGFycmF5LnNwbGljZShpZHgsIDEpO1xuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgSW50ZXJzZWN0QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX2ZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfc2Vjb25kOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gZmlyc3RcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNlY29uZFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICBmaXJzdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZmlyc3QgPSBmaXJzdDtcbiAgICB0aGlzLl9zZWNvbmQgPSBzZWNvbmQ7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIG1hcCA9IFtdO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gc2Vjb25kSXRlbSBvZiB0aGlzLl9zZWNvbmQpIHtcbiAgICAgIG1hcC5wdXNoKHNlY29uZEl0ZW0pO1xuICAgIH1cblxuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gZmlyc3RJdGVtIG9mIHRoaXMuX2ZpcnN0KSB7XG4gICAgICBpZiAoYXdhaXQgYXJyYXlSZW1vdmUobWFwLCBmaXJzdEl0ZW0sIHRoaXMuX2NvbXBhcmVyKSkge1xuICAgICAgICB5aWVsZCBmaXJzdEl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEludGVyc2VjdEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5JbnRlcnNlY3RBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZmlyc3Q7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuSW50ZXJzZWN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NlY29uZDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cbkludGVyc2VjdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb21wYXJlcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gZmlyc3RcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNlY29uZFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0PFRTb3VyY2U+KFxuICAgIGZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBJbnRlcnNlY3RBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==