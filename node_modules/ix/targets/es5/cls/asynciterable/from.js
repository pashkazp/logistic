goog.module('targets.es5.cls.asynciterable.from'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/from.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.es5.cls.internal.bindcallback');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var tolength_1 = goog.require('targets.es5.cls.internal.tolength');
var tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.tolength");
var isiterable_1 = goog.require('targets.es5.cls.internal.isiterable');
var tsickle_forward_declare_5 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.isiterable");
var tsickle_forward_declare_6 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
/**
 * @template TSource, TResult
 */
var FromArrayIterable = (function (_super) {
    __extends(FromArrayIterable, _super);
    /**
     * @param {!ArrayLike<TSource>} source
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    function FromArrayIterable(source, selector) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._selector = selector;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    FromArrayIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i, length;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        length = tolength_1.toLength(((this._source)).length);
                        _a.label = 1;
                    case 1:
                        if (!(i < length)) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(this._selector(this._source[i], i++))];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return FromArrayIterable;
}(asynciterable_1.AsyncIterableX));
function FromArrayIterable_tsickle_Closure_declarations() {
    /** @type {!ArrayLike<TSource>} */
    FromArrayIterable.prototype._source;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromArrayIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 */
var FromAsyncIterable = (function (_super) {
    __extends(FromAsyncIterable, _super);
    /**
     * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    function FromAsyncIterable(source, selector) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._selector = selector;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    FromAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        i = 0;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 9, 10, 15]);
                        _a = __asyncValues(/** @type {!AsyncIterable<TSource>} */ (this._source));
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        return [4 /*yield*/, __await(this._selector(item, i++))];
                    case 5: return [4 /*yield*/, _d.sent()];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7: return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _d.trys.push([10, , 13, 14]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 11:
                        _d.sent();
                        _d.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    return FromAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function FromAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} */
    FromAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromAsyncIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 */
var FromPromiseIterable = (function (_super) {
    __extends(FromPromiseIterable, _super);
    /**
     * @param {!PromiseLike<TSource>} source
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    function FromPromiseIterable(source, selector) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._selector = selector;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    FromPromiseIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var item;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, __await(this._source)];
                    case 1:
                        item = _a.sent();
                        return [4 /*yield*/, __await(this._selector(item, 0))];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return FromPromiseIterable;
}(asynciterable_1.AsyncIterableX));
function FromPromiseIterable_tsickle_Closure_declarations() {
    /** @type {!PromiseLike<TSource>} */
    FromPromiseIterable.prototype._source;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromPromiseIterable.prototype._selector;
}
/**
 * @template TSource
 */
var AsyncObserver = (function () {
    function AsyncObserver() {
        this.values = [];
        this.hasCompleted = false;
        this.hasError = false;
        this.errorValue = null;
        this.closed = false;
    }
    /**
     * @param {TSource} value
     * @return {void}
     */
    AsyncObserver.prototype.next = function (value) {
        if (!this.closed) {
            this.values.push(value);
        }
    };
    /**
     * @param {?} err
     * @return {void}
     */
    AsyncObserver.prototype.error = function (err) {
        if (!this.closed) {
            this.closed = true;
            this.hasError = true;
            this.errorValue = err;
        }
    };
    /**
     * @return {void}
     */
    AsyncObserver.prototype.complete = function () {
        if (!this.closed) {
            this.closed = true;
        }
    };
    return AsyncObserver;
}());
function AsyncObserver_tsickle_Closure_declarations() {
    /** @type {!Array<TSource>} */
    AsyncObserver.prototype.values;
    /** @type {boolean} */
    AsyncObserver.prototype.hasError;
    /** @type {boolean} */
    AsyncObserver.prototype.hasCompleted;
    /** @type {?} */
    AsyncObserver.prototype.errorValue;
    /** @type {boolean} */
    AsyncObserver.prototype.closed;
}
/**
 * @template TSource, TResult
 */
var FromObservableAsyncIterable = (function (_super) {
    __extends(FromObservableAsyncIterable, _super);
    /**
     * @param {!tsickle_forward_declare_6.Observable<TSource>} observable
     * @param {function(TSource, number): (TResult|!Promise<TResult>)} selector
     */
    function FromObservableAsyncIterable(observable, selector) {
        var _this = _super.call(this) || this;
        _this._observable = observable;
        _this._selector = selector;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    FromObservableAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var observer, subscription, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        observer = new AsyncObserver();
                        subscription = this._observable.subscribe(observer);
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 6];
                        if (!(observer.values.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(this._selector(observer.values.shift(), i++))];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        if (observer.closed) {
                            subscription.unsubscribe();
                            if (observer.hasError) {
                                throw observer.errorValue;
                            }
                            else {
                                return [3 /*break*/, 6];
                            }
                        }
                        _a.label = 5;
                    case 5: return [3 /*break*/, 1];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    return FromObservableAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function FromObservableAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!tsickle_forward_declare_6.Observable<TSource>} */
    FromObservableAsyncIterable.prototype._observable;
    /** @type {function(TSource, number): (TResult|!Promise<TResult>)} */
    FromObservableAsyncIterable.prototype._selector;
}
/** @typedef {(!PromiseLike<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>|!ArrayLike<TSource>|!tsickle_forward_declare_6.Observable<TSource>)} */
exports.AsyncIterableInput;
/**
 * @param {?} x
 * @return {boolean}
 */
function isPromise(x) {
    return x != null && Object(x) === x && typeof x['then'] === 'function';
}
/**
 * @param {?} x
 * @return {boolean}
 */
function isObservable(x) {
    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';
}
/**
 * @param {?} x
 * @return {boolean}
 */
function isArrayLike(x) {
    return x != null && Object(x) === x && typeof x['length'] === 'number';
}
/**
 * @template TSource, TResult
 * @param {(!PromiseLike<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>|!ArrayLike<TSource>|!tsickle_forward_declare_6.Observable<TSource>)} source
 * @param {function(TSource, number): (TResult|!Promise<TResult>)=} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function from(source, selector, thisArg) {
    if (selector === void 0) { selector = identity_1.identityAsync; }
    var /** @type {?} */ fn = bindcallback_1.bindCallback(selector, thisArg, 2);
    if (isiterable_1.isIterable(source) || isiterable_1.isAsyncIterable(source)) {
        return new FromAsyncIterable(source, fn);
    }
    if (isPromise(source)) {
        return new FromPromiseIterable(source, fn);
    }
    if (isObservable(source)) {
        return new FromObservableAsyncIterable(source, fn);
    }
    if (isArrayLike(source)) {
        return new FromArrayIterable(source, fn);
    }
    throw new TypeError('Input type not supported');
}
exports.from = from;
//# sourceMappingURL=data:application/json;base64,