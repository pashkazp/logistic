goog.module('targets.es5.cls.asynciterable.except'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/except.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var arrayindexof_1 = goog.require('targets.es5.cls.internal.arrayindexof');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource
 */
var ExceptAsyncIterable = (function (_super) {
    __extends(ExceptAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} first
     * @param {!AsyncIterable<TSource>} second
     * @param {function(TSource, TSource): (boolean|!Promise<boolean>)} comparer
     */
    function ExceptAsyncIterable(first, second, comparer) {
        var _this = _super.call(this) || this;
        _this._first = first;
        _this._second = second;
        _this._comparer = comparer;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    ExceptAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var map, _a, _b, secondItem, e_1_1, _c, _d, firstItem, e_2_1, e_1, _e, e_2, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        map = [];
                        _g.label = 1;
                    case 1:
                        _g.trys.push([1, 7, 8, 13]);
                        _a = __asyncValues(this._second);
                        _g.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _g.sent(), !_b.done)) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        secondItem = _g.sent();
                        map.push(secondItem);
                        _g.label = 5;
                    case 5: return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_1_1 = _g.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _g.trys.push([8, , 11, 12]);
                        if (!(_b && !_b.done && (_e = _a.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, __await(_e.call(_a))];
                    case 9:
                        _g.sent();
                        _g.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13:
                        _g.trys.push([13, 21, 22, 27]);
                        _c = __asyncValues(this._first);
                        _g.label = 14;
                    case 14: return [4 /*yield*/, __await(_c.next())];
                    case 15:
                        if (!(_d = _g.sent(), !_d.done)) return [3 /*break*/, 20];
                        return [4 /*yield*/, __await(_d.value)];
                    case 16:
                        firstItem = _g.sent();
                        return [4 /*yield*/, __await(arrayindexof_1.arrayIndexOfAsync(map, firstItem, this._comparer))];
                    case 17:
                        if (!((_g.sent()) === -1)) return [3 /*break*/, 19];
                        map.push(firstItem);
                        return [4 /*yield*/, firstItem];
                    case 18:
                        _g.sent();
                        _g.label = 19;
                    case 19: return [3 /*break*/, 14];
                    case 20: return [3 /*break*/, 27];
                    case 21:
                        e_2_1 = _g.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 27];
                    case 22:
                        _g.trys.push([22, , 25, 26]);
                        if (!(_d && !_d.done && (_f = _c.return))) return [3 /*break*/, 24];
                        return [4 /*yield*/, __await(_f.call(_c))];
                    case 23:
                        _g.sent();
                        _g.label = 24;
                    case 24: return [3 /*break*/, 26];
                    case 25:
                        if (e_2) throw e_2.error;
                        return [7 /*endfinally*/];
                    case 26: return [7 /*endfinally*/];
                    case 27: return [2 /*return*/];
                }
            });
        });
    };
    return ExceptAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function ExceptAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ExceptAsyncIterable.prototype._first;
    /** @type {!AsyncIterable<TSource>} */
    ExceptAsyncIterable.prototype._second;
    /** @type {function(TSource, TSource): (boolean|!Promise<boolean>)} */
    ExceptAsyncIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} first
 * @param {!AsyncIterable<TSource>} second
 * @param {function(TSource, TSource): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function except(first, second, comparer) {
    if (comparer === void 0) { comparer = comparer_1.comparerAsync; }
    return new ExceptAsyncIterable(first, second, comparer);
}
exports.except = except;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2V4Y2VwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCx5REFOMEI7QUFPMUIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBUDdDO0FBUTdELGlEQVBzQjtBQVF0QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7R0FFRztBQVRIO0lBQTBDLHVDQUF3QjtJQWNsRTs7OztPQUlHO0lBYkQsNkJBZUksS0FkNkIsRUFlN0IsTUFkOEIsRUFlOUIsUUFkZ0U7UUFIcEUsWUFrQkUsaUJBZE8sU0FrQlI7UUFIQyxLQWRJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWVwQixLQWRJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWV0QixLQWRJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQzs7SUFlNUIsQ0FBQztJQUNIOztPQUVHO0lBZk0sOEJBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNLLEdBQUksR0FBRSxFQUFHLENBQUM7Ozs7d0JBQ2UsS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7Ozs7d0JBQTNCLFVBQVcsWUFBQTt3QkFpQnZCLEdBaEJHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dCQUdJLEtBQUEsY0FBQSxJQUFLLENBQUMsTUFBTSxDQUFBOzs7Ozs7O3dCQUF6QixTQUFVLFlBQUE7d0JBQ2xCLDZCQUFLLGdDQUFrQixDQUFDLEdBQUcsRUFBQyxTQUFVLEVBQUMsSUFBSyxDQUFDLFNBQVMsQ0FBQyxHQUFBOzs2QkFBdkQsQ0FBQSxDQUFBLFNBQXVELE1BQUksQ0FBRSxDQUFDLENBQUEsRUFBOUQseUJBQThEO3dCQWlCaEUsR0FoQkcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7d0JBaUJwQixxQkFoQkssU0FBVSxFQUFBOzt3QkFnQmYsU0FoQmUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR3JCO0lBQ0gsMEJBQUE7QUFBQSxDQTVCQSxBQTRCQSxDQTVCMEMsOEJBQWUsR0E0QnpEO0FBa0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDckMsc0NBQXNDO0lBQ3RDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdEMsc0VBQXNFO0lBQ3RFLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQS9CSCxnQkFpQ0ksS0FoQzZCLEVBaUM3QixNQWhDOEIsRUFpQzlCLFFBaENnRjtJQWdDaEYseUJBQUEsRUFBQSxXQWhDa0Usd0JBQWM7SUFpQ2xGLE1BaENNLENBQUEsSUFBSSxtQkFBb0IsQ0FBVSxLQUFLLEVBQUMsTUFBTyxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBaUNuRSxDQWhDQztBQUxELHdCQUtDIiwiZmlsZSI6ImV4Y2VwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYXJyYXlpbmRleG9mXCIpO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBFeGNlcHRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9zZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBmaXJzdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbXBhcmVyXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBzZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9maXJzdCA9IGZpcnN0O1xuICAgIHRoaXMuX3NlY29uZCA9IHNlY29uZDtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gbWFwID0gW107XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBzZWNvbmRJdGVtIG9mIHRoaXMuX3NlY29uZCkge1xuICAgICAgbWFwLnB1c2goc2Vjb25kSXRlbSk7XG4gICAgfVxuXG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBmaXJzdEl0ZW0gb2YgdGhpcy5fZmlyc3QpIHtcbiAgICAgIGlmIChhd2FpdCBhcnJheUluZGV4T2ZBc3luYyhtYXAsIGZpcnN0SXRlbSwgdGhpcy5fY29tcGFyZXIpID09PSAtMSkge1xuICAgICAgICBtYXAucHVzaChmaXJzdEl0ZW0pO1xuICAgICAgICB5aWVsZCBmaXJzdEl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEV4Y2VwdEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeGNlcHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZmlyc3Q7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRXhjZXB0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NlY29uZDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cbkV4Y2VwdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb21wYXJlcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gZmlyc3RcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNlY29uZFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhjZXB0PFRTb3VyY2U+KFxuICAgIGZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeGNlcHRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==