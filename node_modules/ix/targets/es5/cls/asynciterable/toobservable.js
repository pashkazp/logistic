goog.module('targets.es5.cls.asynciterable.toobservable'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/toobservable.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.subscription");
goog.require("_Users.ptaylor.dev.ixjs.src.subscription"); // force type-only module to be loaded
/**
 * @implements {tsickle_forward_declare_2.Subscription}
 */
var BooleanSubscription = (function () {
    function BooleanSubscription() {
        this.isUnsubscribed = false;
    }
    /**
     * @return {void}
     */
    BooleanSubscription.prototype.unsubscribe = function () {
        this.isUnsubscribed = true;
    };
    return BooleanSubscription;
}());
function BooleanSubscription_tsickle_Closure_declarations() {
    /** @type {boolean} */
    BooleanSubscription.prototype.isUnsubscribed;
}
/**
 * @template TSource
 * @implements {tsickle_forward_declare_1.Observable}
 */
var AsyncIterableObservable = (function () {
    /**
     * @param {!AsyncIterable<TSource>} source
     */
    function AsyncIterableObservable(source) {
        this._source = source;
    }
    /**
     * @param {!tsickle_forward_declare_1.Observer<TSource>} observer
     * @return {!BooleanSubscription}
     */
    AsyncIterableObservable.prototype.subscribe = function (observer) {
        var /** @type {!BooleanSubscription} */ subscription = new BooleanSubscription();
        var /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
        var /** @type {function(): void} */ f = function () {
            it.next()
                .then(function (_a) {
                var value = _a.value, done = _a.done;
                if (!subscription.isUnsubscribed) {
                    if (done) {
                        observer.complete();
                    }
                    else {
                        observer.next(value);
                        f();
                    }
                }
            })
                .catch(function (err) {
                if (!subscription.isUnsubscribed) {
                    observer.error(err);
                }
            });
        };
        f();
        return subscription;
    };
    return AsyncIterableObservable;
}());
function AsyncIterableObservable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    AsyncIterableObservable.prototype._source;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.Observable<TSource>}
 */
function toObservable(source) {
    return new AsyncIterableObservable(source);
}
exports.toObservable = toObservable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rvb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBR0gsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsc0NBUEg7QUFTbkQsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDbEcsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsc0NBQXNDO0FBQ2hHOztHQUVHO0FBVkg7SUFBQTtRQUNRLG1CQUFlLEdBQVcsS0FBTSxDQUFBO0lBS3hDLENBQUE7SUFPQTs7T0FFRztJQVpELHlDQUFXLEdBQVg7UUFjRSxJQWJJLENBQUMsY0FBYyxHQUFFLElBQUssQ0FBQztJQWM3QixDQWJDO0lBQ0gsMEJBQUE7QUFBQSxDQU5BLEFBTUEsSUFBQTtBQWVBO0lBQ0Esc0JBQXNCO0lBQ3RCLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7QUFDN0MsQ0FBQztBQUVEOzs7R0FHRztBQXJCSDtJQXdCQTs7T0FFRztJQXZCRCxpQ0FBWSxNQUE4QjtRQXlCeEMsSUF4QkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBeUJ4QixDQUFDO0lBQ0g7OztPQUdHO0lBMUJELDJDQUFTLEdBQVQsVUFBVSxRQUEyQjtRQTRCbkMsSUFBTSxtQ0EzQkQsQ0FBQSxZQUFhLEdBQUUsSUFBSSxtQkFBb0IsRUFBRSxDQUFDO1FBNkIvQyxJQUFNLHNDQTNCRCxDQUFBLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBNEJoRCxJQUFNLCtCQTNCRCxDQUFBLENBQUUsR0FBRTtZQTRCUCxFQTNCRSxDQUFDLElBQUksRUFBRTtpQkFDTixJQUFJLENBQUMsVUFBQyxFQUFhO29CQUFaLGdCQUFLLEVBQUMsY0FBSztnQkE0QmpCLEVBQUUsQ0FBQyxDQTNCQyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQSxDQUFFO29CQTRCakMsRUFBRSxDQUFDLENBM0JDLElBQUksQ0FBQyxDQUFBLENBQUU7d0JBNEJULFFBM0JRLENBQUMsUUFBUSxFQUFFLENBQUM7b0JBNEJ0QixDQTNCQztvQkFBQSxJQUFLLENBQUEsQ0FBRTt3QkE0Qk4sUUEzQlEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBNEJyQixDQTNCQyxFQUFFLENBQUM7b0JBNEJOLENBM0JDO2dCQTRCSCxDQTNCQztZQTRCSCxDQTNCQyxDQUFDO2lCQUNELEtBQUssQ0FBQyxVQUFBLEdBQUc7Z0JBNEJSLEVBQUUsQ0FBQyxDQTNCQyxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsQ0FBQSxDQUFFO29CQTRCakMsUUEzQlEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBNEJ0QixDQTNCQztZQTRCSCxDQTNCQyxDQUFDLENBQUM7UUE0QlAsQ0EzQkMsQ0FBQztRQTRCRixDQTNCQyxFQUFFLENBQUM7UUE2QkosTUEzQk0sQ0FBQSxZQUFhLENBQUM7SUE0QnRCLENBM0JDO0lBQ0gsOEJBQUE7QUFBQSxDQWpDQSxBQWlDQSxJQUFBO0FBNkJBO0lBQ0Esc0NBQXNDO0lBQ3RDLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDMUMsQ0FBQztBQUVEOzs7O0dBSUc7QUFwQ0gsc0JBQXNDLE1BQThCO0lBc0NsRSxNQXJDTSxDQUFBLElBQUksdUJBQXdCLENBQVUsTUFBTSxDQUFDLENBQUM7QUFzQ3RELENBckNDO0FBRkQsb0NBRUMiLCJmaWxlIjoidG9vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgT2JzZXJ2ZXIgfSBmcm9tICcuLi9vYnNlcnZlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5vYnNlcnZlclwiKTtcbmdvb2cucmVxdWlyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5vYnNlcnZlclwiKTsgLy8gZm9yY2UgdHlwZS1vbmx5IG1vZHVsZSB0byBiZSBsb2FkZWRcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4uL3N1YnNjcmlwdGlvbic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5zdWJzY3JpcHRpb25cIik7XG5nb29nLnJlcXVpcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuc3Vic2NyaXB0aW9uXCIpOyAvLyBmb3JjZSB0eXBlLW9ubHkgbW9kdWxlIHRvIGJlIGxvYWRlZFxuLyoqXG4gKiBAaW1wbGVtZW50cyB7dHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMi5TdWJzY3JpcHRpb259XG4gKi9cbmNsYXNzIEJvb2xlYW5TdWJzY3JpcHRpb24gaW1wbGVtZW50cyBTdWJzY3JpcHRpb24ge1xucHVibGljIGlzVW5zdWJzY3JpYmVkOiBib29sZWFuID0gZmFsc2U7XG4vKipcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKi9cbnVuc3Vic2NyaWJlKCkge1xuICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIEJvb2xlYW5TdWJzY3JpcHRpb25fdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbkJvb2xlYW5TdWJzY3JpcHRpb24ucHJvdG90eXBlLmlzVW5zdWJzY3JpYmVkO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAaW1wbGVtZW50cyB7dHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5PYnNlcnZhYmxlfVxuICovXG5jbGFzcyBBc3luY0l0ZXJhYmxlT2JzZXJ2YWJsZTxUU291cmNlPiBpbXBsZW1lbnRzIE9ic2VydmFibGU8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSB7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG4vKipcbiAqIEBwYXJhbSB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuT2JzZXJ2ZXI8VFNvdXJjZT59IG9ic2VydmVyXG4gKiBAcmV0dXJuIHshQm9vbGVhblN1YnNjcmlwdGlvbn1cbiAqL1xuc3Vic2NyaWJlKG9ic2VydmVyOiBPYnNlcnZlcjxUU291cmNlPikge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUJvb2xlYW5TdWJzY3JpcHRpb259ICovIHN1YnNjcmlwdGlvbiA9IG5ldyBCb29sZWFuU3Vic2NyaXB0aW9uKCk7XG5cbiAgICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICBjb25zdCAvKiogQHR5cGUge2Z1bmN0aW9uKCk6IHZvaWR9ICovIGYgPSAoKSA9PiB7XG4gICAgICBpdC5uZXh0KClcbiAgICAgICAgLnRoZW4oKHt2YWx1ZSwgZG9uZX0pID0+IHtcbiAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICBmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgICAgICBpZiAoIXN1YnNjcmlwdGlvbi5pc1Vuc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgZigpO1xuXG4gICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBBc3luY0l0ZXJhYmxlT2JzZXJ2YWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkFzeW5jSXRlcmFibGVPYnNlcnZhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLk9ic2VydmFibGU8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b09ic2VydmFibGU8VFNvdXJjZT4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogT2JzZXJ2YWJsZTxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQXN5bmNJdGVyYWJsZU9ic2VydmFibGU8VFNvdXJjZT4oc291cmNlKTtcbn1cbiJdfQ==