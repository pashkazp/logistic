goog.module('targets.es5.cls.asynciterable.takelast'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/takelast.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var TakeLastAsyncIterable = (function (_super) {
    __extends(TakeLastAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    function TakeLastAsyncIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    TakeLastAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var q, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (this._count === 0) {
                            return [2 /*return*/];
                        }
                        q = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 7, 8, 13]);
                        _a = __asyncValues(this._source);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 6];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        if (q.length >= this._count) {
                            q.shift();
                        }
                        q.push(item);
                        _d.label = 5;
                    case 5: return [3 /*break*/, 2];
                    case 6: return [3 /*break*/, 13];
                    case 7:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 13];
                    case 8:
                        _d.trys.push([8, , 11, 12]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 10];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 9:
                        _d.sent();
                        _d.label = 10;
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 12: return [7 /*endfinally*/];
                    case 13:
                        if (!(q.length > 0)) return [3 /*break*/, 15];
                        return [4 /*yield*/, /** @type {TSource} */ ((q.shift()))];
                    case 14:
                        _d.sent();
                        return [3 /*break*/, 13];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    return TakeLastAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function TakeLastAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TakeLastAsyncIterable.prototype._source;
    /** @type {number} */
    TakeLastAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function takeLast(source, count) {
    return new TakeLastAsyncIterable(source, count);
}
exports.takeLast = takeLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rha2VsYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUE0Qyx5Q0FBd0I7SUFXcEU7OztPQUdHO0lBVkQsK0JBQVksTUFBOEIsRUFBQyxLQUFjO1FBQXpELFlBWUUsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLEtBWEksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDOztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxnQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBY0UsRUFBRSxDQUFDLENBYkMsSUFBSSxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFOzRCQUFBLE1BQUEsZ0JBQVE7d0JBQUEsQ0FBRTt3QkFFL0IsQ0FBRSxHQUFFLEVBQUcsQ0FBQzs7Ozt3QkFDVyxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBO3dCQWNqQixFQUFFLENBQUMsQ0FiQyxDQUFDLENBQUMsTUFBTSxJQUFHLElBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFFOzRCQWM1QixDQWJDLENBQUMsS0FBSyxFQUFFLENBQUM7d0JBY1osQ0FiQzt3QkFjRCxDQWJDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBR1IsQ0FBQSxDQUFDLENBQUMsTUFBTSxHQUFFLENBQUUsQ0FBQTt3QkFjakIscUJBQU0sc0JBQXNCLENBQUEsQ0FBQyxDQWJ4QixDQUFFLENBQUMsS0FBSyxFQUFBLENBQUEsQ0FBRyxFQUFBOzt3QkFhaEIsU0FiZ0IsQ0FBQzs7Ozs7O0tBRXBCO0lBQ0gsNEJBQUE7QUFBQSxDQXpCQSxBQXlCQSxDQXpCNEMsOEJBQWUsR0F5QjNEO0FBZUE7SUFDQSxzQ0FBc0M7SUFDdEMscUJBQXFCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN4QyxxQkFBcUI7SUFDckIscUJBQXFCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUN2QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6Qkgsa0JBQWtDLE1BQThCLEVBQUMsS0FBYztJQTJCN0UsTUExQk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTJCM0QsQ0ExQkM7QUFGRCw0QkFFQyIsImZpbGUiOiJ0YWtlbGFzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUYWtlTGFzdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGlmICh0aGlzLl9jb3VudCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gcSA9IFtdO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChxLmxlbmd0aCA+PSB0aGlzLl9jb3VudCkge1xuICAgICAgICBxLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgICBxLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHEubGVuZ3RoID4gMCkge1xuICAgICAgeWllbGQgLyoqIEB0eXBlIHtUU291cmNlfSAqLygoIHEuc2hpZnQoKSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYWtlTGFzdEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5UYWtlTGFzdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblRha2VMYXN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvdW50O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWtlTGFzdDxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGFrZUxhc3RBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQpO1xufVxuIl19