goog.module('targets.es5.cls.asynciterable.scanright'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/scanright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var toarray_1 = goog.require('targets.es5.cls.asynciterable.toarray');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.toarray");
/**
 * @template T, R
 */
var ScanRightAsyncIterable = (function (_super) {
    __extends(ScanRightAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<T>} source
     * @param {function((T|R), T, number): (R|!Promise<R>)} fn
     * @param {...(T|R)} args
     */
    function ScanRightAsyncIterable(source, fn) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        _this._hasSeed = args.length === 1;
        _this._seed = args[0];
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<R>}
     */
    ScanRightAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var hasValue, source, offset, item, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        hasValue = false;
                        return [4 /*yield*/, __await(toarray_1.toArray(this._source))];
                    case 1:
                        source = _b.sent();
                        offset = source.length - 1;
                        _b.label = 2;
                    case 2:
                        if (!(offset >= 0)) return [3 /*break*/, 7];
                        item = source[offset];
                        if (!(hasValue || (hasValue = this._hasSeed))) return [3 /*break*/, 5];
                        _a = this;
                        return [4 /*yield*/, __await(this._fn(/** @type {R} */ (this._seed), item, offset))];
                    case 3:
                        _a._seed = _b.sent();
                        return [4 /*yield*/, this._seed];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        this._seed = item;
                        hasValue = true;
                        _b.label = 6;
                    case 6:
                        offset--;
                        return [3 /*break*/, 2];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return ScanRightAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function ScanRightAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<T>} */
    ScanRightAsyncIterable.prototype._source;
    /** @type {function((T|R), T, number): (R|!Promise<R>)} */
    ScanRightAsyncIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanRightAsyncIterable.prototype._seed;
    /** @type {boolean} */
    ScanRightAsyncIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(T|R)>}
 */
function scanRight(source, accumulator) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return new (ScanRightAsyncIterable.bind.apply(ScanRightAsyncIterable, __spread([void 0, source, accumulator], args)))();
}
exports.scanRight = scanRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NjYW5yaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCxxQ0FOZ0I7QUFPaEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7O0dBRUc7QUFSSDtJQUEwQywwQ0FBa0I7SUFjNUQ7Ozs7T0FJRztJQVpELGdDQWNJLE1BYndCLEVBY3hCLEVBYnVEO1FBY3ZELGNBYmtCO2FBYWxCLFVBYmtCLEVBYWxCLHFCQWJrQixFQWFsQixJQWJrQjtZQWFsQiw2QkFia0I7O1FBSHRCLFlBaUJFLGlCQWJPLFNBa0JSO1FBSkMsS0FiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsS0FiSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7UUFjZCxLQWJJLENBQUMsUUFBUSxHQUFFLElBQUssQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDO1FBY2xDLEtBYkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQWN2QixDQUFDO0lBQ0g7O09BRUc7SUFkTSxpQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ0ssUUFBUyxHQUFFLEtBQU0sQ0FBQzt3QkFDUCw2QkFBTSxpQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBQTs7d0JBQXJDLE1BQU8sR0FBRSxTQUE0Qjt3QkFDbEMsTUFBTyxHQUFFLE1BQU8sQ0FBQyxNQUFNLEdBQUUsQ0FBRTs7OzZCQUFDLENBQUEsTUFBTyxJQUFHLENBQUUsQ0FBQTt3QkFDekMsSUFBSyxHQUFFLE1BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQzs2QkFDeEIsQ0FBQSxRQUFRLElBQUcsQ0FBRSxRQUFRLEdBQUUsSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBLEVBQXRDLHdCQUFzQzt3QkFnQnhDLEtBQUEsSUFmSSxDQUFBO3dCQUFRLDZCQUFNLElBQUssQ0FBQyxHQUFHLENBQUEsZ0JBQUEsQ0FBQSxDQUFJLElBQUksQ0FBQyxLQUFBLENBQUssRUFBQyxJQUFLLEVBQUMsTUFBTyxDQUFDLEdBQUE7O3dCQWV4RCxHQWZLLEtBQUssR0FBRSxTQUE0QyxDQUFDO3dCQWdCekQscUJBZkssSUFBSyxDQUFDLEtBQUssRUFBQTs7d0JBZWhCLFNBZmdCLENBQUM7Ozt3QkFpQmpCLElBZkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDO3dCQWdCbEIsUUFmUSxHQUFFLElBQUssQ0FBQzs7O3dCQVA2QixNQUFPLEVBQUUsQ0FBQTs7Ozs7O0tBVTNEO0lBQ0gsNkJBQUE7QUFBQSxDQS9CQSxBQStCQSxDQS9CMEMsOEJBQWUsR0ErQnpEO0FBaUJBO0lBQ0EsZ0NBQWdDO0lBQ2hDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDekMsMERBQTBEO0lBQzFELHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7SUFDckMsb0JBQW9CO0lBQ3BCLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDdkMsc0JBQXNCO0lBQ3RCLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDMUMsQ0FBQztBQVVEOzs7Ozs7R0FNRztBQWpDSCxtQkFtQ0ksTUFsQ3dCLEVBbUN4QixXQWxDb0U7SUFtQ3BFLGNBbENrQjtTQWtDbEIsVUFsQ2tCLEVBa0NsQixxQkFsQ2tCLEVBa0NsQixJQWxDa0I7UUFrQ2xCLDZCQWxDa0I7O0lBbUNwQixNQWxDTSxNQUFJLHNCQUF1QixZQUF2QixzQkFBdUIsb0JBQUMsTUFBTSxFQUFDLFdBQVksR0FBSyxJQUFJLE1BQUU7QUFtQ2xFLENBbENDO0FBTEQsOEJBS0MiLCJmaWxlIjoic2NhbnJpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyB0b0FycmF5IH0gZnJvbSAnLi90b2FycmF5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUudG9hcnJheVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqL1xuY2xhc3MgU2NhblJpZ2h0QXN5bmNJdGVyYWJsZTxULCBSPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFI+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUPjtcbnByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj47XG5wcml2YXRlIF9zZWVkPzogVCB8IFI7XG5wcml2YXRlIF9oYXNTZWVkOiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gZm5cbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgICBmbjogKGFjYzogVCB8IFIsIHg6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICAgICAgLi4uYXJnczogKFQgfCBSKVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgICB0aGlzLl9oYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gICAgdGhpcy5fc2VlZCA9IGFyZ3NbMF07XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxSPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzVmFsdWUgPSBmYWxzZTtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFBcnJheTxUPn0gKi8gc291cmNlID0gYXdhaXQgdG9BcnJheSh0aGlzLl9zb3VyY2UpO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBvZmZzZXQgPSBzb3VyY2UubGVuZ3RoIC0gMTsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSB7XG4gICAgICBjb25zdCAvKiogQHR5cGUge1R9ICovIGl0ZW0gPSBzb3VyY2Vbb2Zmc2V0XTtcbiAgICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSB0aGlzLl9oYXNTZWVkKSkge1xuICAgICAgICB0aGlzLl9zZWVkID0gYXdhaXQgdGhpcy5fZm4oIC8qKiBAdHlwZSB7Un0gKi8oKDxSPnRoaXMuX3NlZWQpKSwgaXRlbSwgb2Zmc2V0KTtcbiAgICAgICAgeWllbGQgdGhpcy5fc2VlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBpdGVtO1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNjYW5SaWdodEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VD59ICovXG5TY2FuUmlnaHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogKFJ8IVByb21pc2U8Uj4pfSAqL1xuU2NhblJpZ2h0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2ZuO1xuLyoqIEB0eXBlIHsoVHxSKX0gKi9cblNjYW5SaWdodEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zZWVkO1xuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuU2NhblJpZ2h0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2hhc1NlZWQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYW5SaWdodDxUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogVCwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFQgfCBQcm9taXNlPFQ+KTogQXN5bmNJdGVyYWJsZVg8VD47XG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQsIFIgPSBUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICBzZWVkOiBSKTogQXN5bmNJdGVyYWJsZVg8Uj47XG4vKipcbiAqIEB0ZW1wbGF0ZSBULCBSXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gYWNjdW11bGF0b3JcbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPChUfFIpPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5SaWdodDxULCBSID0gVD4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICAgIGFjY3VtdWxhdG9yOiAoYWNjOiBUIHwgUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICAgIC4uLmFyZ3M6IChUIHwgUilbXSk6IEFzeW5jSXRlcmFibGVYPFQgfCBSPiB7XG4gIHJldHVybiBuZXcgU2NhblJpZ2h0QXN5bmNJdGVyYWJsZShzb3VyY2UsIGFjY3VtdWxhdG9yLCAuLi5hcmdzKTtcbn1cbiJdfQ==