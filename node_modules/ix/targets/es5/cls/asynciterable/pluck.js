goog.module('targets.es5.cls.asynciterable.pluck'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/pluck.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var map_1 = goog.require('targets.es5.cls.asynciterable.map');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.map");
/**
 * @param {!Array<string>} props
 * @param {number} length
 * @return {function(?): ?}
 */
function plucker(props, length) {
    var /** @type {function(?): ?} */ mapper = function (x) {
        var /** @type {?} */ currentProp = x;
        for (var /** @type {number} */ i = 0; i < length; i++) {
            var /** @type {?} */ p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {...string} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function pluck(source) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return map_1.map(source, /** @type {function(TSource): TResult} */ ((plucker(args, args.length))));
}
exports.pluck = pluck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3BsdWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFHSCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsNkJBTlk7QUFPWixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7OztHQUlHO0FBVkgsaUJBQWlCLEtBQWUsRUFBQyxNQUFlO0lBWTlDLElBQU0sNkJBWEQsQ0FBQSxNQUFPLEdBQUUsVUFBRSxDQUFNO1FBWXBCLElBQUksZ0JBWEQsQ0FBQSxXQUFZLEdBQUUsQ0FBRSxDQUFDO1FBWXBCLEdBQUcsQ0FBQyxDQVhDLElBQUEscUJBQUcsQ0FBQSxDQUFFLEdBQUUsQ0FBRSxFQUFDLENBQUUsR0FBRSxNQUFPLEVBQUMsQ0FBRSxFQUFFLEVBQUMsQ0FBRTtZQVloQyxJQUFNLGdCQVhELENBQUEsQ0FBRSxHQUFFLFdBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQVloQyxFQUFFLENBQUMsQ0FYQyxPQUFNLENBQUUsS0FBSSxXQUFZLENBQUMsQ0FBQSxDQUFFO2dCQVk3QixXQVhXLEdBQUUsQ0FBRSxDQUFDO1lBWWxCLENBWEM7WUFBQSxJQUFLLENBQUEsQ0FBRTtnQkFZTixNQVhNLENBQUEsU0FBVSxDQUFDO1lBWW5CLENBWEM7UUFZSCxDQVhDO1FBWUQsTUFYTSxDQUFBLFdBQVksQ0FBQztJQVlyQixDQVhDLENBQUM7SUFhRixNQVhNLENBQUEsTUFBTyxDQUFDO0FBWWhCLENBQUM7QUFDRDs7Ozs7R0FLRztBQWZILGVBaUJFLE1BaEI4QjtJQWlCOUIsY0FoQmlCO1NBZ0JqQixVQWhCaUIsRUFnQmpCLHFCQWhCaUIsRUFnQmpCLElBaEJpQjtRQWdCakIsNkJBaEJpQjs7SUFpQmpCLE1BaEJNLENBQUEsU0FBSSxDQUFtQixNQUFNLEVBQUEseUNBQUEsQ0FBQSxDQUFBLENBQUMsT0FBUSxDQUFDLElBQUksRUFBQyxJQUFLLENBQUMsTUFBTSxDQUFJLENBQTJCLENBQVEsQ0FBQyxDQUFDO0FBaUJ6RyxDQWhCQztBQUpELHNCQUlDIiwiZmlsZSI6InBsdWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLm1hcFwiKTtcbi8qKlxuICogQHBhcmFtIHshQXJyYXk8c3RyaW5nPn0gcHJvcHNcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEByZXR1cm4ge2Z1bmN0aW9uKD8pOiA/fVxuICovXG5mdW5jdGlvbiBwbHVja2VyKHByb3BzOiBzdHJpbmdbXSwgbGVuZ3RoOiBudW1iZXIpOiAoeDogYW55KSA9PiBhbnkge1xuICBjb25zdCAvKiogQHR5cGUge2Z1bmN0aW9uKD8pOiA/fSAqLyBtYXBwZXIgPSAoeDogYW55KSA9PiB7XG4gICAgbGV0IC8qKiBAdHlwZSB7P30gKi8gY3VycmVudFByb3AgPSB4O1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCAvKiogQHR5cGUgez99ICovIHAgPSBjdXJyZW50UHJvcFtwcm9wc1tpXV07XG4gICAgICBpZiAodHlwZW9mIHAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGN1cnJlbnRQcm9wID0gcDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdXJyZW50UHJvcDtcbiAgfTtcblxuICByZXR1cm4gbWFwcGVyO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwbHVjazxUU291cmNlLCBUUmVzdWx0PihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAuLi5hcmdzOiBzdHJpbmdbXSk6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG1hcDxUU291cmNlLCBUUmVzdWx0Pihzb3VyY2UsIC8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRSZXN1bHR9ICovKCggLyoqIEB0eXBlIHs/fSAqLygoIHBsdWNrZXIoYXJncywgYXJncy5sZW5ndGgpIGFzIGFueSkpIGFzICh2YWx1ZTogVFNvdXJjZSkgPT4gVFJlc3VsdCkpKTtcbn1cbiJdfQ==