goog.module('targets.es5.cls.asynciterable.generate'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/generate.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TState, TResult
 */
var GenerateAsyncIterable = (function (_super) {
    __extends(GenerateAsyncIterable, _super);
    /**
     * @param {TState} initialState
     * @param {function(TState): (boolean|!Promise<boolean>)} condition
     * @param {function(TState): (TState|!Promise<TState>)} iterate
     * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
     */
    function GenerateAsyncIterable(initialState, condition, iterate, resultSelector) {
        var _this = _super.call(this) || this;
        _this._initialState = initialState;
        _this._condition = condition;
        _this._iterate = iterate;
        _this._resultSelector = resultSelector;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    GenerateAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this._initialState;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, __await(this._condition(i))];
                    case 2:
                        if (!_a.sent()) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await(this._resultSelector(i))];
                    case 3: return [4 /*yield*/, _a.sent()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [4 /*yield*/, __await(this._iterate(i))];
                    case 6:
                        i = _a.sent();
                        return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return GenerateAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function GenerateAsyncIterable_tsickle_Closure_declarations() {
    /** @type {TState} */
    GenerateAsyncIterable.prototype._initialState;
    /** @type {function(TState): (boolean|!Promise<boolean>)} */
    GenerateAsyncIterable.prototype._condition;
    /** @type {function(TState): (TState|!Promise<TState>)} */
    GenerateAsyncIterable.prototype._iterate;
    /** @type {function(TState): (TResult|!Promise<TResult>)} */
    GenerateAsyncIterable.prototype._resultSelector;
}
/**
 * @template TState, TResult
 * @param {TState} initialState
 * @param {function(TState): (boolean|!Promise<boolean>)} condition
 * @param {function(TState): (TState|!Promise<TState>)} iterate
 * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function generate(initialState, condition, iterate, resultSelector) {
    return new GenerateAsyncIterable(initialState, condition, iterate, resultSelector);
}
exports.generate = generate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2dlbmVyYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUFvRCx5Q0FBd0I7SUFhNUU7Ozs7O09BS0c7SUFaRCwrQkFjSSxZQWJvQixFQWNwQixTQWJ3RCxFQWN4RCxPQWJvRCxFQWNwRCxjQWI2RDtRQUpqRSxZQWtCRSxpQkFiTyxTQWtCUjtRQUpDLEtBYkksQ0FBQyxhQUFhLEdBQUUsWUFBYSxDQUFDO1FBY2xDLEtBYkksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDO1FBYzVCLEtBYkksQ0FBQyxRQUFRLEdBQUUsT0FBUSxDQUFDO1FBY3hCLEtBYkksQ0FBQyxlQUFlLEdBQUUsY0FBZSxDQUFDOztJQWN4QyxDQUFDO0lBQ0g7O09BRUc7SUFkTSxnQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ1UsQ0FBRSxHQUFFLElBQUssQ0FBQyxhQUFhOzs0QkFBQyw2QkFBTSxJQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFBOzs2QkFBekIsU0FBeUI7d0JBQ2xELDZCQUFNLElBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUE7NEJBZW5DLHFCQWZLLFNBQThCLEVBQUE7O3dCQWVuQyxTQWZtQyxDQUFDOzs0QkFEd0IsNkJBQU0sSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsR0FBQTs7d0JBQTNCLENBQUUsR0FBRSxTQUF1QixDQUFBOzs7Ozs7S0FHdEY7SUFDSCw0QkFBQTtBQUFBLENBdkJBLEFBdUJBLENBdkJvRCw4QkFBZSxHQXVCbkU7QUFpQkE7SUFDQSxxQkFBcUI7SUFDckIscUJBQXFCLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztJQUM5Qyw0REFBNEQ7SUFDNUQscUJBQXFCLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztJQUMzQywwREFBMEQ7SUFDMUQscUJBQXFCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztJQUN6Qyw0REFBNEQ7SUFDNUQscUJBQXFCLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQztBQUNoRCxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQWpDSCxrQkFtQ0ksWUFsQ29CLEVBbUNwQixTQWxDd0QsRUFtQ3hELE9BbENvRCxFQW1DcEQsY0FsQzZEO0lBbUMvRCxNQWxDTSxDQUFBLElBQUkscUJBQXNCLENBQWtCLFlBQVksRUFBQyxTQUFVLEVBQUMsT0FBUSxFQUFDLGNBQWUsQ0FBQyxDQUFDO0FBbUN0RyxDQWxDQztBQU5ELDRCQU1DIiwiZmlsZSI6ImdlbmVyYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU3RhdGUsIFRSZXN1bHRcbiAqL1xuY2xhc3MgR2VuZXJhdGVBc3luY0l0ZXJhYmxlPFRTdGF0ZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9pbml0aWFsU3RhdGU6IFRTdGF0ZTtcbnByaXZhdGUgX2NvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xucHJpdmF0ZSBfaXRlcmF0ZTogKHZhbHVlOiBUU3RhdGUpID0+IFRTdGF0ZSB8IFByb21pc2U8VFN0YXRlPjtcbnByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD47XG4vKipcbiAqIEBwYXJhbSB7VFN0YXRlfSBpbml0aWFsU3RhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBjb25kaXRpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRTdGF0ZXwhUHJvbWlzZTxUU3RhdGU+KX0gaXRlcmF0ZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9IHJlc3VsdFNlbGVjdG9yXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgaW5pdGlhbFN0YXRlOiBUU3RhdGUsXG4gICAgICBjb25kaXRpb246ICh2YWx1ZTogVFN0YXRlKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPixcbiAgICAgIGl0ZXJhdGU6ICh2YWx1ZTogVFN0YXRlKSA9PiBUU3RhdGUgfCBQcm9taXNlPFRTdGF0ZT4sXG4gICAgICByZXN1bHRTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9pbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gICAgdGhpcy5fY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgIHRoaXMuX2l0ZXJhdGUgPSBpdGVyYXRlO1xuICAgIHRoaXMuX3Jlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU3RhdGV9ICovIGkgPSB0aGlzLl9pbml0aWFsU3RhdGU7IGF3YWl0IHRoaXMuX2NvbmRpdGlvbihpKTsgaSA9IGF3YWl0IHRoaXMuX2l0ZXJhdGUoaSkpIHtcbiAgICAgIHlpZWxkIGF3YWl0IHRoaXMuX3Jlc3VsdFNlbGVjdG9yKGkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBHZW5lcmF0ZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7VFN0YXRlfSAqL1xuR2VuZXJhdGVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5faW5pdGlhbFN0YXRlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU3RhdGUpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9ICovXG5HZW5lcmF0ZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb25kaXRpb247XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTdGF0ZSk6IChUU3RhdGV8IVByb21pc2U8VFN0YXRlPil9ICovXG5HZW5lcmF0ZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9pdGVyYXRlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU3RhdGUpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9ICovXG5HZW5lcmF0ZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9yZXN1bHRTZWxlY3Rvcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFN0YXRlLCBUUmVzdWx0XG4gKiBAcGFyYW0ge1RTdGF0ZX0gaW5pdGlhbFN0YXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29uZGl0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChUU3RhdGV8IVByb21pc2U8VFN0YXRlPil9IGl0ZXJhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRSZXN1bHR8IVByb21pc2U8VFJlc3VsdD4pfSByZXN1bHRTZWxlY3RvclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZTxUU3RhdGUsIFRSZXN1bHQ+KFxuICAgIGluaXRpYWxTdGF0ZTogVFN0YXRlLFxuICAgIGNvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgIGl0ZXJhdGU6ICh2YWx1ZTogVFN0YXRlKSA9PiBUU3RhdGUgfCBQcm9taXNlPFRTdGF0ZT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBHZW5lcmF0ZUFzeW5jSXRlcmFibGU8VFN0YXRlLCBUUmVzdWx0Pihpbml0aWFsU3RhdGUsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3IpO1xufVxuIl19