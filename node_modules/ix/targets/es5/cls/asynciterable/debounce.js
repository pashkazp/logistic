goog.module('targets.es5.cls.asynciterable.debounce'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/debounce.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var foreach_1 = goog.require('targets.es5.cls.asynciterable.foreach');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.foreach");
/**
 * @template TSource
 */
var DebounceAsyncIterable = (function (_super) {
    __extends(DebounceAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} time
     */
    function DebounceAsyncIterable(source, time) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._time = time;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    DebounceAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var _this = this;
            var noValue, lastItem, deferred, resolver, done, hasError, error, reset, run;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        done = false;
                        hasError = false;
                        reset = function (hasNoValue) {
                            noValue = hasNoValue;
                            lastItem = undefined;
                            deferred = new Promise(function (r) { return resolver = r; });
                        };
                        run = function () {
                            if (lastItem === undefined) {
                                noValue = true;
                                return;
                            }
                            var /** @type {TSource} */ item = lastItem;
                            var /** @type {function((TSource|!PromiseLike<TSource>)): void} */ res = resolver;
                            reset(false);
                            setTimeout(run, _this._time);
                            res(item);
                        };
                        reset(true);
                        foreach_1.forEach(this._source, function (item) {
                            lastItem = item;
                            if (noValue) {
                                run();
                            }
                        })
                            .then(function () { return done = true; })
                            .catch(function (err) { hasError = true; error = err; });
                        _a.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 4];
                        if (done) {
                            return [3 /*break*/, 4];
                        }
                        if (hasError) {
                            throw error;
                        }
                        return [4 /*yield*/, __await(/** @type {!Promise<TSource>} */ ((deferred)))];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return DebounceAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function DebounceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    DebounceAsyncIterable.prototype._source;
    /** @type {number} */
    DebounceAsyncIterable.prototype._time;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} time
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}
exports.debounce = debounce;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2RlYm91bmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELHFDQU5nQjtBQU9oQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUMzRzs7R0FFRztBQVJIO0lBQTRDLHlDQUF3QjtJQVlwRTs7O09BR0c7SUFYRCwrQkFBWSxNQUE4QixFQUFDLElBQWE7UUFBeEQsWUFhRSxpQkFaTyxTQWVSO1FBRkMsS0FaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsS0FaSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7O0lBYXBCLENBQUM7SUFDSDs7T0FFRztJQWJNLGdDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozs7d0JBS0ssSUFBSyxHQUFXLEtBQU0sQ0FBQzt3QkFDdkIsUUFBUyxHQUFXLEtBQU0sQ0FBQzt3QkFHekIsS0FBTSxHQUFFLFVBQUUsVUFBbUI7NEJBZWhDLE9BZE8sR0FBRSxVQUFXLENBQUM7NEJBZXJCLFFBZFEsR0FBRSxTQUFVLENBQUM7NEJBZXJCLFFBZFEsR0FBRSxJQUFJLE9BQVEsQ0FBVSxVQUFBLENBQUMsSUFBRyxPQUFBLFFBQVMsR0FBRSxDQUFFLEVBQWIsQ0FBYSxDQUFDLENBQUM7d0JBZXJELENBZEMsQ0FBQzt3QkFFRyxHQUFJLEdBQUU7NEJBZVQsRUFBRSxDQUFDLENBZEMsUUFBUSxLQUFJLFNBQVUsQ0FBQyxDQUFBLENBQUU7Z0NBZTNCLE9BZE8sR0FBRSxJQUFLLENBQUM7Z0NBZWYsTUFBTSxDQWRDOzRCQWVULENBZEM7NEJBZ0JELElBQU0sc0JBZEQsQ0FBQSxJQUFLLEdBQUUsUUFBUyxDQUFDOzRCQWV0QixJQUFNLDhEQWRELENBQUEsR0FBSSxHQUFFLFFBQVMsQ0FBQzs0QkFlckIsS0FkSyxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQWViLFVBZFUsQ0FBQyxHQUFHLEVBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDOzRCQWU1QixHQWRHLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBZVosQ0FkQyxDQUFDO3dCQWdCRixLQWRLLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBZVosaUJBZE8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFDLFVBQUEsSUFBSzs0QkFleEIsUUFkUSxHQUFFLElBQUssQ0FBQzs0QkFlaEIsRUFBRSxDQUFDLENBZEMsT0FBTyxDQUFDLENBQUEsQ0FBRTtnQ0FBQSxHQUFJLEVBQUUsQ0FBQzs0QkFBQSxDQUFFO3dCQWV6QixDQWRDLENBQUM7NkJBQ0QsSUFBSSxDQUFDLGNBQUssT0FBQSxJQUFLLEdBQUUsSUFBSyxFQUFaLENBQVksQ0FBQzs2QkFDdkIsS0FBSyxDQUFDLFVBQUEsR0FBRyxJQUFLLFFBQVMsR0FBRSxJQUFLLENBQUMsQ0FBQSxLQUFNLEdBQUUsR0FBSSxDQUFDLENBQUEsQ0FBRSxDQUFDLENBQUM7Ozs2QkFFMUMsQ0FBQzt3QkFlTixFQUFFLENBQUMsQ0FkQyxJQUFJLENBQUMsQ0FBQSxDQUFFOzRCQUFBLE1BQU8sa0JBQUE7d0JBQUEsQ0FBRTt3QkFlcEIsRUFBRSxDQUFDLENBZEMsUUFBUSxDQUFDLENBQUEsQ0FBRTs0QkFBQSxNQUFNLEtBQU0sQ0FBQzt3QkFBQSxDQUFFO3dCQUN6Qiw2QkFBQSxnQ0FBQSxDQUFBLENBQUEsQ0FBTSxRQUFBLENBQUEsQ0FBVSxHQUFBOzRCQWNyQixxQkFkSyxTQUFnQixFQUFBOzt3QkFjckIsU0FkcUIsQ0FBQzs7Ozs7O0tBRXpCO0lBQ0gsNEJBQUE7QUFBQSxDQXBEQSxBQW9EQSxDQXBENEMsOEJBQWUsR0FvRDNEO0FBZ0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDeEMscUJBQXFCO0lBQ3JCLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDdEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBMUJILGtCQUFrQyxNQUE4QixFQUFDLElBQWE7SUE0QjVFLE1BM0JNLENBQUEsSUFBSSxxQkFBc0IsQ0FBVSxNQUFNLEVBQUMsSUFBSyxDQUFDLENBQUM7QUE0QjFELENBM0JDO0FBRkQsNEJBRUMiLCJmaWxlIjoiZGVib3VuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGZvckVhY2ggfSBmcm9tICcuL2ZvcmVhY2gnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5mb3JlYWNoXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBEZWJvdW5jZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF90aW1lOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCB0aW1lOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBub1ZhbHVlOiBib29sZWFuO1xuICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGxhc3RJdGVtOiBUU291cmNlIHwgdW5kZWZpbmVkO1xuICAgIGxldCAvKiogQHR5cGUgeyFQcm9taXNlPFRTb3VyY2U+fSAqLyBkZWZlcnJlZDogUHJvbWlzZTxUU291cmNlPjtcbiAgICBsZXQgLyoqIEB0eXBlIHtmdW5jdGlvbigoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pKTogdm9pZH0gKi8gcmVzb2x2ZXI6ICh2YWx1ZT86IFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPiB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBkb25lOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzRXJyb3I6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBlcnJvcjogYW55O1xuXG4gICAgY29uc3QgLyoqIEB0eXBlIHtmdW5jdGlvbihib29sZWFuKTogdm9pZH0gKi8gcmVzZXQgPSAoaGFzTm9WYWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgbm9WYWx1ZSA9IGhhc05vVmFsdWU7XG4gICAgICBsYXN0SXRlbSA9IHVuZGVmaW5lZDtcbiAgICAgIGRlZmVycmVkID0gbmV3IFByb21pc2U8VFNvdXJjZT4ociA9PiByZXNvbHZlciA9IHIpO1xuICAgIH07XG5cbiAgICBjb25zdCAvKiogQHR5cGUge2Z1bmN0aW9uKCk6IHZvaWR9ICovIHJ1biA9ICgpID0+IHtcbiAgICAgIGlmIChsYXN0SXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vVmFsdWUgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSA9IGxhc3RJdGVtO1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHtmdW5jdGlvbigoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pKTogdm9pZH0gKi8gcmVzID0gcmVzb2x2ZXI7XG4gICAgICByZXNldChmYWxzZSk7XG4gICAgICBzZXRUaW1lb3V0KHJ1biwgdGhpcy5fdGltZSk7XG4gICAgICByZXMoaXRlbSk7XG4gICAgfTtcblxuICAgIHJlc2V0KHRydWUpO1xuICAgIGZvckVhY2godGhpcy5fc291cmNlLCBpdGVtID0+IHtcbiAgICAgIGxhc3RJdGVtID0gaXRlbTtcbiAgICAgIGlmIChub1ZhbHVlKSB7IHJ1bigpOyB9XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiBkb25lID0gdHJ1ZSlcbiAgICAuY2F0Y2goZXJyID0+IHsgaGFzRXJyb3IgPSB0cnVlOyBlcnJvciA9IGVycjsgfSk7XG5cbiAgICB3aGlsZSAoMSkge1xuICAgICAgaWYgKGRvbmUpIHsgYnJlYWs7IH1cbiAgICAgIGlmIChoYXNFcnJvcikgeyB0aHJvdyBlcnJvcjsgfVxuICAgICAgeWllbGQgYXdhaXQgLyoqIEB0eXBlIHshUHJvbWlzZTxUU291cmNlPn0gKi8oKCBkZWZlcnJlZCkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBEZWJvdW5jZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5EZWJvdW5jZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cbkRlYm91bmNlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3RpbWU7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2U8VFNvdXJjZT4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCB0aW1lOiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGVib3VuY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgdGltZSk7XG59XG4iXX0=