goog.module('targets.es5.cls.asynciterable.distinct'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/distinct.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var arrayindexof_1 = goog.require('targets.es5.cls.internal.arrayindexof');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource, TKey
 */
var DistinctAsyncIterable = (function (_super) {
    __extends(DistinctAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TKey, TKey): (boolean|!Promise<boolean>)} comparer
     */
    function DistinctAsyncIterable(source, keySelector, comparer) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._comparer = comparer;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    DistinctAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var set, _a, _b, item, key, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        set = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 10, 11, 16]);
                        _a = __asyncValues(/** @type {!AsyncIterable<TSource>} */ ((this._source)));
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        return [4 /*yield*/, __await(this._keySelector(item))];
                    case 5:
                        key = _d.sent();
                        return [4 /*yield*/, __await(arrayindexof_1.arrayIndexOfAsync(set, key, this._comparer))];
                    case 6:
                        if (!((_d.sent()) === -1)) return [3 /*break*/, 8];
                        set.push(key);
                        return [4 /*yield*/, item];
                    case 7:
                        _d.sent();
                        _d.label = 8;
                    case 8: return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _d.trys.push([11, , 14, 15]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 13];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 12:
                        _d.sent();
                        _d.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return DistinctAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function DistinctAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!AsyncIterable<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>)} */
    DistinctAsyncIterable.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    DistinctAsyncIterable.prototype._keySelector;
    /** @type {function(TKey, TKey): (boolean|!Promise<boolean>)} */
    DistinctAsyncIterable.prototype._comparer;
}
/**
 * @template TSource, TKey
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)=} keySelector
 * @param {function(TKey, TKey): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function distinct(source, keySelector, comparer) {
    if (keySelector === void 0) { keySelector = identity_1.identityAsync; }
    if (comparer === void 0) { comparer = comparer_1.comparerAsync; }
    return new DistinctAsyncIterable(source, keySelector, comparer);
}
exports.distinct = distinct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2Rpc3RpbmN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELGlEQU5zQjtBQU90QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FQakQ7QUFRckQseURBUDBCO0FBUTFCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQVI3QztBQVM3RCxpREFSc0I7QUFTdEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFWSDtJQUFrRCx5Q0FBd0I7SUFlMUU7Ozs7T0FJRztJQWRELCtCQWdCSSxNQWY4QixFQWdCOUIsV0FmcUQsRUFnQnJELFFBZjBEO1FBSDlELFlBbUJFLGlCQWZPLFNBbUJSO1FBSEMsS0FmSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFnQnRCLEtBZkksQ0FBQyxZQUFZLEdBQUUsV0FBWSxDQUFDO1FBZ0JoQyxLQWZJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQzs7SUFnQjVCLENBQUM7SUFDSDs7T0FFRztJQWhCTSxnQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ0ssR0FBSSxHQUFFLEVBQUcsQ0FBQzs7Ozt3QkFFTSxLQUFBLGNBQUEsc0NBQUEsQ0FBQSxDQUE0QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFBOzs7Ozs7O3dCQUEvQyxJQUFLLFlBQUE7d0JBQ1IsNkJBQU0sSUFBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBQTs7d0JBQXBDLEdBQUksR0FBRSxTQUE4Qjt3QkFDbkMsNkJBQUssZ0NBQWtCLENBQUMsR0FBRyxFQUFDLEdBQUksRUFBQyxJQUFLLENBQUMsU0FBUyxDQUFDLEdBQUE7OzZCQUFqRCxDQUFBLENBQUEsU0FBaUQsTUFBSSxDQUFFLENBQUMsQ0FBQSxFQUF4RCx3QkFBd0Q7d0JBa0IxRCxHQWpCRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFrQmQscUJBakJLLElBQUssRUFBQTs7d0JBaUJWLFNBakJVLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdoQjtJQUNILDRCQUFBO0FBQUEsQ0ExQkEsQUEwQkEsQ0ExQmtELDhCQUFlLEdBMEJqRTtBQW1CQTtJQUNBLG1GQUFtRjtJQUNuRixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3hDLHVEQUF1RDtJQUN2RCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQzdDLGdFQUFnRTtJQUNoRSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQzFDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFoQ0gsa0JBa0NJLE1BakM4QixFQWtDOUIsV0FqQ3FFLEVBa0NyRSxRQWpDMEU7SUFnQzFFLDRCQUFBLEVBQUEsY0FqQ3VELHdCQUFjO0lBa0NyRSx5QkFBQSxFQUFBLFdBakM0RCx3QkFBYztJQWtDNUUsTUFqQ00sQ0FBQSxJQUFJLHFCQUFzQixDQUFnQixNQUFNLEVBQUMsV0FBWSxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBa0NqRixDQWpDQztBQUxELDRCQUtDIiwiZmlsZSI6ImRpc3RpbmN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBpZGVudGl0eUFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG5pbXBvcnQgeyBhcnJheUluZGV4T2ZBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5hcnJheWluZGV4b2ZcIik7XG5pbXBvcnQgeyBjb21wYXJlckFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfNCA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuY29tcGFyZXJcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5XG4gKi9cbmNsYXNzIERpc3RpbmN0QXN5bmNJdGVyYWJsZTxUU291cmNlLCBUS2V5PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZSB8IFByb21pc2VMaWtlIDxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlIDxUU291cmNlPjtcbnByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+O1xucHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbXBhcmVyXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICBjb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gc2V0ID0gW107XG5cbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi8oKCA8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4odGhpcy5fc291cmNlKSkpKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyBrZXkgPSBhd2FpdCB0aGlzLl9rZXlTZWxlY3RvcihpdGVtKTtcbiAgICAgIGlmIChhd2FpdCBhcnJheUluZGV4T2ZBc3luYyhzZXQsIGtleSwgdGhpcy5fY29tcGFyZXIpID09PSAtMSkge1xuICAgICAgICBzZXQucHVzaChrZXkpO1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBEaXN0aW5jdEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7KCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fCFJdGVyYWJsZTwoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pPil9ICovXG5EaXN0aW5jdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9ICovXG5EaXN0aW5jdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9rZXlTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cbkRpc3RpbmN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IChUS2V5fCFQcm9taXNlPFRLZXk+KT19IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPik9fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdDxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4gPSBpZGVudGl0eUFzeW5jLFxuICAgIGNvbXBhcmVyOiAoeDogVEtleSwgeTogVEtleSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4gPSBjb21wYXJlckFzeW5jKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IERpc3RpbmN0QXN5bmNJdGVyYWJsZTxUU291cmNlLCBUS2V5Pihzb3VyY2UsIGtleVNlbGVjdG9yLCBjb21wYXJlcik7XG59XG4iXX0=