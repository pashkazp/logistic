goog.module('targets.es5.cls.asynciterable.ofentries'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/ofentries.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var from_1 = goog.require('targets.es5.cls.asynciterable.from');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.from");
/**
 * @template TFirst, TSecond
 * @param {TFirst} x
 * @param {TSecond} y
 * @return {!Array<?>}
 */
function makeTuple(x, y) {
    return [x, y];
}
/**
 * @template TSource
 */
var OfEntriesAsyncIterable = (function (_super) {
    __extends(OfEntriesAsyncIterable, _super);
    /**
     * @param {!Object<string,TSource>} source
     */
    function OfEntriesAsyncIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!AsyncIterator<!Array<?>>}
     */
    OfEntriesAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        var _this = this;
        return from_1.from(Object.keys(this._source), function (key) { return makeTuple(key, _this._source[key]); })[Symbol.asyncIterator]();
    };
    return OfEntriesAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function OfEntriesAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!Object<string,TSource>} */
    OfEntriesAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!Object<string,TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!Array<?>>}
 */
function ofEntries(source) {
    return new OfEntriesAsyncIterable(source);
}
exports.ofEntries = ofEntries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL29mZW50cmllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwrQkFOYTtBQU9iLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0FBQ3hHOzs7OztHQUtHO0FBWEgsbUJBQW9DLENBQVMsRUFBQyxDQUFXO0lBYXZELE1BWk0sQ0FBQSxDQUFFLENBQUMsRUFBQyxDQUFFLENBQUMsQ0FBQztBQWFoQixDQUFDO0FBQ0Q7O0dBRUc7QUFiSDtJQUE2QywwQ0FBa0M7SUFnQi9FOztPQUVHO0lBZkQsZ0NBQVksTUFBa0M7UUFBOUMsWUFpQkUsaUJBaEJPLFNBa0JSO1FBREMsS0FoQkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDOztJQWlCeEIsQ0FBQztJQUNIOztPQUVHO0lBakJELGlDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBdEI7UUFBQSxpQkFFQztRQWlCQyxNQWxCTSxDQUFBLFdBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxVQUFBLEdBQUksSUFBRyxPQUFBLFNBQVUsQ0FBQyxHQUFHLEVBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFsQyxDQUFrQyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7SUFtQjNHLENBbEJDO0lBQ0gsNkJBQUE7QUFBQSxDQVhBLEFBV0EsQ0FYNkMsOEJBQWUsR0FXNUQ7QUFvQkE7SUFDQSxzQ0FBc0M7SUFDdEMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUN6QyxDQUFDO0FBRUQ7Ozs7R0FJRztBQTNCSCxtQkFBbUMsTUFBa0M7SUE2Qm5FLE1BNUJNLENBQUEsSUFBSSxzQkFBdUIsQ0FBVSxNQUFNLENBQUMsQ0FBQztBQTZCckQsQ0E1QkM7QUFGRCw4QkFFQyIsImZpbGUiOiJvZmVudHJpZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5mcm9tXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVEZpcnN0LCBUU2Vjb25kXG4gKiBAcGFyYW0ge1RGaXJzdH0geFxuICogQHBhcmFtIHtUU2Vjb25kfSB5XG4gKiBAcmV0dXJuIHshQXJyYXk8Pz59XG4gKi9cbmZ1bmN0aW9uIG1ha2VUdXBsZTxURmlyc3QsIFRTZWNvbmQ+KHg6IFRGaXJzdCwgeTogVFNlY29uZCk6IFtURmlyc3QsIFRTZWNvbmRdIHtcbiAgcmV0dXJuIFt4LCB5XTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgT2ZFbnRyaWVzQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFtzdHJpbmcsIFRTb3VyY2VdPiB7XG5wcml2YXRlIF9zb3VyY2U6IHsgW2tleTogc3RyaW5nXTogVFNvdXJjZSB9O1xuLyoqXG4gKiBAcGFyYW0geyFPYmplY3Q8c3RyaW5nLFRTb3VyY2U+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiB7IFtrZXk6IHN0cmluZ106IFRTb3VyY2UgfSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhdG9yPCFBcnJheTw/Pj59XG4gKi9cbltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIGZyb20oT2JqZWN0LmtleXModGhpcy5fc291cmNlKSwga2V5ID0+IG1ha2VUdXBsZShrZXksIHRoaXMuX3NvdXJjZVtrZXldKSlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gT2ZFbnRyaWVzQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZyxUU291cmNlPn0gKi9cbk9mRW50cmllc0FzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IU9iamVjdDxzdHJpbmcsVFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8IUFycmF5PD8+Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9mRW50cmllczxUU291cmNlPihzb3VyY2U6IHsgW2tleTogc3RyaW5nXTogVFNvdXJjZSB9KTogQXN5bmNJdGVyYWJsZVg8W3N0cmluZywgVFNvdXJjZV0+IHtcbiAgcmV0dXJuIG5ldyBPZkVudHJpZXNBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG4iXX0=