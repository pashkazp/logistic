goog.module('targets.es5.cls.asynciterable.max'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/max.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!AsyncIterable<?>} source
 * @param {function(?): (number|!Promise<number>)=} selector
 * @return {!Promise<number>}
 */
function max(source, selector) {
    if (selector === void 0) { selector = identity_1.identityAsync; }
    return __awaiter(this, void 0, void 0, function () {
        var atleastOnce, value, source_1, source_1_1, item, x, e_1_1, e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    atleastOnce = false;
                    value = -Infinity;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 8, 9, 14]);
                    source_1 = __asyncValues(source);
                    _b.label = 2;
                case 2: return [4 /*yield*/, source_1.next()];
                case 3:
                    if (!(source_1_1 = _b.sent(), !source_1_1.done)) return [3 /*break*/, 7];
                    return [4 /*yield*/, source_1_1.value];
                case 4:
                    item = _b.sent();
                    if (!atleastOnce) {
                        atleastOnce = true;
                    }
                    return [4 /*yield*/, selector(item)];
                case 5:
                    x = _b.sent();
                    if (x > value) {
                        value = x;
                    }
                    _b.label = 6;
                case 6: return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 14];
                case 8:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 14];
                case 9:
                    _b.trys.push([9, , 12, 13]);
                    if (!(source_1_1 && !source_1_1.done && (_a = source_1.return))) return [3 /*break*/, 11];
                    return [4 /*yield*/, _a.call(source_1)];
                case 10:
                    _b.sent();
                    _b.label = 11;
                case 11: return [3 /*break*/, 13];
                case 12:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 13: return [7 /*endfinally*/];
                case 14:
                    if (!atleastOnce) {
                        throw new Error('Sequence contains no elements');
                    }
                    return [2 /*return*/, value];
            }
        });
    });
}
exports.max = max;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL21heC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsaURBTHNCO0FBTXRCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQU5qRDtBQWNyRDs7OztHQUlHO0FBVkgsYUFZSSxNQVgwQixFQVkxQixRQVg4RDtJQVc5RCx5QkFBQSxFQUFBLFdBWGdELHdCQUFjOzs7Ozs7b0JBQzdELFdBQVksR0FBRSxLQUFNLENBQUM7b0JBQ3JCLEtBQU0sR0FBRSxDQUFFLFFBQVEsQ0FBQzs7OztvQkFDQSxXQUFBLGNBQUEsTUFBTyxDQUFBOzs7Ozs7O29CQUFmLElBQUssWUFBQTtvQkFZakIsRUFBRSxDQUFDLENBWEMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFFO3dCQVlqQixXQVhXLEdBQUUsSUFBSyxDQUFDO29CQVlyQixDQVhDO29CQUNNLHFCQUFNLFFBQVMsQ0FBQyxJQUFJLENBQUMsRUFBQTs7b0JBQXpCLENBQUUsR0FBRSxTQUFxQjtvQkFZNUIsRUFBRSxDQUFDLENBWEMsQ0FBQyxHQUFFLEtBQU0sQ0FBQyxDQUFBLENBQUU7d0JBQUEsS0FBTSxHQUFFLENBQUUsQ0FBQztvQkFBQSxDQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBYS9CLEVBQUUsQ0FBQyxDQVhDLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBRTt3QkFZakIsTUFYSyxJQUFJLEtBQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO29CQVluRCxDQVhDO29CQWFELHNCQVhNLEtBQU0sRUFBQzs7OztDQUNkO0FBakJELGtCQWlCQyIsImZpbGUiOiJtYXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBpZGVudGl0eUFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXgoXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPG51bWJlcj4sXG4gICAgc2VsZWN0b3I/OiAoeDogbnVtYmVyKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBQcm9taXNlPG51bWJlcj47XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWF4PFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBzZWxlY3RvcjogKHg6IFQpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPik6IFByb21pc2U8bnVtYmVyPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTw/Pn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pPX0gc2VsZWN0b3JcbiAqIEByZXR1cm4geyFQcm9taXNlPG51bWJlcj59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXgoXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPGFueT4sXG4gICAgc2VsZWN0b3I6ICh4OiBhbnkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPiA9IGlkZW50aXR5QXN5bmMpOiBQcm9taXNlPG51bWJlcj4ge1xuICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBhdGxlYXN0T25jZSA9IGZhbHNlO1xuICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHZhbHVlID0gLUluZmluaXR5O1xuICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUgez99ICovIGl0ZW0gb2Ygc291cmNlKSB7XG4gICAgaWYgKCFhdGxlYXN0T25jZSkge1xuICAgICAgYXRsZWFzdE9uY2UgPSB0cnVlO1xuICAgIH1cbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHggPSBhd2FpdCBzZWxlY3RvcihpdGVtKTtcbiAgICBpZiAoeCA+IHZhbHVlKSB7IHZhbHVlID0geDsgfVxuICB9XG4gIGlmICghYXRsZWFzdE9uY2UpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG4iXX0=