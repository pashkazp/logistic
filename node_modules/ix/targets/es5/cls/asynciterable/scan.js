goog.module('targets.es5.cls.asynciterable.scan'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/scan.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template T, R
 */
var ScanAsyncIterable = (function (_super) {
    __extends(ScanAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<T>} source
     * @param {function((T|R), T, number): (R|!Promise<R>)} fn
     * @param {...(T|R)} args
     */
    function ScanAsyncIterable(source, fn) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        _this._hasSeed = args.length === 1;
        _this._seed = args[0];
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<R>}
     */
    ScanAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i, hasValue, _a, _b, item, _c, e_1_1, e_1, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        i = 0, hasValue = false;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 10, 11, 16]);
                        _a = __asyncValues(this._source);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _e.sent(), !_b.done)) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _e.sent();
                        if (!(hasValue || (hasValue = this._hasSeed))) return [3 /*break*/, 7];
                        _c = this;
                        return [4 /*yield*/, __await(this._fn(/** @type {R} */ (this._seed), item, i++))];
                    case 5:
                        _c._seed = _e.sent();
                        return [4 /*yield*/, this._seed];
                    case 6:
                        _e.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        this._seed = item;
                        hasValue = true;
                        i++;
                        _e.label = 8;
                    case 8: return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _e.trys.push([11, , 14, 15]);
                        if (!(_b && !_b.done && (_d = _a.return))) return [3 /*break*/, 13];
                        return [4 /*yield*/, __await(_d.call(_a))];
                    case 12:
                        _e.sent();
                        _e.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return ScanAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function ScanAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<T>} */
    ScanAsyncIterable.prototype._source;
    /** @type {function((T|R), T, number): (R|!Promise<R>)} */
    ScanAsyncIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanAsyncIterable.prototype._seed;
    /** @type {boolean} */
    ScanAsyncIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(T|R)>}
 */
function scan(source, accumulator) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return new (ScanAsyncIterable.bind.apply(ScanAsyncIterable, __spread([void 0, source, accumulator], args)))();
}
exports.scan = scan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NjYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGtEQUx1QjtBQU12QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBIO0lBQXFDLHFDQUFrQjtJQWF2RDs7OztPQUlHO0lBWEQsMkJBYUksTUFad0IsRUFheEIsRUFadUQ7UUFhdkQsY0Faa0I7YUFZbEIsVUFaa0IsRUFZbEIscUJBWmtCLEVBWWxCLElBWmtCO1lBWWxCLDZCQVprQjs7UUFIdEIsWUFnQkUsaUJBWk8sU0FpQlI7UUFKQyxLQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixLQVpJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztRQWFkLEtBWkksQ0FBQyxRQUFRLEdBQUUsSUFBSyxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUM7UUFhbEMsS0FaSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7O0lBYXZCLENBQUM7SUFDSDs7T0FFRztJQWJNLDRCQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozt3QkFDSyxDQUFFLEdBQUUsQ0FBRSxFQUFDLFFBQVMsR0FBRSxLQUFNLENBQUM7Ozs7d0JBQ04sS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7Ozs7d0JBQXJCLElBQUssWUFBQTs2QkFDYixDQUFBLFFBQVEsSUFBRyxDQUFFLFFBQVEsR0FBRSxJQUFLLENBQUMsUUFBUSxDQUFDLENBQUEsRUFBdEMsd0JBQXNDO3dCQWV4QyxLQUFBLElBZEksQ0FBQTt3QkFBUSw2QkFBTSxJQUFLLENBQUMsR0FBRyxDQUFBLGdCQUFBLENBQUEsQ0FBSSxJQUFJLENBQUMsS0FBQSxDQUFLLEVBQUMsSUFBSyxFQUFDLENBQUUsRUFBRSxDQUFDLEdBQUE7O3dCQWNyRCxHQWRLLEtBQUssR0FBRSxTQUF5QyxDQUFDO3dCQWV0RCxxQkFkSyxJQUFLLENBQUMsS0FBSyxFQUFBOzt3QkFjaEIsU0FkZ0IsQ0FBQzs7O3dCQWdCakIsSUFkSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7d0JBZWxCLFFBZFEsR0FBRSxJQUFLLENBQUM7d0JBZWhCLENBZEMsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FHVDtJQUNILHdCQUFBO0FBQUEsQ0E5QkEsQUE4QkEsQ0E5QnFDLDhCQUFlLEdBOEJwRDtBQWdCQTtJQUNBLGdDQUFnQztJQUNoQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BDLDBEQUEwRDtJQUMxRCxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ2hDLG9CQUFvQjtJQUNwQixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ2xDLHNCQUFzQjtJQUN0QixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ3JDLENBQUM7QUFVRDs7Ozs7O0dBTUc7QUFoQ0gsY0FrQ0ksTUFqQ3dCLEVBa0N4QixXQWpDb0U7SUFrQ3BFLGNBakNrQjtTQWlDbEIsVUFqQ2tCLEVBaUNsQixxQkFqQ2tCLEVBaUNsQixJQWpDa0I7UUFpQ2xCLDZCQWpDa0I7O0lBa0NwQixNQWpDTSxNQUFJLGlCQUFrQixZQUFsQixpQkFBa0Isb0JBQUMsTUFBTSxFQUFDLFdBQVksR0FBSyxJQUFJLE1BQUU7QUFrQzdELENBakNDO0FBTEQsb0JBS0MiLCJmaWxlIjoic2Nhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICovXG5jbGFzcyBTY2FuQXN5bmNJdGVyYWJsZTxULCBSPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFI+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUPjtcbnByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj47XG5wcml2YXRlIF9zZWVkPzogVCB8IFI7XG5wcml2YXRlIF9oYXNTZWVkOiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gZm5cbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgICBmbjogKGFjYzogVCB8IFIsIHg6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICAgICAgLi4uYXJnczogKFQgfCBSKVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgICB0aGlzLl9oYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gICAgdGhpcy5fc2VlZCA9IGFyZ3NbMF07XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxSPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VH0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSB0aGlzLl9oYXNTZWVkKSkge1xuICAgICAgICB0aGlzLl9zZWVkID0gYXdhaXQgdGhpcy5fZm4oIC8qKiBAdHlwZSB7Un0gKi8oKDxSPnRoaXMuX3NlZWQpKSwgaXRlbSwgaSsrKTtcbiAgICAgICAgeWllbGQgdGhpcy5fc2VlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBpdGVtO1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2NhbkFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VD59ICovXG5TY2FuQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gKi9cblNjYW5Bc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG4vKiogQHR5cGUgeyhUfFIpfSAqL1xuU2NhbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zZWVkO1xuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuU2NhbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9oYXNTZWVkO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCB8IFByb21pc2U8VD4pOiBBc3luY0l0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQsIFIgPSBUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICBzZWVkOiBSKTogQXN5bmNJdGVyYWJsZVg8Uj47XG4vKipcbiAqIEB0ZW1wbGF0ZSBULCBSXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gYWNjdW11bGF0b3JcbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPChUfFIpPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW48VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBBc3luY0l0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5Bc3luY0l0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19