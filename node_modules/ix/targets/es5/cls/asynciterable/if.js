goog.module('targets.es5.cls.asynciterable.if'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/if.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var defer_1 = goog.require('targets.es5.cls.asynciterable.defer');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.defer");
var empty_1 = goog.require('targets.es5.cls.asynciterable.empty');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.empty");
/**
 * @template TSource
 * @param {function(): (boolean|!Promise<boolean>)} fn
 * @param {!AsyncIterable<TSource>} thenSource
 * @param {!AsyncIterable<TSource>=} elseSource
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function _if(fn, thenSource, elseSource) {
    var _this = this;
    if (elseSource === void 0) { elseSource = empty_1.empty(); }
    return defer_1.defer(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fn()];
            case 1: return [2 /*return*/, (_a.sent()) ? thenSource : elseSource];
        }
    }); }); });
}
exports._if = _if;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2lmLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFHSCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsaUNBTmM7QUFPZCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsaURBQWlELENBQUMsQ0FQeEU7QUFRaEMsaUNBUGM7QUFRZCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsaURBQWlELENBQUMsQ0FBQztBQUN6Rzs7Ozs7O0dBTUc7QUFiSCxhQWVJLEVBZG9DLEVBZXBDLFVBZGtDLEVBZWxDLFVBZHFEO0lBSHpELGlCQUtDO0lBWUcsMkJBQUEsRUFBQSxhQWRvQyxhQUFNLEVBQVc7SUFldkQsTUFkTSxDQUFBLGFBQU0sQ0FBVTs7b0JBQVcscUJBQU0sRUFBRyxFQUFFLEVBQUE7b0JBQVgsc0JBQUEsQ0FBQSxTQUFXLElBQUUsVUFBVyxHQUFFLFVBQVcsRUFBQTs7YUFBQSxDQUFDLENBQUM7QUFlMUUsQ0FkQztBQUxELGtCQUtDIiwiZmlsZSI6ImlmLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBkZWZlciB9IGZyb20gJy4vZGVmZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5kZWZlclwiKTtcbmltcG9ydCB7IGVtcHR5IH0gZnJvbSAnLi9lbXB0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLmVtcHR5XCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGZuXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSB0aGVuU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+PX0gZWxzZVNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfaWY8VFNvdXJjZT4oXG4gICAgZm46ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgIHRoZW5Tb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgZWxzZVNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiA9IGVtcHR5PFRTb3VyY2U+KCkpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBkZWZlcjxUU291cmNlPihhc3luYyAoKSA9PiBhd2FpdCBmbigpID8gdGhlblNvdXJjZSA6IGVsc2VTb3VyY2UpO1xufVxuIl19