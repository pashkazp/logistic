goog.module('targets.es5.cls.asynciterable.while'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/while.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var WhileAsyncIterable = (function (_super) {
    __extends(WhileAsyncIterable, _super);
    /**
     * @param {function(): (boolean|!Promise<boolean>)} condition
     * @param {!AsyncIterable<TSource>} source
     */
    function WhileAsyncIterable(condition, source) {
        var _this = _super.call(this) || this;
        _this._condition = condition;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    WhileAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0: return [4 /*yield*/, __await(this._condition())];
                    case 1:
                        if (!_d.sent()) return [3 /*break*/, 16];
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 9, 10, 15]);
                        _a = __asyncValues(this._source);
                        _d.label = 3;
                    case 3: return [4 /*yield*/, __await(_a.next())];
                    case 4:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __await(_b.value)];
                    case 5:
                        item = _d.sent();
                        return [4 /*yield*/, item];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7: return [3 /*break*/, 3];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _d.trys.push([10, , 13, 14]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 11:
                        _d.sent();
                        _d.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15: return [3 /*break*/, 0];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return WhileAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function WhileAsyncIterable_tsickle_Closure_declarations() {
    /** @type {function(): (boolean|!Promise<boolean>)} */
    WhileAsyncIterable.prototype._condition;
    /** @type {!AsyncIterable<TSource>} */
    WhileAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {function(): (boolean|!Promise<boolean>)} condition
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function _while(condition, source) {
    return new WhileAsyncIterable(condition, source);
}
exports._while = _while;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3doaWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUF5QyxzQ0FBd0I7SUFXakU7OztPQUdHO0lBVkQsNEJBQVksU0FBMkMsRUFBQyxNQUErQjtRQUF2RixZQVlFLGlCQVhPLFNBY1I7UUFGQyxLQVhJLENBQUMsVUFBVSxHQUFFLFNBQVUsQ0FBQztRQVk1QixLQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQzs7SUFZeEIsQ0FBQztJQUNIOztPQUVHO0lBWk0sNkJBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7NEJBQ1MsNkJBQUssSUFBSyxDQUFDLFVBQVUsRUFBRSxHQUFBOzs2QkFBdkIsU0FBdUI7Ozs7d0JBQ04sS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7Ozs7d0JBQXJCLElBQUssWUFBQTt3QkFBbUIscUJBQU0sSUFBSyxFQUFBOzt3QkFBWCxTQUFXLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FFckQ7SUFDSCx5QkFBQTtBQUFBLENBZkEsQUFlQSxDQWZ5Qyw4QkFBZSxHQWV4RDtBQWVBO0lBQ0Esc0RBQXNEO0lBQ3RELGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDeEMsc0NBQXNDO0lBQ3RDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDckMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILGdCQTJCSSxTQTFCMkMsRUEyQjNDLE1BMUI4QjtJQTJCaEMsTUExQk0sQ0FBQSxJQUFJLGtCQUFtQixDQUFVLFNBQVMsRUFBQyxNQUFPLENBQUMsQ0FBQztBQTJCNUQsQ0ExQkM7QUFKRCx3QkFJQyIsImZpbGUiOiJ3aGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBXaGlsZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9jb25kaXRpb246ICgpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29uZGl0aW9uXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3IoY29uZGl0aW9uOiAoKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiwgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9jb25kaXRpb24gPSBjb25kaXRpb247XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHdoaWxlIChhd2FpdCB0aGlzLl9jb25kaXRpb24oKSkge1xuICAgICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkgeyB5aWVsZCBpdGVtOyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFdoaWxlQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtmdW5jdGlvbigpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9ICovXG5XaGlsZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb25kaXRpb247XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuV2hpbGVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29uZGl0aW9uXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX3doaWxlPFRTb3VyY2U+KFxuICAgIGNvbmRpdGlvbjogKCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFdoaWxlQXN5bmNJdGVyYWJsZTxUU291cmNlPihjb25kaXRpb24sIHNvdXJjZSk7XG59XG4iXX0=