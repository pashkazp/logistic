goog.module('targets.es5.cls.asynciterable.race'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/race.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var RaceAsyncIterable = (function (_super) {
    __extends(RaceAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} left
     * @param {!AsyncIterable<TSource>} right
     */
    function RaceAsyncIterable(left, right) {
        var _this = _super.call(this) || this;
        _this._left = left;
        _this._right = right;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    RaceAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var leftIt, rightIt, leftWins, rightWins, _a, value, done, resultIterator, otherIterator, next;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        leftIt = this._left[Symbol.asyncIterator](), rightIt = this._right[Symbol.asyncIterator]();
                        leftWins = false, rightWins = false;
                        return [4 /*yield*/, __await(Promise.race([
                                leftIt.next().then(function (x) { leftWins = true; return x; }),
                                rightIt.next().then(function (x) { rightWins = true; return x; }),
                            ]))];
                    case 1:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        if (!!done) return [3 /*break*/, 3];
                        return [4 /*yield*/, value];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        if (leftWins) {
                            resultIterator = leftIt;
                            otherIterator = rightIt;
                        }
                        else {
                            resultIterator = rightIt;
                            otherIterator = leftIt;
                        }
                        if (!otherIterator.return) return [3 /*break*/, 5];
                        return [4 /*yield*/, __await(otherIterator.return())];
                    case 4:
                        _b.sent();
                        _b.label = 5;
                    case 5: return [4 /*yield*/, __await(resultIterator.next())];
                    case 6:
                        if (!!(next = _b.sent()).done) return [3 /*break*/, 8];
                        return [4 /*yield*/, next.value];
                    case 7:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return RaceAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function RaceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    RaceAsyncIterable.prototype._left;
    /** @type {!AsyncIterable<TSource>} */
    RaceAsyncIterable.prototype._right;
}
/**
 * Propagates the async sequence that reacts first.
 * @template TSource
 * @param {!AsyncIterable<TSource>} left
 * @param {!AsyncIterable<TSource>} right
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function race(left, right) {
    return new RaceAsyncIterable(left, right);
}
exports.race = race;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGtEQUx1QjtBQU12QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBIO0lBQXdDLHFDQUF3QjtJQVdoRTs7O09BR0c7SUFWRCwyQkFBWSxJQUE0QixFQUFDLEtBQThCO1FBQXZFLFlBWUUsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDO1FBWWxCLEtBWEksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDOztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaTSw0QkFBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ08sTUFBTyxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUMsT0FBUSxHQUFFLElBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7d0JBQzlGLFFBQVMsR0FBRSxLQUFNLEVBQUMsU0FBVSxHQUFFLEtBQU0sQ0FBQzt3QkFDakIsNkJBQU0sT0FBUSxDQUFDLElBQUksQ0FBQztnQ0FjekMsTUFiTSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSyxRQUFTLEdBQUUsSUFBSyxDQUFDLENBQUEsTUFBTyxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUUsQ0FBQztnQ0FjdkQsT0FiTyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFBLENBQUMsSUFBSyxTQUFVLEdBQUUsSUFBSyxDQUFDLENBQUEsTUFBTyxDQUFBLENBQUUsQ0FBQyxDQUFBLENBQUUsQ0FBQzs2QkFDMUQsQ0FBQyxHQUFBOzt3QkFIRyxLQUFrQixTQUdyQixFQUhLLEtBQU0sV0FBQSxFQUFDLElBQUssVUFBQTs2QkFLZixDQUFDLElBQUksRUFBTCx3QkFBSzt3QkFjUCxxQkFiSyxLQUFNLEVBQUE7O3dCQWFYLFNBYlcsQ0FBQzs7O3dCQWlCZCxFQUFFLENBQUMsQ0FiQyxRQUFRLENBQUMsQ0FBQSxDQUFFOzRCQWNiLGNBYmMsR0FBRSxNQUFPLENBQUM7NEJBY3hCLGFBYmEsR0FBRSxPQUFRLENBQUM7d0JBYzFCLENBYkM7d0JBQUEsSUFBSyxDQUFBLENBQUU7NEJBY04sY0FiYyxHQUFFLE9BQVEsQ0FBQzs0QkFjekIsYUFiYSxHQUFFLE1BQU8sQ0FBQzt3QkFjekIsQ0FiQzs2QkFHRyxhQUFhLENBQUMsTUFBTSxFQUFwQix3QkFBb0I7d0JBQUcsNkJBQU0sYUFBYyxDQUFDLE1BQU0sRUFBRSxHQUFBOzt3QkFBN0IsU0FBNkIsQ0FBQzs7NEJBRzFDLDZCQUFNLGNBQWUsQ0FBQyxJQUFJLEVBQUUsR0FBQTs7NkJBQXBDLENBQUMsQ0FBQyxJQUFJLEdBQUUsU0FBNEIsQ0FBQyxDQUFDLElBQUk7d0JBYy9DLHFCQWJLLElBQUssQ0FBQyxLQUFLLEVBQUE7O3dCQWFoQixTQWJnQixDQUFDOzs7Ozs7S0FFcEI7SUFDSCx3QkFBQTtBQUFBLENBdkNBLEFBdUNBLENBdkN3Qyw4QkFBZSxHQXVDdkQ7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ2xDLHNDQUFzQztJQUN0QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQ25DLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFwQkgsY0FzQkksSUFyQjRCLEVBc0I1QixLQXJCNkI7SUFzQi9CLE1BckJNLENBQUEsSUFBSSxpQkFBa0IsQ0FBVSxJQUFJLEVBQUMsS0FBTSxDQUFDLENBQUM7QUFzQnJELENBckJDO0FBSkQsb0JBSUMiLCJmaWxlIjoicmFjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBSYWNlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX2xlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9yaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gbGVmdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gcmlnaHRcbiAqL1xuY29uc3RydWN0b3IobGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3JpZ2h0ID0gcmlnaHQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gbGVmdEl0ID0gdGhpcy5fbGVmdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSwgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gcmlnaHRJdCA9IHRoaXMuX3JpZ2h0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGxlZnRXaW5zID0gZmFsc2UsIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gcmlnaHRXaW5zID0gZmFsc2U7XG4gICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgIGxlZnRJdC5uZXh0KCkudGhlbih4ID0+IHsgbGVmdFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgICByaWdodEl0Lm5leHQoKS50aGVuKHggPT4geyByaWdodFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgXSk7XG5cbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cblxuICAgIGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyByZXN1bHRJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPiwgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gb3RoZXJJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPjtcbiAgICBpZiAobGVmdFdpbnMpIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gbGVmdEl0O1xuICAgICAgb3RoZXJJdGVyYXRvciA9IHJpZ2h0SXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gcmlnaHRJdDtcbiAgICAgIG90aGVySXRlcmF0b3IgPSBsZWZ0SXQ7XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsL2ZpbmlzaCBvdGhlciBpdGVyYXRvclxuICAgIGlmIChvdGhlckl0ZXJhdG9yLnJldHVybikgeyBhd2FpdCBvdGhlckl0ZXJhdG9yLnJldHVybigpOyB9XG5cbiAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgIHdoaWxlICghKG5leHQgPSBhd2FpdCByZXN1bHRJdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFJhY2VBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuUmFjZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9sZWZ0O1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblJhY2VBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fcmlnaHQ7XG59XG5cbi8qKlxuICogUHJvcGFnYXRlcyB0aGUgYXN5bmMgc2VxdWVuY2UgdGhhdCByZWFjdHMgZmlyc3QuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gbGVmdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gcmlnaHRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFjZTxUU291cmNlPihcbiAgICBsZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFJhY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KGxlZnQsIHJpZ2h0KTtcbn1cbiJdfQ==