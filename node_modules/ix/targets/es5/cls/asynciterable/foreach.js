goog.module('targets.es5.cls.asynciterable.foreach'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/foreach.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var bindcallback_1 = goog.require('targets.es5.cls.internal.bindcallback');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource, number): (void|!Promise<void>)} projection
 * @param {?=} thisArg
 * @return {!Promise<void>}
 */
function forEach(source, projection, thisArg) {
    return __awaiter(this, void 0, void 0, function () {
        var fn, i, source_1, source_1_1, item, e_1_1, e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    fn = bindcallback_1.bindCallback(projection, thisArg, 2);
                    i = 0;
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 8, 9, 14]);
                    source_1 = __asyncValues(source);
                    _b.label = 2;
                case 2: return [4 /*yield*/, source_1.next()];
                case 3:
                    if (!(source_1_1 = _b.sent(), !source_1_1.done)) return [3 /*break*/, 7];
                    return [4 /*yield*/, source_1_1.value];
                case 4:
                    item = _b.sent();
                    return [4 /*yield*/, fn(item, i++)];
                case 5:
                    _b.sent();
                    _b.label = 6;
                case 6: return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 14];
                case 8:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 14];
                case 9:
                    _b.trys.push([9, , 12, 13]);
                    if (!(source_1_1 && !source_1_1.done && (_a = source_1.return))) return [3 /*break*/, 11];
                    return [4 /*yield*/, _a.call(source_1)];
                case 10:
                    _b.sent();
                    _b.label = 11;
                case 11: return [3 /*break*/, 13];
                case 12:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 13: return [7 /*endfinally*/];
                case 14: return [2 /*return*/];
            }
        });
    });
}
exports.forEach = forEach;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ZvcmVhY2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHlEQUxxQjtBQU1yQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUMzRzs7Ozs7O0dBTUc7QUFYSCxpQkFhSSxNQVo4QixFQWE5QixVQVptRSxFQWFuRSxPQVphOzs7Ozs7b0JBQ1YsRUFBRyxHQUFFLDJCQUFhLENBQUMsVUFBVSxFQUFDLE9BQVEsRUFBQyxDQUFFLENBQUMsQ0FBQztvQkFDN0MsQ0FBRSxHQUFFLENBQUUsQ0FBQzs7OztvQkFDWSxXQUFBLGNBQUEsTUFBTyxDQUFBOzs7Ozs7O29CQUFmLElBQUssWUFBQTtvQkFhakIscUJBWkssRUFBRyxDQUFDLElBQUksRUFBQyxDQUFFLEVBQUUsQ0FBQyxFQUFBOztvQkFZbkIsU0FabUIsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0NBRXZCO0FBVEQsMEJBU0MiLCJmaWxlIjoiZm9yZWFjaC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5iaW5kY2FsbGJhY2tcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogKHZvaWR8IVByb21pc2U8dm9pZD4pfSBwcm9qZWN0aW9uXG4gKiBAcGFyYW0gez89fSB0aGlzQXJnXG4gKiBAcmV0dXJuIHshUHJvbWlzZTx2b2lkPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZvckVhY2g8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHByb2plY3Rpb246ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gdm9pZCB8IFByb21pc2U8dm9pZD4sXG4gICAgdGhpc0FyZz86IGFueSk6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCAvKiogQHR5cGUgez99ICovIGZuID0gYmluZENhbGxiYWNrKHByb2plY3Rpb24sIHRoaXNBcmcsIDIpO1xuICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwO1xuICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2Ygc291cmNlKSB7XG4gICAgYXdhaXQgZm4oaXRlbSwgaSsrKTtcbiAgfVxufVxuIl19