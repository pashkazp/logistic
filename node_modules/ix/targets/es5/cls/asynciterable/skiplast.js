goog.module('targets.es5.cls.asynciterable.skiplast'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/skiplast.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var SkipLastAsyncIterable = (function (_super) {
    __extends(SkipLastAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    function SkipLastAsyncIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    SkipLastAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var q, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        q = [];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 8, 9, 14]);
                        _a = __asyncValues(this._source);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        q.push(item);
                        if (!(q.length > this._count)) return [3 /*break*/, 6];
                        return [4 /*yield*/, /** @type {TSource} */ ((q.shift()))];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6: return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _d.trys.push([9, , 12, 13]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 10:
                        _d.sent();
                        _d.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return SkipLastAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function SkipLastAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    SkipLastAsyncIterable.prototype._source;
    /** @type {number} */
    SkipLastAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function skipLast(source, count) {
    return new SkipLastAsyncIterable(source, count);
}
exports.skipLast = skipLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NraXBsYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUE0Qyx5Q0FBd0I7SUFXcEU7OztPQUdHO0lBVkQsK0JBQVksTUFBOEIsRUFBQyxLQUFjO1FBQXpELFlBWUUsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLEtBWEksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDOztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxnQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ0ssQ0FBRSxHQUFFLEVBQUcsQ0FBQzs7Ozt3QkFDVyxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBO3dCQWNqQixDQWJDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzZCQUNULENBQUEsQ0FBQyxDQUFDLE1BQU0sR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFBLEVBQXRCLHdCQUFzQjt3QkFjeEIscUJBQU0sc0JBQXNCLENBQUEsQ0FBQyxDQWJ4QixDQUFFLENBQUMsS0FBSyxFQUFBLENBQUEsQ0FBRyxFQUFBOzt3QkFhaEIsU0FiZ0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR3RCO0lBQ0gsNEJBQUE7QUFBQSxDQW5CQSxBQW1CQSxDQW5CNEMsOEJBQWUsR0FtQjNEO0FBZUE7SUFDQSxzQ0FBc0M7SUFDdEMscUJBQXFCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN4QyxxQkFBcUI7SUFDckIscUJBQXFCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUN2QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6Qkgsa0JBQWtDLE1BQThCLEVBQUMsS0FBYztJQTJCN0UsTUExQk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTJCM0QsQ0ExQkM7QUFGRCw0QkFFQyIsImZpbGUiOiJza2lwbGFzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBTa2lwTGFzdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gcSA9IFtdO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIHEucHVzaChpdGVtKTtcbiAgICAgIGlmIChxLmxlbmd0aCA+IHRoaXMuX2NvdW50KSB7XG4gICAgICAgIHlpZWxkIC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8oKCBxLnNoaWZ0KCkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2tpcExhc3RBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuU2tpcExhc3RBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5Ta2lwTGFzdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb3VudDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcExhc3Q8VFNvdXJjZT4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFNraXBMYXN0QXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGNvdW50KTtcbn1cbiJdfQ==