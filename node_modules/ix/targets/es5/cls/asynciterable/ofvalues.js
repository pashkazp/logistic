goog.module('targets.es5.cls.asynciterable.ofvalues'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/ofvalues.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var from_1 = goog.require('targets.es5.cls.asynciterable.from');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.from");
/**
 * @template TSource
 */
var OfValuesAsyncIterable = (function (_super) {
    __extends(OfValuesAsyncIterable, _super);
    /**
     * @param {!Object<string,TSource>} source
     */
    function OfValuesAsyncIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!AsyncIterator<TSource>}
     */
    OfValuesAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        var _this = this;
        return from_1.from(Object.keys(this._source), function (key) { return _this._source[key]; })[Symbol.asyncIterator]();
    };
    return OfValuesAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function OfValuesAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!Object<string,TSource>} */
    OfValuesAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!Object<string,TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function ofValues(source) {
    return new OfValuesAsyncIterable(source);
}
exports.ofValues = ofValues;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL29mdmFsdWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELCtCQU5hO0FBT2IsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7QUFDeEc7O0dBRUc7QUFSSDtJQUE0Qyx5Q0FBd0I7SUFXcEU7O09BRUc7SUFWRCwrQkFBWSxNQUFrQztRQUE5QyxZQVlFLGlCQVhPLFNBYVI7UUFEQyxLQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQzs7SUFZeEIsQ0FBQztJQUNIOztPQUVHO0lBWkQsZ0NBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUF0QjtRQUFBLGlCQUVDO1FBWUMsTUFiTSxDQUFBLFdBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBQyxVQUFBLEdBQUksSUFBRyxPQUFBLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQWxCLENBQWtCLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztJQWMzRixDQWJDO0lBQ0gsNEJBQUE7QUFBQSxDQVhBLEFBV0EsQ0FYNEMsOEJBQWUsR0FXM0Q7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ3hDLENBQUM7QUFFRDs7OztHQUlHO0FBdEJILGtCQUFrQyxNQUFrQztJQXdCbEUsTUF2Qk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBd0JwRCxDQXZCQztBQUZELDRCQUVDIiwiZmlsZSI6Im9mdmFsdWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBmcm9tIH0gZnJvbSAnLi9mcm9tJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUuZnJvbVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgT2ZWYWx1ZXNBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiB7IFtrZXk6IHN0cmluZ106IFRTb3VyY2UgfTtcbi8qKlxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZyxUU291cmNlPn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogeyBba2V5OiBzdHJpbmddOiBUU291cmNlIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gZnJvbShPYmplY3Qua2V5cyh0aGlzLl9zb3VyY2UpLCBrZXkgPT4gdGhpcy5fc291cmNlW2tleV0pW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIE9mVmFsdWVzQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshT2JqZWN0PHN0cmluZyxUU291cmNlPn0gKi9cbk9mVmFsdWVzQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZyxUU291cmNlPn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9mVmFsdWVzPFRTb3VyY2U+KHNvdXJjZTogeyBba2V5OiBzdHJpbmddOiBUU291cmNlIH0pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgT2ZWYWx1ZXNBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG4iXX0=