goog.module('targets.es5.cls.asynciterable.take'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/take.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var TakeAsyncIterable = (function (_super) {
    __extends(TakeAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    function TakeAsyncIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    TakeAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        i = this._count;
                        if (!(i > 0)) return [3 /*break*/, 14];
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 8, 9, 14]);
                        _a = __asyncValues(this._source);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        return [4 /*yield*/, item];
                    case 5:
                        _d.sent();
                        if (--i === 0) {
                            return [3 /*break*/, 7];
                        }
                        _d.label = 6;
                    case 6: return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _d.trys.push([9, , 12, 13]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 10:
                        _d.sent();
                        _d.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return TakeAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function TakeAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TakeAsyncIterable.prototype._source;
    /** @type {number} */
    TakeAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function take(source, count) {
    return new TakeAsyncIterable(source, count);
}
exports.take = take;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rha2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGtEQUx1QjtBQU12QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBIO0lBQXdDLHFDQUF3QjtJQVdoRTs7O09BR0c7SUFWRCwyQkFBWSxNQUE4QixFQUFDLEtBQWM7UUFBekQsWUFZRSxpQkFYTyxTQWNSO1FBRkMsS0FYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFZdEIsS0FYSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7O0lBWXRCLENBQUM7SUFDSDs7T0FFRztJQVpNLDRCQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozt3QkFDSyxDQUFFLEdBQUUsSUFBSyxDQUFDLE1BQU0sQ0FBQzs2QkFDaEIsQ0FBQSxDQUFDLEdBQUUsQ0FBRSxDQUFBLEVBQUwseUJBQUs7Ozs7d0JBQ2UsS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7Ozs7d0JBQXJCLElBQUssWUFBQTt3QkFjakIscUJBYkssSUFBSyxFQUFBOzt3QkFhVixTQWJVLENBQUM7d0JBY1gsRUFBRSxDQUFDLENBYkMsRUFBRSxDQUFDLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTs0QkFBQSxNQUFPLGtCQUFBO3dCQUFBLENBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUc5QjtJQUNILHdCQUFBO0FBQUEsQ0FuQkEsQUFtQkEsQ0FuQndDLDhCQUFlLEdBbUJ2RDtBQWVBO0lBQ0Esc0NBQXNDO0lBQ3RDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDcEMscUJBQXFCO0lBQ3JCLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDbkMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILGNBQThCLE1BQThCLEVBQUMsS0FBYztJQTJCekUsTUExQk0sQ0FBQSxJQUFJLGlCQUFrQixDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTJCdkQsQ0ExQkM7QUFGRCxvQkFFQyIsImZpbGUiOiJ0YWtlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFRha2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfY291bnQ6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSB0aGlzLl9jb3VudDtcbiAgICBpZiAoaSA+IDApIHtcbiAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgICAgaWYgKC0taSA9PT0gMCkgeyBicmVhazsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYWtlQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblRha2VBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5UYWtlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvdW50O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWtlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYWtlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGNvdW50KTtcbn1cbiJdfQ==