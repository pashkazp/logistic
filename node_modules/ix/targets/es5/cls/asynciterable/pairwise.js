goog.module('targets.es5.cls.asynciterable.pairwise'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/pairwise.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var PairwiseAsyncIterable = (function (_super) {
    __extends(PairwiseAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     */
    function PairwiseAsyncIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<!Array<TSource>>}
     */
    PairwiseAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var value, hasValue, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        hasValue = false;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 10, 11, 16]);
                        _a = __asyncValues(this._source);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 9];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        if (!!hasValue) return [3 /*break*/, 5];
                        hasValue = true;
                        return [3 /*break*/, 7];
                    case 5: return [4 /*yield*/, [/** @type {TSource} */ ((value)), item]];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7:
                        value = item;
                        _d.label = 8;
                    case 8: return [3 /*break*/, 2];
                    case 9: return [3 /*break*/, 16];
                    case 10:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 16];
                    case 11:
                        _d.trys.push([11, , 14, 15]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 13];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 12:
                        _d.sent();
                        _d.label = 13;
                    case 13: return [3 /*break*/, 15];
                    case 14:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 15: return [7 /*endfinally*/];
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return PairwiseAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function PairwiseAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    PairwiseAsyncIterable.prototype._source;
}
/**
 * Returns a new sequence that triggers on the second and subsequent triggerings of the input sequence.
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!Array<TSource>>}
 */
function pairwise(source) {
    return new PairwiseAsyncIterable(source);
}
exports.pairwise = pairwise;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3BhaXJ3aXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUE0Qyx5Q0FBMEI7SUFVdEU7O09BRUc7SUFURCwrQkFBWSxNQUE4QjtRQUExQyxZQVdFLGlCQVZPLFNBWVI7UUFEQyxLQVZJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQzs7SUFXeEIsQ0FBQztJQUNIOztPQUVHO0lBWE0sZ0NBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNpQyxRQUFTLEdBQUUsS0FBTSxDQUFDOzs7O3dCQUN6QixLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBOzZCQUNmLENBQUMsUUFBUSxFQUFULHdCQUFTO3dCQWFYLFFBWlEsR0FBRSxJQUFLLENBQUM7OzRCQWNoQixxQkFaSyxDQUFBLHNCQUFBLENBQUEsQ0FBQSxDQUFFLEtBQUEsQ0FBQSxDQUFNLEVBQUMsSUFBSyxDQUFDLEVBQUE7O3dCQVlwQixTQVpvQixDQUFDOzs7d0JBY3ZCLEtBWkssR0FBRSxJQUFLLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUVoQjtJQUNILDRCQUFBO0FBQUEsQ0FuQkEsQUFtQkEsQ0FuQjRDLDhCQUFlLEdBbUIzRDtBQWNBO0lBQ0Esc0NBQXNDO0lBQ3RDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBakJILGtCQUFrQyxNQUE4QjtJQW1COUQsTUFsQk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBbUJwRCxDQWxCQztBQUZELDRCQUVDIiwiZmlsZSI6InBhaXJ3aXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFBhaXJ3aXNlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjwhQXJyYXk8VFNvdXJjZT4+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyB2YWx1ZTogVFNvdXJjZSB8IHVuZGVmaW5lZCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGZvciBhd2FpdCAoY29uc3QgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKCFoYXNWYWx1ZSkge1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB5aWVsZCBbIC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8oKHZhbHVlKSksIGl0ZW1dO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSBpdGVtO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBQYWlyd2lzZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5QYWlyd2lzZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIG5ldyBzZXF1ZW5jZSB0aGF0IHRyaWdnZXJzIG9uIHRoZSBzZWNvbmQgYW5kIHN1YnNlcXVlbnQgdHJpZ2dlcmluZ3Mgb2YgdGhlIGlucHV0IHNlcXVlbmNlLlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8IUFycmF5PFRTb3VyY2U+Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhaXJ3aXNlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xuICByZXR1cm4gbmV3IFBhaXJ3aXNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19