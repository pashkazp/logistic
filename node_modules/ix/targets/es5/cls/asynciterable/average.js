goog.module('targets.es5.cls.asynciterable.average'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/average.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!AsyncIterable<?>} source
 * @param {function(?): (number|!Promise<number>)=} selector
 * @return {!Promise<number>}
 */
function average(source, selector) {
    if (selector === void 0) { selector = identity_1.identityAsync; }
    return __awaiter(this, void 0, void 0, function () {
        var sum, count, source_1, source_1_1, item, _a, e_1_1, e_1, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    sum = 0;
                    count = 0;
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 8, 9, 14]);
                    source_1 = __asyncValues(source);
                    _c.label = 2;
                case 2: return [4 /*yield*/, source_1.next()];
                case 3:
                    if (!(source_1_1 = _c.sent(), !source_1_1.done)) return [3 /*break*/, 7];
                    return [4 /*yield*/, source_1_1.value];
                case 4:
                    item = _c.sent();
                    _a = sum;
                    return [4 /*yield*/, selector(item)];
                case 5:
                    sum = _a + _c.sent();
                    count++;
                    _c.label = 6;
                case 6: return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 14];
                case 8:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 14];
                case 9:
                    _c.trys.push([9, , 12, 13]);
                    if (!(source_1_1 && !source_1_1.done && (_b = source_1.return))) return [3 /*break*/, 11];
                    return [4 /*yield*/, _b.call(source_1)];
                case 10:
                    _c.sent();
                    _c.label = 11;
                case 11: return [3 /*break*/, 13];
                case 12:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 13: return [7 /*endfinally*/];
                case 14:
                    if (count === 0) {
                        throw new Error('Empty collection');
                    }
                    return [2 /*return*/, sum / count];
            }
        });
    });
}
exports.average = average;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2F2ZXJhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGlEQUxzQjtBQU10QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FOakQ7QUFjckQ7Ozs7R0FJRztBQVZILGlCQVlJLE1BWDBCLEVBWTFCLFFBWDhEO0lBVzlELHlCQUFBLEVBQUEsV0FYZ0Qsd0JBQWM7Ozs7OztvQkFDN0QsR0FBSSxHQUFFLENBQUUsQ0FBQztvQkFDVCxLQUFNLEdBQUUsQ0FBRSxDQUFDOzs7O29CQUNRLFdBQUEsY0FBQSxNQUFPLENBQUE7Ozs7Ozs7b0JBQWYsSUFBSyxZQUFBO29CQVlqQixLQUFBLEdBWEcsQ0FBQTtvQkFBRyxxQkFBTSxRQUFTLENBQUMsSUFBSSxDQUFDLEVBQUE7O29CQVczQixHQVhHLEdBV0gsS0FYTSxTQUFxQixDQUFDO29CQVk1QixLQVhLLEVBQUUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQWNWLEVBQUUsQ0FBQyxDQVhDLEtBQUssS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO3dCQVloQixNQVhLLElBQUksS0FBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7b0JBWXRDLENBWEM7b0JBYUQsc0JBWE0sR0FBSSxHQUFFLEtBQU0sRUFBQzs7OztDQUNwQjtBQWZELDBCQWVDIiwiZmlsZSI6ImF2ZXJhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBpZGVudGl0eUFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdmVyYWdlKFxuICAgIHNvdXJjZTogSXRlcmFibGU8bnVtYmVyIHwgUHJvbWlzZUxpa2U8bnVtYmVyPj4gfCBBc3luY0l0ZXJhYmxlPG51bWJlcj4sXG4gICAgc2VsZWN0b3I/OiAoeDogbnVtYmVyKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBQcm9taXNlPG51bWJlcj47XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXZlcmFnZTxUU291cmNlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yPzogKHg6IFRTb3VyY2UpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPik6IFByb21pc2U8bnVtYmVyPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTw/Pn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKD8pOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pPX0gc2VsZWN0b3JcbiAqIEByZXR1cm4geyFQcm9taXNlPG51bWJlcj59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBhdmVyYWdlKFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxhbnk+LFxuICAgIHNlbGVjdG9yOiAoeDogYW55KSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4gPSBpZGVudGl0eUFzeW5jKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBzdW0gPSAwO1xuICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGNvdW50ID0gMDtcbiAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHs/fSAqLyBpdGVtIG9mIHNvdXJjZSkge1xuICAgIHN1bSArPSBhd2FpdCBzZWxlY3RvcihpdGVtKTtcbiAgICBjb3VudCsrO1xuICB9XG5cbiAgaWYgKGNvdW50ID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFbXB0eSBjb2xsZWN0aW9uJyk7XG4gIH1cblxuICByZXR1cm4gc3VtIC8gY291bnQ7XG59XG4iXX0=