goog.module('targets.es5.cls.asynciterable.fromeventpattern'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/fromeventpattern.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asyncsink_1 = goog.require('targets.es5.cls.asyncsink');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asyncsink");
var memoize_1 = goog.require('targets.es5.cls.asynciterable.memoize');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.memoize");
/**
 * @template TSource
 * @param {function(function(!Array<?>): void): void} addHandler
 * @param {function(function(!Array<?>): void): void} removeHandler
 * @return {!AsyncIterable<TSource>}
 */
function fromEventPattern(addHandler, removeHandler) {
    var /** @type {!tsickle_forward_declare_1.AsyncSink<TSource>} */ sink = new asyncsink_1.AsyncSink();
    var /** @type {function(TSource): void} */ handler = function (e) { return sink.write(e); };
    addHandler(handler);
    return memoize_1.memoize((_a = {},
        /**
         * @return {?}
         */
        _a[Symbol.asyncIterator] = function () {
            return {
                /**
                 * @return {!Promise<!IteratorResult<TSource>>}
                 */
                next: function () {
                    return sink.next();
                },
                /**
                 * @return {!Promise<!IteratorResult<TSource>>}
                 */
                return: function () {
                    removeHandler(handler);
                    sink.end();
                    return Promise.resolve(/** @type {!IteratorResult<TSource>} */ ({ done: true }));
                }
            };
        },
        _a));
    var _a;
}
exports.fromEventPattern = fromEventPattern;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2Zyb21ldmVudHBhdHRlcm4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsdUNBQXVDLENBQUMsQ0FOckQ7QUFPekMscUNBTmdCO0FBT2hCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQzNHOzs7OztHQUtHO0FBWEgsMEJBYUksVUFadUQsRUFhdkQsYUFaMEQ7SUFhNUQsSUFBTSw0REFaRCxDQUFBLElBQUssR0FBRSxJQUFJLHFCQUFVLEVBQVcsQ0FBQztJQWF0QyxJQUFNLHNDQVpELENBQUEsT0FBUSxHQUFFLFVBQUUsQ0FBVSxJQUFJLE9BQUEsSUFBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBZCxDQUFjLENBQUM7SUFjOUMsVUFaVSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBY3BCLE1BWk0sQ0FBQSxpQkFBUTtRQWFoQjs7V0FFRztRQWRDLEdBQUMsTUFBTSxDQUFDLGFBQWEsSUFBckI7WUFnQkUsTUFmTSxDQUFBO2dCQWdCWjs7bUJBRUc7Z0JBakJLLElBQUk7b0JBbUJGLE1BbEJNLENBQUEsSUFBSyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQW1CckIsQ0FsQkM7Z0JBbUJUOzttQkFFRztnQkFuQkssTUFBTTtvQkFxQkosYUFwQmEsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFxQnZCLElBcEJJLENBQUMsR0FBRyxFQUFFLENBQUM7b0JBcUJYLE1BcEJNLENBQUEsT0FBUSxDQUFDLE9BQU8sQ0FBQSx1Q0FBQSxDQUFBLENBQUMsRUFBQyxJQUFLLEVBQUMsSUFBSyxFQUE0QixDQUFDLENBQUMsQ0FBQztnQkFxQnBFLENBcEJDO2FBQ0YsQ0FBQztRQXFCSixDQXBCQztZQUNELENBQUM7O0FBcUJMLENBcEJDO0FBdkJELDRDQXVCQyIsImZpbGUiOiJmcm9tZXZlbnRwYXR0ZXJuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNTaW5rIH0gZnJvbSAnLi4vYXN5bmNzaW5rJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jc2lua1wiKTtcbmltcG9ydCB7IG1lbW9pemUgfSBmcm9tICcuL21lbW9pemUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5tZW1vaXplXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbighQXJyYXk8Pz4pOiB2b2lkKTogdm9pZH0gYWRkSGFuZGxlclxuICogQHBhcmFtIHtmdW5jdGlvbihmdW5jdGlvbighQXJyYXk8Pz4pOiB2b2lkKTogdm9pZH0gcmVtb3ZlSGFuZGxlclxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmcm9tRXZlbnRQYXR0ZXJuPFRTb3VyY2U+KFxuICAgIGFkZEhhbmRsZXI6IChoYW5kbGVyOiAoLi4uYXJnczogYW55W10pID0+IHZvaWQpID0+IHZvaWQsXG4gICAgcmVtb3ZlSGFuZGxlcjogKGhhbmRsZXI6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCkgPT4gdm9pZCk6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4ge1xuICBjb25zdCAvKiogQHR5cGUgeyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jU2luazxUU291cmNlPn0gKi8gc2luayA9IG5ldyBBc3luY1Npbms8VFNvdXJjZT4oKTtcbiAgY29uc3QgLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlKTogdm9pZH0gKi8gaGFuZGxlciA9IChlOiBUU291cmNlKSA9PiBzaW5rLndyaXRlKGUpO1xuXG4gIGFkZEhhbmRsZXIoaGFuZGxlcik7XG5cbiAgcmV0dXJuIG1lbW9pemUoe1xuLyoqXG4gKiBAcmV0dXJuIHs/fVxuICovXG5bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgICAgcmV0dXJuIHtcbi8qKlxuICogQHJldHVybiB7IVByb21pc2U8IUl0ZXJhdG9yUmVzdWx0PFRTb3VyY2U+Pn1cbiAqL1xubmV4dCgpIHtcbiAgICAgICAgICByZXR1cm4gc2luay5uZXh0KCk7XG4gICAgICAgIH0sXG4vKipcbiAqIEByZXR1cm4geyFQcm9taXNlPCFJdGVyYXRvclJlc3VsdDxUU291cmNlPj59XG4gKi9cbnJldHVybigpIHtcbiAgICAgICAgICByZW1vdmVIYW5kbGVyKGhhbmRsZXIpO1xuICAgICAgICAgIHNpbmsuZW5kKCk7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSggLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VFNvdXJjZT59ICovKCh7IGRvbmU6IHRydWUgfSBhcyBJdGVyYXRvclJlc3VsdDxUU291cmNlPikpKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG4gIH0pO1xufVxuIl19