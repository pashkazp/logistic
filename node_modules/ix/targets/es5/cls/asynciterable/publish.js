goog.module('targets.es5.cls.asynciterable.publish'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/publish.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _refcountlist_1 = goog.require('targets.es5.cls.iterable._refcountlist');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.es5.cls.asynciterable.create');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.create");
/**
 * @template T
 */
var PublishedAsyncBuffer = (function (_super) {
    __extends(PublishedAsyncBuffer, _super);
    /**
     * @param {!AsyncIterator<T>} source
     */
    function PublishedAsyncBuffer(source) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = new _refcountlist_1.RefCountList(0);
        return _this;
    }
    /**
     * @param {number} i
     * @return {!AsyncIterable<T>}
     */
    PublishedAsyncBuffer.prototype._getIterable = function (i) {
        return __asyncGenerator(this, arguments, function _getIterable_1() {
            var hasValue, current, next, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 12, 13]);
                        _a.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 11];
                        hasValue = false, current = ({});
                        if (!(i >= this._buffer.count)) return [3 /*break*/, 6];
                        if (!!this._stopped) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, __await(this._source.next())];
                    case 3:
                        next = _a.sent();
                        hasValue = !next.done;
                        if (hasValue) {
                            current = next.value;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        this._error = e_1;
                        this._stopped = true;
                        return [3 /*break*/, 5];
                    case 5:
                        if (this._stopped) {
                            if (this._error) {
                                throw this._error;
                            }
                            else {
                                return [3 /*break*/, 11];
                            }
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        hasValue = true;
                        _a.label = 7;
                    case 7:
                        if (!hasValue) return [3 /*break*/, 9];
                        return [4 /*yield*/, this._buffer.get(i)];
                    case 8:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        i++;
                        return [3 /*break*/, 1];
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        this._buffer.done();
                        return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * @return {!AsyncIterator<T>}
     */
    PublishedAsyncBuffer.prototype[Symbol.asyncIterator] = function () {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.asyncIterator]();
    };
    return PublishedAsyncBuffer;
}(asynciterable_1.AsyncIterableX));
function PublishedAsyncBuffer_tsickle_Closure_declarations() {
    /** @type {!tsickle_forward_declare_2.RefCountList<T>} */
    PublishedAsyncBuffer.prototype._buffer;
    /** @type {!AsyncIterator<T>} */
    PublishedAsyncBuffer.prototype._source;
    /** @type {?} */
    PublishedAsyncBuffer.prototype._error;
    /** @type {boolean} */
    PublishedAsyncBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {function(!AsyncIterable<TSource>): !AsyncIterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(TSource|TResult)>}
 */
function publish(source, selector) {
    var _this = this;
    return selector ?
        create_1.create(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            return [2 /*return*/, selector(publish(source))[Symbol.asyncIterator]()];
        }); }); }) :
        new PublishedAsyncBuffer(source[Symbol.asyncIterator]());
}
exports.publish = publish;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3B1Ymxpc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGtEQUx1QjtBQU12QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsMkRBTnFCO0FBT3JCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxvREFBb0QsQ0FBQyxDQVBsRDtBQVF6RCxtQ0FQZTtBQVFmLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQzFHOztHQUVHO0FBVEg7SUFBcUMsd0NBQWtCO0lBZXZEOztPQUVHO0lBWEQsOEJBQVksTUFBd0I7UUFBcEMsWUFhRSxpQkFaTyxTQWVSO1FBbEJNLGNBQVMsR0FBVyxLQUFNLENBQUE7UUFnQi9CLEtBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLEtBWkksQ0FBQyxPQUFPLEdBQUUsSUFBSSw0QkFBYSxDQUFJLENBQUMsQ0FBQyxDQUFDOztJQWF4QyxDQUFDO0lBQ0g7OztPQUdHO0lBZGMsMkNBQVksR0FBM0IsVUFBNEIsQ0FBUzs7Ozs7Ozs7OzZCQUUxQixDQUFDO3dCQUNILFFBQVMsR0FBRSxLQUFNLEVBQUMsT0FBUSxHQUFBLENBQU0sRUFBQSxDQUFFLENBQUM7NkJBQ2xDLENBQUEsQ0FBQyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFBLEVBQXZCLHdCQUF1Qjs2QkFDckIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFkLHdCQUFjOzs7O3dCQUVKLDZCQUFNLElBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUE7O3dCQUFqQyxJQUFLLEdBQUUsU0FBMEI7d0JBaUJwQyxRQWhCUSxHQUFFLENBQUUsSUFBSSxDQUFDLElBQUksQ0FBQzt3QkFpQnRCLEVBQUUsQ0FBQyxDQWhCQyxRQUFRLENBQUMsQ0FBQSxDQUFFOzRCQUFBLE9BQVEsR0FBRSxJQUFLLENBQUMsS0FBSyxDQUFDO3dCQUFBLENBQUU7Ozs7d0JBa0J2QyxJQWhCSSxDQUFDLE1BQU0sR0FBRSxHQUFFLENBQUM7d0JBaUJoQixJQWhCSSxDQUFDLFFBQVEsR0FBRSxJQUFLLENBQUM7Ozt3QkFvQnpCLEVBQUUsQ0FBQyxDQWhCQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTs0QkFpQmxCLEVBQUUsQ0FBQyxDQWhCQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBRTtnQ0FpQmhCLE1BaEJLLElBQUssQ0FBQyxNQUFNLENBQUM7NEJBaUJwQixDQWhCQzs0QkFBQSxJQUFLLENBQUEsQ0FBRTtnQ0FpQk4sTUFoQk0sbUJBQUE7NEJBaUJSLENBaEJDO3dCQWlCSCxDQWhCQzt3QkFrQkQsRUFBRSxDQUFDLENBaEJDLFFBQVEsQ0FBQyxDQUFBLENBQUU7NEJBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQUEsQ0FBRTs7O3dCQWtCN0MsUUFoQlEsR0FBRSxJQUFLLENBQUM7Ozs2QkFHZCxRQUFRLEVBQVIsd0JBQVE7d0JBaUJWLHFCQWhCSyxJQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQTs7d0JBZ0J6QixTQWhCeUIsQ0FBQzs7NEJBa0IxQix5QkFoQk07O3dCQW1CUixDQWhCQyxFQUFFLENBQUM7Ozs7d0JBbUJOLElBaEJJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDOzs7Ozs7S0FrQnZCO0lBQ0g7O09BRUc7SUFqQkQsK0JBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUF0QjtRQW1CRSxJQWxCSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQW1CM0IsTUFsQk0sQ0FBQSxJQUFLLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7SUFtQnZFLENBbEJDO0lBQ0gsMkJBQUE7QUFBQSxDQTFEQSxBQTBEQSxDQTFEcUMsOEJBQWUsR0EwRHBEO0FBb0JBO0lBQ0EseURBQXlEO0lBQ3pELG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdkMsZ0NBQWdDO0lBQ2hDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdkMsZ0JBQWdCO0lBQ2hCLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDdEMsc0JBQXNCO0lBQ3RCLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDeEMsQ0FBQztBQU9EOzs7OztHQUtHO0FBbkNILGlCQXFDSSxNQXBDOEIsRUFxQzlCLFFBcENvRTtJQUZ4RSxpQkFNQztJQWlDQyxNQXBDTSxDQUFBLFFBQVM7UUFxQ2IsZUFwQ00sQ0FBQztZQUFXLHNCQUFBLFFBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBQTtpQkFBQSxDQUFDO1FBcUNyRSxJQXBDRyxvQkFBcUIsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQXFDdEUsQ0FwQ0M7QUFORCwwQkFNQyIsImZpbGUiOiJwdWJsaXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBSZWZDb3VudExpc3QgfSBmcm9tICcuLi9pdGVyYWJsZS9fcmVmY291bnRsaXN0JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLl9yZWZjb3VudGxpc3RcIik7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICcuL2NyZWF0ZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLmNyZWF0ZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqL1xuY2xhc3MgUHVibGlzaGVkQXN5bmNCdWZmZXI8VD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUPiB7XG5wcml2YXRlIF9idWZmZXI6IFJlZkNvdW50TGlzdDxUPjtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYXRvcjxUPjtcbnByaXZhdGUgX2Vycm9yOiBhbnk7XG5wcml2YXRlIF9zdG9wcGVkOiBib29sZWFuID0gZmFsc2U7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmF0b3I8VD59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmF0b3I8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9idWZmZXIgPSBuZXcgUmVmQ291bnRMaXN0PFQ+KDApO1xuICB9XG4vKipcbiAqIEBwYXJhbSB7bnVtYmVyfSBpXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZTxUPn1cbiAqL1xuXG5wcml2YXRlIGFzeW5jICpfZ2V0SXRlcmFibGUoaTogbnVtYmVyKTogQXN5bmNJdGVyYWJsZTxUPiB7XG4gICAgdHJ5IHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc1ZhbHVlID0gZmFsc2UsIC8qKiBAdHlwZSB7VH0gKi8gY3VycmVudCA9IC8qKiBAdHlwZSB7VH0gKi8oKCA8VD57fSkpO1xuICAgICAgICBpZiAoaSA+PSB0aGlzLl9idWZmZXIuY291bnQpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxldCAvKiogQHR5cGUgeyFJdGVyYXRvclJlc3VsdDxUPn0gKi8gbmV4dCA9IGF3YWl0IHRoaXMuX3NvdXJjZS5uZXh0KCk7XG4gICAgICAgICAgICAgIGhhc1ZhbHVlID0gIW5leHQuZG9uZTtcbiAgICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IGN1cnJlbnQgPSBuZXh0LnZhbHVlOyB9XG4gICAgICAgICAgICB9IGNhdGNoICggLyoqIEB0eXBlIHs/fSAqL2UpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlO1xuICAgICAgICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5fc3RvcHBlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgIHRocm93IHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IHRoaXMuX2J1ZmZlci5wdXNoKGN1cnJlbnQpOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgeWllbGQgdGhpcy5fYnVmZmVyLmdldChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fYnVmZmVyLmRvbmUoKTtcbiAgICB9XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmF0b3I8VD59XG4gKi9cbltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYXRvcjxUPiB7XG4gICAgdGhpcy5fYnVmZmVyLnJlYWRlckNvdW50Kys7XG4gICAgcmV0dXJuIHRoaXMuX2dldEl0ZXJhYmxlKHRoaXMuX2J1ZmZlci5jb3VudClbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gUHVibGlzaGVkQXN5bmNCdWZmZXJfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuUmVmQ291bnRMaXN0PFQ+fSAqL1xuUHVibGlzaGVkQXN5bmNCdWZmZXIucHJvdG90eXBlLl9idWZmZXI7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFQ+fSAqL1xuUHVibGlzaGVkQXN5bmNCdWZmZXIucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUgez99ICovXG5QdWJsaXNoZWRBc3luY0J1ZmZlci5wcm90b3R5cGUuX2Vycm9yO1xuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuUHVibGlzaGVkQXN5bmNCdWZmZXIucHJvdG90eXBlLl9zdG9wcGVkO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+O1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgc2VsZWN0b3I/OiAodmFsdWU6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pID0+IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0Pjtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRSZXN1bHRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbighQXN5bmNJdGVyYWJsZTxUU291cmNlPik6ICFBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+PX0gc2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPChUU291cmNlfFRSZXN1bHQpPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yPzogKHZhbHVlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZSB8IFRSZXN1bHQ+IHtcbiAgcmV0dXJuIHNlbGVjdG9yID9cbiAgICBjcmVhdGUoYXN5bmMgKCkgPT4gc2VsZWN0b3IocHVibGlzaChzb3VyY2UpKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSkgOlxuICAgIG5ldyBQdWJsaXNoZWRBc3luY0J1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkpO1xufVxuIl19