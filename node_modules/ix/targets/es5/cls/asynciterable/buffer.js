goog.module('targets.es5.cls.asynciterable.buffer'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/buffer.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var BufferAsyncIterable = (function (_super) {
    __extends(BufferAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     * @param {number} skip
     */
    function BufferAsyncIterable(source, count, skip) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        _this._skip = skip;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<!Array<TSource>>}
     */
    BufferAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var buffers, i, _a, _b, item, buffers_1, buffers_1_1, buffer_1, e_1_1, e_1, _c, e_2, _d;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        buffers = [], i = 0;
                        _e.label = 1;
                    case 1:
                        _e.trys.push([1, 9, 10, 15]);
                        _a = __asyncValues(this._source);
                        _e.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _e.sent(), !_b.done)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _e.sent();
                        if (i % this._skip === 0) {
                            buffers.push([]);
                        }
                        try {
                            for (buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
                                buffer_1 = buffers_1_1.value;
                                buffer_1.push(item);
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (buffers_1_1 && !buffers_1_1.done && (_d = buffers_1.return)) _d.call(buffers_1);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        if (!(buffers.length > 0 && buffers[0].length === this._count)) return [3 /*break*/, 6];
                        return [4 /*yield*/, /** @type {!Array<TSource>} */ ((buffers.shift()))];
                    case 5:
                        _e.sent();
                        _e.label = 6;
                    case 6:
                        i++;
                        _e.label = 7;
                    case 7: return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_1_1 = _e.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _e.trys.push([10, , 13, 14]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 11:
                        _e.sent();
                        _e.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15:
                        if (!(buffers.length > 0)) return [3 /*break*/, 17];
                        return [4 /*yield*/, /** @type {!Array<TSource>} */ ((buffers.shift()))];
                    case 16:
                        _e.sent();
                        return [3 /*break*/, 15];
                    case 17: return [2 /*return*/];
                }
            });
        });
    };
    return BufferAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function BufferAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    BufferAsyncIterable.prototype._source;
    /** @type {number} */
    BufferAsyncIterable.prototype._count;
    /** @type {number} */
    BufferAsyncIterable.prototype._skip;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @param {number=} skip
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!Array<TSource>>}
 */
function buffer(source, count, skip) {
    if (skip == null) {
        skip = count;
    }
    return new BufferAsyncIterable(source, count, skip);
}
exports.buffer = buffer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2J1ZmZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEg7SUFBMEMsdUNBQTBCO0lBWXBFOzs7O09BSUc7SUFYRCw2QkFhSSxNQVo4QixFQWE5QixLQVphLEVBYWIsSUFaWTtRQUhoQixZQWdCSSxpQkFaTyxTQWdCVjtRQUhDLEtBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLEtBWkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBYXBCLEtBWkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDOztJQWFwQixDQUFDO0lBQ0g7O09BRUc7SUFiTSw4QkFBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBRUssT0FBUSxHQUFlLEVBQUcsRUFBQyxDQUFHLEdBQUUsQ0FBRSxDQUFDOzs7O3dCQUNoQixLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBO3dCQWVqQixFQUFFLENBQUMsQ0FkQyxDQUFDLEdBQUUsSUFBSyxDQUFDLEtBQUssS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFOzRCQWV6QixPQWRPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQWVuQixDQWRDOzs0QkFnQkQsR0FBRyxDQUFDLENBZGMsWUFBQSxTQUFBLE9BQVEsQ0FBQTtnQ0FBckI7Z0NBZUgsUUFkTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzs2QkFDbkI7Ozs7Ozs7Ozs2QkFFRyxDQUFBLE9BQU8sQ0FBQyxNQUFNLEdBQUUsQ0FBRSxJQUFHLE9BQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUksSUFBSyxDQUFDLE1BQU0sQ0FBQSxFQUF2RCx3QkFBdUQ7d0JBZXpELHFCQUFNLDhCQUE4QixDQUFBLENBQUMsQ0FkaEMsT0FBUSxDQUFDLEtBQUssRUFBQSxDQUFBLENBQUcsRUFBQTs7d0JBY3RCLFNBZHNCLENBQUM7Ozt3QkFpQnpCLENBZEMsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBR0MsQ0FBQSxPQUFPLENBQUMsTUFBTSxHQUFFLENBQUUsQ0FBQTt3QkFldkIscUJBQU0sOEJBQThCLENBQUEsQ0FBQyxDQWRoQyxPQUFRLENBQUMsS0FBSyxFQUFBLENBQUEsQ0FBRyxFQUFBOzt3QkFjdEIsU0Fkc0IsQ0FBQzs7Ozs7O0tBRTFCO0lBQ0gsMEJBQUE7QUFBQSxDQXRDQSxBQXNDQSxDQXRDMEMsOEJBQWUsR0FzQ3pEO0FBZ0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdEMscUJBQXFCO0lBQ3JCLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDckMscUJBQXFCO0lBQ3JCLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDcEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQTdCSCxnQkErQkksTUE5QjhCLEVBK0I5QixLQTlCYSxFQStCYixJQTlCYTtJQStCZixFQUFFLENBQUMsQ0E5QkMsSUFBSSxJQUFHLElBQUssQ0FBQyxDQUFBLENBQUU7UUFBQSxJQUFLLEdBQUUsS0FBTSxDQUFDO0lBQUEsQ0FBRTtJQStCbkMsTUE5Qk0sQ0FBQSxJQUFJLG1CQUFvQixDQUFVLE1BQU0sRUFBQyxLQUFNLEVBQUMsSUFBSyxDQUFDLENBQUM7QUErQi9ELENBOUJDO0FBTkQsd0JBTUMiLCJmaWxlIjoiYnVmZmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIEJ1ZmZlckFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlW10+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvdW50OiBudW1iZXI7XG5wcml2YXRlIF9za2lwOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcGFyYW0ge251bWJlcn0gc2tpcFxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGNvdW50OiBudW1iZXIsXG4gICAgICBza2lwOiBudW1iZXIpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gICAgdGhpcy5fc2tpcCA9IHNraXA7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjwhQXJyYXk8VFNvdXJjZT4+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcblxuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTwhQXJyYXk8VFNvdXJjZT4+fSAqLyBidWZmZXJzOiBUU291cmNlW11bXSA9IFtdLCAvKiogQHR5cGUge251bWJlcn0gKi8gIGkgPSAwO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChpICUgdGhpcy5fc2tpcCA9PT0gMCkge1xuICAgICAgICBidWZmZXJzLnB1c2goW10pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCAvKiogQHR5cGUgeyFBcnJheTxUU291cmNlPn0gKi8gYnVmZmVyIG9mIGJ1ZmZlcnMpIHtcbiAgICAgICAgYnVmZmVyLnB1c2goaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChidWZmZXJzLmxlbmd0aCA+IDAgJiYgYnVmZmVyc1swXS5sZW5ndGggPT09IHRoaXMuX2NvdW50KSB7XG4gICAgICAgIHlpZWxkIC8qKiBAdHlwZSB7IUFycmF5PFRTb3VyY2U+fSAqLygoIGJ1ZmZlcnMuc2hpZnQoKSkpO1xuICAgICAgfVxuXG4gICAgICBpKys7XG4gICAgfVxuXG4gICAgd2hpbGUgKGJ1ZmZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgeWllbGQgLyoqIEB0eXBlIHshQXJyYXk8VFNvdXJjZT59ICovKCggYnVmZmVycy5zaGlmdCgpKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEJ1ZmZlckFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5CdWZmZXJBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5CdWZmZXJBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fY291bnQ7XG4vKiogQHR5cGUge251bWJlcn0gKi9cbkJ1ZmZlckFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9za2lwO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHBhcmFtIHtudW1iZXI9fSBza2lwXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDwhQXJyYXk8VFNvdXJjZT4+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb3VudDogbnVtYmVyLFxuICAgIHNraXA/OiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlW10+IHtcbiAgaWYgKHNraXAgPT0gbnVsbCkgeyBza2lwID0gY291bnQ7IH1cbiAgcmV0dXJuIG5ldyBCdWZmZXJBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQsIHNraXApO1xufVxuIl19