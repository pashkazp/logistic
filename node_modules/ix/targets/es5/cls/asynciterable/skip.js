goog.module('targets.es5.cls.asynciterable.skip'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/skip.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var SkipAsyncIterable = (function (_super) {
    __extends(SkipAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    function SkipAsyncIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    SkipAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var it, count, next, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        it = this._source[Symbol.asyncIterator](), count = this._count;
                        _b.label = 1;
                    case 1:
                        _a = count > 0;
                        if (!_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, __await(it.next())];
                    case 2:
                        _a = !(next = _b.sent()).done;
                        _b.label = 3;
                    case 3:
                        if (!_a) return [3 /*break*/, 4];
                        count--;
                        return [3 /*break*/, 1];
                    case 4:
                        if (!(count <= 0)) return [3 /*break*/, 8];
                        _b.label = 5;
                    case 5: return [4 /*yield*/, __await(it.next())];
                    case 6:
                        if (!!(next = _b.sent()).done) return [3 /*break*/, 8];
                        return [4 /*yield*/, next.value];
                    case 7:
                        _b.sent();
                        return [3 /*break*/, 5];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return SkipAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function SkipAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    SkipAsyncIterable.prototype._source;
    /** @type {number} */
    SkipAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function skip(source, count) {
    return new SkipAsyncIterable(source, count);
}
exports.skip = skip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NraXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGtEQUx1QjtBQU12QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBIO0lBQXdDLHFDQUF3QjtJQVdoRTs7O09BR0c7SUFWRCwyQkFBWSxNQUE4QixFQUFDLEtBQWM7UUFBekQsWUFZRSxpQkFYTyxTQWNSO1FBRkMsS0FYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFZdEIsS0FYSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7O0lBWXRCLENBQUM7SUFDSDs7T0FFRztJQVpNLDRCQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozt3QkFDSyxFQUFHLEdBQUUsSUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBQyxLQUFNLEdBQUUsSUFBSyxDQUFDLE1BQU0sQ0FBTzs7O3dCQUNsRSxLQUFBLEtBQUssR0FBRSxDQUFFLENBQUE7aUNBQVQsd0JBQVM7d0JBQVksNkJBQU0sRUFBRyxDQUFDLElBQUksRUFBRSxHQUFBOzt3QkFBekIsS0FBQSxDQUFFLENBQUMsSUFBSSxHQUFFLFNBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUE7Ozs7d0JBY2hELEtBYkssRUFBRSxDQUFDOzs7NkJBRU4sQ0FBQSxLQUFLLElBQUcsQ0FBRSxDQUFBLEVBQVYsd0JBQVU7OzRCQUNHLDZCQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBQTs7NkJBQXhCLENBQUMsQ0FBQyxJQUFJLEdBQUUsU0FBZ0IsQ0FBQyxDQUFDLElBQUk7d0JBY25DLHFCQWJLLElBQUssQ0FBQyxLQUFLLEVBQUE7O3dCQWFoQixTQWJnQixDQUFDOzs7Ozs7S0FHdEI7SUFDSCx3QkFBQTtBQUFBLENBckJBLEFBcUJBLENBckJ3Qyw4QkFBZSxHQXFCdkQ7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BDLHFCQUFxQjtJQUNyQixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQ25DLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxjQUE4QixNQUE4QixFQUFDLEtBQWM7SUEyQnpFLE1BMUJNLENBQUEsSUFBSSxpQkFBa0IsQ0FBVSxNQUFNLEVBQUMsS0FBTSxDQUFDLENBQUM7QUEyQnZELENBMUJDO0FBRkQsb0JBRUMiLCJmaWxlIjoic2tpcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBTa2lwQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLCAvKiogQHR5cGUge251bWJlcn0gKi8gY291bnQgPSB0aGlzLl9jb3VudCwgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgIHdoaWxlIChjb3VudCA+IDAgJiYgIShuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICBjb3VudC0tO1xuICAgIH1cbiAgICBpZiAoY291bnQgPD0gMCkge1xuICAgICAgd2hpbGUgKCEobmV4dCA9IGF3YWl0IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgICB5aWVsZCBuZXh0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBTa2lwQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblNraXBBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5Ta2lwQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvdW50O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBza2lwPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBTa2lwQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGNvdW50KTtcbn1cbiJdfQ==