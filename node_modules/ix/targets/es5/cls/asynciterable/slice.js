goog.module('targets.es5.cls.asynciterable.slice'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/slice.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var SliceAsyncIterable = (function (_super) {
    __extends(SliceAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} begin
     * @param {number} end
     */
    function SliceAsyncIterable(source, begin, end) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._begin = begin;
        _this._end = end;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    SliceAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var it, begin, next, _a, end;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        it = this._source[Symbol.asyncIterator](), begin = this._begin;
                        _b.label = 1;
                    case 1:
                        _a = begin > 0;
                        if (!_a) return [3 /*break*/, 3];
                        return [4 /*yield*/, __await(it.next())];
                    case 2:
                        _a = !(next = _b.sent()).done;
                        _b.label = 3;
                    case 3:
                        if (!_a) return [3 /*break*/, 4];
                        begin--;
                        return [3 /*break*/, 1];
                    case 4:
                        end = this._end;
                        if (!(end > 0)) return [3 /*break*/, 8];
                        _b.label = 5;
                    case 5: return [4 /*yield*/, __await(it.next())];
                    case 6:
                        if (!!(next = _b.sent()).done) return [3 /*break*/, 8];
                        return [4 /*yield*/, next.value];
                    case 7:
                        _b.sent();
                        if (--end === 0) {
                            return [3 /*break*/, 8];
                        }
                        return [3 /*break*/, 5];
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    return SliceAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function SliceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    SliceAsyncIterable.prototype._source;
    /** @type {number} */
    SliceAsyncIterable.prototype._begin;
    /** @type {number} */
    SliceAsyncIterable.prototype._end;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} begin
 * @param {number=} end
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function slice(source, begin, end) {
    if (end === void 0) { end = Infinity; }
    return new SliceAsyncIterable(source, begin, end);
}
exports.slice = slice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NsaWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUF5QyxzQ0FBd0I7SUFZakU7Ozs7T0FJRztJQVhELDRCQUFZLE1BQThCLEVBQUMsS0FBYyxFQUFDLEdBQVk7UUFBdEUsWUFhRSxpQkFaTyxTQWdCUjtRQUhDLEtBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLEtBWkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBYXBCLEtBWkksQ0FBQyxJQUFJLEdBQUUsR0FBSSxDQUFDOztJQWFsQixDQUFDO0lBQ0g7O09BRUc7SUFiTSw2QkFBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ0ssRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUMsS0FBTSxHQUFFLElBQUssQ0FBQyxNQUFNLENBQU87Ozt3QkFDbEUsS0FBQSxLQUFLLEdBQUUsQ0FBRSxDQUFBO2lDQUFULHdCQUFTO3dCQUFZLDZCQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsR0FBQTs7d0JBQXpCLEtBQUEsQ0FBRSxDQUFDLElBQUksR0FBRSxTQUFnQixDQUFDLENBQUMsSUFBSSxDQUFBOzs7O3dCQWVoRCxLQWRLLEVBQUUsQ0FBQzs7O3dCQUdQLEdBQUksR0FBRSxJQUFLLENBQUMsSUFBSSxDQUFDOzZCQUNoQixDQUFBLEdBQUcsR0FBRSxDQUFFLENBQUEsRUFBUCx3QkFBTzs7NEJBQ00sNkJBQU0sRUFBRyxDQUFDLElBQUksRUFBRSxHQUFBOzs2QkFBeEIsQ0FBQyxDQUFDLElBQUksR0FBRSxTQUFnQixDQUFDLENBQUMsSUFBSTt3QkFlbkMscUJBZEssSUFBSyxDQUFDLEtBQUssRUFBQTs7d0JBY2hCLFNBZGdCLENBQUM7d0JBZWpCLEVBQUUsQ0FBQyxDQWRDLEVBQUUsR0FBRyxLQUFJLENBQUUsQ0FBQyxDQUFBLENBQUU7NEJBQUEsTUFBTyxrQkFBQTt3QkFBQSxDQUFFOzs7Ozs7S0FHaEM7SUFDSCx5QkFBQTtBQUFBLENBMUJBLEFBMEJBLENBMUJ5Qyw4QkFBZSxHQTBCeEQ7QUFnQkE7SUFDQSxzQ0FBc0M7SUFDdEMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNyQyxxQkFBcUI7SUFDckIsa0JBQWtCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNwQyxxQkFBcUI7SUFDckIsa0JBQWtCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztBQUNsQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBN0JILGVBK0JJLE1BOUI4QixFQStCOUIsS0E5QmEsRUErQmIsR0E5QnNCO0lBOEJ0QixvQkFBQSxFQUFBLGNBOUJzQjtJQStCeEIsTUE5Qk0sQ0FBQSxJQUFJLGtCQUFtQixDQUFVLE1BQU0sRUFBQyxLQUFNLEVBQUMsR0FBSSxDQUFDLENBQUM7QUErQjdELENBOUJDO0FBTEQsc0JBS0MiLCJmaWxlIjoic2xpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgU2xpY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfYmVnaW46IG51bWJlcjtcbnByaXZhdGUgX2VuZDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBiZWdpblxuICogQHBhcmFtIHtudW1iZXJ9IGVuZFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGJlZ2luOiBudW1iZXIsIGVuZDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fYmVnaW4gPSBiZWdpbjtcbiAgICB0aGlzLl9lbmQgPSBlbmQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLCAvKiogQHR5cGUge251bWJlcn0gKi8gYmVnaW4gPSB0aGlzLl9iZWdpbiwgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgIHdoaWxlIChiZWdpbiA+IDAgJiYgIShuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICBiZWdpbi0tO1xuICAgIH1cblxuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gZW5kID0gdGhpcy5fZW5kO1xuICAgIGlmIChlbmQgPiAwKSB7XG4gICAgICB3aGlsZSAoIShuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgICAgIGlmICgtLWVuZCA9PT0gMCkgeyBicmVhazsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBTbGljZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5TbGljZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblNsaWNlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2JlZ2luO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5TbGljZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9lbmQ7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcj19IGVuZFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzbGljZTxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgYmVnaW46IG51bWJlcixcbiAgICBlbmQ6IG51bWJlciA9IEluZmluaXR5KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFNsaWNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGJlZ2luLCBlbmQpO1xufVxuIl19