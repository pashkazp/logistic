goog.module('targets.es5.cls.asynciterable.defaultifempty'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/defaultifempty.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var DefaultIfEmptyAsyncIterable = (function (_super) {
    __extends(DefaultIfEmptyAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {TSource} defaultValue
     */
    function DefaultIfEmptyAsyncIterable(source, defaultValue) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._defaultValue = defaultValue;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    DefaultIfEmptyAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var state, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        state = 1;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 8, 9, 14]);
                        _a = __asyncValues(this._source);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        state = 2;
                        return [4 /*yield*/, item];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6: return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _d.trys.push([9, , 12, 13]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 10:
                        _d.sent();
                        _d.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14:
                        if (!(state === 1)) return [3 /*break*/, 16];
                        return [4 /*yield*/, this._defaultValue];
                    case 15:
                        _d.sent();
                        _d.label = 16;
                    case 16: return [2 /*return*/];
                }
            });
        });
    };
    return DefaultIfEmptyAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function DefaultIfEmptyAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    DefaultIfEmptyAsyncIterable.prototype._source;
    /** @type {TSource} */
    DefaultIfEmptyAsyncIterable.prototype._defaultValue;
}
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {T} defaultValue
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function defaultIfEmpty(source, defaultValue) {
    return new DefaultIfEmptyAsyncIterable(source, defaultValue);
}
exports.defaultIfEmpty = defaultIfEmpty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2RlZmF1bHRpZmVtcHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxrREFMdUI7QUFNdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSDtJQUFrRCwrQ0FBd0I7SUFXMUU7OztPQUdHO0lBVkQscUNBQVksTUFBOEIsRUFBQyxZQUFzQjtRQUFqRSxZQVlFLGlCQVhPLFNBY1I7UUFGQyxLQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixLQVhJLENBQUMsYUFBYSxHQUFFLFlBQWEsQ0FBQzs7SUFZcEMsQ0FBQztJQUNIOztPQUVHO0lBWk0sc0NBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNLLEtBQU0sR0FBRSxDQUFFLENBQUM7Ozs7d0JBQ1EsS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7Ozs7d0JBQXJCLElBQUssWUFBQTt3QkFjakIsS0FiSyxHQUFFLENBQUUsQ0FBQzt3QkFjVixxQkFiSyxJQUFLLEVBQUE7O3dCQWFWLFNBYlUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQUVULENBQUEsS0FBSyxLQUFJLENBQUUsQ0FBQSxFQUFYLHlCQUFXO3dCQWNiLHFCQWJLLElBQUssQ0FBQyxhQUFhLEVBQUE7O3dCQWF4QixTQWJ3QixDQUFDOzs7Ozs7S0FFNUI7SUFDSCxrQ0FBQTtBQUFBLENBcEJBLEFBb0JBLENBcEJrRCw4QkFBZSxHQW9CakU7QUFlQTtJQUNBLHNDQUFzQztJQUN0QywyQkFBMkIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQzlDLHNCQUFzQjtJQUN0QiwyQkFBMkIsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO0FBQ3BELENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCx3QkFBa0MsTUFBd0IsRUFBQyxZQUFnQjtJQTJCekUsTUExQk0sQ0FBQSxJQUFJLDJCQUE0QixDQUFJLE1BQU0sRUFBQyxZQUFhLENBQUMsQ0FBQztBQTJCbEUsQ0ExQkM7QUFGRCx3Q0FFQyIsImZpbGUiOiJkZWZhdWx0aWZlbXB0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBEZWZhdWx0SWZFbXB0eUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9kZWZhdWx0VmFsdWU6IFRTb3VyY2U7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtUU291cmNlfSBkZWZhdWx0VmFsdWVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBkZWZhdWx0VmFsdWU6IFRTb3VyY2UpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9kZWZhdWx0VmFsdWUgPSBkZWZhdWx0VmFsdWU7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBzdGF0ZSA9IDE7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgc3RhdGUgPSAyO1xuICAgICAgeWllbGQgaXRlbTtcbiAgICB9XG4gICAgaWYgKHN0YXRlID09PSAxKSB7XG4gICAgICB5aWVsZCB0aGlzLl9kZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkRlZmF1bHRJZkVtcHR5QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7VFNvdXJjZX0gKi9cbkRlZmF1bHRJZkVtcHR5QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2RlZmF1bHRWYWx1ZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge1R9IGRlZmF1bHRWYWx1ZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0SWZFbXB0eTxUPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sIGRlZmF1bHRWYWx1ZTogVCk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIG5ldyBEZWZhdWx0SWZFbXB0eUFzeW5jSXRlcmFibGU8VD4oc291cmNlLCBkZWZhdWx0VmFsdWUpO1xufVxuIl19