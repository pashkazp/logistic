goog.module('targets.es5.cls.asynciterable.timeout'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/timeout.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _sleep_1 = goog.require('targets.es5.cls.asynciterable._sleep');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._sleep");
var TimeoutError = (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        var _this = _super.call(this) || this;
        Object.setPrototypeOf(_this, TimeoutError.prototype);
        _this.message = 'Timeout has occurred';
        return _this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
var /** @type {string} */ VALUE_TYPE = 'value';
var /** @type {string} */ ERROR_TYPE = 'error';
/**
 * @record
 * @template T
 */
function TimeoutOperation() { }
function TimeoutOperation_tsickle_Closure_declarations() {
    /** @type {string} */
    TimeoutOperation.prototype.type;
    /** @type {!IteratorResult<T>} */
    TimeoutOperation.prototype.value;
}
/**
 * @template TSource
 */
var TimeoutAsyncIterable = (function (_super) {
    __extends(TimeoutAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} dueTime
     */
    function TimeoutAsyncIterable(source, dueTime) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._dueTime = dueTime;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    TimeoutAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var it, _a, type, value;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        it = this._source[Symbol.asyncIterator]();
                        _b.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(Promise.race([
                                it.next().then(function (value) { return { type: VALUE_TYPE, value: value }; }),
                                _sleep_1.sleep(this._dueTime).then(function () { return { type: ERROR_TYPE }; })
                            ]))];
                    case 2:
                        _a = _b.sent(), type = _a.type, value = _a.value;
                        if (type === ERROR_TYPE) {
                            throw new TimeoutError();
                        }
                        if (value.done) {
                            return [3 /*break*/, 4];
                        }
                        return [4 /*yield*/, value.value];
                    case 3:
                        _b.sent();
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return TimeoutAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function TimeoutAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TimeoutAsyncIterable.prototype._source;
    /** @type {number} */
    TimeoutAsyncIterable.prototype._dueTime;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} dueTime
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function timeout(source, dueTime) {
    return new TimeoutAsyncIterable(source, dueTime);
}
exports.timeout = timeout;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3RpbWVvdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGtEQUx1QjtBQU12QixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsbUNBTmM7QUFPZCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsa0RBQWtELENBQUMsQ0FBQztBQUwxRztJQUFpQyxnQ0FBTTtJQUNyQztRQUFBLFlBT0UsaUJBTk8sU0FHUjtRQUlDLE1BTk0sQ0FBQyxjQUFjLENBQUMsS0FBSSxFQUFDLFlBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQU9wRCxLQU5JLENBQUMsT0FBTyxHQUFFLHNCQUF1QixDQUFDOztJQU94QyxDQU5DO0lBQ0gsbUJBQUM7QUFBRCxDQU5BLEFBTUMsQ0FOZ0MsS0FBTSxHQU10QztBQU5XLG9DQUFhO0FBY3pCLElBQU0scUJBTkQsQ0FBQSxVQUFXLEdBQUUsT0FBUSxDQUFDO0FBTzNCLElBQU0scUJBTkQsQ0FBQSxVQUFXLEdBQUUsT0FBUSxDQUFBO0FBTzFCOzs7R0FHRztBQUNILDhCQUE2QixDQUFDO0FBRzlCO0lBQ0EscUJBQXFCO0lBQ3JCLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDaEMsaUNBQWlDO0lBQ2pDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDakMsQ0FBQztBQU9EOztHQUVHO0FBckJIO0lBQTJDLHdDQUF3QjtJQXlCbkU7OztPQUdHO0lBeEJELDhCQUFZLE1BQThCLEVBQUMsT0FBZ0I7UUFBM0QsWUEwQkUsaUJBekJPLFNBNEJSO1FBRkMsS0F6QkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBMEJ0QixLQXpCSSxDQUFDLFFBQVEsR0FBRSxPQUFRLENBQUM7O0lBMEIxQixDQUFDO0lBQ0g7O09BRUc7SUExQk0sK0JBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNPLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDOzs7NkJBQ3pDLENBQUM7d0JBQ2lCLDZCQUFNLE9BQVEsQ0FBQyxJQUFJLENBQTRCO2dDQTRCcEUsRUEzQkUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBQSxLQUFLLElBQUssTUFBTyxDQUFBLEVBQUUsSUFBSyxFQUFDLFVBQVcsRUFBQyxLQUFNLE9BQUEsRUFBRSxDQUFDLENBQUEsQ0FBRSxDQUFDO2dDQTRCaEUsY0EzQkssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQU8sTUFBTyxDQUFBLEVBQUUsSUFBSyxFQUFDLFVBQVcsRUFBRSxDQUFDLENBQUEsQ0FBRSxDQUFDOzZCQUNsRSxDQUFDLEdBQUE7O3dCQUhHLEtBQWtCLFNBR3JCLEVBSEssSUFBSyxVQUFBLEVBQUMsS0FBTSxXQUFBO3dCQWdDbkIsRUFBRSxDQUFDLENBM0JDLElBQUksS0FBSSxVQUFXLENBQUMsQ0FBQSxDQUFFOzRCQTRCeEIsTUEzQkssSUFBSSxZQUFhLEVBQUUsQ0FBQzt3QkE0QjNCLENBM0JDO3dCQTZCRCxFQUFFLENBQUMsQ0EzQkMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7NEJBQUEsTUFBTyxrQkFBQTt3QkFBQSxDQUFFO3dCQTRCMUIscUJBM0JLLEtBQU0sQ0FBQyxLQUFLLEVBQUE7O3dCQTJCakIsU0EzQmlCLENBQUM7Ozs7OztLQUVyQjtJQUNILDJCQUFBO0FBQUEsQ0ExQkEsQUEwQkEsQ0ExQjJDLDhCQUFlLEdBMEIxRDtBQTZCQTtJQUNBLHNDQUFzQztJQUN0QyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3ZDLHFCQUFxQjtJQUNyQixvQkFBb0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ3hDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXZDSCxpQkF5Q0ksTUF4QzhCLEVBeUM5QixPQXhDZTtJQXlDakIsTUF4Q00sQ0FBQSxJQUFJLG9CQUFxQixDQUFVLE1BQU0sRUFBQyxPQUFRLENBQUMsQ0FBQztBQXlDNUQsQ0FBQztBQTVDRCwwQkE0Q0MiLCJmaWxlIjoidGltZW91dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuL19zbGVlcCc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLl9zbGVlcFwiKTtcbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG5jb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUaW1lb3V0RXJyb3IucHJvdG90eXBlKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnVGltZW91dCBoYXMgb2NjdXJyZWQnO1xuICB9XG59XG5cbmNvbnN0IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyBWQUxVRV9UWVBFID0gJ3ZhbHVlJztcbmNvbnN0IC8qKiBAdHlwZSB7c3RyaW5nfSAqLyBFUlJPUl9UWVBFID0gJ2Vycm9yJztcbi8qKlxuICogQHJlY29yZFxuICogQHRlbXBsYXRlIFRcbiAqL1xuZnVuY3Rpb24gVGltZW91dE9wZXJhdGlvbigpIHt9XG5cblxuZnVuY3Rpb24gVGltZW91dE9wZXJhdGlvbl90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtzdHJpbmd9ICovXG5UaW1lb3V0T3BlcmF0aW9uLnByb3RvdHlwZS50eXBlO1xuLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VD59ICovXG5UaW1lb3V0T3BlcmF0aW9uLnByb3RvdHlwZS52YWx1ZTtcbn1cblxuXG5pbnRlcmZhY2UgVGltZW91dE9wZXJhdGlvbjxUPiB7XG4gIHR5cGU6IHN0cmluZztcbiAgdmFsdWU/OiBJdGVyYXRvclJlc3VsdDxUPjtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgVGltZW91dEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9kdWVUaW1lOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGR1ZVRpbWVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBkdWVUaW1lOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9kdWVUaW1lID0gZHVlVGltZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlPFRpbWVvdXRPcGVyYXRpb248VFNvdXJjZT4+KFtcbiAgICAgICAgaXQubmV4dCgpLnRoZW4odmFsdWUgPT4geyByZXR1cm4geyB0eXBlOiBWQUxVRV9UWVBFLCB2YWx1ZSB9OyB9KSxcbiAgICAgICAgc2xlZXAodGhpcy5fZHVlVGltZSkudGhlbigoKSA9PiB7IHJldHVybiB7IHR5cGU6IEVSUk9SX1RZUEUgfTsgfSlcbiAgICAgIF0pO1xuXG4gICAgICBpZiAodHlwZSA9PT0gRVJST1JfVFlQRSkge1xuICAgICAgICB0aHJvdyBuZXcgVGltZW91dEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWx1ZS5kb25lKSB7IGJyZWFrOyB9XG4gICAgICB5aWVsZCB2YWx1ZS52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVGltZW91dEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5UaW1lb3V0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuVGltZW91dEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9kdWVUaW1lO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBkdWVUaW1lXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVvdXQ8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGR1ZVRpbWU6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0QXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGR1ZVRpbWUpO1xufSJdfQ==