goog.module('targets.es5.cls.asynciterable.includes'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/includes.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {T} searchElement
 * @param {number=} fromIndex
 * @return {!Promise<boolean>}
 */
function includes(source, searchElement, fromIndex) {
    if (fromIndex === void 0) { fromIndex = 0; }
    return __awaiter(this, void 0, void 0, function () {
        var i, source_1, source_1_1, item, e_1_1, e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    i = 0;
                    if (Math.abs(fromIndex)) {
                        fromIndex = 0;
                    }
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 7, 8, 13]);
                    source_1 = __asyncValues(source);
                    _b.label = 2;
                case 2: return [4 /*yield*/, source_1.next()];
                case 3:
                    if (!(source_1_1 = _b.sent(), !source_1_1.done)) return [3 /*break*/, 6];
                    return [4 /*yield*/, source_1_1.value];
                case 4:
                    item = _b.sent();
                    if (i++ > fromIndex && comparer_1.comparer(item, searchElement)) {
                        return [2 /*return*/, true];
                    }
                    _b.label = 5;
                case 5: return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 13];
                case 7:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 13];
                case 8:
                    _b.trys.push([8, , 11, 12]);
                    if (!(source_1_1 && !source_1_1.done && (_a = source_1.return))) return [3 /*break*/, 10];
                    return [4 /*yield*/, _a.call(source_1)];
                case 9:
                    _b.sent();
                    _b.label = 10;
                case 10: return [3 /*break*/, 12];
                case 11:
                    if (e_1) throw e_1.error;
                    return [7 /*endfinally*/];
                case 12: return [7 /*endfinally*/];
                case 13: return [2 /*return*/, false];
            }
        });
    });
}
exports.includes = includes;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2luY2x1ZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxpREFMaUI7QUFNakIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7Ozs7OztHQU1HO0FBWEgsa0JBYUksTUFad0IsRUFheEIsYUFaZ0IsRUFhaEIsU0FacUI7SUFZckIsMEJBQUEsRUFBQSxhQVpxQjs7Ozs7O29CQUNwQixDQUFFLEdBQUUsQ0FBRSxDQUFDO29CQWFWLEVBQUUsQ0FBQyxDQVpDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQSxDQUFFO3dCQUFBLFNBQVUsR0FBRSxDQUFFLENBQUM7b0JBQUEsQ0FBRTs7OztvQkFDckIsV0FBQSxjQUFBLE1BQU8sQ0FBQTs7Ozs7OztvQkFBZixJQUFLLFlBQUE7b0JBYWpCLEVBQUUsQ0FBQyxDQVpDLENBQUMsRUFBRSxHQUFFLFNBQVUsSUFBRyxtQkFBUyxDQUFDLElBQUksRUFBQyxhQUFjLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBQUEsTUFBTyxnQkFBQSxJQUFLLEVBQUM7b0JBQUEsQ0FBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBY3hFLHNCQVpNLEtBQU0sRUFBQzs7OztDQUNkO0FBVkQsNEJBVUMiLCJmaWxlIjoiaW5jbHVkZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBjb21wYXJlciB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge1R9IHNlYXJjaEVsZW1lbnRcbiAqIEBwYXJhbSB7bnVtYmVyPX0gZnJvbUluZGV4XG4gKiBAcmV0dXJuIHshUHJvbWlzZTxib29sZWFuPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGluY2x1ZGVzPFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBzZWFyY2hFbGVtZW50OiBULFxuICAgIGZyb21JbmRleDogbnVtYmVyID0gMCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwO1xuICBpZiAoTWF0aC5hYnMoZnJvbUluZGV4KSkgeyBmcm9tSW5kZXggPSAwOyB9XG4gIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VH0gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBpZiAoaSsrID4gZnJvbUluZGV4ICYmIGNvbXBhcmVyKGl0ZW0sIHNlYXJjaEVsZW1lbnQpKSB7IHJldHVybiB0cnVlOyB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuIl19