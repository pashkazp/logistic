goog.module('targets.es5.cls.asynciterable.memoize'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/memoize.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _refcountlist_1 = goog.require('targets.es5.cls.iterable._refcountlist');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.es5.cls.asynciterable.create');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.create");
/**
 * @template T
 */
var MemoizeAsyncBuffer = (function (_super) {
    __extends(MemoizeAsyncBuffer, _super);
    /**
     * @param {!AsyncIterator<T>} source
     * @param {!tsickle_forward_declare_2.IRefCountList<T>} buffer
     */
    function MemoizeAsyncBuffer(source, buffer) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = buffer;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<T>}
     */
    MemoizeAsyncBuffer.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i, hasValue, current, next, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 13, 14]);
                        _a.label = 2;
                    case 2:
                        if (!1) return [3 /*break*/, 12];
                        hasValue = false, current = ({});
                        if (!(i >= this._buffer.count)) return [3 /*break*/, 7];
                        if (!!this._stopped) return [3 /*break*/, 6];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, __await(this._source.next())];
                    case 4:
                        next = _a.sent();
                        hasValue = !next.done;
                        if (hasValue) {
                            current = next.value;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        this._error = e_1;
                        this._stopped = true;
                        return [3 /*break*/, 6];
                    case 6:
                        if (this._stopped) {
                            throw this._error;
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        hasValue = true;
                        _a.label = 8;
                    case 8:
                        if (!hasValue) return [3 /*break*/, 10];
                        return [4 /*yield*/, this._buffer.get(i)];
                    case 9:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        i++;
                        return [3 /*break*/, 2];
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        this._buffer.done();
                        return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return MemoizeAsyncBuffer;
}(asynciterable_1.AsyncIterableX));
function MemoizeAsyncBuffer_tsickle_Closure_declarations() {
    /** @type {!AsyncIterator<T>} */
    MemoizeAsyncBuffer.prototype._source;
    /** @type {!tsickle_forward_declare_2.IRefCountList<T>} */
    MemoizeAsyncBuffer.prototype._buffer;
    /** @type {?} */
    MemoizeAsyncBuffer.prototype._error;
    /** @type {boolean} */
    MemoizeAsyncBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {number=} readerCount
 * @param {function(!AsyncIterable<TSource>): !AsyncIterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(TSource|TResult)>}
 */
function memoize(source, readerCount, selector) {
    if (readerCount === void 0) { readerCount = -1; }
    if (readerCount === -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new _refcountlist_1.MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new _refcountlist_1.RefCountList(readerCount));
    }
    return create_1.create(function () { /** @type {function(!AsyncIterable<TSource>): !AsyncIterable<TResult>} */ return ((selector))(memoize(source, readerCount))[Symbol.asyncIterator](); });
}
exports.memoize = memoize;
//# sourceMappingURL=data:application/json;base64,