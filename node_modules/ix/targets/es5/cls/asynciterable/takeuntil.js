goog.module('targets.es5.cls.asynciterable.takeuntil'); exports = {}; var module = {id: 'targets/es5/cls/asynciterable/takeuntil.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
var TakeUntilAsyncIterable = (function (_super) {
    __extends(TakeUntilAsyncIterable, _super);
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {!Promise<?>} other
     */
    function TakeUntilAsyncIterable(source, other) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._other = other;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    TakeUntilAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var otherDone, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        otherDone = false;
                        this._other.then(function () { return otherDone = true; });
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 8, 9, 14]);
                        _a = __asyncValues(this._source);
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        if (otherDone) {
                            return [3 /*break*/, 7];
                        }
                        return [4 /*yield*/, item];
                    case 5:
                        _d.sent();
                        _d.label = 6;
                    case 6: return [3 /*break*/, 2];
                    case 7: return [3 /*break*/, 14];
                    case 8:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 14];
                    case 9:
                        _d.trys.push([9, , 12, 13]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 11];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 10:
                        _d.sent();
                        _d.label = 11;
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 13: return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return TakeUntilAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function TakeUntilAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TakeUntilAsyncIterable.prototype._source;
    /** @type {!Promise<?>} */
    TakeUntilAsyncIterable.prototype._other;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {!Promise<?>} other
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function takeUntil(source, other) {
    return new TakeUntilAsyncIterable(source, other);
}
exports.takeUntil = takeUntil;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rha2V1bnRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEg7SUFBNkMsMENBQXdCO0lBV3JFOzs7T0FHRztJQVZELGdDQUFZLE1BQThCLEVBQUMsS0FBb0I7UUFBL0QsWUFZRSxpQkFYTyxTQWNSO1FBRkMsS0FYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFZdEIsS0FYSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7O0lBWXRCLENBQUM7SUFDSDs7T0FFRztJQVpNLGlDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozt3QkFDSyxTQUFVLEdBQUUsS0FBTSxDQUFDO3dCQWN0QixJQWJJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFLLE9BQUEsU0FBVSxHQUFFLElBQUssRUFBakIsQ0FBaUIsQ0FBQyxDQUFDOzs7O3dCQUNuQixLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7Ozs7Ozt3QkFBckIsSUFBSyxZQUFBO3dCQWNqQixFQUFFLENBQUMsQ0FiQyxTQUFTLENBQUMsQ0FBQSxDQUFFOzRCQUFBLE1BQU8sa0JBQUE7d0JBQUEsQ0FBRTt3QkFjekIscUJBYkssSUFBSyxFQUFBOzt3QkFhVixTQWJVLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUVkO0lBQ0gsNkJBQUE7QUFBQSxDQWxCQSxBQWtCQSxDQWxCNkMsOEJBQWUsR0FrQjVEO0FBZUE7SUFDQSxzQ0FBc0M7SUFDdEMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN6QywwQkFBMEI7SUFDMUIsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUN4QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6QkgsbUJBMkJJLE1BMUI4QixFQTJCOUIsS0ExQm1CO0lBMkJyQixNQTFCTSxDQUFBLElBQUksc0JBQXVCLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBMkI1RCxDQTFCQztBQUpELDhCQUlDIiwiZmlsZSI6InRha2V1bnRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUYWtlVW50aWxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfb3RoZXI6IFByb21pc2U8YW55Pjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0geyFQcm9taXNlPD8+fSBvdGhlclxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIG90aGVyOiBQcm9taXNlPGFueT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9vdGhlciA9IG90aGVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIG90aGVyRG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuX290aGVyLnRoZW4oKCkgPT4gb3RoZXJEb25lID0gdHJ1ZSk7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKG90aGVyRG9uZSkgeyBicmVhazsgfVxuICAgICAgeWllbGQgaXRlbTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVGFrZVVudGlsQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblRha2VVbnRpbEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUgeyFQcm9taXNlPD8+fSAqL1xuVGFrZVVudGlsQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX290aGVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7IVByb21pc2U8Pz59IG90aGVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VVbnRpbDxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgb3RoZXI6IFByb21pc2U8YW55Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYWtlVW50aWxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgb3RoZXIpO1xufVxuIl19