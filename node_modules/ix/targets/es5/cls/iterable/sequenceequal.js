goog.module('targets.es5.cls.iterable.sequenceequal'); exports = {}; var module = {id: 'targets/es5/cls/iterable/sequenceequal.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!Iterable<T>} source
 * @param {!Iterable<T>} other
 * @param {function(T, T): boolean=} comparer
 * @return {boolean}
 */
function sequenceEqual(source, other, comparer) {
    if (comparer === void 0) { comparer = comparer_1.comparer; }
    var /** @type {!Iterator<T>} */ it1 = source[Symbol.iterator](), /** @type {!Iterator<T>} */ it2 = other[Symbol.iterator]();
    var /** @type {!IteratorResult<T>} */ next1, /** @type {!IteratorResult<T>} */ next2;
    while (!(next1 = it1.next()).done) {
        if (!(!(next2 = it2.next()).done && comparer(next1.value, next2.value))) {
            return false;
        }
    }
    return it2.next().done;
}
exports.sequenceEqual = sequenceEqual;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zZXF1ZW5jZWVxdWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxpREFMb0M7QUFNcEMsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7Ozs7OztHQU1HO0FBWEgsdUJBYUksTUFabUIsRUFhbkIsS0Faa0IsRUFhbEIsUUFaNEQ7SUFZNUQseUJBQUEsRUFBQSxXQVo0QyxtQkFBZ0I7SUFhOUQsSUFBTSwyQkFaRCxDQUFBLEdBQUksR0FBRSxNQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUEsMkJBQUMsQ0FBQSxHQUFJLEdBQUUsS0FBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBYXRFLElBQUksaUNBWkQsQ0FBQSxLQUF5QixFQUFBLGlDQUFDLENBQUEsS0FBeUIsQ0FBQztJQWF2RCxPQVpPLENBQUMsQ0FBQyxLQUFLLEdBQUUsR0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUU7UUFhbEMsRUFBRSxDQUFDLENBWkMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUUsR0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFHLFFBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLEtBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBRTtZQWF4RSxNQVpNLENBQUEsS0FBTSxDQUFDO1FBYWYsQ0FaQztJQWFILENBWkM7SUFjRCxNQVpNLENBQUEsR0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQztBQWF6QixDQVpDO0FBYkQsc0NBYUMiLCJmaWxlIjoic2VxdWVuY2VlcXVhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IGNvbXBhcmVyIGFzIGRlZmF1bHRDb21wYXJlciB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VD59IG90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQsIFQpOiBib29sZWFuPX0gY29tcGFyZXJcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXF1ZW5jZUVxdWFsPFQ+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gICAgb3RoZXI6IEl0ZXJhYmxlPFQ+LFxuICAgIGNvbXBhcmVyOiAoZmlyc3Q6IFQsIHNlY29uZDogVCkgPT4gYm9vbGVhbiA9IGRlZmF1bHRDb21wYXJlcik6IGJvb2xlYW4ge1xuICBjb25zdCAvKiogQHR5cGUgeyFJdGVyYXRvcjxUPn0gKi8gaXQxID0gc291cmNlW1N5bWJvbC5pdGVyYXRvcl0oKSwgLyoqIEB0eXBlIHshSXRlcmF0b3I8VD59ICovIGl0MiA9IG90aGVyW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgbGV0IC8qKiBAdHlwZSB7IUl0ZXJhdG9yUmVzdWx0PFQ+fSAqLyBuZXh0MTogSXRlcmF0b3JSZXN1bHQ8VD4sIC8qKiBAdHlwZSB7IUl0ZXJhdG9yUmVzdWx0PFQ+fSAqLyBuZXh0MjogSXRlcmF0b3JSZXN1bHQ8VD47XG4gIHdoaWxlICghKG5leHQxID0gaXQxLm5leHQoKSkuZG9uZSkge1xuICAgIGlmICghKCEobmV4dDIgPSBpdDIubmV4dCgpKS5kb25lICYmIGNvbXBhcmVyKG5leHQxLnZhbHVlLCBuZXh0Mi52YWx1ZSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGl0Mi5uZXh0KCkuZG9uZTtcbn1cbiJdfQ==