goog.module('targets.es5.cls.iterable.publish'); exports = {}; var module = {id: 'targets/es5/cls/iterable/publish.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var _refcountlist_1 = goog.require('targets.es5.cls.iterable._refcountlist');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.es5.cls.iterable.create');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.create");
/**
 * @template T
 */
var PublishedBuffer = (function (_super) {
    __extends(PublishedBuffer, _super);
    /**
     * @param {!Iterator<T>} source
     */
    function PublishedBuffer(source) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = new _refcountlist_1.RefCountList(0);
        return _this;
    }
    /**
     * @param {number} i
     * @return {!Iterable<T>}
     */
    PublishedBuffer.prototype._getIterable = function (i) {
        var hasValue, current, next;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, , 6, 7]);
                    _a.label = 1;
                case 1:
                    if (!1) return [3 /*break*/, 5];
                    hasValue = false, current = ({});
                    if (i >= this._buffer.count) {
                        if (!this._stopped) {
                            try {
                                next = this._source.next();
                                hasValue = !next.done;
                                if (hasValue) {
                                    current = next.value;
                                }
                            }
                            catch (e) {
                                this._error = e;
                                this._stopped = true;
                            }
                        }
                        if (this._stopped) {
                            if (this._error) {
                                throw this._error;
                            }
                            else {
                                return [3 /*break*/, 5];
                            }
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                    }
                    else {
                        hasValue = true;
                    }
                    if (!hasValue) return [3 /*break*/, 3];
                    return [4 /*yield*/, this._buffer.get(i)];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3: return [3 /*break*/, 5];
                case 4:
                    i++;
                    return [3 /*break*/, 1];
                case 5: return [3 /*break*/, 7];
                case 6:
                    this._buffer.done();
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    /**
     * @return {!Iterator<T>}
     */
    PublishedBuffer.prototype[Symbol.iterator] = function () {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.iterator]();
    };
    return PublishedBuffer;
}(iterable_1.IterableX));
function PublishedBuffer_tsickle_Closure_declarations() {
    /** @type {!tsickle_forward_declare_2.RefCountList<T>} */
    PublishedBuffer.prototype._buffer;
    /** @type {!Iterator<T>} */
    PublishedBuffer.prototype._source;
    /** @type {?} */
    PublishedBuffer.prototype._error;
    /** @type {boolean} */
    PublishedBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(!Iterable<TSource>): !Iterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.IterableX<(TSource|TResult)>}
 */
function publish(source, selector) {
    return selector ?
        create_1.create(function () { return selector(publish(source))[Symbol.iterator](); }) :
        new PublishedBuffer(source[Symbol.iterator]());
}
exports.publish = publish;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9wdWJsaXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCx3Q0FMa0I7QUFNbEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLGlEQU5xQjtBQU9yQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsb0RBQW9ELENBQUMsQ0FQNUQ7QUFRL0MsbUNBUGU7QUFRZixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUNyRzs7R0FFRztBQVRIO0lBQWdDLG1DQUFhO0lBZTdDOztPQUVHO0lBWEQseUJBQVksTUFBbUI7UUFBL0IsWUFhRSxpQkFaTyxTQWVSO1FBbEJNLGNBQVMsR0FBVyxLQUFNLENBQUE7UUFnQi9CLEtBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLEtBWkksQ0FBQyxPQUFPLEdBQUUsSUFBSSw0QkFBYSxDQUFJLENBQUMsQ0FBQyxDQUFDOztJQWF4QyxDQUFDO0lBQ0g7OztPQUdHO0lBZFEsc0NBQVksR0FBckIsVUFBc0IsQ0FBUzs7Ozs7Ozs7eUJBRXBCLENBQUM7b0JBQ0gsUUFBUyxHQUFFLEtBQU0sRUFBQyxPQUFRLEdBQUEsQ0FBTSxFQUFBLENBQUUsQ0FBQztvQkFpQnRDLEVBQUUsQ0FBQyxDQWhCQyxDQUFDLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFFO3dCQWlCNUIsRUFBRSxDQUFDLENBaEJDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUU7NEJBaUJuQixJQWhCRyxDQUFFO2dDQUNBLElBQUssR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO2dDQWlCL0IsUUFoQlEsR0FBRSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7Z0NBaUJ0QixFQUFFLENBQUMsQ0FoQkMsUUFBUSxDQUFDLENBQUEsQ0FBRTtvQ0FBQSxPQUFRLEdBQUUsSUFBSyxDQUFDLEtBQUssQ0FBQztnQ0FBQSxDQUFFOzRCQWlCekMsQ0FoQkM7NEJBQUEsS0FBQSxDQUFBLENBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQ0FpQlgsSUFoQkksQ0FBQyxNQUFNLEdBQUUsQ0FBRSxDQUFDO2dDQWlCaEIsSUFoQkksQ0FBQyxRQUFRLEdBQUUsSUFBSyxDQUFDOzRCQWlCdkIsQ0FoQkM7d0JBaUJILENBaEJDO3dCQWtCRCxFQUFFLENBQUMsQ0FoQkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUU7NEJBaUJsQixFQUFFLENBQUMsQ0FoQkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUU7Z0NBaUJoQixNQWhCSyxJQUFLLENBQUMsTUFBTSxDQUFDOzRCQWlCcEIsQ0FoQkM7NEJBQUEsSUFBSyxDQUFBLENBQUU7Z0NBaUJOLE1BaEJNLGtCQUFBOzRCQWlCUixDQWhCQzt3QkFpQkgsQ0FoQkM7d0JBa0JELEVBQUUsQ0FBQyxDQWhCQyxRQUFRLENBQUMsQ0FBQSxDQUFFOzRCQUFBLElBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUFBLENBQUU7b0JBaUIvQyxDQWhCQztvQkFBQSxJQUFLLENBQUEsQ0FBRTt3QkFpQk4sUUFoQlEsR0FBRSxJQUFLLENBQUM7b0JBaUJsQixDQWhCQzt5QkFFRyxRQUFRLEVBQVIsd0JBQVE7b0JBaUJWLHFCQWhCSyxJQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBQTs7b0JBZ0J6QixTQWhCeUIsQ0FBQzs7d0JBa0IxQix3QkFoQk07O29CQW1CUixDQWhCQyxFQUFFLENBQUM7Ozs7b0JBbUJOLElBaEJJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDOzs7OztLQWtCdkI7SUFDSDs7T0FFRztJQWpCRCwwQkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCO1FBbUJFLElBbEJJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBbUIzQixNQWxCTSxDQUFBLElBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQW1CbEUsQ0FsQkM7SUFDSCxzQkFBQTtBQUFBLENBMURBLEFBMERBLENBMURnQyxvQkFBVSxHQTBEMUM7QUFvQkE7SUFDQSx5REFBeUQ7SUFDekQsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDbEMsMkJBQTJCO0lBQzNCLGVBQWUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2xDLGdCQUFnQjtJQUNoQixlQUFlLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNqQyxzQkFBc0I7SUFDdEIsZUFBZSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDbkMsQ0FBQztBQU9EOzs7OztHQUtHO0FBbkNILGlCQXFDSSxNQXBDeUIsRUFxQ3pCLFFBcEMwRDtJQXFDNUQsTUFwQ00sQ0FBQSxRQUFTO1FBcUNiLGVBcENNLENBQUMsY0FBSyxPQUFBLFFBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBN0MsQ0FBNkMsQ0FBQztRQXFDMUQsSUFwQ0csZUFBZ0IsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQXFDNUQsQ0FwQ0M7QUFORCwwQkFNQyIsImZpbGUiOiJwdWJsaXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBSZWZDb3VudExpc3QgfSBmcm9tICcuL19yZWZjb3VudGxpc3QnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUuX3JlZmNvdW50bGlzdFwiKTtcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJy4vY3JlYXRlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLmNyZWF0ZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqL1xuY2xhc3MgUHVibGlzaGVkQnVmZmVyPFQ+IGV4dGVuZHMgSXRlcmFibGVYPFQ+IHtcbnByaXZhdGUgX2J1ZmZlcjogUmVmQ291bnRMaXN0PFQ+O1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYXRvcjxUPjtcbnByaXZhdGUgX2Vycm9yOiBhbnk7XG5wcml2YXRlIF9zdG9wcGVkOiBib29sZWFuID0gZmFsc2U7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhdG9yPFQ+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYXRvcjxUPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBSZWZDb3VudExpc3Q8VD4oMCk7XG4gIH1cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGlcbiAqIEByZXR1cm4geyFJdGVyYWJsZTxUPn1cbiAqL1xuXG5wcml2YXRlICpfZ2V0SXRlcmFibGUoaTogbnVtYmVyKTogSXRlcmFibGU8VD4ge1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlLCAvKiogQHR5cGUge1R9ICovIGN1cnJlbnQgPSAvKiogQHR5cGUge1R9ICovKCggPFQ+e30pKTtcbiAgICAgICAgaWYgKGkgPj0gdGhpcy5fYnVmZmVyLmNvdW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsZXQgLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VD59ICovIG5leHQgPSB0aGlzLl9zb3VyY2UubmV4dCgpO1xuICAgICAgICAgICAgICBoYXNWYWx1ZSA9ICFuZXh0LmRvbmU7XG4gICAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyBjdXJyZW50ID0gbmV4dC52YWx1ZTsgfVxuICAgICAgICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZTtcbiAgICAgICAgICAgICAgdGhpcy5fc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyB0aGlzLl9idWZmZXIucHVzaChjdXJyZW50KTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgIHlpZWxkIHRoaXMuX2J1ZmZlci5nZXQoaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuX2J1ZmZlci5kb25lKCk7XG4gICAgfVxuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYXRvcjxUPn1cbiAqL1xuW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8VD4ge1xuICAgIHRoaXMuX2J1ZmZlci5yZWFkZXJDb3VudCsrO1xuICAgIHJldHVybiB0aGlzLl9nZXRJdGVyYWJsZSh0aGlzLl9idWZmZXIuY291bnQpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBQdWJsaXNoZWRCdWZmZXJfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuUmVmQ291bnRMaXN0PFQ+fSAqL1xuUHVibGlzaGVkQnVmZmVyLnByb3RvdHlwZS5fYnVmZmVyO1xuLyoqIEB0eXBlIHshSXRlcmF0b3I8VD59ICovXG5QdWJsaXNoZWRCdWZmZXIucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUgez99ICovXG5QdWJsaXNoZWRCdWZmZXIucHJvdG90eXBlLl9lcnJvcjtcbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblB1Ymxpc2hlZEJ1ZmZlci5wcm90b3R5cGUuX3N0b3BwZWQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPik6IEl0ZXJhYmxlWDxUU291cmNlPjtcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICBzZWxlY3Rvcj86ICh2YWx1ZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRSZXN1bHQ+O1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbighSXRlcmFibGU8VFNvdXJjZT4pOiAhSXRlcmFibGU8VFJlc3VsdD49fSBzZWxlY3RvclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPChUU291cmNlfFRSZXN1bHQpPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRTb3VyY2UgfCBUUmVzdWx0PiB7XG4gIHJldHVybiBzZWxlY3RvciA/XG4gICAgY3JlYXRlKCgpID0+IHNlbGVjdG9yKHB1Ymxpc2goc291cmNlKSlbU3ltYm9sLml0ZXJhdG9yXSgpKSA6XG4gICAgbmV3IFB1Ymxpc2hlZEJ1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpKTtcbn1cbiJdfQ==