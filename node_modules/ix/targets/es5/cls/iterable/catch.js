goog.module('targets.es5.cls.iterable.catch'); exports = {}; var module = {id: 'targets/es5/cls/iterable/catch.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var returniterator_1 = goog.require('targets.es5.cls.internal.returniterator');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.returniterator");
/**
 * @template TSource
 */
var CatchIterable = (function (_super) {
    __extends(CatchIterable, _super);
    /**
     * @param {!Iterable<!Iterable<TSource>>} source
     */
    function CatchIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    CatchIterable.prototype[Symbol.iterator] = function () {
        var error, hasError, _a, _b, source, it, c, _c, done, value, e_1_1, e_1, _d;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    error = null, hasError = false;
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 8, 9, 10]);
                    _a = __values(this._source), _b = _a.next();
                    _e.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 7];
                    source = _b.value;
                    it = source[Symbol.iterator]();
                    error = null;
                    hasError = false;
                    _e.label = 3;
                case 3:
                    if (!1) return [3 /*break*/, 5];
                    c = ({});
                    try {
                        _c = it.next(), done = _c.done, value = _c.value;
                        if (done) {
                            returniterator_1.returnIterator(it);
                            return [3 /*break*/, 5];
                        }
                        c = value;
                    }
                    catch (e) {
                        error = e;
                        hasError = true;
                        returniterator_1.returnIterator(it);
                        return [3 /*break*/, 5];
                    }
                    return [4 /*yield*/, c];
                case 4:
                    _e.sent();
                    return [3 /*break*/, 3];
                case 5:
                    if (!hasError) {
                        return [3 /*break*/, 7];
                    }
                    _e.label = 6;
                case 6:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_1_1 = _e.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 10:
                    if (hasError) {
                        throw error;
                    }
                    return [2 /*return*/];
            }
        });
    };
    return CatchIterable;
}(iterable_1.IterableX));
function CatchIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!Iterable<TSource>>} */
    CatchIterable.prototype._source;
}
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {!Iterable<!Iterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function _catchAll(source) {
    return new CatchIterable(source);
}
exports._catchAll = _catchAll;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {...!Iterable<TSource>} args
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function _catch(source) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new CatchIterable(__spread([source], args));
}
exports._catch = _catch;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {...!Iterable<TSource>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function _catchStatic() {
    var source = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        source[_i] = arguments[_i];
    }
    return new CatchIterable(source);
}
exports._catchStatic = _catchStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9jYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsd0NBTGtCO0FBTWxCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQU5yRDtBQU94Qyw2REFOdUI7QUFPdkIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDN0c7O0dBRUc7QUFSSDtJQUFvQyxpQ0FBbUI7SUFXdkQ7O09BRUc7SUFWRCx1QkFBWSxNQUFtQztRQUEvQyxZQVlFLGlCQVhPLFNBYVI7UUFEQyxLQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQzs7SUFZeEIsQ0FBQztJQUNIOztPQUVHO0lBWkEsd0JBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBQ0ssS0FBTSxHQUFFLElBQUssRUFBQyxRQUFTLEdBQUUsS0FBTSxDQUFDOzs7O29CQUVqQixLQUFBLFNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs7OztvQkFBdkIsTUFBTztvQkFDUixFQUFHLEdBQUUsTUFBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO29CQWVyQyxLQWJLLEdBQUUsSUFBSyxDQUFDO29CQWNiLFFBYlEsR0FBRSxLQUFNLENBQUM7Ozt5QkFFVixDQUFDO29CQUNILENBQUUsR0FBQSxDQUFZLEVBQUEsQ0FBRSxDQUFDO29CQWVwQixJQWJHLENBQUU7d0JBQ0UsS0FBa0IsRUFBRyxDQUFDLElBQUksRUFBRSxFQUExQixJQUFLLFVBQUEsRUFBQyxLQUFNLFdBQUEsQ0FBZTt3QkFjbEMsRUFBRSxDQUFDLENBYkMsSUFBSSxDQUFDLENBQUEsQ0FBRTs0QkFjVCwrQkFiYyxDQUFDLEVBQUUsQ0FBQyxDQUFDOzRCQWNuQixNQWJNLGtCQUFBO3dCQWNSLENBYkM7d0JBY0QsQ0FiQyxHQUFFLEtBQU0sQ0FBQztvQkFjWixDQWJDO29CQUFBLEtBQUEsQ0FBQSxDQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBY1gsS0FiSyxHQUFFLENBQUUsQ0FBQzt3QkFjVixRQWJRLEdBQUUsSUFBSyxDQUFDO3dCQWNoQiwrQkFiYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQWNuQixNQWJNLGtCQUFBO29CQWNSLENBYkM7b0JBZUQscUJBYkssQ0FBRSxFQUFBOztvQkFhUCxTQWJPLENBQUM7OztvQkFnQlYsRUFBRSxDQUFDLENBYkMsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFFO3dCQUFBLE1BQU8sa0JBQUE7b0JBQUEsQ0FBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBZ0IzQixFQUFFLENBQUMsQ0FiQyxRQUFRLENBQUMsQ0FBQSxDQUFFO3dCQUFBLE1BQU0sS0FBTSxDQUFDO29CQUFBLENBQUU7Ozs7S0FDL0I7SUFDSCxvQkFBQTtBQUFBLENBMUNBLEFBMENBLENBMUNvQyxvQkFBVSxHQTBDOUM7QUFlQTtJQUNBLDRDQUE0QztJQUM1QyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUNoQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFsQkgsbUJBQW1DLE1BQW1DO0lBb0JwRSxNQW5CTSxDQUFBLElBQUksYUFBYyxDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBb0I1QyxDQUFDO0FBckJELDhCQXFCQztBQUNEOzs7Ozs7R0FNRztBQW5CSCxnQkFBZ0MsTUFBeUI7SUFBQyxjQUE2QjtTQUE3QixVQUE2QixFQUE3QixxQkFBNkIsRUFBN0IsSUFBNkI7UUFBN0IsNkJBQTZCOztJQXFCckYsTUFwQk0sQ0FBQSxJQUFJLGFBQWMsV0FBVyxNQUFNLEdBQUssSUFBSSxFQUFFLENBQUM7QUFxQnZELENBQUM7QUF0QkQsd0JBc0JDO0FBQ0Q7Ozs7O0dBS0c7QUFuQkg7SUFBc0MsZ0JBQThCO1NBQTlCLFVBQThCLEVBQTlCLHFCQUE4QixFQUE5QixJQUE4QjtRQUE5QiwyQkFBOEI7O0lBcUJsRSxNQXBCTSxDQUFBLElBQUksYUFBYyxDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBcUI1QyxDQXBCQztBQUZELG9DQUVDIiwiZmlsZSI6ImNhdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyByZXR1cm5JdGVyYXRvciB9IGZyb20gJy4uL2ludGVybmFsL3JldHVybml0ZXJhdG9yJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLnJldHVybml0ZXJhdG9yXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBDYXRjaEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8SXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTwhSXRlcmFibGU8VFNvdXJjZT4+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgez99ICovIGVycm9yID0gbnVsbCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNFcnJvciA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovIHNvdXJjZSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7IUl0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG5cbiAgICAgIGVycm9yID0gbnVsbDtcbiAgICAgIGhhc0Vycm9yID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGMgPSAvKiogQHR5cGUge1RTb3VyY2V9ICovKCggPFRTb3VyY2U+e30pKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGl0Lm5leHQoKTtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuSXRlcmF0b3IoaXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGMgPSB2YWx1ZTtcbiAgICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm5JdGVyYXRvcihpdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB5aWVsZCBjO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc0Vycm9yKSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgaWYgKGhhc0Vycm9yKSB7IHRocm93IGVycm9yOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQ2F0Y2hJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8IUl0ZXJhYmxlPFRTb3VyY2U+Pn0gKi9cbkNhdGNoSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNlcXVlbmNlIGJ5IGNvbmNhdGVuYXRpbmcgc291cmNlIHNlcXVlbmNlcyB1bnRpbCBhIHNvdXJjZSBzZXF1ZW5jZSBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPCFJdGVyYWJsZTxUU291cmNlPj59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoQWxsPFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8SXRlcmFibGU8VFNvdXJjZT4+KTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBDYXRjaEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzZXF1ZW5jZSBieSBjb25jYXRlbmF0aW5nIHNvdXJjZSBzZXF1ZW5jZXMgdW50aWwgYSBzb3VyY2Ugc2VxdWVuY2UgY29tcGxldGVzIHN1Y2Nlc3NmdWxseS5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0gey4uLiFJdGVyYWJsZTxUU291cmNlPn0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoPFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIC4uLmFyZ3M6IEl0ZXJhYmxlPFRTb3VyY2U+W10pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENhdGNoSXRlcmFibGU8VFNvdXJjZT4oW3NvdXJjZSwgLi4uYXJnc10pO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc2VxdWVuY2UgYnkgY29uY2F0ZW5hdGluZyBzb3VyY2Ugc2VxdWVuY2VzIHVudGlsIGEgc291cmNlIHNlcXVlbmNlIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHsuLi4hSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoU3RhdGljPFRTb3VyY2U+KC4uLnNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT5bXSk6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ2F0Y2hJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19