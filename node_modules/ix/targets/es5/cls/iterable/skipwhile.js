goog.module('targets.es5.cls.iterable.skipwhile'); exports = {}; var module = {id: 'targets/es5/cls/iterable/skipwhile.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var SkipWhileIterable = (function (_super) {
    __extends(SkipWhileIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource, number): boolean} predicate
     */
    function SkipWhileIterable(source, predicate) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._predicate = predicate;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    SkipWhileIterable.prototype[Symbol.iterator] = function () {
        var yielding, i, _a, _b, element, e_1_1, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    yielding = false, i = 0;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = __values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    element = _b.value;
                    if (!yielding && !this._predicate(element, i++)) {
                        yielding = true;
                    }
                    if (!yielding) return [3 /*break*/, 4];
                    return [4 /*yield*/, element];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return SkipWhileIterable;
}(iterable_1.IterableX));
function SkipWhileIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    SkipWhileIterable.prototype._source;
    /** @type {function(TSource, number): boolean} */
    SkipWhileIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource, number): boolean} predicate
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function skipWhile(source, predicate) {
    return new SkipWhileIterable(source, predicate);
}
exports.skipWhile = skipWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9za2lwd2hpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBIO0lBQXdDLHFDQUFtQjtJQVczRDs7O09BR0c7SUFWRCwyQkFBWSxNQUF5QixFQUFDLFNBQXNEO1FBQTVGLFlBWUUsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLEtBWEksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDOztJQVk5QixDQUFDO0lBQ0g7O09BRUc7SUFaQSw0QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDSyxRQUFTLEdBQUUsS0FBTSxFQUFDLENBQUUsR0FBRSxDQUFFLENBQUM7Ozs7b0JBQ1QsS0FBQSxTQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXhCLE9BQVE7b0JBY2QsRUFBRSxDQUFDLENBYkMsQ0FBQyxRQUFRLElBQUcsQ0FBRSxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBQyxDQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTt3QkFBQSxRQUFTLEdBQUUsSUFBSyxDQUFDO29CQUFBLENBQUU7eUJBQ2pFLFFBQVEsRUFBUix3QkFBUTtvQkFBRyxxQkFBTSxPQUFRLEVBQUE7O29CQUFkLFNBQWMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUVqQztJQUNILHdCQUFBO0FBQUEsQ0FqQkEsQUFpQkEsQ0FqQndDLG9CQUFVLEdBaUJsRDtBQWVBO0lBQ0EsaUNBQWlDO0lBQ2pDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDcEMsaURBQWlEO0lBQ2pELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDdkMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILG1CQTJCSSxNQTFCeUIsRUEyQnpCLFNBMUJxRDtJQTJCdkQsTUExQk0sQ0FBQSxJQUFJLGlCQUFrQixDQUFVLE1BQU0sRUFBQyxTQUFVLENBQUMsQ0FBQztBQTJCM0QsQ0ExQkM7QUFKRCw4QkFJQyIsImZpbGUiOiJza2lwd2hpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgU2tpcFdoaWxlSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3ByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBwcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIHlpZWxkaW5nID0gZmFsc2UsIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGVsZW1lbnQgb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoIXlpZWxkaW5nICYmICF0aGlzLl9wcmVkaWNhdGUoZWxlbWVudCwgaSsrKSkgeyB5aWVsZGluZyA9IHRydWU7IH1cbiAgICAgIGlmICh5aWVsZGluZykgeyB5aWVsZCBlbGVtZW50OyB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNraXBXaGlsZUl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cblNraXBXaGlsZUl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBib29sZWFufSAqL1xuU2tpcFdoaWxlSXRlcmFibGUucHJvdG90eXBlLl9wcmVkaWNhdGU7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBza2lwV2hpbGU8VFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBwcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgU2tpcFdoaWxlSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBwcmVkaWNhdGUpO1xufVxuIl19