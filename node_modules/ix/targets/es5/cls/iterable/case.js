goog.module('targets.es5.cls.iterable.case'); exports = {}; var module = {id: 'targets/es5/cls/iterable/case.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var defer_1 = goog.require('targets.es5.cls.iterable.defer');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.defer");
var empty_1 = goog.require('targets.es5.cls.iterable.empty');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.empty");
/**
 * Returns a sequence from a dictionary based on the result of evaluating a selector function.
 * \@example
 * const map = new Map([
 *   [1, [1, 2, 3]],
 *   [2, [2, 3, 4]],
 *   [3, [4, 5, 6]]
 * ]);
 * const result = case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * const result = Ix.Iterable.case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * for (const item of result) {
 *   console.log(result);
 * }
 * for the computed selector value.  If not specified, defaults to an empty sequence.
 * @template TSource, TResult
 * @param {function(): TSource} selector
 * @param {!Map<TSource, !Iterable<TResult>>} sources
 * @param {!Iterable<TResult>=} defaultSource
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function _case(selector, sources, defaultSource) {
    if (defaultSource === void 0) { defaultSource = empty_1.empty(); }
    return defer_1.defer(function () {
        var /** @type {TSource} */ key = selector();
        return sources.has(key) ? ((sources.get(key))) : defaultSource;
    });
}
exports._case = _case;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9jYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFHSCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsaUNBTmM7QUFPZCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsNENBQTRDLENBQUMsQ0FQbkU7QUFRaEMsaUNBUGM7QUFRZCxJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsNENBQTRDLENBQUMsQ0FBQztBQUNwRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMkJHO0FBUEgsZUFTSSxRQVJ1QixFQVN2QixPQVJ3QyxFQVN4QyxhQVJtRDtJQVFuRCw4QkFBQSxFQUFBLGdCQVJrQyxhQUFNLEVBQVc7SUFTckQsTUFSTSxDQUFBLGFBQU0sQ0FBVTtRQVNwQixJQUFNLHNCQVJELENBQUEsR0FBSSxHQUFFLFFBQVMsRUFBRSxDQUFDO1FBU3ZCLE1BUk0sQ0FBQSxPQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFBLENBQUEsQ0FBRSxPQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQSxDQUFBLENBQUUsR0FBRSxhQUFjLENBQUM7SUFTOUQsQ0FSQyxDQUFDLENBQUM7QUFTTCxDQVJDO0FBUkQsc0JBUUMiLCJmaWxlIjoiY2FzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgZGVmZXIgfSBmcm9tICcuL2RlZmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLmRlZmVyXCIpO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL2VtcHR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLmVtcHR5XCIpO1xuLyoqXG4gKiBSZXR1cm5zIGEgc2VxdWVuY2UgZnJvbSBhIGRpY3Rpb25hcnkgYmFzZWQgb24gdGhlIHJlc3VsdCBvZiBldmFsdWF0aW5nIGEgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKiBcXEBleGFtcGxlIFxuICogY29uc3QgbWFwID0gbmV3IE1hcChbXG4gKiAgIFsxLCBbMSwgMiwgM11dLFxuICogICBbMiwgWzIsIDMsIDRdXSxcbiAqICAgWzMsIFs0LCA1LCA2XV1cbiAqIF0pO1xuICogY29uc3QgcmVzdWx0ID0gY2FzZShcbiAqICAgKCkgPT4gMixcbiAqICAgbWFwLFxuICogICBbNSwgNiwgN11cbiAqICk7XG4gKiBjb25zdCByZXN1bHQgPSBJeC5JdGVyYWJsZS5jYXNlKFxuICogICAoKSA9PiAyLFxuICogICBtYXAsXG4gKiAgIFs1LCA2LCA3XVxuICogKTtcbiAqIGZvciAoY29uc3QgaXRlbSBvZiByZXN1bHQpIHtcbiAqICAgY29uc29sZS5sb2cocmVzdWx0KTtcbiAqIH1cbiAqIGZvciB0aGUgY29tcHV0ZWQgc2VsZWN0b3IgdmFsdWUuICBJZiBub3Qgc3BlY2lmaWVkLCBkZWZhdWx0cyB0byBhbiBlbXB0eSBzZXF1ZW5jZS5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IFRTb3VyY2V9IHNlbGVjdG9yXG4gKiBAcGFyYW0geyFNYXA8VFNvdXJjZSwgIUl0ZXJhYmxlPFRSZXN1bHQ+Pn0gc291cmNlc1xuICogQHBhcmFtIHshSXRlcmFibGU8VFJlc3VsdD49fSBkZWZhdWx0U291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2FzZTxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzZWxlY3RvcjogKCkgPT4gVFNvdXJjZSxcbiAgICBzb3VyY2VzOiBNYXA8VFNvdXJjZSwgSXRlcmFibGU8VFJlc3VsdD4+LFxuICAgIGRlZmF1bHRTb3VyY2U6IEl0ZXJhYmxlPFRSZXN1bHQ+ID0gZW1wdHk8VFJlc3VsdD4oKSk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBkZWZlcjxUUmVzdWx0PigoKSA9PiB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBrZXkgPSBzZWxlY3RvcigpO1xuICAgIHJldHVybiBzb3VyY2VzLmhhcyhrZXkpID8gLyoqIEB0eXBlIHshSXRlcmFibGU8VFJlc3VsdD59ICovKCggc291cmNlcy5nZXQoa2V5KSkpIDogZGVmYXVsdFNvdXJjZTtcbiAgfSk7XG59XG4iXX0=