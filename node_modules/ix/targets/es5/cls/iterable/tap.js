goog.module('targets.es5.cls.iterable.tap'); exports = {}; var module = {id: 'targets/es5/cls/iterable/tap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
/**
 * @template TSource
 */
var TapIterable = (function (_super) {
    __extends(TapIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {(!NextObserver<TSource>|!ErrorObserver<TSource>|!CompletionObserver<TSource>)} observer
     */
    function TapIterable(source, observer) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._observer = observer;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    TapIterable.prototype[Symbol.iterator] = function () {
        var it, next;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    it = this._source[Symbol.iterator]();
                    _a.label = 1;
                case 1:
                    if (!1) return [3 /*break*/, 3];
                    next = void 0;
                    try {
                        next = it.next();
                        if (next.done) {
                            return [3 /*break*/, 3];
                        }
                    }
                    catch (e) {
                        if (this._observer.error) {
                            this._observer.error(e);
                        }
                        throw e;
                    }
                    if (this._observer.next) {
                        this._observer.next(next.value);
                    }
                    return [4 /*yield*/, next.value];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 1];
                case 3:
                    if (this._observer.complete) {
                        this._observer.complete();
                    }
                    return [2 /*return*/];
            }
        });
    };
    return TapIterable;
}(iterable_1.IterableX));
function TapIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    TapIterable.prototype._source;
    /** @type {(!NextObserver<TSource>|!ErrorObserver<TSource>|!CompletionObserver<TSource>)} */
    TapIterable.prototype._observer;
}
/**
 * Lazily invokes observer methods for each value in the sequence, and upon successful or exceptional termination.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {(!NextObserver<TSource>|!ErrorObserver<TSource>|!CompletionObserver<TSource>)} observer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function tap(source, observer) {
    return new TapIterable(source, observer);
}
exports.tap = tap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS90YXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFReEMsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsc0NBQXNDO0FBQzVGOztHQUVHO0FBVEg7SUFBa0MsK0JBQW1CO0lBYXJEOzs7T0FHRztJQVpELHFCQUFZLE1BQXlCLEVBQUMsUUFBbUM7UUFBekUsWUFjRSxpQkFiTyxTQWdCUjtRQUZDLEtBYkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBY3RCLEtBYkksQ0FBQyxTQUFTLEdBQUUsUUFBUyxDQUFDOztJQWM1QixDQUFDO0lBQ0g7O09BRUc7SUFkQSxzQkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDTyxFQUFHLEdBQUUsSUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQzs7O3lCQUNwQyxDQUFDO29CQUNILElBQUssU0FBQSxDQUFDO29CQWdCVCxJQWZHLENBQUU7d0JBZ0JILElBZkksR0FBRSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBZ0JqQixFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTs0QkFBQSxNQUFPLGtCQUFBO3dCQUFBLENBQUU7b0JBZ0IzQixDQWZDO29CQUFBLEtBQUEsQ0FBQSxDQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBZ0JYLEVBQUUsQ0FBQyxDQWZDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBRTs0QkFBQSxJQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFBQSxDQUFFO3dCQWdCdEQsTUFmSyxDQUFFLENBQUM7b0JBZ0JWLENBZkM7b0JBaUJELEVBQUUsQ0FBQyxDQWZDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTt3QkFBQSxJQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQUEsQ0FBRTtvQkFnQjdELHFCQWZLLElBQUssQ0FBQyxLQUFLLEVBQUE7O29CQWVoQixTQWZnQixDQUFDOzs7b0JBa0JuQixFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUU7d0JBQUEsSUFBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFBQSxDQUFFOzs7O0tBQzVEO0lBQ0gsa0JBQUE7QUFBQSxDQTVCQSxBQTRCQSxDQTVCa0Msb0JBQVUsR0E0QjVDO0FBaUJBO0lBQ0EsaUNBQWlDO0lBQ2pDLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQzlCLDRGQUE0RjtJQUM1RixXQUFXLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUNoQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBdEJILGFBQTZCLE1BQXlCLEVBQUMsUUFBbUM7SUF3QnhGLE1BdkJNLENBQUEsSUFBSSxXQUFZLENBQVUsTUFBTSxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBd0JwRCxDQXZCQztBQUZELGtCQUVDIiwiZmlsZSI6InRhcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgUGFydGlhbE9ic2VydmVyIH0gZnJvbSAnLi4vb2JzZXJ2ZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMub2JzZXJ2ZXJcIik7XG5nb29nLnJlcXVpcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMub2JzZXJ2ZXJcIik7IC8vIGZvcmNlIHR5cGUtb25seSBtb2R1bGUgdG8gYmUgbG9hZGVkXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFRhcEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9vYnNlcnZlcjogUGFydGlhbE9ic2VydmVyPFRTb3VyY2U+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0geyghTmV4dE9ic2VydmVyPFRTb3VyY2U+fCFFcnJvck9ic2VydmVyPFRTb3VyY2U+fCFDb21wbGV0aW9uT2JzZXJ2ZXI8VFNvdXJjZT4pfSBvYnNlcnZlclxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBvYnNlcnZlcjogUGFydGlhbE9ic2VydmVyPFRTb3VyY2U+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fb2JzZXJ2ZXIgPSBvYnNlcnZlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUl0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGxldCAvKiogQHR5cGUgez99ICovIG5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBuZXh0ID0gaXQubmV4dCgpO1xuICAgICAgICBpZiAobmV4dC5kb25lKSB7IGJyZWFrOyB9XG4gICAgICB9IGNhdGNoICggLyoqIEB0eXBlIHs/fSAqL2UpIHtcbiAgICAgICAgaWYgKHRoaXMuX29ic2VydmVyLmVycm9yKSB7IHRoaXMuX29ic2VydmVyLmVycm9yKGUpOyB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9vYnNlcnZlci5uZXh0KSB7IHRoaXMuX29ic2VydmVyLm5leHQobmV4dC52YWx1ZSk7IH1cbiAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29ic2VydmVyLmNvbXBsZXRlKSB7IHRoaXMuX29ic2VydmVyLmNvbXBsZXRlKCk7IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYXBJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5UYXBJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7KCFOZXh0T2JzZXJ2ZXI8VFNvdXJjZT58IUVycm9yT2JzZXJ2ZXI8VFNvdXJjZT58IUNvbXBsZXRpb25PYnNlcnZlcjxUU291cmNlPil9ICovXG5UYXBJdGVyYWJsZS5wcm90b3R5cGUuX29ic2VydmVyO1xufVxuXG4vKipcbiAqIExhemlseSBpbnZva2VzIG9ic2VydmVyIG1ldGhvZHMgZm9yIGVhY2ggdmFsdWUgaW4gdGhlIHNlcXVlbmNlLCBhbmQgdXBvbiBzdWNjZXNzZnVsIG9yIGV4Y2VwdGlvbmFsIHRlcm1pbmF0aW9uLlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7KCFOZXh0T2JzZXJ2ZXI8VFNvdXJjZT58IUVycm9yT2JzZXJ2ZXI8VFNvdXJjZT58IUNvbXBsZXRpb25PYnNlcnZlcjxUU291cmNlPil9IG9ic2VydmVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YXA8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgb2JzZXJ2ZXI6IFBhcnRpYWxPYnNlcnZlcjxUU291cmNlPik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGFwSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBvYnNlcnZlcik7XG59XG4iXX0=