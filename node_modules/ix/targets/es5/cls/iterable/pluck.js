goog.module('targets.es5.cls.iterable.pluck'); exports = {}; var module = {id: 'targets/es5/cls/iterable/pluck.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var map_1 = goog.require('targets.es5.cls.iterable.map');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.map");
/**
 * @param {!Array<string>} props
 * @param {number} length
 * @return {function(?): ?}
 */
function plucker(props, length) {
    var /** @type {function(?): ?} */ mapper = function (x) {
        var /** @type {?} */ currentProp = x;
        for (var /** @type {number} */ i = 0; i < length; i++) {
            var /** @type {?} */ p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {...string} args
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function pluck(source) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return map_1.map(source, /** @type {function(TSource): TResult} */ ((plucker(args, args.length))));
}
exports.pluck = pluck;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9wbHVjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBR0gsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLDZCQU5ZO0FBT1osSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDbEc7Ozs7R0FJRztBQVZILGlCQUFpQixLQUFlLEVBQUMsTUFBZTtJQVk5QyxJQUFNLDZCQVhELENBQUEsTUFBTyxHQUFFLFVBQUUsQ0FBTTtRQVlwQixJQUFJLGdCQVhELENBQUEsV0FBWSxHQUFFLENBQUUsQ0FBQztRQVlwQixHQUFHLENBQUMsQ0FYQyxJQUFBLHFCQUFHLENBQUEsQ0FBRSxHQUFFLENBQUUsRUFBQyxDQUFFLEdBQUUsTUFBTyxFQUFDLENBQUUsRUFBRSxFQUFDLENBQUU7WUFZaEMsSUFBTSxnQkFYRCxDQUFBLENBQUUsR0FBRSxXQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFZaEMsRUFBRSxDQUFDLENBWEMsT0FBTSxDQUFFLEtBQUksV0FBWSxDQUFDLENBQUEsQ0FBRTtnQkFZN0IsV0FYVyxHQUFFLENBQUUsQ0FBQztZQVlsQixDQVhDO1lBQUEsSUFBSyxDQUFBLENBQUU7Z0JBWU4sTUFYTSxDQUFBLFNBQVUsQ0FBQztZQVluQixDQVhDO1FBWUgsQ0FYQztRQVlELE1BWE0sQ0FBQSxXQUFZLENBQUM7SUFZckIsQ0FYQyxDQUFDO0lBYUYsTUFYTSxDQUFBLE1BQU8sQ0FBQztBQVloQixDQUFDO0FBQ0Q7Ozs7O0dBS0c7QUFmSCxlQWlCRSxNQWhCeUI7SUFpQnpCLGNBaEJpQjtTQWdCakIsVUFoQmlCLEVBZ0JqQixxQkFoQmlCLEVBZ0JqQixJQWhCaUI7UUFnQmpCLDZCQWhCaUI7O0lBaUJqQixNQWhCTSxDQUFBLFNBQUksQ0FBbUIsTUFBTSxFQUFBLHlDQUFBLENBQUEsQ0FBQSxDQUFDLE9BQVEsQ0FBQyxJQUFJLEVBQUMsSUFBSyxDQUFDLE1BQU0sQ0FBSSxDQUEyQixDQUFRLENBQUMsQ0FBQztBQWlCekcsQ0FoQkM7QUFKRCxzQkFJQyIsImZpbGUiOiJwbHVjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9tYXAnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUubWFwXCIpO1xuLyoqXG4gKiBAcGFyYW0geyFBcnJheTxzdHJpbmc+fSBwcm9wc1xuICogQHBhcmFtIHtudW1iZXJ9IGxlbmd0aFxuICogQHJldHVybiB7ZnVuY3Rpb24oPyk6ID99XG4gKi9cbmZ1bmN0aW9uIHBsdWNrZXIocHJvcHM6IHN0cmluZ1tdLCBsZW5ndGg6IG51bWJlcik6ICh4OiBhbnkpID0+IGFueSB7XG4gIGNvbnN0IC8qKiBAdHlwZSB7ZnVuY3Rpb24oPyk6ID99ICovIG1hcHBlciA9ICh4OiBhbnkpID0+IHtcbiAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBjdXJyZW50UHJvcCA9IHg7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7P30gKi8gcCA9IGN1cnJlbnRQcm9wW3Byb3BzW2ldXTtcbiAgICAgIGlmICh0eXBlb2YgcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY3VycmVudFByb3AgPSBwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGN1cnJlbnRQcm9wO1xuICB9O1xuXG4gIHJldHVybiBtYXBwZXI7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0gey4uLnN0cmluZ30gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcGx1Y2s8VFNvdXJjZSwgVFJlc3VsdD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gIC4uLmFyZ3M6IHN0cmluZ1tdKTogSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG1hcDxUU291cmNlLCBUUmVzdWx0Pihzb3VyY2UsIC8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRSZXN1bHR9ICovKCggLyoqIEB0eXBlIHs/fSAqLygoIHBsdWNrZXIoYXJncywgYXJncy5sZW5ndGgpIGFzIGFueSkpIGFzICh2YWx1ZTogVFNvdXJjZSkgPT4gVFJlc3VsdCkpKTtcbn1cbiJdfQ==