goog.module('targets.es5.cls.iterable.catchwith'); exports = {}; var module = {id: 'targets/es5/cls/iterable/catchwith.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var returniterator_1 = goog.require('targets.es5.cls.internal.returniterator');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.returniterator");
/**
 * @template TSource
 */
var CatchWithIterable = (function (_super) {
    __extends(CatchWithIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(?): !Iterable<TSource>} handler
     */
    function CatchWithIterable(source, handler) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._handler = handler;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    CatchWithIterable.prototype[Symbol.iterator] = function () {
        var err, hasError, it, c, _a, _b, item, e_1_1, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    hasError = false, it = this._source[Symbol.iterator]();
                    _d.label = 1;
                case 1:
                    if (!1) return [3 /*break*/, 3];
                    c = ({});
                    try {
                        c = it.next();
                        if (c.done) {
                            returniterator_1.returnIterator(it);
                            return [3 /*break*/, 3];
                        }
                    }
                    catch (e) {
                        err = this._handler(e);
                        hasError = true;
                        returniterator_1.returnIterator(it);
                        return [3 /*break*/, 3];
                    }
                    return [4 /*yield*/, c.value];
                case 2:
                    _d.sent();
                    return [3 /*break*/, 1];
                case 3:
                    if (!hasError) return [3 /*break*/, 11];
                    _d.label = 4;
                case 4:
                    _d.trys.push([4, 9, 10, 11]);
                    _a = __values(/** @type {!Iterable<TSource>} */ ((err))), _b = _a.next();
                    _d.label = 5;
                case 5:
                    if (!!_b.done) return [3 /*break*/, 8];
                    item = _b.value;
                    return [4 /*yield*/, item];
                case 6:
                    _d.sent();
                    _d.label = 7;
                case 7:
                    _b = _a.next();
                    return [3 /*break*/, 5];
                case 8: return [3 /*break*/, 11];
                case 9:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 11];
                case 10:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 11: return [2 /*return*/];
            }
        });
    };
    return CatchWithIterable;
}(iterable_1.IterableX));
function CatchWithIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    CatchWithIterable.prototype._source;
    /** @type {function(?): !Iterable<TSource>} */
    CatchWithIterable.prototype._handler;
}
/**
 * Creates a sequence that corresponds to the source sequence, concatenating it with the sequence resulting from
 * calling an exception handler function in case of an error.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {function(?): !Iterable<TSource>} handler
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function catchWith(source, handler) {
    return new CatchWithIterable(source, handler);
}
exports.catchWith = catchWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9jYXRjaHdpdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsNkRBTnVCO0FBT3ZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxxREFBcUQsQ0FBQyxDQUFDO0FBQzdHOztHQUVHO0FBUkg7SUFBd0MscUNBQW1CO0lBWTNEOzs7T0FHRztJQVhELDJCQUFZLE1BQXlCLEVBQUMsT0FBMkM7UUFBakYsWUFhRSxpQkFaTyxTQWVSO1FBRkMsS0FaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsS0FaSSxDQUFDLFFBQVEsR0FBRSxPQUFRLENBQUM7O0lBYTFCLENBQUM7SUFDSDs7T0FFRztJQWJBLDRCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUN5QyxRQUFTLEdBQUUsS0FBTSxFQUFDLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDOzs7eUJBQ3hGLENBQUM7b0JBQ0gsQ0FBRSxHQUFBLENBQTRCLEVBQUEsQ0FBRSxDQUFDO29CQWdCcEMsSUFkRyxDQUFFO3dCQWVILENBZEMsR0FBRSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7d0JBZWQsRUFBRSxDQUFDLENBZEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7NEJBZVgsK0JBZGMsQ0FBQyxFQUFFLENBQUMsQ0FBQzs0QkFlbkIsTUFkTSxrQkFBQTt3QkFlUixDQWRDO29CQWVILENBZEM7b0JBQUEsS0FBQSxDQUFBLENBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTt3QkFlWCxHQWRHLEdBQUUsSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFldkIsUUFkUSxHQUFFLElBQUssQ0FBQzt3QkFlaEIsK0JBZGMsQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFlbkIsTUFkTSxrQkFBQTtvQkFlUixDQWRDO29CQWdCRCxxQkFkSyxDQUFFLENBQUMsS0FBSyxFQUFBOztvQkFjYixTQWRhLENBQUM7Ozt5QkFHWixRQUFRLEVBQVIseUJBQVE7Ozs7b0JBQ0csS0FBQSxTQUFBLGlDQUFBLENBQUEsQ0FBQSxDQUFHLEdBQUEsQ0FBQSxDQUFLLENBQUE7Ozs7b0JBQWIsSUFBSztvQkFlWCxxQkFkSyxJQUFLLEVBQUE7O29CQWNWLFNBZFUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdoQjtJQUNILHdCQUFBO0FBQUEsQ0FyQ0EsQUFxQ0EsQ0FyQ3dDLG9CQUFVLEdBcUNsRDtBQWdCQTtJQUNBLGlDQUFpQztJQUNqQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BDLDhDQUE4QztJQUM5QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ3JDLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBckJILG1CQXVCSSxNQXRCeUIsRUF1QnpCLE9BdEIwQztJQXVCNUMsTUF0Qk0sQ0FBQSxJQUFJLGlCQUFrQixDQUFVLE1BQU0sRUFBQyxPQUFRLENBQUMsQ0FBQztBQXVCekQsQ0F0QkM7QUFKRCw4QkFJQyIsImZpbGUiOiJjYXRjaHdpdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IHJldHVybkl0ZXJhdG9yIH0gZnJvbSAnLi4vaW50ZXJuYWwvcmV0dXJuaXRlcmF0b3InO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwucmV0dXJuaXRlcmF0b3JcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIENhdGNoV2l0aEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9oYW5kbGVyOiAoZXJyb3I6IGFueSkgPT4gSXRlcmFibGU8VFNvdXJjZT47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6ICFJdGVyYWJsZTxUU291cmNlPn0gaGFuZGxlclxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBoYW5kbGVyOiAoZXJyb3I6IGFueSkgPT4gSXRlcmFibGU8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9oYW5kbGVyID0gaGFuZGxlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi8gZXJyOiBJdGVyYWJsZTxUU291cmNlPiB8IHVuZGVmaW5lZCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNFcnJvciA9IGZhbHNlLCAvKiogQHR5cGUgeyFJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VFNvdXJjZT59ICovIGMgPSAvKiogQHR5cGUgeyFJdGVyYXRvclJlc3VsdDxUU291cmNlPn0gKi8oKCA8SXRlcmF0b3JSZXN1bHQ8VFNvdXJjZT4+e30pKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgYyA9IGl0Lm5leHQoKTtcbiAgICAgICAgaWYgKGMuZG9uZSkge1xuICAgICAgICAgIHJldHVybkl0ZXJhdG9yKGl0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgIGVyciA9IHRoaXMuX2hhbmRsZXIoZSk7XG4gICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuSXRlcmF0b3IoaXQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgeWllbGQgYy52YWx1ZTtcbiAgICB9XG5cbiAgICBpZiAoaGFzRXJyb3IpIHtcbiAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi8oKCBlcnIpKSkge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBDYXRjaFdpdGhJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5DYXRjaFdpdGhJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oPyk6ICFJdGVyYWJsZTxUU291cmNlPn0gKi9cbkNhdGNoV2l0aEl0ZXJhYmxlLnByb3RvdHlwZS5faGFuZGxlcjtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc2VxdWVuY2UgdGhhdCBjb3JyZXNwb25kcyB0byB0aGUgc291cmNlIHNlcXVlbmNlLCBjb25jYXRlbmF0aW5nIGl0IHdpdGggdGhlIHNlcXVlbmNlIHJlc3VsdGluZyBmcm9tXG4gKiBjYWxsaW5nIGFuIGV4Y2VwdGlvbiBoYW5kbGVyIGZ1bmN0aW9uIGluIGNhc2Ugb2YgYW4gZXJyb3IuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbig/KTogIUl0ZXJhYmxlPFRTb3VyY2U+fSBoYW5kbGVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjYXRjaFdpdGg8VFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBoYW5kbGVyOiAoZXJyb3I6IGFueSkgPT4gSXRlcmFibGU8VFNvdXJjZT4pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENhdGNoV2l0aEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgaGFuZGxlcik7XG59XG4iXX0=