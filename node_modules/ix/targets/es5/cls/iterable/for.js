goog.module('targets.es5.cls.iterable.for'); exports = {}; var module = {id: 'targets/es5/cls/iterable/for.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var concat_1 = goog.require('targets.es5.cls.iterable.concat');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.concat");
var map_1 = goog.require('targets.es5.cls.iterable.map');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.map");
/**
 * Concatenates the iterable sequences obtained by running the result selector for each
 * element in the given source sequence.
 * iterable source that will be concatenated in the result sequence.
 * for each element in the source sequence.
 * result selector for each element in the source.
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): !Iterable<TResult>} resultSelector
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function _for(source, resultSelector) {
    return concat_1.concatAll(map_1.map(source, resultSelector));
}
exports._for = _for;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9mb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUdILElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQU5yRDtBQU94QyxtQ0FOa0I7QUFPbEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDZDQUE2QyxDQUFDLENBUC9EO0FBUXJDLDZCQVBZO0FBUVosSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDbEc7Ozs7Ozs7Ozs7R0FVRztBQVBILGNBU0ksTUFSeUIsRUFTekIsY0FScUQ7SUFTdkQsTUFSTSxDQUFBLGtCQUFVLENBQUMsU0FBRyxDQUFDLE1BQU0sRUFBQyxjQUFlLENBQUMsQ0FBQyxDQUFDO0FBU2hELENBQUM7QUFaRCxvQkFZQyIsImZpbGUiOiJmb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGNvbmNhdEFsbCB9IGZyb20gJy4vY29uY2F0JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLmNvbmNhdFwiKTtcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vbWFwJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLm1hcFwiKTtcbi8qKlxuICogQ29uY2F0ZW5hdGVzIHRoZSBpdGVyYWJsZSBzZXF1ZW5jZXMgb2J0YWluZWQgYnkgcnVubmluZyB0aGUgcmVzdWx0IHNlbGVjdG9yIGZvciBlYWNoXG4gKiBlbGVtZW50IGluIHRoZSBnaXZlbiBzb3VyY2Ugc2VxdWVuY2UuXG4gKiBpdGVyYWJsZSBzb3VyY2UgdGhhdCB3aWxsIGJlIGNvbmNhdGVuYXRlZCBpbiB0aGUgcmVzdWx0IHNlcXVlbmNlLlxuICogZm9yIGVhY2ggZWxlbWVudCBpbiB0aGUgc291cmNlIHNlcXVlbmNlLlxuICogcmVzdWx0IHNlbGVjdG9yIGZvciBlYWNoIGVsZW1lbnQgaW4gdGhlIHNvdXJjZS5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAhSXRlcmFibGU8VFJlc3VsdD59IHJlc3VsdFNlbGVjdG9yXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfZm9yPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gY29uY2F0QWxsKG1hcChzb3VyY2UsIHJlc3VsdFNlbGVjdG9yKSk7XG59Il19