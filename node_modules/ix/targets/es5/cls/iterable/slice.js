goog.module('targets.es5.cls.iterable.slice'); exports = {}; var module = {id: 'targets/es5/cls/iterable/slice.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var SliceIterable = (function (_super) {
    __extends(SliceIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} begin
     * @param {number} end
     */
    function SliceIterable(source, begin, end) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._begin = begin;
        _this._end = end;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    SliceIterable.prototype[Symbol.iterator] = function () {
        var it, begin, next, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    it = this._source[Symbol.iterator](), begin = this._begin;
                    while (begin > 0 && !(next = it.next()).done) {
                        begin--;
                    }
                    end = this._end;
                    if (!(end > 0)) return [3 /*break*/, 3];
                    _a.label = 1;
                case 1:
                    if (!!(next = it.next()).done) return [3 /*break*/, 3];
                    return [4 /*yield*/, next.value];
                case 2:
                    _a.sent();
                    if (--end === 0) {
                        return [3 /*break*/, 3];
                    }
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    return SliceIterable;
}(iterable_1.IterableX));
function SliceIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    SliceIterable.prototype._source;
    /** @type {number} */
    SliceIterable.prototype._begin;
    /** @type {number} */
    SliceIterable.prototype._end;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} begin
 * @param {number=} end
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function slice(source, begin, end) {
    if (end === void 0) { end = Infinity; }
    return new SliceIterable(source, begin, end);
}
exports.slice = slice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zbGljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsd0NBTGtCO0FBTWxCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEg7SUFBb0MsaUNBQW1CO0lBWXZEOzs7O09BSUc7SUFYRCx1QkFBWSxNQUF5QixFQUFDLEtBQWMsRUFBQyxHQUFZO1FBQWpFLFlBYUUsaUJBWk8sU0FnQlI7UUFIQyxLQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixLQVpJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWFwQixLQVpJLENBQUMsSUFBSSxHQUFFLEdBQUksQ0FBQzs7SUFhbEIsQ0FBQztJQUNIOztPQUVHO0lBYkEsd0JBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBQ0ssRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUMsS0FBTSxHQUFFLElBQUssQ0FBQyxNQUFNLENBQU87b0JBZXBFLE9BZE8sS0FBSyxHQUFFLENBQUUsSUFBRyxDQUFFLENBQUMsSUFBSSxHQUFFLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFFO3dCQWU3QyxLQWRLLEVBQUUsQ0FBQztvQkFlVixDQWRDO29CQUVFLEdBQUksR0FBRSxJQUFLLENBQUMsSUFBSSxDQUFDO3lCQUNoQixDQUFBLEdBQUcsR0FBRSxDQUFFLENBQUEsRUFBUCx3QkFBTzs7O3lCQUNGLENBQUMsQ0FBQyxJQUFJLEdBQUUsRUFBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSTtvQkFlN0IscUJBZEssSUFBSyxDQUFDLEtBQUssRUFBQTs7b0JBY2hCLFNBZGdCLENBQUM7b0JBZWpCLEVBQUUsQ0FBQyxDQWRDLEVBQUUsR0FBRyxLQUFJLENBQUUsQ0FBQyxDQUFBLENBQUU7d0JBQUEsTUFBTyxrQkFBQTtvQkFBQSxDQUFFOzs7OztLQUdoQztJQUNILG9CQUFBO0FBQUEsQ0ExQkEsQUEwQkEsQ0ExQm9DLG9CQUFVLEdBMEI5QztBQWdCQTtJQUNBLGlDQUFpQztJQUNqQyxhQUFhLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNoQyxxQkFBcUI7SUFDckIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDL0IscUJBQXFCO0lBQ3JCLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQzdCLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUE3QkgsZUErQkksTUE5QnlCLEVBK0J6QixLQTlCYSxFQStCYixHQTlCc0I7SUE4QnRCLG9CQUFBLEVBQUEsY0E5QnNCO0lBK0J4QixNQTlCTSxDQUFBLElBQUksYUFBYyxDQUFVLE1BQU0sRUFBQyxLQUFNLEVBQUMsR0FBSSxDQUFDLENBQUM7QUErQnhELENBOUJDO0FBTEQsc0JBS0MiLCJmaWxlIjoic2xpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgU2xpY2VJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfYmVnaW46IG51bWJlcjtcbnByaXZhdGUgX2VuZDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmRcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgYmVnaW46IG51bWJlciwgZW5kOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9iZWdpbiA9IGJlZ2luO1xuICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpLCAvKiogQHR5cGUge251bWJlcn0gKi8gYmVnaW4gPSB0aGlzLl9iZWdpbiwgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgIHdoaWxlIChiZWdpbiA+IDAgJiYgIShuZXh0ID0gaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICBiZWdpbi0tO1xuICAgIH1cblxuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gZW5kID0gdGhpcy5fZW5kO1xuICAgIGlmIChlbmQgPiAwKSB7XG4gICAgICB3aGlsZSAoIShuZXh0ID0gaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgICAgIGlmICgtLWVuZCA9PT0gMCkgeyBicmVhazsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBTbGljZUl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cblNsaWNlSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblNsaWNlSXRlcmFibGUucHJvdG90eXBlLl9iZWdpbjtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuU2xpY2VJdGVyYWJsZS5wcm90b3R5cGUuX2VuZDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcj19IGVuZFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2xpY2U8VFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIGVuZDogbnVtYmVyID0gSW5maW5pdHkpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFNsaWNlSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBiZWdpbiwgZW5kKTtcbn1cbiJdfQ==