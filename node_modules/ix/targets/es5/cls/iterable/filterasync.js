goog.module('targets.es5.cls.iterable.filterasync'); exports = {}; var module = {id: 'targets/es5/cls/iterable/filterasync.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es5.cls.asynciterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.es5.cls.internal.bindcallback');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource
 */
var FilterIterable = (function (_super) {
    __extends(FilterIterable, _super);
    /**
     * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
     * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
     */
    function FilterIterable(source, predicate) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._predicate = predicate;
        return _this;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    FilterIterable.prototype[Symbol.asyncIterator] = function () {
        return __asyncGenerator(this, arguments, function _a() {
            var i, _a, _b, item, e_1_1, e_1, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        i = 0;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 9, 10, 15]);
                        _a = __asyncValues(/** @type {!AsyncIterable<TSource>} */ ((this._source)));
                        _d.label = 2;
                    case 2: return [4 /*yield*/, __await(_a.next())];
                    case 3:
                        if (!(_b = _d.sent(), !_b.done)) return [3 /*break*/, 8];
                        return [4 /*yield*/, __await(_b.value)];
                    case 4:
                        item = _d.sent();
                        return [4 /*yield*/, __await(this._predicate(item, i++))];
                    case 5:
                        if (!_d.sent()) return [3 /*break*/, 7];
                        return [4 /*yield*/, item];
                    case 6:
                        _d.sent();
                        _d.label = 7;
                    case 7: return [3 /*break*/, 2];
                    case 8: return [3 /*break*/, 15];
                    case 9:
                        e_1_1 = _d.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 10:
                        _d.trys.push([10, , 13, 14]);
                        if (!(_b && !_b.done && (_c = _a.return))) return [3 /*break*/, 12];
                        return [4 /*yield*/, __await(_c.call(_a))];
                    case 11:
                        _d.sent();
                        _d.label = 12;
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        if (e_1) throw e_1.error;
                        return [7 /*endfinally*/];
                    case 14: return [7 /*endfinally*/];
                    case 15: return [2 /*return*/];
                }
            });
        });
    };
    return FilterIterable;
}(asynciterable_1.AsyncIterableX));
function FilterIterable_tsickle_Closure_declarations() {
    /** @type {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} */
    FilterIterable.prototype._source;
    /** @type {function(TSource, number): (boolean|!Promise<boolean>)} */
    FilterIterable.prototype._predicate;
}
/**
 * Filters a sequence of values based on a predicate.
 * @template TSource
 * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
 * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function filterAsync(source, predicate, thisArg) {
    return new FilterIterable(source, bindcallback_1.bindCallback(predicate, thisArg, 2));
}
exports.filterAsync = filterAsync;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9maWx0ZXJhc3luYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsa0RBTHVCO0FBTXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCx5REFOcUI7QUFPckIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7O0dBRUc7QUFSSDtJQUFxQyxrQ0FBd0I7SUFZN0Q7OztPQUdHO0lBWEQsd0JBYUksTUFaeUUsRUFhekUsU0Fad0U7UUFGNUUsWUFlRSxpQkFaTyxTQWVSO1FBRkMsS0FaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsS0FaSSxDQUFDLFVBQVUsR0FBRSxTQUFVLENBQUM7O0lBYTlCLENBQUM7SUFDSDs7T0FFRztJQWJNLHlCQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozt3QkFDSyxDQUFFLEdBQUUsQ0FBRSxDQUFDOzs7O3dCQUNTLEtBQUEsY0FBQSxzQ0FBQSxDQUFBLENBQTRCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQSxDQUFDLENBQUE7Ozs7Ozs7d0JBQS9DLElBQUssWUFBQTt3QkFDYiw2QkFBSyxJQUFLLENBQUMsVUFBVSxDQUFDLElBQUksRUFBQyxDQUFFLEVBQUUsQ0FBQyxHQUFBOzs2QkFBaEMsU0FBZ0MsRUFBaEMsd0JBQWdDO3dCQWVsQyxxQkFkSyxJQUFLLEVBQUE7O3dCQWNWLFNBZFUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR2hCO0lBQ0gscUJBQUE7QUFBQSxDQXBCQSxBQW9CQSxDQXBCcUMsOEJBQWUsR0FvQnBEO0FBZ0JBO0lBQ0EsbUZBQW1GO0lBQ25GLGNBQWMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2pDLHFFQUFxRTtJQUNyRSxjQUFjLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztBQUNwQyxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQXJCSCxxQkF1QkksTUF0QnlFLEVBdUJ6RSxTQXRCd0UsRUF1QnhFLE9BdEJhO0lBdUJmLE1BdEJNLENBQUEsSUFBSSxjQUFlLENBQVUsTUFBTSxFQUFDLDJCQUFhLENBQUMsU0FBUyxFQUFDLE9BQVEsRUFBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBdUJsRixDQXRCQztBQUxELGtDQUtDIiwiZmlsZSI6ImZpbHRlcmFzeW5jLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYmluZGNhbGxiYWNrXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBGaWx0ZXJJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZSB8IFByb21pc2VMaWtlPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9wcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG4vKipcbiAqIEBwYXJhbSB7KCFJdGVyYWJsZTwoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pPnwhQXN5bmNJdGVyYWJsZTxUU291cmNlPil9IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IHByZWRpY2F0ZVxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZSB8IFByb21pc2VMaWtlPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBwcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDtcbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi8oKCA8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4odGhpcy5fc291cmNlKSkpKSB7XG4gICAgICBpZiAoYXdhaXQgdGhpcy5fcHJlZGljYXRlKGl0ZW0sIGkrKykpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gRmlsdGVySXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7KCFJdGVyYWJsZTwoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pPnwhQXN5bmNJdGVyYWJsZTxUU291cmNlPil9ICovXG5GaWx0ZXJJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuRmlsdGVySXRlcmFibGUucHJvdG90eXBlLl9wcmVkaWNhdGU7XG59XG5cbi8qKlxuICogRmlsdGVycyBhIHNlcXVlbmNlIG9mIHZhbHVlcyBiYXNlZCBvbiBhIHByZWRpY2F0ZS5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyghSXRlcmFibGU8KFRTb3VyY2V8IVByb21pc2VMaWtlPFRTb3VyY2U+KT58IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4pfSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBwcmVkaWNhdGVcbiAqIEBwYXJhbSB7Pz19IHRoaXNBcmdcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyQXN5bmM8VFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4+IHwgQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBwcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgdGhpc0FyZz86IGFueSk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBGaWx0ZXJJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGJpbmRDYWxsYmFjayhwcmVkaWNhdGUsIHRoaXNBcmcsIDIpKTtcbn1cbiJdfQ==