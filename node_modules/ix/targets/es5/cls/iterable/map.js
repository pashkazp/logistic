goog.module('targets.es5.cls.iterable.map'); exports = {}; var module = {id: 'targets/es5/cls/iterable/map.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var bindcallback_1 = goog.require('targets.es5.cls.internal.bindcallback');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource, TResult
 */
var MapIterable = (function (_super) {
    __extends(MapIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource, number): TResult} selector
     */
    function MapIterable(source, selector) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._selector = selector;
        return _this;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    MapIterable.prototype[Symbol.iterator] = function () {
        var i, _a, _b, item, e_1_1, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    i = 0;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = __values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    return [4 /*yield*/, this._selector(item, i++)];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return MapIterable;
}(iterable_1.IterableX));
function MapIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    MapIterable.prototype._source;
    /** @type {function(TSource, number): TResult} */
    MapIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(TSource, number): TResult} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function map(source, selector, thisArg) {
    return new MapIterable(source, bindcallback_1.bindCallback(selector, thisArg, 2));
}
exports.map = map;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMseURBTnFCO0FBT3JCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQzNHOztHQUVHO0FBUkg7SUFBMkMsK0JBQW1CO0lBWTlEOzs7T0FHRztJQVhELHFCQUFZLE1BQXlCLEVBQUMsUUFBcUQ7UUFBM0YsWUFhRSxpQkFaTyxTQWVSO1FBRkMsS0FaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsS0FaSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7O0lBYTVCLENBQUM7SUFDSDs7T0FFRztJQWJBLHNCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNLLENBQUUsR0FBRSxDQUFFLENBQUM7Ozs7b0JBQ00sS0FBQSxTQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXJCLElBQUs7b0JBZVgscUJBZEssSUFBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUMsQ0FBRSxFQUFFLENBQUMsRUFBQTs7b0JBYy9CLFNBZCtCLENBQUM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FFbkM7SUFDSCxrQkFBQTtBQUFBLENBaEJBLEFBZ0JBLENBaEIyQyxvQkFBVSxHQWdCckQ7QUFnQkE7SUFDQSxpQ0FBaUM7SUFDakMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDOUIsaURBQWlEO0lBQ2pELFdBQVcsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUEzQkgsYUE2QkksTUE1QnlCLEVBNkJ6QixRQTVCb0QsRUE2QnBELE9BNUJhO0lBNkJmLE1BNUJNLENBQUEsSUFBSSxXQUFZLENBQW1CLE1BQU0sRUFBQywyQkFBYSxDQUFDLFFBQVEsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQTZCdkYsQ0E1QkM7QUFMRCxrQkFLQyIsImZpbGUiOiJtYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5iaW5kY2FsbGJhY2tcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKi9cbmNsYXNzIE1hcEl0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+IGV4dGVuZHMgSXRlcmFibGVYPFRSZXN1bHQ+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9zZWxlY3RvcjogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBUUmVzdWx0O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IFRSZXN1bHR9IHNlbGVjdG9yXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IFRSZXN1bHQpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9zZWxlY3RvciA9IHNlbGVjdG9yO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICB5aWVsZCB0aGlzLl9zZWxlY3RvcihpdGVtLCBpKyspO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBNYXBJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5NYXBJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogVFJlc3VsdH0gKi9cbk1hcEl0ZXJhYmxlLnByb3RvdHlwZS5fc2VsZWN0b3I7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRSZXN1bHRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogVFJlc3VsdH0gc2VsZWN0b3JcbiAqIEBwYXJhbSB7Pz19IHRoaXNBcmdcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hcDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IFRSZXN1bHQsXG4gICAgdGhpc0FyZz86IGFueSk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgTWFwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4oc291cmNlLCBiaW5kQ2FsbGJhY2soc2VsZWN0b3IsIHRoaXNBcmcsIDIpKTtcbn1cbiJdfQ==