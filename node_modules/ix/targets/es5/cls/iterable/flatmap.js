goog.module('targets.es5.cls.iterable.flatmap'); exports = {}; var module = {id: 'targets/es5/cls/iterable/flatmap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var bindcallback_1 = goog.require('targets.es5.cls.internal.bindcallback');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource, TResult
 */
var FlatMapIterable = (function (_super) {
    __extends(FlatMapIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): !Iterable<TResult>} fn
     */
    function FlatMapIterable(source, fn) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        return _this;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    FlatMapIterable.prototype[Symbol.iterator] = function () {
        var _a, _b, outerItem, _c, _d, innerItem, e_1_1, e_2_1, e_2, _e, e_1, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _g.trys.push([0, 11, 12, 13]);
                    _a = __values(this._source), _b = _a.next();
                    _g.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 10];
                    outerItem = _b.value;
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 7, 8, 9]);
                    _c = __values(this._fn(outerItem)), _d = _c.next();
                    _g.label = 3;
                case 3:
                    if (!!_d.done) return [3 /*break*/, 6];
                    innerItem = _d.value;
                    return [4 /*yield*/, innerItem];
                case 4:
                    _g.sent();
                    _g.label = 5;
                case 5:
                    _d = _c.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 10: return [3 /*break*/, 13];
                case 11:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 13];
                case 12:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 13: return [2 /*return*/];
            }
        });
    };
    return FlatMapIterable;
}(iterable_1.IterableX));
function FlatMapIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    FlatMapIterable.prototype._source;
    /** @type {function(TSource): !Iterable<TResult>} */
    FlatMapIterable.prototype._fn;
}
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * transform function on each element of the input sequence.
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): !Iterable<TResult>} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function flatMap(source, selector, thisArg) {
    return new FlatMapIterable(source, bindcallback_1.bindCallback(selector, thisArg, 1));
}
exports.flatMap = flatMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9mbGF0bWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCx3Q0FMa0I7QUFNbEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLHlEQU5xQjtBQU9yQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUMzRzs7R0FFRztBQVJIO0lBQStDLG1DQUFtQjtJQVlsRTs7O09BR0c7SUFYRCx5QkFBWSxNQUF5QixFQUFDLEVBQTBDO1FBQWhGLFlBYUUsaUJBWk8sU0FlUjtRQUZDLEtBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLEtBWkksQ0FBQyxHQUFHLEdBQUUsRUFBRyxDQUFDOztJQWFoQixDQUFDO0lBQ0g7O09BRUc7SUFiQSwwQkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7Ozs7b0JBQ3VCLEtBQUEsU0FBQSxJQUFLLENBQUMsT0FBTyxDQUFBOzs7O29CQUExQixTQUFVOzs7O29CQUNLLEtBQUEsU0FBQSxJQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFBOzs7O29CQUFqQyxTQUFVO29CQWVoQixxQkFkSyxTQUFVLEVBQUE7O29CQWNmLFNBZGUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR3JCO0lBQ0gsc0JBQUE7QUFBQSxDQWpCQSxBQWlCQSxDQWpCK0Msb0JBQVUsR0FpQnpEO0FBZ0JBO0lBQ0EsaUNBQWlDO0lBQ2pDLGVBQWUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2xDLG9EQUFvRDtJQUNwRCxlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUM5QixDQUFDO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBckJILGlCQXVCSSxNQXRCeUIsRUF1QnpCLFFBdEIrQyxFQXVCL0MsT0F0QmE7SUF1QmYsTUF0Qk0sQ0FBQSxJQUFJLGVBQWdCLENBQW1CLE1BQU0sRUFBQywyQkFBYSxDQUFDLFFBQVEsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQXVCM0YsQ0F0QkM7QUFMRCwwQkFLQyIsImZpbGUiOiJmbGF0bWFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYmluZGNhbGxiYWNrXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICovXG5jbGFzcyBGbGF0TWFwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2ZuOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAhSXRlcmFibGU8VFJlc3VsdD59IGZuXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGZuOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gb3V0ZXJJdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUUmVzdWx0fSAqLyBpbm5lckl0ZW0gb2YgdGhpcy5fZm4ob3V0ZXJJdGVtKSkge1xuICAgICAgICB5aWVsZCBpbm5lckl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEZsYXRNYXBJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5GbGF0TWFwSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiAhSXRlcmFibGU8VFJlc3VsdD59ICovXG5GbGF0TWFwSXRlcmFibGUucHJvdG90eXBlLl9mbjtcbn1cblxuLyoqXG4gKiBQcm9qZWN0cyBlYWNoIGVsZW1lbnQgb2YgYSBzZXF1ZW5jZSB0byBpdGVyYWJsZSBhbmQgZmxhdHRlbnMgdGhlIHJlc3VsdGluZyBzZXF1ZW5jZXMgaW50b1xuICogb25lIHNlcXVlbmNlLlxuICogdHJhbnNmb3JtIGZ1bmN0aW9uIG9uIGVhY2ggZWxlbWVudCBvZiB0aGUgaW5wdXQgc2VxdWVuY2UuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogIUl0ZXJhYmxlPFRSZXN1bHQ+fSBzZWxlY3RvclxuICogQHBhcmFtIHs/PX0gdGhpc0FyZ1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZmxhdE1hcDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRSZXN1bHQ+LFxuICAgIHRoaXNBcmc/OiBhbnkpOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEZsYXRNYXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0Pihzb3VyY2UsIGJpbmRDYWxsYmFjayhzZWxlY3RvciwgdGhpc0FyZywgMSkpO1xufVxuIl19