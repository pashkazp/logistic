goog.module('targets.es5.cls.iterable.intersect'); exports = {}; var module = {id: 'targets/es5/cls/iterable/intersect.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var arrayindexof_1 = goog.require('targets.es5.cls.internal.arrayindexof');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): boolean} comparer
 * @return {boolean}
 */
function arrayRemove(array, item, comparer) {
    var /** @type {number} */ idx = arrayindexof_1.arrayIndexOf(array, item, comparer);
    if (idx === -1) {
        return false;
    }
    array.splice(idx, 1);
    return true;
}
/**
 * @template TSource
 */
var IntersectIterable = (function (_super) {
    __extends(IntersectIterable, _super);
    /**
     * @param {!Iterable<TSource>} first
     * @param {!Iterable<TSource>} second
     * @param {function(TSource, TSource): boolean} comparer
     */
    function IntersectIterable(first, second, comparer) {
        var _this = _super.call(this) || this;
        _this._first = first;
        _this._second = second;
        _this._comparer = comparer;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    IntersectIterable.prototype[Symbol.iterator] = function () {
        var map, _a, _b, secondItem, _c, _d, firstItem, e_1_1, e_2, _e, e_1, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    map = [];
                    try {
                        for (_a = __values(this._second), _b = _a.next(); !_b.done; _b = _a.next()) {
                            secondItem = _b.value;
                            map.push(secondItem);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 6, 7, 8]);
                    _c = __values(this._first), _d = _c.next();
                    _g.label = 2;
                case 2:
                    if (!!_d.done) return [3 /*break*/, 5];
                    firstItem = _d.value;
                    if (!arrayRemove(map, firstItem, this._comparer)) return [3 /*break*/, 4];
                    return [4 /*yield*/, firstItem];
                case 3:
                    _g.sent();
                    _g.label = 4;
                case 4:
                    _d = _c.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return IntersectIterable;
}(iterable_1.IterableX));
function IntersectIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    IntersectIterable.prototype._first;
    /** @type {!Iterable<TSource>} */
    IntersectIterable.prototype._second;
    /** @type {function(TSource, TSource): boolean} */
    IntersectIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} first
 * @param {!Iterable<TSource>} second
 * @param {function(TSource, TSource): boolean=} comparer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function intersect(first, second, comparer) {
    if (comparer === void 0) { comparer = comparer_1.comparer; }
    return new IntersectIterable(first, second, comparer);
}
exports.intersect = intersect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9pbnRlcnNlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMseURBTnFCO0FBT3JCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQVBsRDtBQVF4RCxpREFQb0M7QUFRcEMsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7Ozs7OztHQU1HO0FBYkgscUJBQXdCLEtBQVUsRUFBQyxJQUFRLEVBQUMsUUFBa0M7SUFlNUUsSUFBSSxxQkFkRCxDQUFBLEdBQUksR0FBRSwyQkFBYSxDQUFDLEtBQUssRUFBQyxJQUFLLEVBQUMsUUFBUyxDQUFDLENBQUM7SUFlOUMsRUFBRSxDQUFDLENBZEMsR0FBRyxLQUFJLENBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtRQUFBLE1BQU8sQ0FBQSxLQUFNLENBQUM7SUFBQSxDQUFFO0lBZWpDLEtBZEssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFDLENBQUUsQ0FBQyxDQUFDO0lBZXJCLE1BZE0sQ0FBQSxJQUFLLENBQUM7QUFlZCxDQUFDO0FBQ0Q7O0dBRUc7QUFmSDtJQUF3QyxxQ0FBbUI7SUFvQjNEOzs7O09BSUc7SUFuQkQsMkJBcUJJLEtBcEJ3QixFQXFCeEIsTUFwQnlCLEVBcUJ6QixRQXBCNkM7UUFIakQsWUF3QkUsaUJBcEJPLFNBd0JSO1FBSEMsS0FwQkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBcUJwQixLQXBCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFxQnRCLEtBcEJJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQzs7SUFxQjVCLENBQUM7SUFDSDs7T0FFRztJQXJCQSw0QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDSyxHQUFJLEdBQUUsRUFBRyxDQUFDOzt3QkF1QmIsR0FBRyxDQUFDLENBdEJrQixLQUFBLFNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQTs0QkFBM0IsVUFBVzs0QkF1QmpCLEdBdEJHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3lCQUN0Qjs7Ozs7Ozs7Ozs7O29CQUVvQixLQUFBLFNBQUEsSUFBSyxDQUFDLE1BQU0sQ0FBQTs7OztvQkFBekIsU0FBVTt5QkFDWixXQUFXLENBQUMsR0FBRyxFQUFDLFNBQVUsRUFBQyxJQUFLLENBQUMsU0FBUyxDQUFDLEVBQTNDLHdCQUEyQztvQkF1QjdDLHFCQXRCSyxTQUFVLEVBQUE7O29CQXNCZixTQXRCZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR3JCO0lBQ0gsd0JBQUE7QUFBQSxDQTNCQSxBQTJCQSxDQTNCd0Msb0JBQVUsR0EyQmxEO0FBd0JBO0lBQ0EsaUNBQWlDO0lBQ2pDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsaUNBQWlDO0lBQ2pDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDcEMsa0RBQWtEO0lBQ2xELGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDdEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQXJDSCxtQkF1Q00sS0F0Q3dCLEVBdUN4QixNQXRDeUIsRUF1Q3pCLFFBdEMrRDtJQXNDL0QseUJBQUEsRUFBQSxXQXRDK0MsbUJBQWdCO0lBdUNuRSxNQXRDTSxDQUFBLElBQUksaUJBQWtCLENBQVUsS0FBSyxFQUFDLE1BQU8sRUFBQyxRQUFTLENBQUMsQ0FBQztBQXVDakUsQ0F0Q0M7QUFMRCw4QkFLQyIsImZpbGUiOiJpbnRlcnNlY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGFycmF5SW5kZXhPZiB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5hcnJheWluZGV4b2ZcIik7XG5pbXBvcnQgeyBjb21wYXJlciBhcyBkZWZhdWx0Q29tcGFyZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUFycmF5PFQ+fSBhcnJheVxuICogQHBhcmFtIHtUfSBpdGVtXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFQsIFQpOiBib29sZWFufSBjb21wYXJlclxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZW1vdmU8VD4oYXJyYXk6IFRbXSwgaXRlbTogVCwgY29tcGFyZXI6ICh4OiBULCB5OiBUKSA9PiBib29sZWFuKTogYm9vbGVhbiB7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaWR4ID0gYXJyYXlJbmRleE9mKGFycmF5LCBpdGVtLCBjb21wYXJlcik7XG4gIGlmIChpZHggPT09IC0xKSB7IHJldHVybiBmYWxzZTsgfVxuICBhcnJheS5zcGxpY2UoaWR4LCAxKTtcbiAgcmV0dXJuIHRydWU7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIEludGVyc2VjdEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX2ZpcnN0OiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3NlY29uZDogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBmaXJzdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNlY29uZFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogYm9vbGVhbn0gY29tcGFyZXJcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBzZWNvbmQ6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9maXJzdCA9IGZpcnN0O1xuICAgIHRoaXMuX3NlY29uZCA9IHNlY29uZDtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFycmF5PD8+fSAqLyBtYXAgPSBbXTtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIHNlY29uZEl0ZW0gb2YgdGhpcy5fc2Vjb25kKSB7XG4gICAgICBtYXAucHVzaChzZWNvbmRJdGVtKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGZpcnN0SXRlbSBvZiB0aGlzLl9maXJzdCkge1xuICAgICAgaWYgKGFycmF5UmVtb3ZlKG1hcCwgZmlyc3RJdGVtLCB0aGlzLl9jb21wYXJlcikpIHtcbiAgICAgICAgeWllbGQgZmlyc3RJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBJbnRlcnNlY3RJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5JbnRlcnNlY3RJdGVyYWJsZS5wcm90b3R5cGUuX2ZpcnN0O1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5JbnRlcnNlY3RJdGVyYWJsZS5wcm90b3R5cGUuX3NlY29uZDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IGJvb2xlYW59ICovXG5JbnRlcnNlY3RJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gZmlyc3RcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzZWNvbmRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IGJvb2xlYW49fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0PFRTb3VyY2U+KFxuICAgICAgZmlyc3Q6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiA9IGRlZmF1bHRDb21wYXJlcik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgSW50ZXJzZWN0SXRlcmFibGU8VFNvdXJjZT4oZmlyc3QsIHNlY29uZCwgY29tcGFyZXIpO1xufVxuIl19