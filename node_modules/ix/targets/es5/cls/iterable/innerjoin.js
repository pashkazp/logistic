goog.module('targets.es5.cls.iterable.innerjoin'); exports = {}; var module = {id: 'targets/es5/cls/iterable/innerjoin.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var _grouping_1 = goog.require('targets.es5.cls.iterable._grouping');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._grouping");
var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @template TOuter, TInner, TKey, TResult
 */
var JoinIterable = (function (_super) {
    __extends(JoinIterable, _super);
    /**
     * @param {!Iterable<TOuter>} outer
     * @param {!Iterable<TInner>} inner
     * @param {function(TOuter): TKey} outerSelector
     * @param {function(TInner): TKey} innerSelector
     * @param {function(TOuter, TInner): TResult} resultSelector
     */
    function JoinIterable(outer, inner, outerSelector, innerSelector, resultSelector) {
        var _this = _super.call(this) || this;
        _this._outer = outer;
        _this._inner = inner;
        _this._outerSelector = outerSelector;
        _this._innerSelector = innerSelector;
        _this._resultSelector = resultSelector;
        return _this;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    JoinIterable.prototype[Symbol.iterator] = function () {
        var map, _a, _b, outerElement, outerKey, _c, _d, innerElement, e_1_1, e_2_1, e_2, _e, e_1, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    map = _grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity);
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 12, 13, 14]);
                    _a = __values(this._outer), _b = _a.next();
                    _g.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 11];
                    outerElement = _b.value;
                    outerKey = this._outerSelector(outerElement);
                    if (!map.has(outerKey)) return [3 /*break*/, 10];
                    _g.label = 3;
                case 3:
                    _g.trys.push([3, 8, 9, 10]);
                    _c = __values(/** @type {!Array<?>} */ ((map.get(outerKey)))), _d = _c.next();
                    _g.label = 4;
                case 4:
                    if (!!_d.done) return [3 /*break*/, 7];
                    innerElement = _d.value;
                    return [4 /*yield*/, this._resultSelector(outerElement, innerElement)];
                case 5:
                    _g.sent();
                    _g.label = 6;
                case 6:
                    _d = _c.next();
                    return [3 /*break*/, 4];
                case 7: return [3 /*break*/, 10];
                case 8:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 10];
                case 9:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 10:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 11: return [3 /*break*/, 14];
                case 12:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 14];
                case 13:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 14: return [2 /*return*/];
            }
        });
    };
    return JoinIterable;
}(iterable_1.IterableX));
function JoinIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TOuter>} */
    JoinIterable.prototype._outer;
    /** @type {!Iterable<TInner>} */
    JoinIterable.prototype._inner;
    /** @type {function(TOuter): TKey} */
    JoinIterable.prototype._outerSelector;
    /** @type {function(TInner): TKey} */
    JoinIterable.prototype._innerSelector;
    /** @type {function(TOuter, TInner): TResult} */
    JoinIterable.prototype._resultSelector;
}
/**
 * @template TOuter, TInner, TKey, TResult
 * @param {!Iterable<TOuter>} outer
 * @param {!Iterable<TInner>} inner
 * @param {function(TOuter): TKey} outerSelector
 * @param {function(TInner): TKey} innerSelector
 * @param {function(TOuter, TInner): TResult} resultSelector
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function innerJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new JoinIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.innerJoin = innerJoin;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9pbm5lcmpvaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMseUNBTnVCO0FBT3ZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnREFBZ0QsQ0FBQyxDQVAxRDtBQVE3QyxpREFQaUI7QUFRakIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFUSDtJQUF5RCxnQ0FBbUI7SUFnQjVFOzs7Ozs7T0FNRztJQWZELHNCQWlCRSxLQWhCdUIsRUFpQnZCLEtBaEJ1QixFQWlCdkIsYUFoQnNDLEVBaUJ0QyxhQWhCc0MsRUFpQnRDLGNBaEJ5RDtRQUwzRCxZQXNCRSxpQkFoQk8sU0FzQlI7UUFMQyxLQWhCSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFpQnBCLEtBaEJJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWlCcEIsS0FoQkksQ0FBQyxjQUFjLEdBQUUsYUFBYyxDQUFDO1FBaUJwQyxLQWhCSSxDQUFDLGNBQWMsR0FBRSxhQUFjLENBQUM7UUFpQnBDLEtBaEJJLENBQUMsZUFBZSxHQUFFLGNBQWUsQ0FBQzs7SUFpQnhDLENBQUM7SUFDSDs7T0FFRztJQWpCQSx1QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDTyxHQUFJLEdBQUUsMEJBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFDLElBQUssQ0FBQyxjQUFjLEVBQUMsbUJBQVMsQ0FBQyxDQUFDOzs7O29CQUMvQyxLQUFBLFNBQUEsSUFBSyxDQUFDLE1BQU0sQ0FBQTs7OztvQkFBNUIsWUFBYTtvQkFDZCxRQUFTLEdBQUUsSUFBSyxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQzt5QkFDL0MsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBakIseUJBQWlCOzs7O29CQUNFLEtBQUEsU0FBQSx3QkFBQSxDQUFBLENBQUEsQ0FBRyxHQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQSxDQUFBLENBQUUsQ0FBQTs7OztvQkFBbkMsWUFBYTtvQkFtQm5CLHFCQWxCSyxJQUFLLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBQyxZQUFhLENBQUMsRUFBQTs7b0JBa0J0RCxTQWxCc0QsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBSTlEO0lBQ0gsbUJBQUE7QUFBQSxDQWhDQSxBQWdDQSxDQWhDeUQsb0JBQVUsR0FnQ25FO0FBb0JBO0lBQ0EsZ0NBQWdDO0lBQ2hDLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzlCLGdDQUFnQztJQUNoQyxZQUFZLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM5QixxQ0FBcUM7SUFDckMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUM7SUFDdEMscUNBQXFDO0lBQ3JDLFlBQVksQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0lBQ3RDLGdEQUFnRDtJQUNoRCxZQUFZLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQztBQUN2QyxDQUFDO0FBRUQ7Ozs7Ozs7O0dBUUc7QUF2Q0gsbUJBeUNJLEtBeEN1QixFQXlDdkIsS0F4Q3VCLEVBeUN2QixhQXhDc0MsRUF5Q3RDLGFBeENzQyxFQXlDdEMsY0F4Q3lEO0lBeUMzRCxNQXhDTSxDQUFBLElBQUksWUFBYSxDQXlDckIsS0F4Q0ssRUF5Q0wsS0F4Q0ssRUF5Q0wsYUF4Q2EsRUF5Q2IsYUF4Q2EsRUF5Q2IsY0F4Q2MsQ0FBQyxDQUFDO0FBeUNwQixDQXhDQztBQVpELDhCQVlDIiwiZmlsZSI6ImlubmVyam9pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgY3JlYXRlR3JvdXBpbmcgfSBmcm9tICcuL19ncm91cGluZyc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZS5fZ3JvdXBpbmdcIik7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHRcbiAqL1xuY2xhc3MgSm9pbkl0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PiBleHRlbmRzIEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9vdXRlcjogSXRlcmFibGU8VE91dGVyPjtcbnByaXZhdGUgX2lubmVyOiBJdGVyYWJsZTxUSW5uZXI+O1xucHJpdmF0ZSBfb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXk7XG5wcml2YXRlIF9pbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleTtcbnByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IFRJbm5lcikgPT4gVFJlc3VsdDtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VE91dGVyPn0gb3V0ZXJcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRJbm5lcj59IGlubmVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRPdXRlcik6IFRLZXl9IG91dGVyU2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVElubmVyKTogVEtleX0gaW5uZXJTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUT3V0ZXIsIFRJbm5lcik6IFRSZXN1bHR9IHJlc3VsdFNlbGVjdG9yXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgIG91dGVyOiBJdGVyYWJsZTxUT3V0ZXI+LFxuICAgIGlubmVyOiBJdGVyYWJsZTxUSW5uZXI+LFxuICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5LFxuICAgIGlubmVyU2VsZWN0b3I6ICh2YWx1ZTogVElubmVyKSA9PiBUS2V5LFxuICAgIHJlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IFRJbm5lcikgPT4gVFJlc3VsdCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fb3V0ZXIgPSBvdXRlcjtcbiAgICB0aGlzLl9pbm5lciA9IGlubmVyO1xuICAgIHRoaXMuX291dGVyU2VsZWN0b3IgPSBvdXRlclNlbGVjdG9yO1xuICAgIHRoaXMuX2lubmVyU2VsZWN0b3IgPSBpbm5lclNlbGVjdG9yO1xuICAgIHRoaXMuX3Jlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFJlc3VsdD59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFNYXA8VEtleSwgIUFycmF5PD8+Pn0gKi8gbWFwID0gY3JlYXRlR3JvdXBpbmcodGhpcy5faW5uZXIsIHRoaXMuX2lubmVyU2VsZWN0b3IsIGlkZW50aXR5KTtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RPdXRlcn0gKi8gb3V0ZXJFbGVtZW50IG9mIHRoaXMuX291dGVyKSB7XG4gICAgICBjb25zdCAvKiogQHR5cGUge1RLZXl9ICovIG91dGVyS2V5ID0gdGhpcy5fb3V0ZXJTZWxlY3RvcihvdXRlckVsZW1lbnQpO1xuICAgICAgaWYgKG1hcC5oYXMob3V0ZXJLZXkpKSB7XG4gICAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7P30gKi8gaW5uZXJFbGVtZW50IG9mIC8qKiBAdHlwZSB7IUFycmF5PD8+fSAqLygoIG1hcC5nZXQob3V0ZXJLZXkpKSkpIHtcbiAgICAgICAgICB5aWVsZCB0aGlzLl9yZXN1bHRTZWxlY3RvcihvdXRlckVsZW1lbnQsIGlubmVyRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gSm9pbkl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUT3V0ZXI+fSAqL1xuSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5fb3V0ZXI7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUSW5uZXI+fSAqL1xuSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5faW5uZXI7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRPdXRlcik6IFRLZXl9ICovXG5Kb2luSXRlcmFibGUucHJvdG90eXBlLl9vdXRlclNlbGVjdG9yO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUSW5uZXIpOiBUS2V5fSAqL1xuSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5faW5uZXJTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVE91dGVyLCBUSW5uZXIpOiBUUmVzdWx0fSAqL1xuSm9pbkl0ZXJhYmxlLnByb3RvdHlwZS5fcmVzdWx0U2VsZWN0b3I7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUT3V0ZXI+fSBvdXRlclxuICogQHBhcmFtIHshSXRlcmFibGU8VElubmVyPn0gaW5uZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVE91dGVyKTogVEtleX0gb3V0ZXJTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUSW5uZXIpOiBUS2V5fSBpbm5lclNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRPdXRlciwgVElubmVyKTogVFJlc3VsdH0gcmVzdWx0U2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVySm9pbjxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXI6IEl0ZXJhYmxlPFRPdXRlcj4sXG4gICAgaW5uZXI6IEl0ZXJhYmxlPFRJbm5lcj4sXG4gICAgb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXksXG4gICAgaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXksXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogVElubmVyKSA9PiBUUmVzdWx0KTogSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBKb2luSXRlcmFibGU8VE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHQ+KFxuICAgIG91dGVyLFxuICAgIGlubmVyLFxuICAgIG91dGVyU2VsZWN0b3IsXG4gICAgaW5uZXJTZWxlY3RvcixcbiAgICByZXN1bHRTZWxlY3Rvcik7XG59XG4iXX0=