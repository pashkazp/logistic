goog.module('targets.es5.cls.iterable.filter'); exports = {}; var module = {id: 'targets/es5/cls/iterable/filter.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var bindcallback_1 = goog.require('targets.es5.cls.internal.bindcallback');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource
 */
var FilterIterable = (function (_super) {
    __extends(FilterIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource, number): boolean} predicate
     */
    function FilterIterable(source, predicate) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._predicate = predicate;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    FilterIterable.prototype[Symbol.iterator] = function () {
        var i, _a, _b, item, e_1_1, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    i = 0;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = __values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    if (!this._predicate(item, i++)) return [3 /*break*/, 4];
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return FilterIterable;
}(iterable_1.IterableX));
function FilterIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    FilterIterable.prototype._source;
    /** @type {function(TSource, number): boolean} */
    FilterIterable.prototype._predicate;
}
/**
 * Filters a sequence of values based on a predicate.
 * @template T
 * @param {!Iterable<T>} source
 * @param {function(T, number): boolean} predicate
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.IterableX<T>}
 */
function filter(source, predicate, thisArg) {
    return new FilterIterable(source, bindcallback_1.bindCallback(predicate, thisArg, 2));
}
exports.filter = filter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9maWx0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMseURBTnFCO0FBT3JCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQzNHOztHQUVHO0FBUkg7SUFBcUMsa0NBQW1CO0lBWXhEOzs7T0FHRztJQVhELHdCQUFZLE1BQXlCLEVBQUMsU0FBc0Q7UUFBNUYsWUFhRSxpQkFaTyxTQWVSO1FBRkMsS0FaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsS0FaSSxDQUFDLFVBQVUsR0FBRSxTQUFVLENBQUM7O0lBYTlCLENBQUM7SUFDSDs7T0FFRztJQWJBLHlCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNLLENBQUUsR0FBRSxDQUFFLENBQUM7Ozs7b0JBQ00sS0FBQSxTQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXJCLElBQUs7eUJBQ1AsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUMsQ0FBRSxFQUFFLENBQUMsRUFBMUIsd0JBQTBCO29CQWU1QixxQkFkSyxJQUFLLEVBQUE7O29CQWNWLFNBZFUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdoQjtJQUNILHFCQUFBO0FBQUEsQ0FsQkEsQUFrQkEsQ0FsQnFDLG9CQUFVLEdBa0IvQztBQWdCQTtJQUNBLGlDQUFpQztJQUNqQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNqQyxpREFBaUQ7SUFDakQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDcEMsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFyQkgsZ0JBdUJJLE1BdEJtQixFQXVCbkIsU0F0QitDLEVBdUIvQyxPQXRCYTtJQXVCZixNQXRCTSxDQUFBLElBQUksY0FBZSxDQUFJLE1BQU0sRUFBQywyQkFBYSxDQUFDLFNBQVMsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUMsQ0FBQztBQXVCNUUsQ0F0QkM7QUFMRCx3QkFLQyIsImZpbGUiOiJmaWx0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5iaW5kY2FsbGJhY2tcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIEZpbHRlckl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9wcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmICh0aGlzLl9wcmVkaWNhdGUoaXRlbSwgaSsrKSkge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBGaWx0ZXJJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5GaWx0ZXJJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogYm9vbGVhbn0gKi9cbkZpbHRlckl0ZXJhYmxlLnByb3RvdHlwZS5fcHJlZGljYXRlO1xufVxuXG4vKipcbiAqIEZpbHRlcnMgYSBzZXF1ZW5jZSBvZiB2YWx1ZXMgYmFzZWQgb24gYSBwcmVkaWNhdGUuXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihULCBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGVcbiAqIEBwYXJhbSB7Pz19IHRoaXNBcmdcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcjxUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuLFxuICAgIHRoaXNBcmc/OiBhbnkpOiBJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IEZpbHRlckl0ZXJhYmxlPFQ+KHNvdXJjZSwgYmluZENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMikpO1xufVxuIl19