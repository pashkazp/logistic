goog.module('targets.es5.cls.iterable.scanright'); exports = {}; var module = {id: 'targets/es5/cls/iterable/scanright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var toarray_1 = goog.require('targets.es5.cls.iterable.toarray');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.toarray");
/**
 * @template T, R
 */
var ScanRightIterable = (function (_super) {
    __extends(ScanRightIterable, _super);
    /**
     * @param {!Iterable<T>} source
     * @param {function((T|R), T, number): R} fn
     * @param {...(T|R)} args
     */
    function ScanRightIterable(source, fn) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        _this._hasSeed = args.length === 1;
        _this._seed = args[0];
        return _this;
    }
    /**
     * @return {!IterableIterator<R>}
     */
    ScanRightIterable.prototype[Symbol.iterator] = function () {
        var hasValue, source, offset, item;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    hasValue = false;
                    source = toarray_1.toArray(this._source);
                    offset = source.length - 1;
                    _a.label = 1;
                case 1:
                    if (!(offset >= 0)) return [3 /*break*/, 5];
                    item = source[offset];
                    if (!(hasValue || (hasValue = this._hasSeed))) return [3 /*break*/, 3];
                    this._seed = this._fn(/** @type {R} */ (this._seed), item, offset);
                    return [4 /*yield*/, this._seed];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    this._seed = item;
                    hasValue = true;
                    _a.label = 4;
                case 4:
                    offset--;
                    return [3 /*break*/, 1];
                case 5: return [2 /*return*/];
            }
        });
    };
    return ScanRightIterable;
}(iterable_1.IterableX));
function ScanRightIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<T>} */
    ScanRightIterable.prototype._source;
    /** @type {function((T|R), T, number): R} */
    ScanRightIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanRightIterable.prototype._seed;
    /** @type {boolean} */
    ScanRightIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!Iterable<T>} source
 * @param {function((T|R), T, number): R} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.IterableX<(T|R)>}
 */
function scanRight(source, accumulator) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return new (ScanRightIterable.bind.apply(ScanRightIterable, __spread([void 0, source, accumulator], args)))();
}
exports.scanRight = scanRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zY2FucmlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMscUNBTmdCO0FBT2hCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0FBQ3RHOztHQUVHO0FBUkg7SUFBcUMscUNBQWE7SUFjbEQ7Ozs7T0FJRztJQVpELDJCQWNJLE1BYm1CLEVBY25CLEVBYjBDO1FBYzFDLGNBYmtCO2FBYWxCLFVBYmtCLEVBYWxCLHFCQWJrQixFQWFsQixJQWJrQjtZQWFsQiw2QkFia0I7O1FBSHRCLFlBaUJFLGlCQWJPLFNBa0JSO1FBSkMsS0FiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsS0FiSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7UUFjZCxLQWJJLENBQUMsUUFBUSxHQUFFLElBQUssQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDO1FBY2xDLEtBYkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQWN2QixDQUFDO0lBQ0g7O09BRUc7SUFkQSw0QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDSyxRQUFTLEdBQUUsS0FBTSxDQUFDO29CQUNoQixNQUFPLEdBQUUsaUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQzdCLE1BQU8sR0FBRSxNQUFPLENBQUMsTUFBTSxHQUFFLENBQUU7Ozt5QkFBQyxDQUFBLE1BQU8sSUFBRyxDQUFFLENBQUE7b0JBQ3pDLElBQUssR0FBRSxNQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7eUJBQ3hCLENBQUEsUUFBUSxJQUFHLENBQUUsUUFBUSxHQUFFLElBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQSxFQUF0Qyx3QkFBc0M7b0JBZ0J4QyxJQWZJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQyxHQUFHLENBQUEsZ0JBQUEsQ0FBQSxDQUFJLElBQUksQ0FBQyxLQUFBLENBQUssRUFBQyxJQUFLLEVBQUMsTUFBTyxDQUFDLENBQUM7b0JBZ0JuRCxxQkFmSyxJQUFLLENBQUMsS0FBSyxFQUFBOztvQkFlaEIsU0FmZ0IsQ0FBQzs7O29CQWlCakIsSUFmSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7b0JBZ0JsQixRQWZRLEdBQUUsSUFBSyxDQUFDOzs7b0JBUDZCLE1BQU8sRUFBRSxDQUFBOzs7OztLQVUzRDtJQUNILHdCQUFBO0FBQUEsQ0EvQkEsQUErQkEsQ0EvQnFDLG9CQUFVLEdBK0IvQztBQWlCQTtJQUNBLDJCQUEyQjtJQUMzQixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BDLDRDQUE0QztJQUM1QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ2hDLG9CQUFvQjtJQUNwQixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ2xDLHNCQUFzQjtJQUN0QixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ3JDLENBQUM7QUFVRDs7Ozs7O0dBTUc7QUFqQ0gsbUJBbUNJLE1BbENtQixFQW1DbkIsV0FsQ3VEO0lBbUN2RCxjQWxDa0I7U0FrQ2xCLFVBbENrQixFQWtDbEIscUJBbENrQixFQWtDbEIsSUFsQ2tCO1FBa0NsQiw2QkFsQ2tCOztJQW1DcEIsTUFsQ00sTUFBSSxpQkFBa0IsWUFBbEIsaUJBQWtCLG9CQUFDLE1BQU0sRUFBQyxXQUFZLEdBQUssSUFBSSxNQUFFO0FBbUM3RCxDQWxDQztBQUxELDhCQUtDIiwiZmlsZSI6InNjYW5yaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdG9hcnJheSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZS50b2FycmF5XCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICovXG5jbGFzcyBTY2FuUmlnaHRJdGVyYWJsZTxULCBSPiBleHRlbmRzIEl0ZXJhYmxlWDxSPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFQ+O1xucHJpdmF0ZSBfZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSO1xucHJpdmF0ZSBfc2VlZD86IFQgfCBSO1xucHJpdmF0ZSBfaGFzU2VlZDogYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogUn0gZm5cbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgICAgZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSLFxuICAgICAgLi4uYXJnczogKFQgfCBSKVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgICB0aGlzLl9oYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gICAgdGhpcy5fc2VlZCA9IGFyZ3NbMF07XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8Uj59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFycmF5PFQ+fSAqLyBzb3VyY2UgPSB0b0FycmF5KHRoaXMuX3NvdXJjZSk7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIG9mZnNldCA9IHNvdXJjZS5sZW5ndGggLSAxOyBvZmZzZXQgPj0gMDsgb2Zmc2V0LS0pIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7VH0gKi8gaXRlbSA9IHNvdXJjZVtvZmZzZXRdO1xuICAgICAgaWYgKGhhc1ZhbHVlIHx8IChoYXNWYWx1ZSA9IHRoaXMuX2hhc1NlZWQpKSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSB0aGlzLl9mbiggLyoqIEB0eXBlIHtSfSAqLygoPFI+dGhpcy5fc2VlZCkpLCBpdGVtLCBvZmZzZXQpO1xuICAgICAgICB5aWVsZCB0aGlzLl9zZWVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGl0ZW07XG4gICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2NhblJpZ2h0SXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFQ+fSAqL1xuU2NhblJpZ2h0SXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiBSfSAqL1xuU2NhblJpZ2h0SXRlcmFibGUucHJvdG90eXBlLl9mbjtcbi8qKiBAdHlwZSB7KFR8Uil9ICovXG5TY2FuUmlnaHRJdGVyYWJsZS5wcm90b3R5cGUuX3NlZWQ7XG4vKiogQHR5cGUge2Jvb2xlYW59ICovXG5TY2FuUmlnaHRJdGVyYWJsZS5wcm90b3R5cGUuX2hhc1NlZWQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYW5SaWdodDxUPihcbiAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFQsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBUKTogSXRlcmFibGVYPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5SaWdodDxULCBSID0gVD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUixcbiAgc2VlZDogUik6IEl0ZXJhYmxlWDxSPjtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IFJ9IGFjY3VtdWxhdG9yXG4gKiBAcGFyYW0gey4uLihUfFIpfSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8KFR8Uik+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIGFjY3VtdWxhdG9yOiAoYWNjOiBUIHwgUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogSXRlcmFibGVYPFQgfCBSPiB7XG4gIHJldHVybiBuZXcgU2NhblJpZ2h0SXRlcmFibGUoc291cmNlLCBhY2N1bXVsYXRvciwgLi4uYXJncyk7XG59XG4iXX0=