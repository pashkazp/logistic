goog.module('targets.es5.cls.iterable.memoize'); exports = {}; var module = {id: 'targets/es5/cls/iterable/memoize.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var _refcountlist_1 = goog.require('targets.es5.cls.iterable._refcountlist');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.es5.cls.iterable.create');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.create");
/**
 * @template T
 */
var MemoizeBuffer = (function (_super) {
    __extends(MemoizeBuffer, _super);
    /**
     * @param {!Iterator<T>} source
     * @param {!tsickle_forward_declare_2.IRefCountList<T>} buffer
     */
    function MemoizeBuffer(source, buffer) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = buffer;
        return _this;
    }
    /**
     * @return {!IterableIterator<T>}
     */
    MemoizeBuffer.prototype[Symbol.iterator] = function () {
        var i, hasValue, current, next;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    i = 0;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, , 7, 8]);
                    _a.label = 2;
                case 2:
                    if (!1) return [3 /*break*/, 6];
                    hasValue = false, current = ({});
                    if (i >= this._buffer.count) {
                        if (!this._stopped) {
                            try {
                                next = this._source.next();
                                hasValue = !next.done;
                                if (hasValue) {
                                    current = next.value;
                                }
                            }
                            catch (e) {
                                this._error = e;
                                this._stopped = true;
                            }
                        }
                        if (this._stopped) {
                            throw this._error;
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                    }
                    else {
                        hasValue = true;
                    }
                    if (!hasValue) return [3 /*break*/, 4];
                    return [4 /*yield*/, this._buffer.get(i)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4: return [3 /*break*/, 6];
                case 5:
                    i++;
                    return [3 /*break*/, 2];
                case 6: return [3 /*break*/, 8];
                case 7:
                    this._buffer.done();
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return MemoizeBuffer;
}(iterable_1.IterableX));
function MemoizeBuffer_tsickle_Closure_declarations() {
    /** @type {!Iterator<T>} */
    MemoizeBuffer.prototype._source;
    /** @type {!tsickle_forward_declare_2.IRefCountList<T>} */
    MemoizeBuffer.prototype._buffer;
    /** @type {?} */
    MemoizeBuffer.prototype._error;
    /** @type {boolean} */
    MemoizeBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {number=} readerCount
 * @param {function(!Iterable<TSource>): !Iterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.IterableX<(TSource|TResult)>}
 */
function memoize(source, readerCount, selector) {
    if (readerCount === void 0) { readerCount = -1; }
    if (readerCount === -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new _refcountlist_1.MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new _refcountlist_1.RefCountList(readerCount));
    }
    return create_1.create(function () { /** @type {function(!Iterable<TSource>): !Iterable<TResult>} */ return ((selector))(memoize(source, readerCount))[Symbol.iterator](); });
}
exports.memoize = memoize;
//# sourceMappingURL=data:application/json;base64,