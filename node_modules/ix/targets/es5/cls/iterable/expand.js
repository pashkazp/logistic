goog.module('targets.es5.cls.iterable.expand'); exports = {}; var module = {id: 'targets/es5/cls/iterable/expand.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var ExpandIterable = (function (_super) {
    __extends(ExpandIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): !Iterable<TSource>} fn
     */
    function ExpandIterable(source, fn) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    ExpandIterable.prototype[Symbol.iterator] = function () {
        var q, src, _a, _b, item, e_1_1, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    q = [this._source];
                    _d.label = 1;
                case 1:
                    if (!(q.length > 0)) return [3 /*break*/, 10];
                    src = q.shift();
                    _d.label = 2;
                case 2:
                    _d.trys.push([2, 7, 8, 9]);
                    _a = __values(/** @type {!Iterable<TSource>} */ ((src))), _b = _a.next();
                    _d.label = 3;
                case 3:
                    if (!!_b.done) return [3 /*break*/, 6];
                    item = _b.value;
                    q.push(this._fn(item));
                    return [4 /*yield*/, item];
                case 4:
                    _d.sent();
                    _d.label = 5;
                case 5:
                    _b = _a.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9: return [3 /*break*/, 1];
                case 10: return [2 /*return*/];
            }
        });
    };
    return ExpandIterable;
}(iterable_1.IterableX));
function ExpandIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    ExpandIterable.prototype._source;
    /** @type {function(TSource): !Iterable<TSource>} */
    ExpandIterable.prototype._fn;
}
/**
 * Expands the sequence by recursively applying a selector function.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): !Iterable<TSource>} selector
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function expand(source, selector) {
    return new ExpandIterable(source, selector);
}
exports.expand = expand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9leHBhbmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBIO0lBQXFDLGtDQUFtQjtJQVd4RDs7O09BR0c7SUFWRCx3QkFBWSxNQUF5QixFQUFDLEVBQTBDO1FBQWhGLFlBWUUsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLEtBWEksQ0FBQyxHQUFHLEdBQUUsRUFBRyxDQUFDOztJQVloQixDQUFDO0lBQ0g7O09BRUc7SUFaQSx5QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDSyxDQUFFLEdBQUUsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7Ozt5QkFDaEIsQ0FBQSxDQUFDLENBQUMsTUFBTSxHQUFFLENBQUUsQ0FBQTtvQkFDZCxHQUFJLEdBQUUsQ0FBRSxDQUFDLEtBQUssRUFBRSxDQUFDOzs7O29CQUNQLEtBQUEsU0FBQSxpQ0FBQSxDQUFBLENBQUEsQ0FBRyxHQUFBLENBQUEsQ0FBSyxDQUFBOzs7O29CQUFiLElBQUs7b0JBY1gsQ0FiQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBY3ZCLHFCQWJLLElBQUssRUFBQTs7b0JBYVYsU0FiVSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdoQjtJQUNILHFCQUFBO0FBQUEsQ0FwQkEsQUFvQkEsQ0FwQnFDLG9CQUFVLEdBb0IvQztBQWVBO0lBQ0EsaUNBQWlDO0lBQ2pDLGNBQWMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2pDLG9EQUFvRDtJQUNwRCxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUM3QixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBcEJILGdCQXNCSSxNQXJCeUIsRUFzQnpCLFFBckIrQztJQXNCakQsTUFyQk0sQ0FBQSxJQUFJLGNBQWUsQ0FBVSxNQUFNLEVBQUMsUUFBUSxDQUFDLENBQUM7QUFzQnRELENBckJDO0FBSkQsd0JBSUMiLCJmaWxlIjoiZXhwYW5kLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIEV4cGFuZEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9mbjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUU291cmNlPjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogIUl0ZXJhYmxlPFRTb3VyY2U+fSBmblxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBmbjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUU291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2ZuID0gZm47XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8IUl0ZXJhYmxlPFRTb3VyY2U+Pn0gKi8gcSA9IFt0aGlzLl9zb3VyY2VdO1xuICAgIHdoaWxlIChxLmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCAvKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi8gc3JjID0gcS5zaGlmdCgpO1xuICAgICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIC8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqLygoIHNyYykpKSB7XG4gICAgICAgIHEucHVzaCh0aGlzLl9mbihpdGVtKSk7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEV4cGFuZEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cbkV4cGFuZEl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlKTogIUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRXhwYW5kSXRlcmFibGUucHJvdG90eXBlLl9mbjtcbn1cblxuLyoqXG4gKiBFeHBhbmRzIHRoZSBzZXF1ZW5jZSBieSByZWN1cnNpdmVseSBhcHBseWluZyBhIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICFJdGVyYWJsZTxUU291cmNlPn0gc2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4cGFuZDxUU291cmNlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEl0ZXJhYmxlPFRTb3VyY2U+KTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeHBhbmRJdGVyYWJsZTxUU291cmNlPihzb3VyY2Usc2VsZWN0b3IpO1xufVxuIl19