goog.module('targets.es5.cls.iterable.repeat'); exports = {}; var module = {id: 'targets/es5/cls/iterable/repeat.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var of_1 = goog.require('targets.es5.cls.iterable.of');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.of");
var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var RepeatIterable = (function (_super) {
    __extends(RepeatIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} count
     */
    function RepeatIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    RepeatIterable.prototype[Symbol.iterator] = function () {
        var _a, _b, item, e_1_1, i, _c, _d, item, e_2_1, e_1, _e, e_2, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    if (!(this._count === -1)) return [3 /*break*/, 11];
                    _g.label = 1;
                case 1:
                    if (!1) return [3 /*break*/, 10];
                    _g.label = 2;
                case 2:
                    _g.trys.push([2, 7, 8, 9]);
                    _a = __values(this._source), _b = _a.next();
                    _g.label = 3;
                case 3:
                    if (!!_b.done) return [3 /*break*/, 6];
                    item = _b.value;
                    return [4 /*yield*/, item];
                case 4:
                    _g.sent();
                    _g.label = 5;
                case 5:
                    _b = _a.next();
                    return [3 /*break*/, 3];
                case 6: return [3 /*break*/, 9];
                case 7:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 9];
                case 8:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 9: return [3 /*break*/, 1];
                case 10: return [3 /*break*/, 21];
                case 11:
                    i = 0;
                    _g.label = 12;
                case 12:
                    if (!(i < this._count)) return [3 /*break*/, 21];
                    _g.label = 13;
                case 13:
                    _g.trys.push([13, 18, 19, 20]);
                    _c = __values(this._source), _d = _c.next();
                    _g.label = 14;
                case 14:
                    if (!!_d.done) return [3 /*break*/, 17];
                    item = _d.value;
                    return [4 /*yield*/, item];
                case 15:
                    _g.sent();
                    _g.label = 16;
                case 16:
                    _d = _c.next();
                    return [3 /*break*/, 14];
                case 17: return [3 /*break*/, 20];
                case 18:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 20];
                case 19:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 20:
                    i++;
                    return [3 /*break*/, 12];
                case 21: return [2 /*return*/];
            }
        });
    };
    return RepeatIterable;
}(iterable_1.IterableX));
function RepeatIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    RepeatIterable.prototype._source;
    /** @type {number} */
    RepeatIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.IterableX<TSource>}
 */
function repeat(source, count) {
    if (count === void 0) { count = -1; }
    return new RepeatIterable(source, count);
}
exports.repeat = repeat;
/**
 * @template TSource
 * @param {TSource} value
 * @param {number=} count
 * @return {!tsickle_forward_declare_2.IterableX<TSource>}
 */
function repeatStatic(value, count) {
    if (count === void 0) { count = -1; }
    return new RepeatIterable(of_1.of(value), count);
}
exports.repeatStatic = repeatStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9yZXBlYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDJCQUxXO0FBTVgsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHlDQUF5QyxDQUFDLENBTnRFO0FBTzFCLHdDQU5rQjtBQU9sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVJIO0lBQXFDLGtDQUFtQjtJQVl4RDs7O09BR0c7SUFYRCx3QkFBWSxNQUF5QixFQUFDLEtBQWM7UUFBcEQsWUFhRSxpQkFaTyxTQWVSO1FBRkMsS0FaSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFhdEIsS0FaSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7O0lBYXRCLENBQUM7SUFDSDs7T0FFRztJQWJBLHlCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O3lCQUNNLENBQUEsSUFBSSxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUMsQ0FBQSxFQUFsQix5QkFBa0I7Ozt5QkFDYixDQUFDOzs7O29CQUNVLEtBQUEsU0FBQSxJQUFLLENBQUMsT0FBTyxDQUFBOzs7O29CQUFyQixJQUFLO29CQUFtQixxQkFBTSxJQUFLLEVBQUE7O29CQUFYLFNBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFHdEMsQ0FBRSxHQUFFLENBQUU7Ozt5QkFBQyxDQUFBLENBQUUsR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFBOzs7O29CQUNiLEtBQUEsU0FBQSxJQUFLLENBQUMsT0FBTyxDQUFBOzs7O29CQUFyQixJQUFLO29CQUFtQixxQkFBTSxJQUFLLEVBQUE7O29CQUFYLFNBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBRGQsQ0FBRSxFQUFFLENBQUE7Ozs7O0tBSXZDO0lBQ0gscUJBQUE7QUFBQSxDQXJCQSxBQXFCQSxDQXJCcUMsb0JBQVUsR0FxQi9DO0FBZ0JBO0lBQ0EsaUNBQWlDO0lBQ2pDLGNBQWMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ2pDLHFCQUFxQjtJQUNyQixjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUNoQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUExQkgsZ0JBQWdDLE1BQXlCLEVBQUMsS0FBbUI7SUFBbkIsc0JBQUEsRUFBQSxTQUFrQixDQUFDO0lBNEIzRSxNQTNCTSxDQUFBLElBQUksY0FBZSxDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTRCcEQsQ0FBQztBQTdCRCx3QkE2QkM7QUFDRDs7Ozs7R0FLRztBQS9CSCxzQkFBc0MsS0FBYyxFQUFDLEtBQW1CO0lBQW5CLHNCQUFBLEVBQUEsU0FBa0IsQ0FBQztJQWlDdEUsTUFoQ00sQ0FBQSxJQUFJLGNBQWUsQ0FBVSxPQUFFLENBQUMsS0FBSyxDQUFDLEVBQUMsS0FBTSxDQUFDLENBQUM7QUFpQ3ZELENBaENDO0FBRkQsb0NBRUMiLCJmaWxlIjoicmVwZWF0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgb2YgfSBmcm9tICcuL29mJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLm9mXCIpO1xuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFJlcGVhdEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBpZiAodGhpcy5fY291bnQgPT09IC0xKSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7IHlpZWxkIGl0ZW07IH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwOyBpIDwgdGhpcy5fY291bnQ7IGkrKykge1xuICAgICAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7IHlpZWxkIGl0ZW07IH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gUmVwZWF0SXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuUmVwZWF0SXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblJlcGVhdEl0ZXJhYmxlLnByb3RvdHlwZS5fY291bnQ7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyPX0gY291bnRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlcGVhdDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyID0gLTEpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFJlcGVhdEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQpO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHtUU291cmNlfSB2YWx1ZVxuICogQHBhcmFtIHtudW1iZXI9fSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVwZWF0U3RhdGljPFRTb3VyY2U+KHZhbHVlOiBUU291cmNlLCBjb3VudDogbnVtYmVyID0gLTEpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFJlcGVhdEl0ZXJhYmxlPFRTb3VyY2U+KG9mKHZhbHVlKSwgY291bnQpO1xufVxuIl19