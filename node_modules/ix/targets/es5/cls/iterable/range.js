goog.module('targets.es5.cls.iterable.range'); exports = {}; var module = {id: 'targets/es5/cls/iterable/range.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var RangeIterable = (function (_super) {
    __extends(RangeIterable, _super);
    /**
     * @param {number} start
     * @param {number} count
     */
    function RangeIterable(start, count) {
        var _this = _super.call(this) || this;
        _this._start = start;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!IterableIterator<number>}
     */
    RangeIterable.prototype[Symbol.iterator] = function () {
        var current, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    current = this._start, end = this._start + this._count;
                    _a.label = 1;
                case 1:
                    if (!(current < end)) return [3 /*break*/, 4];
                    return [4 /*yield*/, current];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    current++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    };
    return RangeIterable;
}(iterable_1.IterableX));
function RangeIterable_tsickle_Closure_declarations() {
    /** @type {number} */
    RangeIterable.prototype._start;
    /** @type {number} */
    RangeIterable.prototype._count;
}
/**
 * @param {number} start
 * @param {number} count
 * @return {!tsickle_forward_declare_1.IterableX<number>}
 */
function range(start, count) {
    return new RangeIterable(start, count);
}
exports.range = range;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9yYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsd0NBTGtCO0FBTWxCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBSjlGO0lBQTJCLGlDQUFrQjtJQVE3Qzs7O09BR0c7SUFQRCx1QkFBWSxLQUFhLEVBQUMsS0FBYztRQUF4QyxZQVNFLGlCQVJPLFNBV1I7UUFGQyxLQVJJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQVNwQixLQVJJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQzs7SUFTdEIsQ0FBQztJQUNIOztPQUVHO0lBVEEsd0JBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBQ1UsT0FBUSxHQUFFLElBQUssQ0FBQyxNQUFNLEVBQUMsR0FBSSxHQUFFLElBQUssQ0FBQyxNQUFNLEdBQUUsSUFBSyxDQUFDLE1BQU07Ozt5QkFBQyxDQUFBLE9BQVEsR0FBRSxHQUFJLENBQUE7b0JBVzVFLHFCQVZLLE9BQVEsRUFBQTs7b0JBVWIsU0FWYSxDQUFDOzs7b0JBRCtELE9BQVEsRUFBRSxDQUFBOzs7OztLQUcxRjtJQUNILG9CQUFBO0FBQUEsQ0FmQSxBQWVBLENBZjJCLG9CQUFVLEdBZXJDO0FBWUE7SUFDQSxxQkFBcUI7SUFDckIsYUFBYSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDL0IscUJBQXFCO0lBQ3JCLGFBQWEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQy9CLENBQUM7QUFFRDs7OztHQUlHO0FBckJILGVBQXNCLEtBQWEsRUFBQyxLQUFjO0lBdUJoRCxNQXRCTSxDQUFBLElBQUksYUFBYyxDQUFDLEtBQUssRUFBQyxLQUFNLENBQUMsQ0FBQztBQXVCekMsQ0F0QkM7QUFGRCxzQkFFQyIsImZpbGUiOiJyYW5nZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuY2xhc3MgUmFuZ2VJdGVyYWJsZSBleHRlbmRzIEl0ZXJhYmxlWDxudW1iZXI+IHtcbnByaXZhdGUgX3N0YXJ0OiBudW1iZXI7XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnRcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3RvcihzdGFydDogbnVtYmVyLCBjb3VudDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zdGFydCA9IHN0YXJ0O1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8bnVtYmVyPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBjdXJyZW50ID0gdGhpcy5fc3RhcnQsIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBlbmQgPSB0aGlzLl9zdGFydCArIHRoaXMuX2NvdW50OyBjdXJyZW50IDwgZW5kOyBjdXJyZW50KyspIHtcbiAgICAgIHlpZWxkIGN1cnJlbnQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFJhbmdlSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuUmFuZ2VJdGVyYWJsZS5wcm90b3R5cGUuX3N0YXJ0O1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5SYW5nZUl0ZXJhYmxlLnByb3RvdHlwZS5fY291bnQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0XG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxudW1iZXI+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmFuZ2Uoc3RhcnQ6IG51bWJlciwgY291bnQ6IG51bWJlcik6IEl0ZXJhYmxlWDxudW1iZXI+IHtcbiAgcmV0dXJuIG5ldyBSYW5nZUl0ZXJhYmxlKHN0YXJ0LCBjb3VudCk7XG59XG4iXX0=