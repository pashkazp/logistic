goog.module('targets.es5.cls.iterable.groupby'); exports = {}; var module = {id: 'targets/es5/cls/iterable/groupby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var _grouping_1 = goog.require('targets.es5.cls.iterable._grouping');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._grouping");
/**
 * @template TKey, TValue
 */
var GroupedIterable = (function (_super) {
    __extends(GroupedIterable, _super);
    /**
     * @param {TKey} key
     * @param {!Iterable<TValue>} source
     */
    function GroupedIterable(key, source) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!Iterator<TValue>}
     */
    GroupedIterable.prototype[Symbol.iterator] = function () {
        return this._source[Symbol.iterator]();
    };
    return GroupedIterable;
}(iterable_1.IterableX));
exports.GroupedIterable = GroupedIterable;
function GroupedIterable_tsickle_Closure_declarations() {
    /** @type {TKey} */
    GroupedIterable.prototype.key;
    /** @type {!Iterable<TValue>} */
    GroupedIterable.prototype._source;
}
/**
 * @template TSource, TKey, TValue
 */
var GroupByIterable = (function (_super) {
    __extends(GroupByIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TSource): TValue} elementSelector
     */
    function GroupByIterable(source, keySelector, elementSelector) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._elementSelector = elementSelector;
        return _this;
    }
    /**
     * @return {!IterableIterator<!GroupedIterable<TKey, TValue>>}
     */
    GroupByIterable.prototype[Symbol.iterator] = function () {
        var map, map_1, map_1_1, _a, key, values, e_1_1, e_1, _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    map = _grouping_1.createGrouping(this._source, this._keySelector, this._elementSelector);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 6, 7, 8]);
                    map_1 = __values(map), map_1_1 = map_1.next();
                    _c.label = 2;
                case 2:
                    if (!!map_1_1.done) return [3 /*break*/, 5];
                    _a = __read(map_1_1.value, 2), key = _a[0], values = _a[1];
                    return [4 /*yield*/, new GroupedIterable(key, values)];
                case 3:
                    _c.sent();
                    _c.label = 4;
                case 4:
                    map_1_1 = map_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (map_1_1 && !map_1_1.done && (_b = map_1.return)) _b.call(map_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return GroupByIterable;
}(iterable_1.IterableX));
exports.GroupByIterable = GroupByIterable;
function GroupByIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    GroupByIterable.prototype._source;
    /** @type {function(TSource): TKey} */
    GroupByIterable.prototype._keySelector;
    /** @type {function(TSource): TValue} */
    GroupByIterable.prototype._elementSelector;
}
/**
 * @template TSource, TKey, TValue
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TSource): TValue=} elementSelector
 * @return {!tsickle_forward_declare_1.IterableX<!GroupedIterable<TKey, TValue>>}
 */
function groupBy(source, keySelector, elementSelector) {
    if (elementSelector === void 0) { elementSelector = identity_1.identity; }
    return new GroupByIterable(source, keySelector, elementSelector);
}
exports.groupBy = groupBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9ncm91cGJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCx3Q0FMa0I7QUFNbEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLGlEQU5pQjtBQU9qQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FQdEQ7QUFRaEQseUNBUHVCO0FBUXZCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxnREFBZ0QsQ0FBQyxDQUFDO0FBQ3hHOztHQUVHO0FBVEg7SUFBa0QsbUNBQWtCO0lBYXBFOzs7T0FHRztJQVpELHlCQUFZLEdBQVMsRUFBQyxNQUF5QjtRQUEvQyxZQWNFLGlCQWJPLFNBZ0JSO1FBRkMsS0FiSSxDQUFDLEdBQUcsR0FBRSxHQUFJLENBQUM7UUFjZixLQWJJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQzs7SUFjeEIsQ0FBQztJQUNIOztPQUVHO0lBZEQsMEJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFqQjtRQWdCRSxNQWZNLENBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQWdCekMsQ0FmQztJQUNILHNCQUFBO0FBQUEsQ0FiQSxBQWFBLENBYmtELG9CQUFVLEdBYTVEO0FBYlksMENBQWdCO0FBOEI1QjtJQUNBLG1CQUFtQjtJQUNuQixlQUFlLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUM5QixnQ0FBZ0M7SUFDaEMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDbEMsQ0FBQztBQUVEOztHQUVHO0FBeEJIO0lBQTJELG1DQUF5QztJQTZCcEc7Ozs7T0FJRztJQTVCRCx5QkE4QkksTUE3QnlCLEVBOEJ6QixXQTdCcUMsRUE4QnJDLGVBN0IyQztRQUgvQyxZQWlDRSxpQkE3Qk8sU0FpQ1I7UUFIQyxLQTdCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUE4QnRCLEtBN0JJLENBQUMsWUFBWSxHQUFFLFdBQVksQ0FBQztRQThCaEMsS0E3QkksQ0FBQyxnQkFBZ0IsR0FBRSxlQUFnQixDQUFDOztJQThCMUMsQ0FBQztJQUNIOztPQUVHO0lBOUJBLDBCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNPLEdBQUksR0FBRSwwQkFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSyxDQUFDLFlBQVksRUFBQyxJQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzs7OztvQkFDMUQsUUFBQSxTQUFBLEdBQUksQ0FBQTs7OztvQkFBckIsS0FBQSx3QkFBYyxFQUFaLEdBQUcsUUFBQSxFQUFDLE1BQU8sUUFBQTtvQkFnQ25CLHFCQS9CSyxJQUFJLGVBQWdCLENBQUMsR0FBRyxFQUFDLE1BQU8sQ0FBQyxFQUFBOztvQkErQnRDLFNBL0JzQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBRTFDO0lBQ0gsc0JBQUE7QUFBQSxDQXJCQSxBQXFCQSxDQXJCMkQsb0JBQVUsR0FxQnJFO0FBckJZLDBDQUFnQjtBQXNENUI7SUFDQSxpQ0FBaUM7SUFDakMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDbEMsc0NBQXNDO0lBQ3RDLGVBQWUsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ3ZDLHdDQUF3QztJQUN4QyxlQUFlLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDO0FBQzNDLENBQUM7QUFVRDs7Ozs7O0dBTUc7QUEvQ0gsaUJBaURJLE1BaER5QixFQWlEekIsV0FoRHFDLEVBaURyQyxlQWhEc0Q7SUFnRHRELGdDQUFBLEVBQUEsa0JBaEQ2QyxtQkFBUztJQWlEeEQsTUFoRE0sQ0FBQSxJQUFJLGVBQWdCLENBQXdCLE1BQU0sRUFBQyxXQUFZLEVBQUMsZUFBZ0IsQ0FBQyxDQUFDO0FBaUQxRixDQWhEQztBQUxELDBCQUtDIiwiZmlsZSI6Imdyb3VwYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG5pbXBvcnQgeyBjcmVhdGVHcm91cGluZyB9IGZyb20gJy4vX2dyb3VwaW5nJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLl9ncm91cGluZ1wiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRLZXksIFRWYWx1ZVxuICovXG5leHBvcnQgY2xhc3MgR3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFZhbHVlPiB7XG5wdWJsaWMgcmVhZG9ubHkga2V5OiBUS2V5O1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUVmFsdWU+O1xuLyoqXG4gKiBAcGFyYW0ge1RLZXl9IGtleVxuICogQHBhcmFtIHshSXRlcmFibGU8VFZhbHVlPn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKGtleTogVEtleSwgc291cmNlOiBJdGVyYWJsZTxUVmFsdWU+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmtleSA9IGtleTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhdG9yPFRWYWx1ZT59XG4gKi9cbltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIEdyb3VwZWRJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtUS2V5fSAqL1xuR3JvdXBlZEl0ZXJhYmxlLnByb3RvdHlwZS5rZXk7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUVmFsdWU+fSAqL1xuR3JvdXBlZEl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5LCBUVmFsdWVcbiAqL1xuZXhwb3J0IGNsYXNzIEdyb3VwQnlJdGVyYWJsZTxUU291cmNlLCBUS2V5LCBUVmFsdWU+IGV4dGVuZHMgSXRlcmFibGVYPEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+PiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfa2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleTtcbnByaXZhdGUgX2VsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWU7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUVmFsdWV9IGVsZW1lbnRTZWxlY3RvclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5LFxuICAgICAgZWxlbWVudFNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRWYWx1ZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgdGhpcy5fZWxlbWVudFNlbGVjdG9yID0gZWxlbWVudFNlbGVjdG9yO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPCFHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFNYXA8VEtleSwgIUFycmF5PFRWYWx1ZT4+fSAqLyBtYXAgPSBjcmVhdGVHcm91cGluZyh0aGlzLl9zb3VyY2UsIHRoaXMuX2tleVNlbGVjdG9yLCB0aGlzLl9lbGVtZW50U2VsZWN0b3IpO1xuICAgIGZvciAobGV0IFtrZXksIHZhbHVlc10gb2YgbWFwKSB7XG4gICAgICB5aWVsZCBuZXcgR3JvdXBlZEl0ZXJhYmxlKGtleSwgdmFsdWVzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gR3JvdXBCeUl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cbkdyb3VwQnlJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9ICovXG5Hcm91cEJ5SXRlcmFibGUucHJvdG90eXBlLl9rZXlTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRWYWx1ZX0gKi9cbkdyb3VwQnlJdGVyYWJsZS5wcm90b3R5cGUuX2VsZW1lbnRTZWxlY3Rvcjtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBCeTxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkpOiBJdGVyYWJsZVg8R3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRTb3VyY2U+PjtcbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5PFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oXG4gIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksXG4gIGVsZW1lbnRTZWxlY3Rvcj86ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlKTogSXRlcmFibGVYPEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+Pjtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXksIFRWYWx1ZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogVEtleX0ga2V5U2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRWYWx1ZT19IGVsZW1lbnRTZWxlY3RvclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPCFHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5PFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5LFxuICAgIGVsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUgPSBpZGVudGl0eSk6IEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj4ge1xuICByZXR1cm4gbmV3IEdyb3VwQnlJdGVyYWJsZTxUU291cmNlLCBUS2V5LCBUVmFsdWU+KHNvdXJjZSwga2V5U2VsZWN0b3IsIGVsZW1lbnRTZWxlY3Rvcik7XG59XG4iXX0=