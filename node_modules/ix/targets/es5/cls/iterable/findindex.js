goog.module('targets.es5.cls.iterable.findindex'); exports = {}; var module = {id: 'targets/es5/cls/iterable/findindex.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var bindcallback_1 = goog.require('targets.es5.cls.internal.bindcallback');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template T
 * @param {!Iterable<T>} source
 * @param {function(T, number): boolean} fn
 * @param {?=} thisArg
 * @return {number}
 */
function findIndex(source, fn, thisArg) {
    if (typeof fn !== 'function') {
        throw new TypeError();
    }
    var /** @type {?} */ f = bindcallback_1.bindCallback(fn, thisArg, 2);
    var /** @type {number} */ i = 0;
    try {
        for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
            var item = source_1_1.value;
            if (f(item, i++)) {
                return i;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return -1;
    var e_1, _a;
}
exports.findIndex = findIndex;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9maW5kaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHlEQUxxQjtBQU1yQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUMzRzs7Ozs7O0dBTUc7QUFYSCxtQkFBNkIsTUFBbUIsRUFBQyxFQUF5QyxFQUFDLE9BQWM7SUFhdkcsRUFBRSxDQUFDLENBWkMsT0FBTSxFQUFHLEtBQUksVUFBVyxDQUFDLENBQUEsQ0FBRTtRQUFBLE1BQU0sSUFBSSxTQUFVLEVBQUUsQ0FBQztJQUFBLENBQUU7SUFheEQsSUFBTSxnQkFaRCxDQUFBLENBQUUsR0FBRSwyQkFBYSxDQUFDLEVBQUUsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUM7SUFhdkMsSUFBSSxxQkFaRCxDQUFBLENBQUUsR0FBRSxDQUFFLENBQUM7O1FBY1YsR0FBRyxDQUFDLENBWlksSUFBQSxXQUFBLFNBQUEsTUFBTyxDQUFBLDhCQUFBO1lBQWxCLElBQUcsSUFBSyxtQkFBQTtZQWFYLEVBQUUsQ0FBQyxDQVpDLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBYWpCLE1BWk0sQ0FBQSxDQUFFLENBQUM7WUFhWCxDQVpDO1NBQ0Y7Ozs7Ozs7OztJQWFELE1BWk0sQ0FBQSxDQUFFLENBQUMsQ0FBQzs7QUFhWixDQVpDO0FBWEQsOEJBV0MiLCJmaWxlIjoiZmluZGluZGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmJpbmRjYWxsYmFja1wiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCwgbnVtYmVyKTogYm9vbGVhbn0gZm5cbiAqIEBwYXJhbSB7Pz19IHRoaXNBcmdcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbmRJbmRleDxUPihzb3VyY2U6IEl0ZXJhYmxlPFQ+LCBmbjogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuLCB0aGlzQXJnPzogYW55KTogbnVtYmVyIHtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCk7IH1cbiAgY29uc3QgLyoqIEB0eXBlIHs/fSAqLyBmID0gYmluZENhbGxiYWNrKGZuLCB0aGlzQXJnLCAyKTtcbiAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDtcblxuICBmb3IgKGxldCAvKiogQHR5cGUge1R9ICovIGl0ZW0gb2Ygc291cmNlKSB7XG4gICAgaWYgKGYoaXRlbSwgaSsrKSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cbiJdfQ==