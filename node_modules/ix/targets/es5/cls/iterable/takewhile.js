goog.module('targets.es5.cls.iterable.takewhile'); exports = {}; var module = {id: 'targets/es5/cls/iterable/takewhile.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var TakeWhileIterable = (function (_super) {
    __extends(TakeWhileIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource, number): boolean} predicate
     */
    function TakeWhileIterable(source, predicate) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._predicate = predicate;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    TakeWhileIterable.prototype[Symbol.iterator] = function () {
        var i, _a, _b, item, e_1_1, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    i = 0;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = __values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    if (!this._predicate(item, i++)) {
                        return [3 /*break*/, 5];
                    }
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return TakeWhileIterable;
}(iterable_1.IterableX));
function TakeWhileIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    TakeWhileIterable.prototype._source;
    /** @type {function(TSource, number): boolean} */
    TakeWhileIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource, number): boolean} predicate
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function takeWhile(source, predicate) {
    return new TakeWhileIterable(source, predicate);
}
exports.takeWhile = takeWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS90YWtld2hpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBIO0lBQXdDLHFDQUFtQjtJQVczRDs7O09BR0c7SUFWRCwyQkFBWSxNQUF5QixFQUFDLFNBQXNEO1FBQTVGLFlBWUUsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLEtBWEksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDOztJQVk5QixDQUFDO0lBQ0g7O09BRUc7SUFaQSw0QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDSyxDQUFFLEdBQUUsQ0FBRSxDQUFDOzs7O29CQUNNLEtBQUEsU0FBQSxJQUFLLENBQUMsT0FBTyxDQUFBOzs7O29CQUFyQixJQUFLO29CQWNYLEVBQUUsQ0FBQyxDQWJDLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBQUEsTUFBTyxrQkFBQTtvQkFBQSxDQUFFO29CQWMzQyxxQkFiSyxJQUFLLEVBQUE7O29CQWFWLFNBYlUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUVkO0lBQ0gsd0JBQUE7QUFBQSxDQWpCQSxBQWlCQSxDQWpCd0Msb0JBQVUsR0FpQmxEO0FBZUE7SUFDQSxpQ0FBaUM7SUFDakMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNwQyxpREFBaUQ7SUFDakQsaUJBQWlCLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQztBQUN2QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6QkgsbUJBMkJJLE1BMUJ5QixFQTJCekIsU0ExQnFEO0lBMkJ2RCxNQTFCTSxDQUFBLElBQUksaUJBQWtCLENBQVUsTUFBTSxFQUFDLFNBQVUsQ0FBQyxDQUFDO0FBMkIzRCxDQTFCQztBQUpELDhCQUlDIiwiZmlsZSI6InRha2V3aGlsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUYWtlV2hpbGVJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogYm9vbGVhbn0gcHJlZGljYXRlXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoIXRoaXMuX3ByZWRpY2F0ZShpdGVtLCBpKyspKSB7IGJyZWFrOyB9XG4gICAgICB5aWVsZCBpdGVtO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYWtlV2hpbGVJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5UYWtlV2hpbGVJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogYm9vbGVhbn0gKi9cblRha2VXaGlsZUl0ZXJhYmxlLnByb3RvdHlwZS5fcHJlZGljYXRlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFrZVdoaWxlPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRha2VXaGlsZUl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgcHJlZGljYXRlKTtcbn1cbiJdfQ==