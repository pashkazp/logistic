goog.module('targets.es5.cls.iterable.takelast'); exports = {}; var module = {id: 'targets/es5/cls/iterable/takelast.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var TakeLastIterable = (function (_super) {
    __extends(TakeLastIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} count
     */
    function TakeLastIterable(source, count) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._count = count;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    TakeLastIterable.prototype[Symbol.iterator] = function () {
        var q, _a, _b, item, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    if (this._count === 0) {
                        return [2 /*return*/];
                    }
                    q = [];
                    try {
                        for (_a = __values(this._source), _b = _a.next(); !_b.done; _b = _a.next()) {
                            item = _b.value;
                            if (q.length >= this._count) {
                                q.shift();
                            }
                            q.push(item);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    _d.label = 1;
                case 1:
                    if (!(q.length > 0)) return [3 /*break*/, 3];
                    return [4 /*yield*/, /** @type {TSource} */ ((q.shift()))];
                case 2:
                    _d.sent();
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    };
    return TakeLastIterable;
}(iterable_1.IterableX));
function TakeLastIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    TakeLastIterable.prototype._source;
    /** @type {number} */
    TakeLastIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function takeLast(source, count) {
    return new TakeLastIterable(source, count);
}
exports.takeLast = takeLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS90YWtlbGFzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsd0NBTGtCO0FBTWxCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEg7SUFBdUMsb0NBQW1CO0lBVzFEOzs7T0FHRztJQVZELDBCQUFZLE1BQXlCLEVBQUMsS0FBYztRQUFwRCxZQVlFLGlCQVhPLFNBY1I7UUFGQyxLQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixLQVhJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQzs7SUFZdEIsQ0FBQztJQUNIOztPQUVHO0lBWkEsMkJBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBY0UsRUFBRSxDQUFDLENBYkMsSUFBSSxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO3dCQUFBLE1BQUEsZ0JBQVE7b0JBQUEsQ0FBRTtvQkFFL0IsQ0FBRSxHQUFFLEVBQUcsQ0FBQzs7d0JBY1gsR0FBRyxDQUFDLENBYlksS0FBQSxTQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7NEJBQXJCLElBQUs7NEJBY1gsRUFBRSxDQUFDLENBYkMsQ0FBQyxDQUFDLE1BQU0sSUFBRyxJQUFLLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBRTtnQ0FBQSxDQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7NEJBQUEsQ0FBRTs0QkFjM0MsQ0FiQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzt5QkFDZDs7Ozs7Ozs7Ozs7eUJBRU0sQ0FBQSxDQUFDLENBQUMsTUFBTSxHQUFFLENBQUUsQ0FBQTtvQkFjakIscUJBQU0sc0JBQXNCLENBQUEsQ0FBQyxDQWJ4QixDQUFFLENBQUMsS0FBSyxFQUFBLENBQUEsQ0FBRyxFQUFBOztvQkFhaEIsU0FiZ0IsQ0FBQzs7Ozs7S0FFcEI7SUFDSCx1QkFBQTtBQUFBLENBdkJBLEFBdUJBLENBdkJ1QyxvQkFBVSxHQXVCakQ7QUFlQTtJQUNBLGlDQUFpQztJQUNqQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ25DLHFCQUFxQjtJQUNyQixnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxrQkFBa0MsTUFBeUIsRUFBQyxLQUFjO0lBMkJ4RSxNQTFCTSxDQUFBLElBQUksZ0JBQWlCLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBMkJ0RCxDQTFCQztBQUZELDRCQUVDIiwiZmlsZSI6InRha2VsYXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFRha2VMYXN0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fY291bnQgPSBjb3VudDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGlmICh0aGlzLl9jb3VudCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gcSA9IFtdO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChxLmxlbmd0aCA+PSB0aGlzLl9jb3VudCkgeyBxLnNoaWZ0KCk7IH1cbiAgICAgIHEucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICB3aGlsZSAocS5sZW5ndGggPiAwKSB7XG4gICAgICB5aWVsZCAvKiogQHR5cGUge1RTb3VyY2V9ICovKCggcS5zaGlmdCgpKSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFRha2VMYXN0SXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuVGFrZUxhc3RJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuVGFrZUxhc3RJdGVyYWJsZS5wcm90b3R5cGUuX2NvdW50O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRha2VMYXN0PFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRha2VMYXN0SXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBjb3VudCk7XG59XG4iXX0=