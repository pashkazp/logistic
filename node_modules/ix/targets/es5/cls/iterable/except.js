goog.module('targets.es5.cls.iterable.except'); exports = {}; var module = {id: 'targets/es5/cls/iterable/except.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var arrayindexof_1 = goog.require('targets.es5.cls.internal.arrayindexof');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es5.cls.internal.comparer');
var tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource
 */
var ExceptIterable = (function (_super) {
    __extends(ExceptIterable, _super);
    /**
     * @param {!Iterable<TSource>} first
     * @param {!Iterable<TSource>} second
     * @param {function(TSource, TSource): boolean} comparer
     */
    function ExceptIterable(first, second, comparer) {
        var _this = _super.call(this) || this;
        _this._first = first;
        _this._second = second;
        _this._comparer = comparer;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    ExceptIterable.prototype[Symbol.iterator] = function () {
        var map, _a, _b, secondItem, _c, _d, firstItem, e_1_1, e_2, _e, e_1, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    map = [];
                    try {
                        for (_a = __values(this._second), _b = _a.next(); !_b.done; _b = _a.next()) {
                            secondItem = _b.value;
                            map.push(secondItem);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 6, 7, 8]);
                    _c = __values(this._first), _d = _c.next();
                    _g.label = 2;
                case 2:
                    if (!!_d.done) return [3 /*break*/, 5];
                    firstItem = _d.value;
                    if (!(arrayindexof_1.arrayIndexOf(map, firstItem, this._comparer) === -1)) return [3 /*break*/, 4];
                    map.push(firstItem);
                    return [4 /*yield*/, firstItem];
                case 3:
                    _g.sent();
                    _g.label = 4;
                case 4:
                    _d = _c.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return ExceptIterable;
}(iterable_1.IterableX));
function ExceptIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    ExceptIterable.prototype._first;
    /** @type {!Iterable<TSource>} */
    ExceptIterable.prototype._second;
    /** @type {function(TSource, TSource): boolean} */
    ExceptIterable.prototype._comparer;
}
/**
 * Produces the set difference of two sequences by using the an equality comparer to compare values.
 * elements to be removed from the returned sequence.
 * @template TSource
 * @param {!Iterable<TSource>} first
 * @param {!Iterable<TSource>} second
 * @param {function(TSource, TSource): boolean=} comparer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function except(first, second, comparer) {
    if (comparer === void 0) { comparer = comparer_1.comparer; }
    return new ExceptIterable(first, second, comparer);
}
exports.except = except;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9leGNlcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMseURBTnFCO0FBT3JCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQVBsRDtBQVF4RCxpREFQb0M7QUFRcEMsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFUSDtJQUFxQyxrQ0FBbUI7SUFjeEQ7Ozs7T0FJRztJQWJELHdCQUFZLEtBQXdCLEVBQUMsTUFBMEIsRUFBQyxRQUE4QztRQUE5RyxZQWVFLGlCQWRPLFNBa0JSO1FBSEMsS0FkSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFlcEIsS0FkSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFldEIsS0FkSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7O0lBZTVCLENBQUM7SUFDSDs7T0FFRztJQWZBLHlCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNLLEdBQUksR0FBRSxFQUFHLENBQUM7O3dCQWlCYixHQUFHLENBQUMsQ0FoQmtCLEtBQUEsU0FBQSxJQUFLLENBQUMsT0FBTyxDQUFBOzRCQUEzQixVQUFXOzRCQWlCakIsR0FoQkcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7eUJBQ3RCOzs7Ozs7Ozs7Ozs7b0JBRW9CLEtBQUEsU0FBQSxJQUFLLENBQUMsTUFBTSxDQUFBOzs7O29CQUF6QixTQUFVO3lCQUNaLENBQUEsMkJBQVksQ0FBQyxHQUFHLEVBQUMsU0FBVSxFQUFDLElBQUssQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFFLENBQUMsQ0FBQSxFQUFuRCx3QkFBbUQ7b0JBaUJyRCxHQWhCRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFpQnBCLHFCQWhCSyxTQUFVLEVBQUE7O29CQWdCZixTQWhCZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR3JCO0lBQ0gscUJBQUE7QUFBQSxDQXpCQSxBQXlCQSxDQXpCcUMsb0JBQVUsR0F5Qi9DO0FBa0JBO0lBQ0EsaUNBQWlDO0lBQ2pDLGNBQWMsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2hDLGlDQUFpQztJQUNqQyxjQUFjLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNqQyxrREFBa0Q7SUFDbEQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDbkMsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBekJILGdCQTJCSSxLQTFCd0IsRUEyQnhCLE1BMUJ5QixFQTJCekIsUUExQitEO0lBMEIvRCx5QkFBQSxFQUFBLFdBMUIrQyxtQkFBZ0I7SUEyQmpFLE1BMUJNLENBQUEsSUFBSSxjQUFlLENBQVUsS0FBSyxFQUFDLE1BQU8sRUFBQyxRQUFTLENBQUMsQ0FBQztBQTJCOUQsQ0ExQkM7QUFMRCx3QkFLQyIsImZpbGUiOiJleGNlcHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGFycmF5SW5kZXhPZiB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5hcnJheWluZGV4b2ZcIik7XG5pbXBvcnQgeyBjb21wYXJlciBhcyBkZWZhdWx0Q29tcGFyZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgRXhjZXB0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfZmlyc3Q6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGZpcnN0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiBib29sZWFufSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sIHNlY29uZDogSXRlcmFibGU8VFNvdXJjZT4sIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZmlyc3QgPSBmaXJzdDtcbiAgICB0aGlzLl9zZWNvbmQgPSBzZWNvbmQ7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gbWFwID0gW107XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBzZWNvbmRJdGVtIG9mIHRoaXMuX3NlY29uZCkge1xuICAgICAgbWFwLnB1c2goc2Vjb25kSXRlbSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBmaXJzdEl0ZW0gb2YgdGhpcy5fZmlyc3QpIHtcbiAgICAgIGlmIChhcnJheUluZGV4T2YobWFwLCBmaXJzdEl0ZW0sIHRoaXMuX2NvbXBhcmVyKSA9PT0gLTEpIHtcbiAgICAgICAgbWFwLnB1c2goZmlyc3RJdGVtKTtcbiAgICAgICAgeWllbGQgZmlyc3RJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBFeGNlcHRJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeGNlcHRJdGVyYWJsZS5wcm90b3R5cGUuX2ZpcnN0O1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeGNlcHRJdGVyYWJsZS5wcm90b3R5cGUuX3NlY29uZDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IGJvb2xlYW59ICovXG5FeGNlcHRJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIFByb2R1Y2VzIHRoZSBzZXQgZGlmZmVyZW5jZSBvZiB0d28gc2VxdWVuY2VzIGJ5IHVzaW5nIHRoZSBhbiBlcXVhbGl0eSBjb21wYXJlciB0byBjb21wYXJlIHZhbHVlcy5cbiAqIGVsZW1lbnRzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgcmV0dXJuZWQgc2VxdWVuY2UuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGZpcnN0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiBib29sZWFuPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VwdDxUU291cmNlPihcbiAgICBmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEV4Y2VwdEl0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==