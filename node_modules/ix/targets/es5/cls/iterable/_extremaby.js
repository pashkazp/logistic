goog.module('targets.es5.cls.iterable._extremaby'); exports = {}; var module = {id: 'targets/es5/cls/iterable/_extremaby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @ignore
 * @template T
 * @param {T} key
 * @param {T} minValue
 * @return {number}
 */
function defaultCompare(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
exports.defaultCompare = defaultCompare;
/**
 * @ignore
 * @template TSource, TKey
 */
var ExtremaByIterable = (function (_super) {
    __extends(ExtremaByIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keyFn
     * @param {function(TKey, TKey): number} cmp
     */
    function ExtremaByIterable(source, keyFn, cmp) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keyFn = keyFn;
        _this._cmp = cmp;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    ExtremaByIterable.prototype[Symbol.iterator] = function () {
        var result, next, it, current, resKey, curr, key, c;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    result = [];
                    it = this._source[Symbol.iterator]();
                    if ((next = it.next()).done) {
                        throw new Error('Sequence contains no elements');
                    }
                    current = next.value, resKey = this._keyFn(current);
                    result.push(current);
                    while (!(next = it.next()).done) {
                        curr = next.value, key = this._keyFn(curr);
                        c = this._cmp(key, resKey);
                        if (c === 0) {
                            result.push(curr);
                        }
                        else if (c > 0) {
                            result = [curr];
                            resKey = key;
                        }
                    }
                    return [5 /*yield**/, __values(result)];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    };
    return ExtremaByIterable;
}(iterable_1.IterableX));
function ExtremaByIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    ExtremaByIterable.prototype._source;
    /** @type {function(TSource): TKey} */
    ExtremaByIterable.prototype._keyFn;
    /** @type {function(TKey, TKey): number} */
    ExtremaByIterable.prototype._cmp;
}
/**
 * @ignore
 * @template TSource, TKey
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keyFn
 * @param {function(TKey, TKey): number} cmp
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function extremaBy(source, keyFn, cmp) {
    return new ExtremaByIterable(source, keyFn, cmp);
}
exports.extremaBy = extremaBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9fZXh0cmVtYWJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCx3Q0FMa0I7QUFNbEIsSUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUY7Ozs7OztHQU1HO0FBUkgsd0JBQWtDLEdBQU0sRUFBQyxRQUFZO0lBVW5ELE1BVE0sQ0FBQSxHQUFJLEdBQUUsUUFBUyxHQUFFLENBQUUsR0FBRSxHQUFJLEdBQUUsUUFBUyxHQUFFLENBQUUsQ0FBQyxHQUFFLENBQUUsQ0FBQztBQVV0RCxDQUFDO0FBWEQsd0NBV0M7QUFDRDs7O0dBR0c7QUFSSDtJQUE4QyxxQ0FBbUI7SUFhakU7Ozs7T0FJRztJQVpELDJCQWNJLE1BYnlCLEVBY3pCLEtBYjJCLEVBYzNCLEdBYmlDO1FBSHJDLFlBaUJFLGlCQWJPLFNBaUJSO1FBSEMsS0FiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsS0FiSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFjcEIsS0FiSSxDQUFDLElBQUksR0FBRSxHQUFJLENBQUM7O0lBY2xCLENBQUM7SUFDSDs7T0FFRztJQWRBLDRCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNLLE1BQU8sR0FBYSxFQUFHLENBQU87b0JBQzVCLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO29CQWdCM0MsRUFBRSxDQUFDLENBZkMsQ0FBQyxJQUFJLEdBQUUsRUFBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTt3QkFnQjVCLE1BZkssSUFBSSxLQUFNLENBQUMsK0JBQStCLENBQUMsQ0FBQztvQkFnQm5ELENBZkM7b0JBRUUsT0FBUSxHQUFFLElBQUssQ0FBQyxLQUFLLEVBQUMsTUFBTyxHQUFFLElBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBZ0J4RCxNQWZNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO29CQWdCckIsT0FmTyxDQUFDLENBQUMsSUFBSSxHQUFFLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFFO3dCQUM3QixJQUFLLEdBQUUsSUFBSyxDQUFDLEtBQUssRUFBQyxHQUFJLEdBQUUsSUFBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDMUMsQ0FBRSxHQUFFLElBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLE1BQU8sQ0FBQyxDQUFDO3dCQWdCakMsRUFBRSxDQUFDLENBZkMsQ0FBQyxLQUFJLENBQUUsQ0FBQyxDQUFBLENBQUU7NEJBZ0JaLE1BZk0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBZ0JwQixDQWZDO3dCQUFBLElBQUssQ0FBQSxFQUFBLENBQUEsQ0FBSyxDQUFDLEdBQUUsQ0FBRSxDQUFDLENBQUEsQ0FBRTs0QkFnQmpCLE1BZk0sR0FBRSxDQUFFLElBQUksQ0FBQyxDQUFDOzRCQWdCaEIsTUFmTSxHQUFFLEdBQUksQ0FBQzt3QkFnQmYsQ0FmQztvQkFnQkgsQ0FmQztvQkFpQkQsc0JBQUEsU0FmTSxNQUFPLENBQUEsRUFBQTs7b0JBZWIsU0FmYSxDQUFDOzs7O0tBQ2Y7SUFDSCx3QkFBQTtBQUFBLENBckNBLEFBcUNBLENBckM4QyxvQkFBVSxHQXFDeEQ7QUFpQkE7SUFDQSxpQ0FBaUM7SUFDakMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNwQyxzQ0FBc0M7SUFDdEMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNuQywyQ0FBMkM7SUFDM0MsaUJBQWlCLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQztBQUNqQyxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQTVCSCxtQkE4QkksTUE3QnlCLEVBOEJ6QixLQTdCMkIsRUE4QjNCLEdBN0JpQztJQThCbkMsTUE3Qk0sQ0FBQSxJQUFJLGlCQUFrQixDQUFnQixNQUFNLEVBQUMsS0FBTSxFQUFDLEdBQUksQ0FBQyxDQUFDO0FBOEJsRSxDQTdCQztBQUxELDhCQUtDIiwiZmlsZSI6Il9leHRyZW1hYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7VH0ga2V5XG4gKiBAcGFyYW0ge1R9IG1pblZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0Q29tcGFyZTxUPihrZXk6IFQsIG1pblZhbHVlOiBUKTogbnVtYmVyIHtcbiAgcmV0dXJuIGtleSA+IG1pblZhbHVlID8gMSA6IGtleSA8IG1pblZhbHVlID8gLTEgOiAwO1xufVxuLyoqXG4gKiBAaWdub3JlXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICovXG5jbGFzcyBFeHRyZW1hQnlJdGVyYWJsZTxUU291cmNlLCBUS2V5PiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfa2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5O1xucHJpdmF0ZSBfY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSBrZXlGblxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogbnVtYmVyfSBjbXBcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5LFxuICAgICAgY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5Rm4gPSBrZXlGbjtcbiAgICB0aGlzLl9jbXAgPSBjbXA7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8VFNvdXJjZT59ICovIHJlc3VsdDogVFNvdXJjZVtdID0gW10sIC8qKiBAdHlwZSB7P30gKi8gbmV4dDtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGlmICgobmV4dCA9IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBubyBlbGVtZW50cycpO1xuICAgIH1cblxuICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGN1cnJlbnQgPSBuZXh0LnZhbHVlLCAvKiogQHR5cGUge1RLZXl9ICovIHJlc0tleSA9IHRoaXMuX2tleUZuKGN1cnJlbnQpO1xuICAgIHJlc3VsdC5wdXNoKGN1cnJlbnQpO1xuICAgIHdoaWxlICghKG5leHQgPSBpdC5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGN1cnIgPSBuZXh0LnZhbHVlLCAvKiogQHR5cGUge1RLZXl9ICovIGtleSA9IHRoaXMuX2tleUZuKGN1cnIpO1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGMgPSB0aGlzLl9jbXAoa2V5LCByZXNLZXkpO1xuICAgICAgaWYgKGMgPT09IDApIHtcbiAgICAgICAgcmVzdWx0LnB1c2goY3Vycik7XG4gICAgICB9IGVsc2UgaWYgKGMgPiAwKSB7XG4gICAgICAgIHJlc3VsdCA9IFtjdXJyXTtcbiAgICAgICAgcmVzS2V5ID0ga2V5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHlpZWxkKiByZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gRXh0cmVtYUJ5SXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRXh0cmVtYUJ5SXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSAqL1xuRXh0cmVtYUJ5SXRlcmFibGUucHJvdG90eXBlLl9rZXlGbjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IG51bWJlcn0gKi9cbkV4dHJlbWFCeUl0ZXJhYmxlLnByb3RvdHlwZS5fY21wO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSBrZXlGblxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogbnVtYmVyfSBjbXBcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJlbWFCeTxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleUZuOiAoeDogVFNvdXJjZSkgPT4gVEtleSxcbiAgICBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEV4dHJlbWFCeUl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5Rm4sIGNtcCk7XG59XG4iXX0=