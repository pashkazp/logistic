goog.module('targets.es5.cls.iterable.max'); exports = {}; var module = {id: 'targets/es5/cls/iterable/max.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!Iterable<?>} source
 * @param {function(?): number=} fn
 * @return {number}
 */
function max(source, fn) {
    if (fn === void 0) { fn = identity_1.identity; }
    var /** @type {boolean} */ atleastOnce = false;
    var /** @type {number} */ value = -Infinity;
    try {
        for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
            var item = source_1_1.value;
            if (!atleastOnce) {
                atleastOnce = true;
            }
            var /** @type {number} */ x = fn(item);
            if (x > value) {
                value = x;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (!atleastOnce) {
        throw new Error('Sequence contains no elements');
    }
    return value;
    var e_1, _a;
}
exports.max = max;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9tYXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILGlEQUxpQjtBQU1qQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FOdEQ7QUFVaEQ7Ozs7R0FJRztBQVZILGFBQW9CLE1BQXFCLEVBQUMsRUFBa0M7SUFBbEMsbUJBQUEsRUFBQSxLQUF5QixtQkFBUztJQVkxRSxJQUFJLHNCQVhELENBQUEsV0FBWSxHQUFFLEtBQU0sQ0FBQztJQVl4QixJQUFJLHFCQVhELENBQUEsS0FBTSxHQUFFLENBQUUsUUFBUSxDQUFDOztRQVl0QixHQUFHLENBQUMsQ0FYWSxJQUFBLFdBQUEsU0FBQSxNQUFPLENBQUEsOEJBQUE7WUFBbEIsSUFBRyxJQUFLLG1CQUFBO1lBWVgsRUFBRSxDQUFDLENBWEMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFFO2dCQVlqQixXQVhXLEdBQUUsSUFBSyxDQUFDO1lBWXJCLENBWEM7WUFZRCxJQUFJLHFCQVhELENBQUEsQ0FBRSxHQUFFLEVBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQVlqQixFQUFFLENBQUMsQ0FYQyxDQUFDLEdBQUUsS0FBTSxDQUFDLENBQUEsQ0FBRTtnQkFBQSxLQUFNLEdBQUUsQ0FBRSxDQUFDO1lBQUEsQ0FBRTtTQUM5Qjs7Ozs7Ozs7O0lBWUQsRUFBRSxDQUFDLENBWEMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFFO1FBWWpCLE1BWEssSUFBSSxLQUFNLENBQUMsK0JBQStCLENBQUMsQ0FBQztJQVluRCxDQVhDO0lBYUQsTUFYTSxDQUFBLEtBQU0sQ0FBQzs7QUFZZixDQVhDO0FBZkQsa0JBZUMiLCJmaWxlIjoibWF4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1heChzb3VyY2U6IEl0ZXJhYmxlPG51bWJlcj4sIGZuPzogKHg6IG51bWJlcikgPT4gbnVtYmVyKTogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIG1heDxUPihzb3VyY2U6IEl0ZXJhYmxlPFQ+LCBmbjogKHg6IFQpID0+IG51bWJlcik6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8Pz59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbig/KTogbnVtYmVyPX0gZm5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heChzb3VyY2U6IEl0ZXJhYmxlPGFueT4sIGZuOiAoeDogYW55KSA9PiBudW1iZXIgPSBpZGVudGl0eSk6IG51bWJlciB7XG4gIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGF0bGVhc3RPbmNlID0gZmFsc2U7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gdmFsdWUgPSAtSW5maW5pdHk7XG4gIGZvciAobGV0IC8qKiBAdHlwZSB7P30gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBpZiAoIWF0bGVhc3RPbmNlKSB7XG4gICAgICBhdGxlYXN0T25jZSA9IHRydWU7XG4gICAgfVxuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8geCA9IGZuKGl0ZW0pO1xuICAgIGlmICh4ID4gdmFsdWUpIHsgdmFsdWUgPSB4OyB9XG4gIH1cbiAgaWYgKCFhdGxlYXN0T25jZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2VxdWVuY2UgY29udGFpbnMgbm8gZWxlbWVudHMnKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbiJdfQ==