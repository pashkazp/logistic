goog.module('targets.es5.cls.iterable.startwith'); exports = {}; var module = {id: 'targets/es5/cls/iterable/startwith.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var StartWithIterable = (function (_super) {
    __extends(StartWithIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {!Array<TSource>} args
     */
    function StartWithIterable(source, args) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._args = args;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    StartWithIterable.prototype[Symbol.iterator] = function () {
        var _a, _b, x, e_1_1, _c, _d, item, e_2_1, e_1, _e, e_2, _f;
        return __generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    _g.trys.push([0, 5, 6, 7]);
                    _a = __values(this._args), _b = _a.next();
                    _g.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    x = _b.value;
                    return [4 /*yield*/, x];
                case 2:
                    _g.sent();
                    _g.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 7:
                    _g.trys.push([7, 12, 13, 14]);
                    _c = __values(this._source), _d = _c.next();
                    _g.label = 8;
                case 8:
                    if (!!_d.done) return [3 /*break*/, 11];
                    item = _d.value;
                    return [4 /*yield*/, item];
                case 9:
                    _g.sent();
                    _g.label = 10;
                case 10:
                    _d = _c.next();
                    return [3 /*break*/, 8];
                case 11: return [3 /*break*/, 14];
                case 12:
                    e_2_1 = _g.sent();
                    e_2 = { error: e_2_1 };
                    return [3 /*break*/, 14];
                case 13:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                    return [7 /*endfinally*/];
                case 14: return [2 /*return*/];
            }
        });
    };
    return StartWithIterable;
}(iterable_1.IterableX));
function StartWithIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    StartWithIterable.prototype._source;
    /** @type {!Array<TSource>} */
    StartWithIterable.prototype._args;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {...TSource} args
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function startWith(source) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new StartWithIterable(source, args);
}
exports.startWith = startWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zdGFydHdpdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBIO0lBQXdDLHFDQUFtQjtJQVczRDs7O09BR0c7SUFWRCwyQkFBWSxNQUF5QixFQUFDLElBQWdCO1FBQXRELFlBWUUsaUJBWE8sU0FjUjtRQUZDLEtBWEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBWXRCLEtBWEksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDOztJQVlwQixDQUFDO0lBQ0g7O09BRUc7SUFaQSw0QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7Ozs7b0JBQ2UsS0FBQSxTQUFBLElBQUssQ0FBQyxLQUFLLENBQUE7Ozs7b0JBQWhCLENBQUU7b0JBQWlCLHFCQUFNLENBQUUsRUFBQTs7b0JBQVIsU0FBUSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQ3BCLEtBQUEsU0FBQSxJQUFLLENBQUMsT0FBTyxDQUFBOzs7O29CQUFyQixJQUFLO29CQUFtQixxQkFBTSxJQUFLLEVBQUE7O29CQUFYLFNBQVcsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUM3QztJQUNILHdCQUFBO0FBQUEsQ0FkQSxBQWNBLENBZHdDLG9CQUFVLEdBY2xEO0FBZUE7SUFDQSxpQ0FBaUM7SUFDakMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNwQyw4QkFBOEI7SUFDOUIsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztBQUNsQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6QkgsbUJBMkJJLE1BMUJ5QjtJQTJCekIsY0ExQmtCO1NBMEJsQixVQTFCa0IsRUEwQmxCLHFCQTFCa0IsRUEwQmxCLElBMUJrQjtRQTBCbEIsNkJBMUJrQjs7SUEyQnBCLE1BMUJNLENBQUEsSUFBSSxpQkFBa0IsQ0FBVSxNQUFNLEVBQUMsSUFBSyxDQUFDLENBQUM7QUEyQnRELENBMUJDO0FBSkQsOEJBSUMiLCJmaWxlIjoic3RhcnR3aXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFN0YXJ0V2l0aEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9hcmdzOiBUU291cmNlW107XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7IUFycmF5PFRTb3VyY2U+fSBhcmdzXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGFyZ3M6IFRTb3VyY2VbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2FyZ3MgPSBhcmdzO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyB4IG9mIHRoaXMuX2FyZ3MpIHsgeWllbGQgeDsgfVxuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQgaXRlbTsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFN0YXJ0V2l0aEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cblN0YXJ0V2l0aEl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHshQXJyYXk8VFNvdXJjZT59ICovXG5TdGFydFdpdGhJdGVyYWJsZS5wcm90b3R5cGUuX2FyZ3M7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7Li4uVFNvdXJjZX0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRXaXRoPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgLi4uYXJnczogVFNvdXJjZVtdKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBTdGFydFdpdGhJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGFyZ3MpO1xufVxuIl19