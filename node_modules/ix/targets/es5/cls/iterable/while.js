goog.module('targets.es5.cls.iterable.while'); exports = {}; var module = {id: 'targets/es5/cls/iterable/while.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var WhileIterable = (function (_super) {
    __extends(WhileIterable, _super);
    /**
     * @param {function(): boolean} condition
     * @param {!Iterable<TSource>} source
     */
    function WhileIterable(condition, source) {
        var _this = _super.call(this) || this;
        _this._condition = condition;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    WhileIterable.prototype[Symbol.iterator] = function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!this._condition()) return [3 /*break*/, 2];
                    return [5 /*yield**/, __values(this._source)];
                case 1:
                    _a.sent();
                    return [3 /*break*/, 0];
                case 2: return [2 /*return*/];
            }
        });
    };
    return WhileIterable;
}(iterable_1.IterableX));
function WhileIterable_tsickle_Closure_declarations() {
    /** @type {function(): boolean} */
    WhileIterable.prototype._condition;
    /** @type {!Iterable<TSource>} */
    WhileIterable.prototype._source;
}
/**
 * @template TSource
 * @param {function(): boolean} condition
 * @param {!Iterable<TSource>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function _while(condition, source) {
    return new WhileIterable(condition, source);
}
exports._while = _while;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS93aGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsd0NBTGtCO0FBTWxCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEg7SUFBb0MsaUNBQW1CO0lBV3ZEOzs7T0FHRztJQVZELHVCQUFZLFNBQXdCLEVBQUMsTUFBMEI7UUFBL0QsWUFZRSxpQkFYTyxTQWNSO1FBRkMsS0FYSSxDQUFDLFVBQVUsR0FBRSxTQUFVLENBQUM7UUFZNUIsS0FYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7O0lBWXhCLENBQUM7SUFDSDs7T0FFRztJQVpBLHdCQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7eUJBQ1MsSUFBSSxDQUFDLFVBQVUsRUFBRTtvQkFjdEIsc0JBQUEsU0FiTSxJQUFLLENBQUMsT0FBTyxDQUFBLEVBQUE7O29CQWFuQixTQWJtQixDQUFDOzs7OztLQUV2QjtJQUNILG9CQUFBO0FBQUEsQ0FmQSxBQWVBLENBZm9DLG9CQUFVLEdBZTlDO0FBZUE7SUFDQSxrQ0FBa0M7SUFDbEMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDbkMsaUNBQWlDO0lBQ2pDLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxnQkFBZ0MsU0FBd0IsRUFBQyxNQUEwQjtJQTJCakYsTUExQk0sQ0FBQSxJQUFJLGFBQWMsQ0FBVSxTQUFTLEVBQUMsTUFBTyxDQUFDLENBQUM7QUEyQnZELENBMUJDO0FBRkQsd0JBRUMiLCJmaWxlIjoid2hpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgV2hpbGVJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9jb25kaXRpb246ICgpID0+IGJvb2xlYW47XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IGJvb2xlYW59IGNvbmRpdGlvblxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihjb25kaXRpb246ICgpID0+IGJvb2xlYW4sIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2NvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICB3aGlsZSAodGhpcy5fY29uZGl0aW9uKCkpIHtcbiAgICAgIHlpZWxkKiB0aGlzLl9zb3VyY2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFdoaWxlSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKTogYm9vbGVhbn0gKi9cbldoaWxlSXRlcmFibGUucHJvdG90eXBlLl9jb25kaXRpb247XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cbldoaWxlSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogYm9vbGVhbn0gY29uZGl0aW9uXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfd2hpbGU8VFNvdXJjZT4oY29uZGl0aW9uOiAoKSA9PiBib29sZWFuLCBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+KTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBXaGlsZUl0ZXJhYmxlPFRTb3VyY2U+KGNvbmRpdGlvbiwgc291cmNlKTtcbn1cbiJdfQ==