goog.module('targets.es5.cls.iterable.ofentries'); exports = {}; var module = {id: 'targets/es5/cls/iterable/ofentries.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var map_1 = goog.require('targets.es5.cls.iterable.map');
var tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.map");
/**
 * @template TFirst, TSecond
 * @param {TFirst} x
 * @param {TSecond} y
 * @return {!Array<?>}
 */
function makeTuple(x, y) {
    return [x, y];
}
/**
 * @template TSource
 */
var OfEntriesIterable = (function (_super) {
    __extends(OfEntriesIterable, _super);
    /**
     * @param {!Object<string,TSource>} source
     */
    function OfEntriesIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    /**
     * @return {!Iterator<!Array<?>>}
     */
    OfEntriesIterable.prototype[Symbol.iterator] = function () {
        var _this = this;
        return map_1.map(Object.keys(this._source), function (key) { return makeTuple(key, _this._source[key]); })[Symbol.iterator]();
    };
    return OfEntriesIterable;
}(iterable_1.IterableX));
function OfEntriesIterable_tsickle_Closure_declarations() {
    /** @type {!Object<string,TSource>} */
    OfEntriesIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!Object<string,TSource>} source
 * @return {!tsickle_forward_declare_1.IterableX<!Array<?>>}
 */
function ofEntries(source) {
    return new OfEntriesIterable(source);
}
exports.ofEntries = ofEntries;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9vZmVudHJpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILHdDQUxrQjtBQU1sQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsNkJBTlk7QUFPWixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUNsRzs7Ozs7R0FLRztBQVhILG1CQUFvQyxDQUFTLEVBQUMsQ0FBVztJQWF2RCxNQVpNLENBQUEsQ0FBRSxDQUFDLEVBQUMsQ0FBRSxDQUFDLENBQUM7QUFhaEIsQ0FBQztBQUNEOztHQUVHO0FBYkg7SUFBd0MscUNBQTZCO0lBZ0JyRTs7T0FFRztJQWZELDJCQUFZLE1BQWtDO1FBQTlDLFlBaUJFLGlCQWhCTyxTQWtCUjtRQURDLEtBaEJJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQzs7SUFpQnhCLENBQUM7SUFDSDs7T0FFRztJQWpCRCw0QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCO1FBQUEsaUJBRUM7UUFpQkMsTUFsQk0sQ0FBQSxTQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUMsVUFBQSxHQUFJLElBQUcsT0FBQSxTQUFVLENBQUMsR0FBRyxFQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBbEMsQ0FBa0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBbUJyRyxDQWxCQztJQUNILHdCQUFBO0FBQUEsQ0FYQSxBQVdBLENBWHdDLG9CQUFVLEdBV2xEO0FBb0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7QUFDcEMsQ0FBQztBQUVEOzs7O0dBSUc7QUEzQkgsbUJBQW1DLE1BQWtDO0lBNkJuRSxNQTVCTSxDQUFBLElBQUksaUJBQWtCLENBQVUsTUFBTSxDQUFDLENBQUM7QUE2QmhELENBNUJDO0FBRkQsOEJBRUMiLCJmaWxlIjoib2ZlbnRyaWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZS5tYXBcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBURmlyc3QsIFRTZWNvbmRcbiAqIEBwYXJhbSB7VEZpcnN0fSB4XG4gKiBAcGFyYW0ge1RTZWNvbmR9IHlcbiAqIEByZXR1cm4geyFBcnJheTw/Pn1cbiAqL1xuZnVuY3Rpb24gbWFrZVR1cGxlPFRGaXJzdCwgVFNlY29uZD4oeDogVEZpcnN0LCB5OiBUU2Vjb25kKTogW1RGaXJzdCwgVFNlY29uZF0ge1xuICByZXR1cm4gW3gsIHldO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBPZkVudHJpZXNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxbc3RyaW5nLCBUU291cmNlXT4ge1xucHJpdmF0ZSBfc291cmNlOiB7IFtrZXk6IHN0cmluZ106IFRTb3VyY2UgfTtcbi8qKlxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZyxUU291cmNlPn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogeyBba2V5OiBzdHJpbmddOiBUU291cmNlIH0pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmF0b3I8IUFycmF5PD8+Pn1cbiAqL1xuW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIG1hcChPYmplY3Qua2V5cyh0aGlzLl9zb3VyY2UpLCBrZXkgPT4gbWFrZVR1cGxlKGtleSwgdGhpcy5fc291cmNlW2tleV0pKVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gT2ZFbnRyaWVzSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IU9iamVjdDxzdHJpbmcsVFNvdXJjZT59ICovXG5PZkVudHJpZXNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshT2JqZWN0PHN0cmluZyxUU291cmNlPn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8IUFycmF5PD8+Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9mRW50cmllczxUU291cmNlPihzb3VyY2U6IHsgW2tleTogc3RyaW5nXTogVFNvdXJjZSB9KTogSXRlcmFibGVYPFtzdHJpbmcsIFRTb3VyY2VdPiB7XG4gIHJldHVybiBuZXcgT2ZFbnRyaWVzSXRlcmFibGU8VFNvdXJjZT4oc291cmNlKTtcbn1cbiJdfQ==