goog.module('targets.es5.cls.iterable.min'); exports = {}; var module = {id: 'targets/es5/cls/iterable/min.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */


var identity_1 = goog.require('targets.es5.cls.internal.identity');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!Iterable<?>} source
 * @param {function(?): number=} fn
 * @return {number}
 */
function min(source, fn) {
    if (fn === void 0) { fn = identity_1.identity; }
    var /** @type {boolean} */ atleastOnce = false;
    var /** @type {number} */ value = Infinity;
    try {
        for (var source_1 = __values(source), source_1_1 = source_1.next(); !source_1_1.done; source_1_1 = source_1.next()) {
            var item = source_1_1.value;
            if (!atleastOnce) {
                atleastOnce = true;
            }
            var /** @type {number} */ x = fn(item);
            if (x < value) {
                value = x;
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (source_1_1 && !source_1_1.done && (_a = source_1.return)) _a.call(source_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    if (!atleastOnce) {
        throw new Error('Sequence contains no elements');
    }
    return value;
    var e_1, _a;
}
exports.min = min;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9taW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBSEgsWUFBWSxDQUFDOztBQU1iLGlEQUxpQjtBQU1qQixJQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FOdEQ7QUFVaEQ7Ozs7R0FJRztBQVZILGFBQW9CLE1BQXFCLEVBQUMsRUFBa0M7SUFBbEMsbUJBQUEsRUFBQSxLQUF5QixtQkFBUztJQVkxRSxJQUFJLHNCQVhELENBQUEsV0FBWSxHQUFFLEtBQU0sQ0FBQztJQVl4QixJQUFJLHFCQVhELENBQUEsS0FBTSxHQUFFLFFBQVMsQ0FBQzs7UUFZckIsR0FBRyxDQUFDLENBWFksSUFBQSxXQUFBLFNBQUEsTUFBTyxDQUFBLDhCQUFBO1lBQWxCLElBQUcsSUFBSyxtQkFBQTtZQVlYLEVBQUUsQ0FBQyxDQVhDLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBRTtnQkFZakIsV0FYVyxHQUFFLElBQUssQ0FBQztZQVlyQixDQVhDO1lBWUQsSUFBSSxxQkFYRCxDQUFBLENBQUUsR0FBRSxFQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFZakIsRUFBRSxDQUFDLENBWEMsQ0FBQyxHQUFFLEtBQU0sQ0FBQyxDQUFBLENBQUU7Z0JBQUEsS0FBTSxHQUFFLENBQUUsQ0FBQztZQUFBLENBQUU7U0FDOUI7Ozs7Ozs7OztJQVlELEVBQUUsQ0FBQyxDQVhDLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBRTtRQVlqQixNQVhLLElBQUksS0FBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFZbkQsQ0FYQztJQWFELE1BWE0sQ0FBQSxLQUFNLENBQUM7O0FBWWYsQ0FYQztBQWZELGtCQWVDIiwiZmlsZSI6Im1pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBtaW4oc291cmNlOiBJdGVyYWJsZTxudW1iZXI+LCBmbj86ICh4OiBudW1iZXIpID0+IG51bWJlcik6IG51bWJlcjtcbmV4cG9ydCBmdW5jdGlvbiBtaW48VD4oc291cmNlOiBJdGVyYWJsZTxUPiwgZm46ICh4OiBUKSA9PiBudW1iZXIpOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPD8+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6IG51bWJlcj19IGZuXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtaW4oc291cmNlOiBJdGVyYWJsZTxhbnk+LCBmbjogKHg6IGFueSkgPT4gbnVtYmVyID0gaWRlbnRpdHkpOiBudW1iZXIge1xuICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBhdGxlYXN0T25jZSA9IGZhbHNlO1xuICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHZhbHVlID0gSW5maW5pdHk7XG4gIGZvciAobGV0IC8qKiBAdHlwZSB7P30gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBpZiAoIWF0bGVhc3RPbmNlKSB7XG4gICAgICBhdGxlYXN0T25jZSA9IHRydWU7XG4gICAgfVxuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8geCA9IGZuKGl0ZW0pO1xuICAgIGlmICh4IDwgdmFsdWUpIHsgdmFsdWUgPSB4OyB9XG4gIH1cbiAgaWYgKCFhdGxlYXN0T25jZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2VxdWVuY2UgY29udGFpbnMgbm8gZWxlbWVudHMnKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbiJdfQ==