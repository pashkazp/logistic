goog.module('targets.es5.cls.iterable._refcountlist'); exports = {}; var module = {id: 'targets/es5/cls/iterable/_refcountlist.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @ignore
 * @record
 * @template T
 */
function RefCount() { }
exports.RefCount = RefCount;
function RefCount_tsickle_Closure_declarations() {
    /** @type {T} */
    RefCount.prototype.value;
    /** @type {number} */
    RefCount.prototype.count;
}
/**
 * @ignore
 * @record
 * @template T
 */
function IRefCountList() { }
exports.IRefCountList = IRefCountList;
function IRefCountList_tsickle_Closure_declarations() {
    /** @type {function(): void} */
    IRefCountList.prototype.clear;
    /** @type {number} */
    IRefCountList.prototype.count;
    /** @type {function(number): T} */
    IRefCountList.prototype.get;
    /** @type {function(T): void} */
    IRefCountList.prototype.push;
    /** @type {function(): void} */
    IRefCountList.prototype.done;
}
/**
 * @ignore
 * @template T
 * @implements {IRefCountList}
 */
var MaxRefCountList = (function () {
    function MaxRefCountList() {
        this._list = [];
    }
    /**
     * @return {void}
     */
    MaxRefCountList.prototype.clear = function () { this._list = []; };
    Object.defineProperty(MaxRefCountList.prototype, "count", {
        /**
         * @return {number}
         */
        get: function () { return this._list.length; },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {number} index
     * @return {T}
     */
    MaxRefCountList.prototype.get = function (index) { return this._list[index]; };
    /**
     * @param {T} value
     * @return {void}
     */
    MaxRefCountList.prototype.push = function (value) { this._list.push(value); };
    /**
     * @return {void}
     */
    MaxRefCountList.prototype.done = function () { };
    return MaxRefCountList;
}());
exports.MaxRefCountList = MaxRefCountList;
function MaxRefCountList_tsickle_Closure_declarations() {
    /** @type {!Array<T>} */
    MaxRefCountList.prototype._list;
}
/**
 * @ignore
 * @template T
 * @implements {IRefCountList}
 */
var RefCountList = (function () {
    /**
     * @param {number} readerCount
     */
    function RefCountList(readerCount) {
        this._count = 0;
        this._readerCount = readerCount;
        this._list = new Map();
    }
    /**
     * @return {void}
     */
    RefCountList.prototype.clear = function () { this._list.clear(); };
    Object.defineProperty(RefCountList.prototype, "count", {
        /**
         * @return {number}
         */
        get: function () { return this._count; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RefCountList.prototype, "readerCount", {
        /**
         * @return {number}
         */
        get: function () { return this._readerCount; },
        /**
         * @param {number} value
         * @return {void}
         */
        set: function (value) { this._readerCount = value; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {void}
     */
    RefCountList.prototype.done = function () { this._readerCount--; };
    /**
     * @param {number} index
     * @return {T}
     */
    RefCountList.prototype.get = function (index) {
        if (!this._list.has(index)) {
            throw new Error('Element no longer available in the buffer.');
        }
        var /** @type {!RefCount<T>} */ res = ((this._list.get(index)));
        var /** @type {T} */ val = res.value;
        if (--res.count === 0) {
            this._list.delete(index);
        }
        return val;
    };
    /**
     * @param {T} value
     * @return {void}
     */
    RefCountList.prototype.push = function (value) {
        this._list.set(this._count++, { value: value, count: this._readerCount });
    };
    return RefCountList;
}());
exports.RefCountList = RefCountList;
function RefCountList_tsickle_Closure_declarations() {
    /** @type {number} */
    RefCountList.prototype._readerCount;
    /** @type {!Map<number, !RefCount<T>>} */
    RefCountList.prototype._list;
    /** @type {number} */
    RefCountList.prototype._count;
}
//# sourceMappingURL=data:application/json;base64,