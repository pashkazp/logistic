goog.module('targets.es5.cls.iterable.defaultifempty'); exports = {}; var module = {id: 'targets/es5/cls/iterable/defaultifempty.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es5.cls.iterable');
var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
var DefaultIfEmptyIterable = (function (_super) {
    __extends(DefaultIfEmptyIterable, _super);
    /**
     * @param {!Iterable<TSource>} source
     * @param {TSource} defaultValue
     */
    function DefaultIfEmptyIterable(source, defaultValue) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._defaultValue = defaultValue;
        return _this;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    DefaultIfEmptyIterable.prototype[Symbol.iterator] = function () {
        var state, _a, _b, item, e_1_1, e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    state = 1;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = __values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    state = 2;
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8:
                    if (!(state === 1)) return [3 /*break*/, 10];
                    return [4 /*yield*/, this._defaultValue];
                case 9:
                    _d.sent();
                    _d.label = 10;
                case 10: return [2 /*return*/];
            }
        });
    };
    return DefaultIfEmptyIterable;
}(iterable_1.IterableX));
function DefaultIfEmptyIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    DefaultIfEmptyIterable.prototype._source;
    /** @type {TSource} */
    DefaultIfEmptyIterable.prototype._defaultValue;
}
/**
 * Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
 * @template T
 * @param {!Iterable<T>} source
 * @param {T} defaultValue
 * @return {!tsickle_forward_declare_1.IterableX<T>} An that contains the default value if source is empty; otherwise, source.
 */
function defaultIfEmpty(source, defaultValue) {
    return new DefaultIfEmptyIterable(source, defaultValue);
}
exports.defaultIfEmpty = defaultIfEmpty;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9kZWZhdWx0aWZlbXB0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsd0NBTGtCO0FBTWxCLElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEg7SUFBNkMsMENBQW1CO0lBV2hFOzs7T0FHRztJQVZELGdDQUFZLE1BQXlCLEVBQUMsWUFBc0I7UUFBNUQsWUFZRSxpQkFYTyxTQWNSO1FBRkMsS0FYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFZdEIsS0FYSSxDQUFDLGFBQWEsR0FBRSxZQUFhLENBQUM7O0lBWXBDLENBQUM7SUFDSDs7T0FFRztJQVpBLGlDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBbEI7Ozs7O29CQUNLLEtBQU0sR0FBRSxDQUFFLENBQUM7Ozs7b0JBQ0UsS0FBQSxTQUFBLElBQUssQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXJCLElBQUs7b0JBY1gsS0FiSyxHQUFFLENBQUUsQ0FBQztvQkFjVixxQkFiSyxJQUFLLEVBQUE7O29CQWFWLFNBYlUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7eUJBRVQsQ0FBQSxLQUFLLEtBQUksQ0FBRSxDQUFBLEVBQVgseUJBQVc7b0JBY2IscUJBYkssSUFBSyxDQUFDLGFBQWEsRUFBQTs7b0JBYXhCLFNBYndCLENBQUM7Ozs7O0tBRTVCO0lBQ0gsNkJBQUE7QUFBQSxDQXBCQSxBQW9CQSxDQXBCNkMsb0JBQVUsR0FvQnZEO0FBZUE7SUFDQSxpQ0FBaUM7SUFDakMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN6QyxzQkFBc0I7SUFDdEIsc0JBQXNCLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztBQUMvQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBcEJILHdCQUFrQyxNQUFtQixFQUFDLFlBQWdCO0lBc0JwRSxNQXJCTSxDQUFBLElBQUksc0JBQXVCLENBQUksTUFBTSxFQUFDLFlBQWEsQ0FBQyxDQUFDO0FBc0I3RCxDQXJCQztBQUZELHdDQUVDIiwiZmlsZSI6ImRlZmF1bHRpZmVtcHR5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIERlZmF1bHRJZkVtcHR5SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2RlZmF1bHRWYWx1ZTogVFNvdXJjZTtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtUU291cmNlfSBkZWZhdWx0VmFsdWVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgZGVmYXVsdFZhbHVlOiBUU291cmNlKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZGVmYXVsdFZhbHVlID0gZGVmYXVsdFZhbHVlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBzdGF0ZSA9IDE7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgc3RhdGUgPSAyO1xuICAgICAgeWllbGQgaXRlbTtcbiAgICB9XG4gICAgaWYgKHN0YXRlID09PSAxKSB7XG4gICAgICB5aWVsZCB0aGlzLl9kZWZhdWx0VmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRJZkVtcHR5SXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRGVmYXVsdElmRW1wdHlJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7VFNvdXJjZX0gKi9cbkRlZmF1bHRJZkVtcHR5SXRlcmFibGUucHJvdG90eXBlLl9kZWZhdWx0VmFsdWU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudHMgb2YgdGhlIHNwZWNpZmllZCBzZXF1ZW5jZSBvciB0aGUgdHlwZSBwYXJhbWV0ZXIncyBkZWZhdWx0IHZhbHVlIGluIGEgc2luZ2xldG9uIGNvbGxlY3Rpb24gaWYgdGhlIHNlcXVlbmNlIGlzIGVtcHR5LlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7VH0gZGVmYXVsdFZhbHVlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VD59IEFuIHRoYXQgY29udGFpbnMgdGhlIGRlZmF1bHQgdmFsdWUgaWYgc291cmNlIGlzIGVtcHR5OyBvdGhlcndpc2UsIHNvdXJjZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRJZkVtcHR5PFQ+KHNvdXJjZTogSXRlcmFibGU8VD4sIGRlZmF1bHRWYWx1ZTogVCk6IEl0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgRGVmYXVsdElmRW1wdHlJdGVyYWJsZTxUPihzb3VyY2UsIGRlZmF1bHRWYWx1ZSk7XG59XG4iXX0=