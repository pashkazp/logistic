goog.module('targets.es5.cls.observer'); exports = {}; var module = {id: 'targets/es5/cls/observer.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.subscription");
goog.require("_Users.ptaylor.dev.ixjs.src.subscription"); // force type-only module to be loaded
/**
 * @record
 * @template T
 */
function NextObserver() { }
exports.NextObserver = NextObserver;
function NextObserver_tsickle_Closure_declarations() {
    /** @type {function(T): void} */
    NextObserver.prototype.next;
    /** @type {function(?): void} */
    NextObserver.prototype.error;
    /** @type {function(): void} */
    NextObserver.prototype.complete;
}
/**
 * @record
 * @template T
 */
function ErrorObserver() { }
exports.ErrorObserver = ErrorObserver;
function ErrorObserver_tsickle_Closure_declarations() {
    /** @type {function(T): void} */
    ErrorObserver.prototype.next;
    /** @type {function(?): void} */
    ErrorObserver.prototype.error;
    /** @type {function(): void} */
    ErrorObserver.prototype.complete;
}
/**
 * @record
 * @template T
 */
function CompletionObserver() { }
exports.CompletionObserver = CompletionObserver;
function CompletionObserver_tsickle_Closure_declarations() {
    /** @type {function(T): void} */
    CompletionObserver.prototype.next;
    /** @type {function(?): void} */
    CompletionObserver.prototype.error;
    /** @type {function(): void} */
    CompletionObserver.prototype.complete;
}
/** @typedef {(!NextObserver<T>|!ErrorObserver<T>|!CompletionObserver<T>)} */
exports.PartialObserver;
/**
 * @record
 * @template T
 */
function NextAsyncObserver() { }
exports.NextAsyncObserver = NextAsyncObserver;
function NextAsyncObserver_tsickle_Closure_declarations() {
    /** @type {function(T): (void|!Promise<void>)} */
    NextAsyncObserver.prototype.next;
    /** @type {function(?): (void|!Promise<void>)} */
    NextAsyncObserver.prototype.error;
    /** @type {function(): (void|!Promise<void>)} */
    NextAsyncObserver.prototype.complete;
}
/**
 * @record
 * @template T
 */
function ErrorAsyncObserver() { }
exports.ErrorAsyncObserver = ErrorAsyncObserver;
function ErrorAsyncObserver_tsickle_Closure_declarations() {
    /** @type {function(T): (void|!Promise<void>)} */
    ErrorAsyncObserver.prototype.next;
    /** @type {function(?): (void|!Promise<void>)} */
    ErrorAsyncObserver.prototype.error;
    /** @type {function(): (void|!Promise<void>)} */
    ErrorAsyncObserver.prototype.complete;
}
/**
 * @record
 * @template T
 */
function CompletionAsyncObserver() { }
exports.CompletionAsyncObserver = CompletionAsyncObserver;
function CompletionAsyncObserver_tsickle_Closure_declarations() {
    /** @type {function(T): (void|!Promise<void>)} */
    CompletionAsyncObserver.prototype.next;
    /** @type {function(?): (void|!Promise<void>)} */
    CompletionAsyncObserver.prototype.error;
    /** @type {function(): (void|!Promise<void>)} */
    CompletionAsyncObserver.prototype.complete;
}
/** @typedef {(!NextAsyncObserver<T>|!ErrorAsyncObserver<T>|!CompletionAsyncObserver<T>)} */
exports.PartialAsyncObserver;
/**
 * @record
 * @template T
 */
function Observer() { }
exports.Observer = Observer;
function Observer_tsickle_Closure_declarations() {
    /** @type {boolean} */
    Observer.prototype.closed;
    /** @type {function(T): void} */
    Observer.prototype.next;
    /** @type {function(?): void} */
    Observer.prototype.error;
    /** @type {function(): void} */
    Observer.prototype.complete;
}
/**
 * @record
 * @template T
 */
function Observable() { }
exports.Observable = Observable;
function Observable_tsickle_Closure_declarations() {
    /** @type {function(!Observer<T>): !tsickle_forward_declare_1.Subscription} */
    Observable.prototype.subscribe;
}
//# sourceMappingURL=data:application/json;base64,