goog.module('targets.es5.cls.asyncsink'); exports = {}; var module = {id: 'targets/es5/cls/asyncsink.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var /** @type {string} */ ARRAY_VALUE = 'value';
var /** @type {string} */ ARRAY_ERROR = 'error';
/**
 * @record
 * @template T
 */
function AsyncSinkItem() { }
function AsyncSinkItem_tsickle_Closure_declarations() {
    /** @type {string} */
    AsyncSinkItem.prototype.type;
    /** @type {T} */
    AsyncSinkItem.prototype.value;
    /** @type {?|undefined} */
    AsyncSinkItem.prototype.error;
}
/**
 * @record
 * @template T
 */
function AsyncResolver() { }
function AsyncResolver_tsickle_Closure_declarations() {
    /** @type {function((T|!PromiseLike<T>)): void} */
    AsyncResolver.prototype.resolve;
    /** @type {function(?): void} */
    AsyncResolver.prototype.reject;
}
/**
 * @template TSource
 * @implements {AsyncIterableIterator}
 */
var AsyncSink = (function () {
    function AsyncSink() {
        this._ended = false;
        this._values = [];
        this._resolvers = [];
    }
    /**
     * @return {AsyncSink}
     */
    AsyncSink.prototype[Symbol.asyncIterator] = function () {
        return this;
    };
    /**
     * @param {TSource} value
     * @return {void}
     */
    AsyncSink.prototype.write = function (value) {
        this._push({ type: ARRAY_VALUE, value: value });
    };
    /**
     * @param {?} error
     * @return {void}
     */
    AsyncSink.prototype.error = function (error) {
        this._push({ type: ARRAY_ERROR, error: error });
    };
    /**
     * @param {!AsyncSinkItem<TSource>} item
     * @return {void}
     */
    AsyncSink.prototype._push = function (item) {
        if (this._ended) {
            throw new Error('AsyncSink already ended');
        }
        if (this._resolvers.length > 0) {
            var _a = ((this._resolvers.shift())), resolve = _a.resolve, reject = _a.reject;
            if (item.type === ARRAY_ERROR) {
                reject(/** @type {?} */ ((item.error)));
            }
            else {
                resolve({ done: false, value: /** @type {TSource} */ ((item.value)) });
            }
        }
        else {
            this._values.push(item);
        }
    };
    /**
     * @return {!Promise<!IteratorResult<TSource>>}
     */
    AsyncSink.prototype.next = function () {
        var _this = this;
        if (this._values.length > 0) {
            var _a = ((this._values.shift())), type = _a.type, value = _a.value, error = _a.error;
            if (type === ARRAY_ERROR) {
                return Promise.reject(error);
            }
            else {
                return Promise.resolve(/** @type {!IteratorResult<TSource>} */ ({ done: false, value: value }));
            }
        }
        if (this._ended) {
            return Promise.resolve(/** @type {!IteratorResult<TSource>} */ ({ done: true }));
        }
        return new Promise(function (resolve, reject) {
            _this._resolvers.push({ resolve: resolve, reject: reject });
        });
    };
    /**
     * @return {void}
     */
    AsyncSink.prototype.end = function () {
        while (this._resolvers.length > 0) {
            ((this._resolvers.shift())).resolve(/** @type {!IteratorResult<TSource>} */ ({ done: true }));
        }
        this._ended = true;
    };
    return AsyncSink;
}());
exports.AsyncSink = AsyncSink;
function AsyncSink_tsickle_Closure_declarations() {
    /** @type {boolean} */
    AsyncSink.prototype._ended;
    /** @type {!Array<!AsyncSinkItem<TSource>>} */
    AsyncSink.prototype._values;
    /** @type {!Array<!AsyncResolver<!IteratorResult<TSource>>>} */
    AsyncSink.prototype._resolvers;
}
//# sourceMappingURL=data:application/json;base64,