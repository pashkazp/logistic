goog.module('targets.es5.cls.scheduler'); exports = {}; var module = {id: 'targets/es5/cls/scheduler.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.subscription");
goog.require("_Users.ptaylor.dev.ixjs.src.subscription"); // force type-only module to be loaded
/**
 * @record
 */
function Scheduler() { }
exports.Scheduler = Scheduler;
function Scheduler_tsickle_Closure_declarations() {
    /** @type {number} */
    Scheduler.prototype.now;
    /** @type {function(number): !Promise<void>} */
    Scheduler.prototype.delay;
    /** @type {function(function(): void, number): !tsickle_forward_declare_1.Subscription} */
    Scheduler.prototype.schedule;
}
/**
 * @implements {tsickle_forward_declare_1.Subscription}
 */
var ActionSubscription = (function () {
    /**
     * @param {function(): void} action
     */
    function ActionSubscription(action) {
        this.isUnsubscribed = false;
        this._action = action;
    }
    /**
     * @return {void}
     */
    ActionSubscription.prototype.unsubscribe = function () {
        if (!this.isUnsubscribed) {
            this.isUnsubscribed = true;
            this._action();
        }
    };
    return ActionSubscription;
}());
function ActionSubscription_tsickle_Closure_declarations() {
    /** @type {boolean} */
    ActionSubscription.prototype.isUnsubscribed;
    /** @type {function(): void} */
    ActionSubscription.prototype._action;
}
/**
 * @implements {Scheduler}
 */
var DefaultScheduler = (function () {
    function DefaultScheduler() {
    }
    Object.defineProperty(DefaultScheduler.prototype, "now", {
        /**
         * @return {number}
         */
        get: function () {
            return Date.now();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {number} dueTime
     * @return {!Promise<void>}
     */
    DefaultScheduler.prototype.delay = function (dueTime) {
        return new Promise(function (res) { return setTimeout(res, dueTime); });
    };
    /**
     * @param {function(): void} action
     * @param {number} dueTime
     * @return {!tsickle_forward_declare_1.Subscription}
     */
    DefaultScheduler.prototype.schedule = function (action, dueTime) {
        var /** @type {!NodeJS.Timer} */ id = setTimeout(function () { return action(); }, dueTime);
        return new ActionSubscription(function () { return clearTimeout(id); });
    };
    return DefaultScheduler;
}());
exports.DefaultScheduler = DefaultScheduler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY2hlZHVsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUdILElBQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQ2xHLElBQUksQ0FBQyxPQUFPLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztBQUNoRzs7R0FFRztBQUNILHVCQUE2QixDQUFDO0FBQTlCLDhCQUE4QjtBQUc5QjtJQUNBLHFCQUFxQjtJQUNyQixTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUN4QiwrQ0FBK0M7SUFDL0MsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDMUIsMEZBQTBGO0lBQzFGLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQzdCLENBQUM7QUFVRDs7R0FFRztBQXZCSDtJQTJCQTs7T0FFRztJQXpCRCw0QkFBWSxNQUFrQjtRQUh4QixtQkFBZSxHQUFFLEtBQU0sQ0FBQTtRQThCM0IsSUExQkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBMkJ4QixDQUFDO0lBQ0g7O09BRUc7SUEzQkQsd0NBQVcsR0FBWDtRQTZCRSxFQUFFLENBQUMsQ0E1QkMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUEsQ0FBRTtZQTZCekIsSUE1QkksQ0FBQyxjQUFjLEdBQUUsSUFBSyxDQUFDO1lBNkIzQixJQTVCSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBNkJqQixDQTVCQztJQTZCSCxDQTVCQztJQUNILHlCQUFBO0FBQUEsQ0FkQSxBQWNBLElBQUE7QUE4QkE7SUFDQSxzQkFBc0I7SUFDdEIsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztJQUM1QywrQkFBK0I7SUFDL0Isa0JBQWtCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUNyQyxDQUFDO0FBRUQ7O0dBRUc7QUFyQ0g7SUFBQTtJQWFBLENBQUE7SUFaRSxzQkFBRyxpQ0FBSTtRQXNDVDs7V0FFRzthQXhDRDtZQTBDRSxNQXpDTSxDQUFBLElBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQTBDcEIsQ0FBQzs7O09BQUE7SUFDSDs7O09BR0c7SUEzQ0QsZ0NBQUssR0FBTCxVQUFNLE9BQWU7UUE2Q25CLE1BNUNNLENBQUEsSUFBSSxPQUFRLENBQU8sVUFBQSxHQUFHLElBQUcsT0FBQSxVQUFXLENBQUMsR0FBRyxFQUFDLE9BQVEsQ0FBQyxFQUF6QixDQUF5QixDQUFDLENBQUM7SUE2QzVELENBQUM7SUFDSDs7OztPQUlHO0lBL0NELG1DQUFRLEdBQVIsVUFBUyxNQUFrQixFQUFDLE9BQWdCO1FBaUQxQyxJQUFNLDRCQWhERCxDQUFBLEVBQUcsR0FBRSxVQUFXLENBQUMsY0FBSyxPQUFBLE1BQU8sRUFBRSxFQUFULENBQVMsRUFBQyxPQUFRLENBQUMsQ0FBQztRQWlEL0MsTUFoRE0sQ0FBQSxJQUFJLGtCQUFtQixDQUFDLGNBQUssT0FBQSxZQUFhLENBQUMsRUFBRSxDQUFDLEVBQWpCLENBQWlCLENBQUMsQ0FBQztJQWlEeEQsQ0FoREM7SUFDSCx1QkFBQTtBQUFBLENBYkEsQUFhQSxJQUFBO0FBYlksNENBQWlCIiwiZmlsZSI6InNjaGVkdWxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vc3Vic2NyaXB0aW9uJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLnN1YnNjcmlwdGlvblwiKTtcbmdvb2cucmVxdWlyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5zdWJzY3JpcHRpb25cIik7IC8vIGZvcmNlIHR5cGUtb25seSBtb2R1bGUgdG8gYmUgbG9hZGVkXG4vKipcbiAqIEByZWNvcmRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFNjaGVkdWxlcigpIHt9XG5cblxuZnVuY3Rpb24gU2NoZWR1bGVyX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblNjaGVkdWxlci5wcm90b3R5cGUubm93O1xuLyoqIEB0eXBlIHtmdW5jdGlvbihudW1iZXIpOiAhUHJvbWlzZTx2b2lkPn0gKi9cblNjaGVkdWxlci5wcm90b3R5cGUuZGVsYXk7XG4vKiogQHR5cGUge2Z1bmN0aW9uKGZ1bmN0aW9uKCk6IHZvaWQsIG51bWJlcik6ICF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLlN1YnNjcmlwdGlvbn0gKi9cblNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGU7XG59XG5cblxuZXhwb3J0IGludGVyZmFjZSBTY2hlZHVsZXIge1xuICByZWFkb25seSBub3c6IG51bWJlcjtcbiAgZGVsYXkodGltZTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcbiAgc2NoZWR1bGUoXG4gICAgYWN0aW9uOiAoKSA9PiB2b2lkLFxuICAgIGR1ZVRpbWU6IG51bWJlcik6IFN1YnNjcmlwdGlvbjtcbn1cbi8qKlxuICogQGltcGxlbWVudHMge3RzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuU3Vic2NyaXB0aW9ufVxuICovXG5jbGFzcyBBY3Rpb25TdWJzY3JpcHRpb24gaW1wbGVtZW50cyBTdWJzY3JpcHRpb24ge1xucHVibGljIGlzVW5zdWJzY3JpYmVkID0gZmFsc2U7XG5wcml2YXRlIF9hY3Rpb246ICgpID0+IHZvaWQ7XG4vKipcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTogdm9pZH0gYWN0aW9uXG4gKi9cbmNvbnN0cnVjdG9yKGFjdGlvbjogKCkgPT4gdm9pZCkge1xuICAgIHRoaXMuX2FjdGlvbiA9IGFjdGlvbjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG51bnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgIHRoaXMuaXNVbnN1YnNjcmliZWQgPSB0cnVlO1xuICAgICAgdGhpcy5fYWN0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEFjdGlvblN1YnNjcmlwdGlvbl90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuQWN0aW9uU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1Vuc3Vic2NyaWJlZDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKTogdm9pZH0gKi9cbkFjdGlvblN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FjdGlvbjtcbn1cblxuLyoqXG4gKiBAaW1wbGVtZW50cyB7U2NoZWR1bGVyfVxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFNjaGVkdWxlciBpbXBsZW1lbnRzIFNjaGVkdWxlciB7XG4vKipcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZ2V0IG5vdygpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgfVxuLyoqXG4gKiBAcGFyYW0ge251bWJlcn0gZHVlVGltZVxuICogQHJldHVybiB7IVByb21pc2U8dm9pZD59XG4gKi9cbmRlbGF5KGR1ZVRpbWU6IG51bWJlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTx2b2lkPihyZXMgPT4gc2V0VGltZW91dChyZXMsIGR1ZVRpbWUpKTtcbiAgfVxuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IGFjdGlvblxuICogQHBhcmFtIHtudW1iZXJ9IGR1ZVRpbWVcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLlN1YnNjcmlwdGlvbn1cbiAqL1xuc2NoZWR1bGUoYWN0aW9uOiAoKSA9PiB2b2lkLCBkdWVUaW1lOiBudW1iZXIpOiBTdWJzY3JpcHRpb24ge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IU5vZGVKUy5UaW1lcn0gKi8gaWQgPSBzZXRUaW1lb3V0KCgpID0+IGFjdGlvbigpLCBkdWVUaW1lKTtcbiAgICByZXR1cm4gbmV3IEFjdGlvblN1YnNjcmlwdGlvbigoKSA9PiBjbGVhclRpbWVvdXQoaWQpKTtcbiAgfVxufSJdfQ==