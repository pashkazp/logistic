Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var iterable_1 = require("../iterable");
var identity_1 = require("../internal/identity");
var _grouping_1 = require("./_grouping");
var GroupedIterable = (function (_super) {
    tslib_1.__extends(GroupedIterable, _super);
    function GroupedIterable(key, source) {
        var _this = _super.call(this) || this;
        _this.key = key;
        _this._source = source;
        return _this;
    }
    GroupedIterable.prototype[Symbol.iterator] = function () {
        return this._source[Symbol.iterator]();
    };
    return GroupedIterable;
}(iterable_1.IterableX));
exports.GroupedIterable = GroupedIterable;
var GroupByIterable = (function (_super) {
    tslib_1.__extends(GroupByIterable, _super);
    function GroupByIterable(source, keySelector, elementSelector) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._elementSelector = elementSelector;
        return _this;
    }
    GroupByIterable.prototype[Symbol.iterator] = function () {
        var map, map_1, map_1_1, _a, key, values, e_1_1, e_1, _b;
        return tslib_1.__generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    map = _grouping_1.createGrouping(this._source, this._keySelector, this._elementSelector);
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 6, 7, 8]);
                    map_1 = tslib_1.__values(map), map_1_1 = map_1.next();
                    _c.label = 2;
                case 2:
                    if (!!map_1_1.done) return [3 /*break*/, 5];
                    _a = tslib_1.__read(map_1_1.value, 2), key = _a[0], values = _a[1];
                    return [4 /*yield*/, new GroupedIterable(key, values)];
                case 3:
                    _c.sent();
                    _c.label = 4;
                case 4:
                    map_1_1 = map_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _c.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (map_1_1 && !map_1_1.done && (_b = map_1.return)) _b.call(map_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return GroupByIterable;
}(iterable_1.IterableX));
exports.GroupByIterable = GroupByIterable;
function groupBy(source, keySelector, elementSelector) {
    if (elementSelector === void 0) { elementSelector = identity_1.identity; }
    return new GroupByIterable(source, keySelector, elementSelector);
}
exports.groupBy = groupBy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2dyb3VwYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBd0M7QUFDeEMsaURBQWdEO0FBQ2hELHlDQUE2QztBQUU3QztJQUFtRCwyQ0FBaUI7SUFJbEUseUJBQVksR0FBUyxFQUFFLE1BQXdCO1FBQS9DLFlBQ0UsaUJBQU8sU0FHUjtRQUZDLEtBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7O0lBQ3hCLENBQUM7SUFFRCwwQkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FiQSxBQWFDLENBYmtELG9CQUFTLEdBYTNEO0FBYlksMENBQWU7QUFlNUI7SUFBNEQsMkNBQXdDO0lBS2xHLHlCQUNJLE1BQXlCLEVBQ3pCLFdBQXFDLEVBQ3JDLGVBQTJDO1FBSC9DLFlBSUUsaUJBQU8sU0FJUjtRQUhDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2hDLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7O0lBQzFDLENBQUM7SUFFQSwwQkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDUSxHQUFHLEdBQUcsMEJBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Ozs7b0JBQ3pELFFBQUEsaUJBQUEsR0FBRyxDQUFBOzs7O29CQUFwQixLQUFBLGdDQUFhLEVBQVosR0FBRyxRQUFBLEVBQUUsTUFBTSxRQUFBO29CQUNuQixxQkFBTSxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUE7O29CQUF0QyxTQUFzQyxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBRTFDO0lBQ0gsc0JBQUM7QUFBRCxDQXJCQSxBQXFCQyxDQXJCMkQsb0JBQVMsR0FxQnBFO0FBckJZLDBDQUFlO0FBOEI1QixpQkFDSSxNQUF5QixFQUN6QixXQUFxQyxFQUNyQyxlQUFzRDtJQUF0RCxnQ0FBQSxFQUFBLGtCQUE4QyxtQkFBUTtJQUN4RCxNQUFNLENBQUMsSUFBSSxlQUFlLENBQXdCLE1BQU0sRUFBRSxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUM7QUFDMUYsQ0FBQztBQUxELDBCQUtDIiwiZmlsZSI6Iml0ZXJhYmxlL2dyb3VwYnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmltcG9ydCB7IGNyZWF0ZUdyb3VwaW5nIH0gZnJvbSAnLi9fZ3JvdXBpbmcnO1xuXG5leHBvcnQgY2xhc3MgR3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFZhbHVlPiB7XG4gIHB1YmxpYyByZWFkb25seSBrZXk6IFRLZXk7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFZhbHVlPjtcblxuICBjb25zdHJ1Y3RvcihrZXk6IFRLZXksIHNvdXJjZTogSXRlcmFibGU8VFZhbHVlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5rZXkgPSBrZXk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEdyb3VwQnlJdGVyYWJsZTxUU291cmNlLCBUS2V5LCBUVmFsdWU+IGV4dGVuZHMgSXRlcmFibGVYPEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUVmFsdWU+PiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXk7XG4gIHByaXZhdGUgX2VsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWU7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSxcbiAgICAgIGVsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2VsZW1lbnRTZWxlY3RvciA9IGVsZW1lbnRTZWxlY3RvcjtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBtYXAgPSBjcmVhdGVHcm91cGluZyh0aGlzLl9zb3VyY2UsIHRoaXMuX2tleVNlbGVjdG9yLCB0aGlzLl9lbGVtZW50U2VsZWN0b3IpO1xuICAgIGZvciAobGV0IFtrZXksIHZhbHVlc10gb2YgbWFwKSB7XG4gICAgICB5aWVsZCBuZXcgR3JvdXBlZEl0ZXJhYmxlKGtleSwgdmFsdWVzKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5KTogSXRlcmFibGVYPEdyb3VwZWRJdGVyYWJsZTxUS2V5LCBUU291cmNlPj47XG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBCeTxUU291cmNlLCBUS2V5LCBUVmFsdWU+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5LFxuICBlbGVtZW50U2VsZWN0b3I/OiAodmFsdWU6IFRTb3VyY2UpID0+IFRWYWx1ZSk6IEl0ZXJhYmxlWDxHcm91cGVkSXRlcmFibGU8VEtleSwgVFZhbHVlPj47XG5leHBvcnQgZnVuY3Rpb24gZ3JvdXBCeTxUU291cmNlLCBUS2V5LCBUVmFsdWU+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSxcbiAgICBlbGVtZW50U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVFZhbHVlID0gaWRlbnRpdHkpOiBJdGVyYWJsZVg8R3JvdXBlZEl0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+IHtcbiAgcmV0dXJuIG5ldyBHcm91cEJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihzb3VyY2UsIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IpO1xufVxuIl19
