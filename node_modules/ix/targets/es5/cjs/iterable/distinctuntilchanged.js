Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var iterable_1 = require("../iterable");
var identity_1 = require("../internal/identity");
var comparer_1 = require("../internal/comparer");
var DistinctUntilChangedIterable = (function (_super) {
    tslib_1.__extends(DistinctUntilChangedIterable, _super);
    function DistinctUntilChangedIterable(source, keySelector, comparer) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._keySelector = keySelector;
        _this._comparer = comparer;
        return _this;
    }
    DistinctUntilChangedIterable.prototype[Symbol.iterator] = function () {
        var currentKey, hasCurrentKey, _a, _b, item, key, comparerEquals, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    currentKey = {}, hasCurrentKey = false;
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 2;
                case 2:
                    if (!!_b.done) return [3 /*break*/, 5];
                    item = _b.value;
                    key = this._keySelector(item);
                    comparerEquals = false;
                    if (hasCurrentKey) {
                        comparerEquals = this._comparer(currentKey, key);
                    }
                    if (!(!hasCurrentKey || !comparerEquals)) return [3 /*break*/, 4];
                    hasCurrentKey = true;
                    currentKey = key;
                    return [4 /*yield*/, item];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    _b = _a.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return DistinctUntilChangedIterable;
}(iterable_1.IterableX));
/**
 * Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
 * @param {Iterable<TSource>} source Source sequence.
 * @param {function(value: TSource): TKey} [keySelector] Key selector.
 * @param {function(x: TKey, y: TKey): boolean} [comparer] Comparer used to compare key values.
 * @return {Iterable<TSource>} Sequence without adjacent non-distinct elements.
 */
function distinctUntilChanged(source, keySelector, comparer) {
    if (keySelector === void 0) { keySelector = identity_1.identity; }
    if (comparer === void 0) { comparer = comparer_1.comparer; }
    return new DistinctUntilChangedIterable(source, keySelector, comparer);
}
exports.distinctUntilChanged = distinctUntilChanged;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2Rpc3RpbmN0dW50aWxjaGFuZ2VkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsd0NBQXdDO0FBQ3hDLGlEQUFnRDtBQUNoRCxpREFBbUU7QUFFbkU7SUFBMEQsd0RBQWtCO0lBSzFFLHNDQUNJLE1BQXlCLEVBQ3pCLFdBQXFDLEVBQ3JDLFFBQWdEO1FBSHBELFlBSUUsaUJBQU8sU0FJUjtRQUhDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLEtBQUksQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDO1FBQ2hDLEtBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDOztJQUM1QixDQUFDO0lBRUEsdUNBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFsQjs7Ozs7b0JBQ00sVUFBVSxHQUFTLEVBQUUsRUFBRSxhQUFhLEdBQUcsS0FBSyxDQUFDOzs7O29CQUNoQyxLQUFBLGlCQUFBLElBQUksQ0FBQyxPQUFPLENBQUE7Ozs7b0JBQXBCLElBQUk7b0JBQ1AsR0FBRyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQzlCLGNBQWMsR0FBRyxLQUFLLENBQUM7b0JBQzNCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7d0JBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUFDLENBQUM7eUJBQ3BFLENBQUEsQ0FBQyxhQUFhLElBQUksQ0FBQyxjQUFjLENBQUEsRUFBakMsd0JBQWlDO29CQUNuQyxhQUFhLEdBQUcsSUFBSSxDQUFDO29CQUNyQixVQUFVLEdBQUcsR0FBRyxDQUFDO29CQUNqQixxQkFBTSxJQUFJLEVBQUE7O29CQUFWLFNBQVUsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUdoQjtJQUNILG1DQUFDO0FBQUQsQ0E1QkEsQUE0QkMsQ0E1QnlELG9CQUFTLEdBNEJsRTtBQUVEOzs7Ozs7R0FNRztBQUNILDhCQUNJLE1BQXlCLEVBQ3pCLFdBQWdELEVBQ2hELFFBQWtFO0lBRGxFLDRCQUFBLEVBQUEsY0FBd0MsbUJBQVE7SUFDaEQseUJBQUEsRUFBQSxXQUFtRCxtQkFBZTtJQUNwRSxNQUFNLENBQUMsSUFBSSw0QkFBNEIsQ0FBZ0IsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUN4RixDQUFDO0FBTEQsb0RBS0MiLCJmaWxlIjoiaXRlcmFibGUvZGlzdGluY3R1bnRpbGNoYW5nZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmltcG9ydCB7IGNvbXBhcmVyIGFzIGRlZmF1bHRDb21wYXJlciB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcblxuY2xhc3MgRGlzdGluY3RVbnRpbENoYW5nZWRJdGVyYWJsZTxUU291cmNlLCBUS2V5PiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXk7XG4gIHByaXZhdGUgX2NvbXBhcmVyOiAoeDogVEtleSwgeTogVEtleSkgPT4gYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5LFxuICAgICAgY29tcGFyZXI6IChmaXJzdDogVEtleSwgc2Vjb25kOiBUS2V5KSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCBjdXJyZW50S2V5ID0gPFRLZXk+e30sIGhhc0N1cnJlbnRLZXkgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgbGV0IGtleSA9IHRoaXMuX2tleVNlbGVjdG9yKGl0ZW0pO1xuICAgICAgbGV0IGNvbXBhcmVyRXF1YWxzID0gZmFsc2U7XG4gICAgICBpZiAoaGFzQ3VycmVudEtleSkgeyBjb21wYXJlckVxdWFscyA9IHRoaXMuX2NvbXBhcmVyKGN1cnJlbnRLZXksIGtleSk7IH1cbiAgICAgIGlmICghaGFzQ3VycmVudEtleSB8fCAhY29tcGFyZXJFcXVhbHMpIHtcbiAgICAgICAgaGFzQ3VycmVudEtleSA9IHRydWU7XG4gICAgICAgIGN1cnJlbnRLZXkgPSBrZXk7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBjb25zZWN1dGl2ZSBkaXN0aW5jdCBlbGVtZW50cyBiYXNlZCBvbiBhIGtleSB2YWx1ZSBieSB1c2luZyB0aGUgc3BlY2lmaWVkIGVxdWFsaXR5IGNvbXBhcmVyIHRvIGNvbXBhcmUga2V5IHZhbHVlcy5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHZhbHVlOiBUU291cmNlKTogVEtleX0gW2tleVNlbGVjdG9yXSBLZXkgc2VsZWN0b3IuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHg6IFRLZXksIHk6IFRLZXkpOiBib29sZWFufSBbY29tcGFyZXJdIENvbXBhcmVyIHVzZWQgdG8gY29tcGFyZSBrZXkgdmFsdWVzLlxuICogQHJldHVybiB7SXRlcmFibGU8VFNvdXJjZT59IFNlcXVlbmNlIHdpdGhvdXQgYWRqYWNlbnQgbm9uLWRpc3RpbmN0IGVsZW1lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3RVbnRpbENoYW5nZWQ8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5ID0gaWRlbnRpdHksXG4gICAgY29tcGFyZXI6IChmaXJzdDogVEtleSwgc2Vjb25kOiBUS2V5KSA9PiBib29sZWFuID0gZGVmYXVsdENvbXBhcmVyKTogIEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGlzdGluY3RVbnRpbENoYW5nZWRJdGVyYWJsZTxUU291cmNlLCBUS2V5Pihzb3VyY2UsIGtleVNlbGVjdG9yLCBjb21wYXJlcik7XG59XG4iXX0=
