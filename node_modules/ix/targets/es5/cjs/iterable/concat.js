Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var iterable_1 = require("../iterable");
var ConcatIterable = (function (_super) {
    tslib_1.__extends(ConcatIterable, _super);
    function ConcatIterable(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    ConcatIterable.prototype[Symbol.iterator] = function () {
        var _a, _b, outer, e_1_1, e_1, _c;
        return tslib_1.__generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = tslib_1.__values(this._source), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    outer = _b.value;
                    return [5 /*yield**/, tslib_1.__values(outer)];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    return ConcatIterable;
}(iterable_1.IterableX));
/**
 * Concatenates the input sequences.
 * @param {Iterable<Iterable<TSource>>} source Source sequences.
 * @return {Iterable<TSource>} Sequence with the elements of the source sequences concatenated.
 */
function concatAll(source) {
    return new ConcatIterable(source);
}
exports.concatAll = concatAll;
/**
 * Concatenates the input sequences.
 * @param {Iterable<TSource>} source The first source sequence.
 * @param {...Iterable<TSource>} args The rest of the source sequences.
 * @return {Iterable<TSource>} Sequence with the elements of the source sequences concatenated.
 */
function concat(source) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new ConcatIterable(tslib_1.__spread([source], args));
}
exports.concat = concat;
/**
 * Concatenates the input sequences.
 * @param {...Iterable<TSource>} args Source sequences.
 * @return {Iterable<TSource>} Sequence with the elements of the source sequences concatenated.
 */
function concatStatic() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new ConcatIterable(args);
}
exports.concatStatic = concatStatic;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2NvbmNhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUV4QztJQUFzQywwQ0FBa0I7SUFHdEQsd0JBQVksTUFBbUM7UUFBL0MsWUFDRSxpQkFBTyxTQUVSO1FBREMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7O0lBQ3hCLENBQUM7SUFFQSx5QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7Ozs7b0JBQ29CLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQTs7OztvQkFBckIsS0FBSztvQkFBb0Isc0JBQUEsaUJBQU8sS0FBSyxDQUFBLEVBQUE7O29CQUFaLFNBQVksQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQUNoRDtJQUNILHFCQUFDO0FBQUQsQ0FYQSxBQVdDLENBWHFDLG9CQUFTLEdBVzlDO0FBRUQ7Ozs7R0FJRztBQUNILG1CQUFtQyxNQUFtQztJQUNwRSxNQUFNLENBQUMsSUFBSSxjQUFjLENBQVUsTUFBTSxDQUFDLENBQUM7QUFDN0MsQ0FBQztBQUZELDhCQUVDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxnQkFBMEIsTUFBbUI7SUFBRSxjQUFzQjtTQUF0QixVQUFzQixFQUF0QixxQkFBc0IsRUFBdEIsSUFBc0I7UUFBdEIsNkJBQXNCOztJQUNuRSxNQUFNLENBQUMsSUFBSSxjQUFjLG1CQUFFLE1BQU0sR0FBSyxJQUFJLEVBQUUsQ0FBQztBQUMvQyxDQUFDO0FBRkQsd0JBRUM7QUFFRDs7OztHQUlHO0FBQ0g7SUFBZ0MsY0FBc0I7U0FBdEIsVUFBc0IsRUFBdEIscUJBQXNCLEVBQXRCLElBQXNCO1FBQXRCLHlCQUFzQjs7SUFDcEQsTUFBTSxDQUFDLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFGRCxvQ0FFQyIsImZpbGUiOiJpdGVyYWJsZS9jb25jYXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5cbmNsYXNzIENvbmNhdEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj47XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCBvdXRlciBvZiB0aGlzLl9zb3VyY2UpIHsgeWllbGQqIG91dGVyOyB9XG4gIH1cbn1cblxuLyoqXG4gKiBDb25jYXRlbmF0ZXMgdGhlIGlucHV0IHNlcXVlbmNlcy5cbiAqIEBwYXJhbSB7SXRlcmFibGU8SXRlcmFibGU8VFNvdXJjZT4+fSBzb3VyY2UgU291cmNlIHNlcXVlbmNlcy5cbiAqIEByZXR1cm4ge0l0ZXJhYmxlPFRTb3VyY2U+fSBTZXF1ZW5jZSB3aXRoIHRoZSBlbGVtZW50cyBvZiB0aGUgc291cmNlIHNlcXVlbmNlcyBjb25jYXRlbmF0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBbGw8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj4pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENvbmNhdEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG5cbi8qKlxuICogQ29uY2F0ZW5hdGVzIHRoZSBpbnB1dCBzZXF1ZW5jZXMuXG4gKiBAcGFyYW0ge0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2UgVGhlIGZpcnN0IHNvdXJjZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7Li4uSXRlcmFibGU8VFNvdXJjZT59IGFyZ3MgVGhlIHJlc3Qgb2YgdGhlIHNvdXJjZSBzZXF1ZW5jZXMuXG4gKiBAcmV0dXJuIHtJdGVyYWJsZTxUU291cmNlPn0gU2VxdWVuY2Ugd2l0aCB0aGUgZWxlbWVudHMgb2YgdGhlIHNvdXJjZSBzZXF1ZW5jZXMgY29uY2F0ZW5hdGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0PFQ+KHNvdXJjZTogSXRlcmFibGU8VD4sIC4uLmFyZ3M6IEl0ZXJhYmxlPFQ+W10pOiBJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IENvbmNhdEl0ZXJhYmxlKFtzb3VyY2UsIC4uLmFyZ3NdKTtcbn1cblxuLyoqXG4gKiBDb25jYXRlbmF0ZXMgdGhlIGlucHV0IHNlcXVlbmNlcy5cbiAqIEBwYXJhbSB7Li4uSXRlcmFibGU8VFNvdXJjZT59IGFyZ3MgU291cmNlIHNlcXVlbmNlcy5cbiAqIEByZXR1cm4ge0l0ZXJhYmxlPFRTb3VyY2U+fSBTZXF1ZW5jZSB3aXRoIHRoZSBlbGVtZW50cyBvZiB0aGUgc291cmNlIHNlcXVlbmNlcyBjb25jYXRlbmF0ZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRTdGF0aWM8VD4oLi4uYXJnczogSXRlcmFibGU8VD5bXSk6IEl0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgQ29uY2F0SXRlcmFibGUoYXJncyk7XG59XG4iXX0=
