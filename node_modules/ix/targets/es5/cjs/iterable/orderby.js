Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var iterable_1 = require("../iterable");
var sorter_1 = require("../internal/sorter");
var OrderedIterableBaseX = (function (_super) {
    tslib_1.__extends(OrderedIterableBaseX, _super);
    function OrderedIterableBaseX(source) {
        var _this = _super.call(this) || this;
        _this._source = source;
        return _this;
    }
    OrderedIterableBaseX.prototype[Symbol.iterator] = function () {
        var array, len, indices, i, len_1, indices_1, indices_1_1, index, e_1_1, e_1, _a;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    array = Array.from(this._source);
                    len = array.length;
                    indices = new Array(len);
                    for (i = 0, len_1 = array.length; i < len_1; i++) {
                        indices[i] = i;
                    }
                    indices.sort(this._getSorter(array));
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 8]);
                    indices_1 = tslib_1.__values(indices), indices_1_1 = indices_1.next();
                    _b.label = 2;
                case 2:
                    if (!!indices_1_1.done) return [3 /*break*/, 5];
                    index = indices_1_1.value;
                    return [4 /*yield*/, array[index]];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    indices_1_1 = indices_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _b.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (indices_1_1 && !indices_1_1.done && (_a = indices_1.return)) _a.call(indices_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    OrderedIterableBaseX.prototype.thenBy = function (keySelector, comparer) {
        if (comparer === void 0) { comparer = sorter_1.sorter; }
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedIterableX(this._source, keySelector, comparer, false, this);
    };
    OrderedIterableBaseX.prototype.thenByDescending = function (keySelector, comparer) {
        if (comparer === void 0) { comparer = sorter_1.sorter; }
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedIterableX(this._source, keySelector, comparer, true, this);
    };
    return OrderedIterableBaseX;
}(iterable_1.IterableX));
exports.OrderedIterableBaseX = OrderedIterableBaseX;
var OrderedIterableX = (function (_super) {
    tslib_1.__extends(OrderedIterableX, _super);
    function OrderedIterableX(source, keySelector, comparer, descending, parent) {
        var _this = _super.call(this, source) || this;
        _this._keySelector = keySelector;
        _this._comparer = comparer;
        _this._descending = descending;
        _this._parent = parent;
        return _this;
    }
    OrderedIterableX.prototype._getSorter = function (elements, next) {
        var keys = elements.map(this._keySelector);
        var comparer = this._comparer;
        var parent = this._parent;
        var descending = this._descending;
        var sorter = function (x, y) {
            var result = comparer(keys[x], keys[y]);
            if (result === 0) {
                return next ? next(x, y) : x - y;
            }
            return descending ? -result : result;
        };
        return parent ? parent._getSorter(elements, sorter) : sorter;
    };
    return OrderedIterableX;
}(OrderedIterableBaseX));
exports.OrderedIterableX = OrderedIterableX;
function orderBy(source, keySelector, comparer) {
    if (comparer === void 0) { comparer = sorter_1.sorter; }
    return new OrderedIterableX(source, keySelector, comparer, false);
}
exports.orderBy = orderBy;
function orderByDescending(source, keySelector, comparer) {
    if (comparer === void 0) { comparer = sorter_1.sorter; }
    return new OrderedIterableX(source, keySelector, comparer, true);
}
exports.orderByDescending = orderByDescending;
function thenBy(source, keySelector, comparer) {
    if (comparer === void 0) { comparer = sorter_1.sorter; }
    return new OrderedIterableX(source._source, keySelector, comparer, false, source);
}
exports.thenBy = thenBy;
function thenByDescending(source, keySelector, comparer) {
    if (comparer === void 0) { comparer = sorter_1.sorter; }
    return new OrderedIterableX(source._source, keySelector, comparer, true, source);
}
exports.thenByDescending = thenByDescending;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
