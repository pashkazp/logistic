Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var iterable_1 = require("../iterable");
var arrayindexof_1 = require("../internal/arrayindexof");
var comparer_1 = require("../internal/comparer");
function arrayRemove(array, item, comparer) {
    var idx = arrayindexof_1.arrayIndexOf(array, item, comparer);
    if (idx === -1) {
        return false;
    }
    array.splice(idx, 1);
    return true;
}
var IntersectIterable = (function (_super) {
    tslib_1.__extends(IntersectIterable, _super);
    function IntersectIterable(first, second, comparer) {
        var _this = _super.call(this) || this;
        _this._first = first;
        _this._second = second;
        _this._comparer = comparer;
        return _this;
    }
    IntersectIterable.prototype[Symbol.iterator] = function () {
        var map, _a, _b, secondItem, _c, _d, firstItem, e_1_1, e_2, _e, e_1, _f;
        return tslib_1.__generator(this, function (_g) {
            switch (_g.label) {
                case 0:
                    map = [];
                    try {
                        for (_a = tslib_1.__values(this._second), _b = _a.next(); !_b.done; _b = _a.next()) {
                            secondItem = _b.value;
                            map.push(secondItem);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_b && !_b.done && (_e = _a.return)) _e.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    _g.label = 1;
                case 1:
                    _g.trys.push([1, 6, 7, 8]);
                    _c = tslib_1.__values(this._first), _d = _c.next();
                    _g.label = 2;
                case 2:
                    if (!!_d.done) return [3 /*break*/, 5];
                    firstItem = _d.value;
                    if (!arrayRemove(map, firstItem, this._comparer)) return [3 /*break*/, 4];
                    return [4 /*yield*/, firstItem];
                case 3:
                    _g.sent();
                    _g.label = 4;
                case 4:
                    _d = _c.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _g.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (_d && !_d.done && (_f = _c.return)) _f.call(_c);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/];
            }
        });
    };
    return IntersectIterable;
}(iterable_1.IterableX));
function intersect(first, second, comparer) {
    if (comparer === void 0) { comparer = comparer_1.comparer; }
    return new IntersectIterable(first, second, comparer);
}
exports.intersect = intersect;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ludGVyc2VjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHdDQUF3QztBQUN4Qyx5REFBd0Q7QUFDeEQsaURBQW1FO0FBRW5FLHFCQUF3QixLQUFVLEVBQUUsSUFBTyxFQUFFLFFBQWlDO0lBQzVFLElBQUksR0FBRyxHQUFHLDJCQUFZLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztJQUFDLENBQUM7SUFDakMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRDtJQUF5Qyw2Q0FBa0I7SUFLekQsMkJBQ0ksS0FBd0IsRUFDeEIsTUFBeUIsRUFDekIsUUFBNkM7UUFIakQsWUFJRSxpQkFBTyxTQUlSO1FBSEMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7O0lBQzVCLENBQUM7SUFFQSw0QkFBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWxCOzs7OztvQkFDTSxHQUFHLEdBQUcsRUFBRSxDQUFDOzt3QkFDYixHQUFHLENBQUMsQ0FBbUIsS0FBQSxpQkFBQSxJQUFJLENBQUMsT0FBTyxDQUFBOzRCQUExQixVQUFVOzRCQUNqQixHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3lCQUN0Qjs7Ozs7Ozs7Ozs7O29CQUVxQixLQUFBLGlCQUFBLElBQUksQ0FBQyxNQUFNLENBQUE7Ozs7b0JBQXhCLFNBQVM7eUJBQ1osV0FBVyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUEzQyx3QkFBMkM7b0JBQzdDLHFCQUFNLFNBQVMsRUFBQTs7b0JBQWYsU0FBZSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBR3JCO0lBQ0gsd0JBQUM7QUFBRCxDQTNCQSxBQTJCQyxDQTNCd0Msb0JBQVMsR0EyQmpEO0FBRUQsbUJBQ00sS0FBd0IsRUFDeEIsTUFBeUIsRUFDekIsUUFBK0Q7SUFBL0QseUJBQUEsRUFBQSxXQUFnRCxtQkFBZTtJQUNuRSxNQUFNLENBQUMsSUFBSSxpQkFBaUIsQ0FBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFMRCw4QkFLQyIsImZpbGUiOiJpdGVyYWJsZS9pbnRlcnNlY3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBhcnJheUluZGV4T2YgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuaW1wb3J0IHsgY29tcGFyZXIgYXMgZGVmYXVsdENvbXBhcmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuXG5mdW5jdGlvbiBhcnJheVJlbW92ZTxUPihhcnJheTogVFtdLCBpdGVtOiBULCBjb21wYXJlcjogKHg6IFQsIHk6IFQpID0+IGJvb2xlYW4pOiBib29sZWFuIHtcbiAgbGV0IGlkeCA9IGFycmF5SW5kZXhPZihhcnJheSwgaXRlbSwgY29tcGFyZXIpO1xuICBpZiAoaWR4ID09PSAtMSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgYXJyYXkuc3BsaWNlKGlkeCwgMSk7XG4gIHJldHVybiB0cnVlO1xufVxuXG5jbGFzcyBJbnRlcnNlY3RJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX2ZpcnN0OiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUU291cmNlLCB5OiBUU291cmNlKSA9PiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgZmlyc3Q6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZmlyc3QgPSBmaXJzdDtcbiAgICB0aGlzLl9zZWNvbmQgPSBzZWNvbmQ7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgbWFwID0gW107XG4gICAgZm9yIChsZXQgc2Vjb25kSXRlbSBvZiB0aGlzLl9zZWNvbmQpIHtcbiAgICAgIG1hcC5wdXNoKHNlY29uZEl0ZW0pO1xuICAgIH1cblxuICAgIGZvciAobGV0IGZpcnN0SXRlbSBvZiB0aGlzLl9maXJzdCkge1xuICAgICAgaWYgKGFycmF5UmVtb3ZlKG1hcCwgZmlyc3RJdGVtLCB0aGlzLl9jb21wYXJlcikpIHtcbiAgICAgICAgeWllbGQgZmlyc3RJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0PFRTb3VyY2U+KFxuICAgICAgZmlyc3Q6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiA9IGRlZmF1bHRDb21wYXJlcik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgSW50ZXJzZWN0SXRlcmFibGU8VFNvdXJjZT4oZmlyc3QsIHNlY29uZCwgY29tcGFyZXIpO1xufVxuIl19
