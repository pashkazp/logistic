Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var asynciterable_1 = require("../asynciterable");
var _refcountlist_1 = require("../iterable/_refcountlist");
var create_1 = require("./create");
var MemoizeAsyncBuffer = (function (_super) {
    tslib_1.__extends(MemoizeAsyncBuffer, _super);
    function MemoizeAsyncBuffer(source, buffer) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = buffer;
        return _this;
    }
    MemoizeAsyncBuffer.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var i, hasValue, current, next, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, , 13, 14]);
                        _a.label = 2;
                    case 2:
                        if (!1) return [3 /*break*/, 12];
                        hasValue = false, current = {};
                        if (!(i >= this._buffer.count)) return [3 /*break*/, 7];
                        if (!!this._stopped) return [3 /*break*/, 6];
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, tslib_1.__await(this._source.next())];
                    case 4:
                        next = _a.sent();
                        hasValue = !next.done;
                        if (hasValue) {
                            current = next.value;
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        this._error = e_1;
                        this._stopped = true;
                        return [3 /*break*/, 6];
                    case 6:
                        if (this._stopped) {
                            throw this._error;
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                        return [3 /*break*/, 8];
                    case 7:
                        hasValue = true;
                        _a.label = 8;
                    case 8:
                        if (!hasValue) return [3 /*break*/, 10];
                        return [4 /*yield*/, this._buffer.get(i)];
                    case 9:
                        _a.sent();
                        return [3 /*break*/, 11];
                    case 10: return [3 /*break*/, 12];
                    case 11:
                        i++;
                        return [3 /*break*/, 2];
                    case 12: return [3 /*break*/, 14];
                    case 13:
                        this._buffer.done();
                        return [7 /*endfinally*/];
                    case 14: return [2 /*return*/];
                }
            });
        });
    };
    return MemoizeAsyncBuffer;
}(asynciterable_1.AsyncIterableX));
function memoize(source, readerCount, selector) {
    if (readerCount === void 0) { readerCount = -1; }
    if (readerCount === -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new _refcountlist_1.MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new _refcountlist_1.RefCountList(readerCount));
    }
    return create_1.create(function () { return selector(memoize(source, readerCount))[Symbol.asyncIterator](); });
}
exports.memoize = memoize;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvbWVtb2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLGtEQUFrRDtBQUNsRCwyREFBeUY7QUFDekYsbUNBQWtDO0FBRWxDO0lBQW9DLDhDQUFpQjtJQU1uRCw0QkFBWSxNQUF3QixFQUFFLE1BQXdCO1FBQTlELFlBQ0UsaUJBQU8sU0FHUjtRQU5PLGNBQVEsR0FBWSxLQUFLLENBQUM7UUFJaEMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7O0lBQ3hCLENBQUM7SUFFTSw2QkFBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7d0JBQ00sQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Ozs7OzZCQUVELENBQUM7d0JBQ0YsUUFBUSxHQUFHLEtBQUssRUFBRSxPQUFPLEdBQU0sRUFBRSxDQUFDOzZCQUNsQyxDQUFBLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQSxFQUF2Qix3QkFBdUI7NkJBQ3JCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBZCx3QkFBYzs7Ozt3QkFFSCxxQ0FBTSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxHQUFBOzt3QkFBaEMsSUFBSSxHQUFHLFNBQXlCO3dCQUNwQyxRQUFRLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO3dCQUN0QixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOzRCQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO3dCQUFDLENBQUM7Ozs7d0JBRXZDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBQyxDQUFDO3dCQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzs7O3dCQUl6QixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs0QkFDbEIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDO3dCQUNwQixDQUFDO3dCQUVELEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7NEJBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7d0JBQUMsQ0FBQzs7O3dCQUU3QyxRQUFRLEdBQUcsSUFBSSxDQUFDOzs7NkJBR2QsUUFBUSxFQUFSLHlCQUFRO3dCQUNWLHFCQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFBOzt3QkFBekIsU0FBeUIsQ0FBQzs7NkJBRTFCLHlCQUFNOzt3QkFHUixDQUFDLEVBQUUsQ0FBQzs7Ozt3QkFHTixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDOzs7Ozs7S0FFdkI7SUFDSCx5QkFBQztBQUFELENBbERBLEFBa0RDLENBbERtQyw4QkFBYyxHQWtEakQ7QUFRRCxpQkFDSSxNQUE4QixFQUM5QixXQUF3QixFQUN4QixRQUFvRTtJQURwRSw0QkFBQSxFQUFBLGVBQXVCLENBQUM7SUFFMUIsRUFBRSxDQUFDLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsSUFBSSxrQkFBa0IsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSwrQkFBZSxFQUFXLENBQUMsQ0FBQztJQUN6RyxDQUFDO0lBRUQsRUFBRSxDQUFDLENBQUMsV0FBVyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNwQyxNQUFNLENBQUMsSUFBSSxrQkFBa0IsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSw0QkFBWSxDQUFVLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDakgsQ0FBQztJQUVELE1BQU0sQ0FBQyxlQUFNLENBQW9CLGNBQU0sT0FBQSxRQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUEvRCxDQUErRCxDQUFDLENBQUM7QUFDMUcsQ0FBQztBQWJELDBCQWFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvbWVtb2l6ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBJUmVmQ291bnRMaXN0LCBNYXhSZWZDb3VudExpc3QsIFJlZkNvdW50TGlzdCB9IGZyb20gJy4uL2l0ZXJhYmxlL19yZWZjb3VudGxpc3QnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUnO1xuXG5jbGFzcyBNZW1vaXplQXN5bmNCdWZmZXI8VD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYXRvcjxUPjtcbiAgcHJpdmF0ZSBfYnVmZmVyOiBJUmVmQ291bnRMaXN0PFQ+O1xuICBwcml2YXRlIF9lcnJvcjogYW55O1xuICBwcml2YXRlIF9zdG9wcGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhdG9yPFQ+LCBidWZmZXI6IElSZWZDb3VudExpc3Q8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgdHJ5IHtcbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCBoYXNWYWx1ZSA9IGZhbHNlLCBjdXJyZW50ID0gPFQ+e307XG4gICAgICAgIGlmIChpID49IHRoaXMuX2J1ZmZlci5jb3VudCkge1xuICAgICAgICAgIGlmICghdGhpcy5fc3RvcHBlZCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgbGV0IG5leHQgPSBhd2FpdCB0aGlzLl9zb3VyY2UubmV4dCgpO1xuICAgICAgICAgICAgICBoYXNWYWx1ZSA9ICFuZXh0LmRvbmU7XG4gICAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyBjdXJyZW50ID0gbmV4dC52YWx1ZTsgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICB0aGlzLl9lcnJvciA9IGU7XG4gICAgICAgICAgICAgIHRoaXMuX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnJvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaGFzVmFsdWUpIHsgdGhpcy5fYnVmZmVyLnB1c2goY3VycmVudCk7IH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzVmFsdWUpIHtcbiAgICAgICAgICB5aWVsZCB0aGlzLl9idWZmZXIuZ2V0KGkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICB0aGlzLl9idWZmZXIuZG9uZSgpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG1lbW9pemU8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJlYWRlckNvdW50PzogbnVtYmVyKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT47XG5leHBvcnQgZnVuY3Rpb24gbWVtb2l6ZTxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcmVhZGVyQ291bnQ/OiBudW1iZXIsXG4gICAgc2VsZWN0b3I/OiAodmFsdWU6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pID0+IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PjtcbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2UsIFRSZXN1bHQgPSBUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcmVhZGVyQ291bnQ6IG51bWJlciA9IC0xLFxuICAgIHNlbGVjdG9yPzogKHZhbHVlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZSB8IFRSZXN1bHQ+IHtcbiAgaWYgKHJlYWRlckNvdW50ID09PSAtMSAmJiAhc2VsZWN0b3IpIHtcbiAgICByZXR1cm4gbmV3IE1lbW9pemVBc3luY0J1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCksIG5ldyBNYXhSZWZDb3VudExpc3Q8VFNvdXJjZT4oKSk7XG4gIH1cblxuICBpZiAocmVhZGVyQ291bnQgIT09IC0xICYmICFzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgTWVtb2l6ZUFzeW5jQnVmZmVyPFRTb3VyY2U+KHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSwgbmV3IFJlZkNvdW50TGlzdDxUU291cmNlPihyZWFkZXJDb3VudCkpO1xuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZTxUU291cmNlIHwgVFJlc3VsdD4oKCkgPT4gc2VsZWN0b3IhKG1lbW9pemUoc291cmNlLCByZWFkZXJDb3VudCkpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpKTtcbn1cbiJdfQ==
