Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var asynciterable_1 = require("../asynciterable");
var foreach_1 = require("./foreach");
var DebounceAsyncIterable = (function (_super) {
    tslib_1.__extends(DebounceAsyncIterable, _super);
    function DebounceAsyncIterable(source, time) {
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._time = time;
        return _this;
    }
    DebounceAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var _this = this;
            var noValue, lastItem, deferred, resolver, done, hasError, error, reset, run;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        done = false;
                        hasError = false;
                        reset = function (hasNoValue) {
                            noValue = hasNoValue;
                            lastItem = undefined;
                            deferred = new Promise(function (r) { return resolver = r; });
                        };
                        run = function () {
                            if (lastItem === undefined) {
                                noValue = true;
                                return;
                            }
                            var item = lastItem;
                            var res = resolver;
                            reset(false);
                            setTimeout(run, _this._time);
                            res(item);
                        };
                        reset(true);
                        foreach_1.forEach(this._source, function (item) {
                            lastItem = item;
                            if (noValue) {
                                run();
                            }
                        })
                            .then(function () { return done = true; })
                            .catch(function (err) { hasError = true; error = err; });
                        _a.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 4];
                        if (done) {
                            return [3 /*break*/, 4];
                        }
                        if (hasError) {
                            throw error;
                        }
                        return [4 /*yield*/, tslib_1.__await(deferred)];
                    case 2: return [4 /*yield*/, _a.sent()];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    return DebounceAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}
exports.debounce = debounce;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGVib3VuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBa0Q7QUFDbEQscUNBQW9DO0FBRXBDO0lBQTZDLGlEQUF1QjtJQUlsRSwrQkFBWSxNQUE4QixFQUFFLElBQVk7UUFBeEQsWUFDRSxpQkFBTyxTQUdSO1FBRkMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7O0lBQ3BCLENBQUM7SUFFTSxnQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEdBQTdCOzs7Ozs7O3dCQUtNLElBQUksR0FBWSxLQUFLLENBQUM7d0JBQ3RCLFFBQVEsR0FBWSxLQUFLLENBQUM7d0JBR3hCLEtBQUssR0FBRyxVQUFDLFVBQW1COzRCQUNoQyxPQUFPLEdBQUcsVUFBVSxDQUFDOzRCQUNyQixRQUFRLEdBQUcsU0FBUyxDQUFDOzRCQUNyQixRQUFRLEdBQUcsSUFBSSxPQUFPLENBQVUsVUFBQSxDQUFDLElBQUksT0FBQSxRQUFRLEdBQUcsQ0FBQyxFQUFaLENBQVksQ0FBQyxDQUFDO3dCQUNyRCxDQUFDLENBQUM7d0JBRUksR0FBRyxHQUFHOzRCQUNWLEVBQUUsQ0FBQyxDQUFDLFFBQVEsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dDQUMzQixPQUFPLEdBQUcsSUFBSSxDQUFDO2dDQUNmLE1BQU0sQ0FBQzs0QkFDVCxDQUFDOzRCQUVELElBQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQzs0QkFDdEIsSUFBTSxHQUFHLEdBQUcsUUFBUSxDQUFDOzRCQUNyQixLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQ2IsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQzVCLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFDWixDQUFDLENBQUM7d0JBRUYsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNaLGlCQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFBLElBQUk7NEJBQ3hCLFFBQVEsR0FBRyxJQUFJLENBQUM7NEJBQ2hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0NBQUMsR0FBRyxFQUFFLENBQUM7NEJBQUMsQ0FBQzt3QkFDekIsQ0FBQyxDQUFDOzZCQUNELElBQUksQ0FBQyxjQUFNLE9BQUEsSUFBSSxHQUFHLElBQUksRUFBWCxDQUFXLENBQUM7NkJBQ3ZCLEtBQUssQ0FBQyxVQUFBLEdBQUcsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzs7NkJBRTFDLENBQUM7d0JBQ04sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs0QkFBQyxNQUFNLGtCQUFBO3dCQUFDLENBQUM7d0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7NEJBQUMsTUFBTSxLQUFLLENBQUM7d0JBQUMsQ0FBQzt3QkFDeEIscUNBQU0sUUFBUyxHQUFBOzRCQUFyQixxQkFBTSxTQUFlLEVBQUE7O3dCQUFyQixTQUFxQixDQUFDOzs7Ozs7S0FFekI7SUFDSCw0QkFBQztBQUFELENBcERBLEFBb0RDLENBcEQ0Qyw4QkFBYyxHQW9EMUQ7QUFFRCxrQkFBa0MsTUFBOEIsRUFBRSxJQUFZO0lBQzVFLE1BQU0sQ0FBQyxJQUFJLHFCQUFxQixDQUFVLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztBQUMxRCxDQUFDO0FBRkQsNEJBRUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9kZWJvdW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBmb3JFYWNoIH0gZnJvbSAnLi9mb3JlYWNoJztcblxuY2xhc3MgRGVib3VuY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX3RpbWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IG5vVmFsdWU6IGJvb2xlYW47XG4gICAgbGV0IGxhc3RJdGVtOiBUU291cmNlIHwgdW5kZWZpbmVkO1xuICAgIGxldCBkZWZlcnJlZDogUHJvbWlzZTxUU291cmNlPjtcbiAgICBsZXQgcmVzb2x2ZXI6ICh2YWx1ZT86IFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPiB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICBsZXQgZG9uZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCBoYXNFcnJvcjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCBlcnJvcjogYW55O1xuXG4gICAgY29uc3QgcmVzZXQgPSAoaGFzTm9WYWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgbm9WYWx1ZSA9IGhhc05vVmFsdWU7XG4gICAgICBsYXN0SXRlbSA9IHVuZGVmaW5lZDtcbiAgICAgIGRlZmVycmVkID0gbmV3IFByb21pc2U8VFNvdXJjZT4ociA9PiByZXNvbHZlciA9IHIpO1xuICAgIH07XG5cbiAgICBjb25zdCBydW4gPSAoKSA9PiB7XG4gICAgICBpZiAobGFzdEl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpdGVtID0gbGFzdEl0ZW07XG4gICAgICBjb25zdCByZXMgPSByZXNvbHZlcjtcbiAgICAgIHJlc2V0KGZhbHNlKTtcbiAgICAgIHNldFRpbWVvdXQocnVuLCB0aGlzLl90aW1lKTtcbiAgICAgIHJlcyhpdGVtKTtcbiAgICB9O1xuXG4gICAgcmVzZXQodHJ1ZSk7XG4gICAgZm9yRWFjaCh0aGlzLl9zb3VyY2UsIGl0ZW0gPT4ge1xuICAgICAgbGFzdEl0ZW0gPSBpdGVtO1xuICAgICAgaWYgKG5vVmFsdWUpIHsgcnVuKCk7IH1cbiAgICB9KVxuICAgIC50aGVuKCgpID0+IGRvbmUgPSB0cnVlKVxuICAgIC5jYXRjaChlcnIgPT4geyBoYXNFcnJvciA9IHRydWU7IGVycm9yID0gZXJyOyB9KTtcblxuICAgIHdoaWxlICgxKSB7XG4gICAgICBpZiAoZG9uZSkgeyBicmVhazsgfVxuICAgICAgaWYgKGhhc0Vycm9yKSB7IHRocm93IGVycm9yOyB9XG4gICAgICB5aWVsZCBhd2FpdCBkZWZlcnJlZCE7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEZWJvdW5jZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCB0aW1lKTtcbn1cbiJdfQ==
