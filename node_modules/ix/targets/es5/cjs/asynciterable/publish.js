Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var asynciterable_1 = require("../asynciterable");
var _refcountlist_1 = require("../iterable/_refcountlist");
var create_1 = require("./create");
var PublishedAsyncBuffer = (function (_super) {
    tslib_1.__extends(PublishedAsyncBuffer, _super);
    function PublishedAsyncBuffer(source) {
        var _this = _super.call(this) || this;
        _this._stopped = false;
        _this._source = source;
        _this._buffer = new _refcountlist_1.RefCountList(0);
        return _this;
    }
    PublishedAsyncBuffer.prototype._getIterable = function (i) {
        return tslib_1.__asyncGenerator(this, arguments, function _getIterable_1() {
            var hasValue, current, next, e_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, , 12, 13]);
                        _a.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 11];
                        hasValue = false, current = {};
                        if (!(i >= this._buffer.count)) return [3 /*break*/, 6];
                        if (!!this._stopped) return [3 /*break*/, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, tslib_1.__await(this._source.next())];
                    case 3:
                        next = _a.sent();
                        hasValue = !next.done;
                        if (hasValue) {
                            current = next.value;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        this._error = e_1;
                        this._stopped = true;
                        return [3 /*break*/, 5];
                    case 5:
                        if (this._stopped) {
                            if (this._error) {
                                throw this._error;
                            }
                            else {
                                return [3 /*break*/, 11];
                            }
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                        return [3 /*break*/, 7];
                    case 6:
                        hasValue = true;
                        _a.label = 7;
                    case 7:
                        if (!hasValue) return [3 /*break*/, 9];
                        return [4 /*yield*/, this._buffer.get(i)];
                    case 8:
                        _a.sent();
                        return [3 /*break*/, 10];
                    case 9: return [3 /*break*/, 11];
                    case 10:
                        i++;
                        return [3 /*break*/, 1];
                    case 11: return [3 /*break*/, 13];
                    case 12:
                        this._buffer.done();
                        return [7 /*endfinally*/];
                    case 13: return [2 /*return*/];
                }
            });
        });
    };
    PublishedAsyncBuffer.prototype[Symbol.asyncIterator] = function () {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.asyncIterator]();
    };
    return PublishedAsyncBuffer;
}(asynciterable_1.AsyncIterableX));
function publish(source, selector) {
    var _this = this;
    return selector ?
        create_1.create(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/, selector(publish(source))[Symbol.asyncIterator]()];
        }); }); }) :
        new PublishedAsyncBuffer(source[Symbol.asyncIterator]());
}
exports.publish = publish;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFORCwwQkFNQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL3B1Ymxpc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgUmVmQ291bnRMaXN0IH0gZnJvbSAnLi4vaXRlcmFibGUvX3JlZmNvdW50bGlzdCc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICcuL2NyZWF0ZSc7XG5cbmNsYXNzIFB1Ymxpc2hlZEFzeW5jQnVmZmVyPFQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VD4ge1xuICBwcml2YXRlIF9idWZmZXI6IFJlZkNvdW50TGlzdDxUPjtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhdG9yPFQ+O1xuICBwcml2YXRlIF9lcnJvcjogYW55O1xuICBwcml2YXRlIF9zdG9wcGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhdG9yPFQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fYnVmZmVyID0gbmV3IFJlZkNvdW50TGlzdDxUPigwKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgKl9nZXRJdGVyYWJsZShpOiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlPFQ+IHtcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgbGV0IGhhc1ZhbHVlID0gZmFsc2UsIGN1cnJlbnQgPSA8VD57fTtcbiAgICAgICAgaWYgKGkgPj0gdGhpcy5fYnVmZmVyLmNvdW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsZXQgbmV4dCA9IGF3YWl0IHRoaXMuX3NvdXJjZS5uZXh0KCk7XG4gICAgICAgICAgICAgIGhhc1ZhbHVlID0gIW5leHQuZG9uZTtcbiAgICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IGN1cnJlbnQgPSBuZXh0LnZhbHVlOyB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZTtcbiAgICAgICAgICAgICAgdGhpcy5fc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyB0aGlzLl9idWZmZXIucHVzaChjdXJyZW50KTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgIHlpZWxkIHRoaXMuX2J1ZmZlci5nZXQoaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuX2J1ZmZlci5kb25lKCk7XG4gICAgfVxuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhdG9yPFQ+IHtcbiAgICB0aGlzLl9idWZmZXIucmVhZGVyQ291bnQrKztcbiAgICByZXR1cm4gdGhpcy5fZ2V0SXRlcmFibGUodGhpcy5fYnVmZmVyLmNvdW50KVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPjtcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gIHNlbGVjdG9yPzogKHZhbHVlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD47XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I/OiAodmFsdWU6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pID0+IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlIHwgVFJlc3VsdD4ge1xuICByZXR1cm4gc2VsZWN0b3IgP1xuICAgIGNyZWF0ZShhc3luYyAoKSA9PiBzZWxlY3RvcihwdWJsaXNoKHNvdXJjZSkpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpKSA6XG4gICAgbmV3IFB1Ymxpc2hlZEFzeW5jQnVmZmVyPFRTb3VyY2U+KHNvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSk7XG59XG4iXX0=
