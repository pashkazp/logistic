Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var toarray_1 = require("./toarray");
function reduceRight(source, accumulator) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var _a, seed, hasSeed, hasValue, array, offset, item;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = tslib_1.__read(args, 1), seed = _a[0];
                    hasSeed = args.length === 1;
                    hasValue = false;
                    return [4 /*yield*/, toarray_1.toArray(source)];
                case 1:
                    array = _b.sent();
                    offset = array.length - 1;
                    _b.label = 2;
                case 2:
                    if (!(offset >= 0)) return [3 /*break*/, 6];
                    item = array[offset];
                    if (!(hasValue || (hasValue = hasSeed))) return [3 /*break*/, 4];
                    return [4 /*yield*/, accumulator(seed, item, offset)];
                case 3:
                    seed = _b.sent();
                    return [3 /*break*/, 5];
                case 4:
                    seed = item;
                    hasValue = true;
                    _b.label = 5;
                case 5:
                    offset--;
                    return [3 /*break*/, 2];
                case 6:
                    if (hasSeed && !hasValue) {
                        return [2 /*return*/, seed];
                    }
                    if (!hasValue) {
                        throw new Error('Sequence contains no elements');
                    }
                    return [2 /*return*/, seed];
            }
        });
    });
}
exports.reduceRight = reduceRight;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvcmVkdWNlcmlnaHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxxQ0FBb0M7QUFTcEMscUJBQ0ksTUFBd0IsRUFDeEIsV0FBb0U7SUFDcEUsY0FBa0I7U0FBbEIsVUFBa0IsRUFBbEIscUJBQWtCLEVBQWxCLElBQWtCO1FBQWxCLDZCQUFrQjs7Ozs7OztvQkFDaEIsS0FBQSxlQUFTLElBQUksSUFBQSxFQUFaLElBQUksUUFBQSxDQUFTO29CQUNaLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztvQkFDOUIsUUFBUSxHQUFHLEtBQUssQ0FBQztvQkFDUCxxQkFBTSxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFBOztvQkFBN0IsS0FBSyxHQUFHLFNBQXFCO29CQUMxQixNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDOzs7eUJBQUUsQ0FBQSxNQUFNLElBQUksQ0FBQyxDQUFBO29CQUN2QyxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO3lCQUN2QixDQUFBLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQSxFQUFoQyx3QkFBZ0M7b0JBQzNCLHFCQUFNLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxFQUFBOztvQkFBNUMsSUFBSSxHQUFHLFNBQXFDLENBQUM7OztvQkFFN0MsSUFBSSxHQUFHLElBQUksQ0FBQztvQkFDWixRQUFRLEdBQUcsSUFBSSxDQUFDOzs7b0JBTjZCLE1BQU0sRUFBRSxDQUFBOzs7b0JBVXpELEVBQUUsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7d0JBQ3pCLE1BQU0sZ0JBQUMsSUFBSyxFQUFDO29CQUNmLENBQUM7b0JBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNkLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztvQkFDbkQsQ0FBQztvQkFFRCxzQkFBTyxJQUFLLEVBQUM7Ozs7Q0FDZDtBQTNCRCxrQ0EyQkMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9yZWR1Y2VyaWdodC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3RvYXJyYXknO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVkdWNlUmlnaHQ8VD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFQsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBUIHwgUHJvbWlzZTxUPik6IFByb21pc2U8VD47XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVkdWNlUmlnaHQ8VCwgUiA9IFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gIHNlZWQ6IFIpOiBQcm9taXNlPFI+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0PFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgYWNjdW11bGF0b3I6IChhY2M6IFQgfCBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogUHJvbWlzZTxUIHwgUj4ge1xuICBsZXQgW3NlZWRdID0gYXJncztcbiAgY29uc3QgaGFzU2VlZCA9IGFyZ3MubGVuZ3RoID09PSAxO1xuICBsZXQgaGFzVmFsdWUgPSBmYWxzZTtcbiAgY29uc3QgYXJyYXkgPSBhd2FpdCB0b0FycmF5KHNvdXJjZSk7XG4gIGZvciAobGV0IG9mZnNldCA9IGFycmF5Lmxlbmd0aCAtIDE7IG9mZnNldCA+PSAwOyBvZmZzZXQtLSkge1xuICAgIGNvbnN0IGl0ZW0gPSBhcnJheVtvZmZzZXRdO1xuICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSBoYXNTZWVkKSkge1xuICAgICAgc2VlZCA9IGF3YWl0IGFjY3VtdWxhdG9yKHNlZWQsIGl0ZW0sIG9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlZWQgPSBpdGVtO1xuICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChoYXNTZWVkICYmICFoYXNWYWx1ZSkge1xuICAgIHJldHVybiBzZWVkITtcbiAgfVxuXG4gIGlmICghaGFzVmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gIH1cblxuICByZXR1cm4gc2VlZCE7XG59XG4iXX0=
