Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var asynciterable_1 = require("../asynciterable");
var GenerateAsyncIterable = (function (_super) {
    tslib_1.__extends(GenerateAsyncIterable, _super);
    function GenerateAsyncIterable(initialState, condition, iterate, resultSelector) {
        var _this = _super.call(this) || this;
        _this._initialState = initialState;
        _this._condition = condition;
        _this._iterate = iterate;
        _this._resultSelector = resultSelector;
        return _this;
    }
    GenerateAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var i;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = this._initialState;
                        _a.label = 1;
                    case 1: return [4 /*yield*/, tslib_1.__await(this._condition(i))];
                    case 2:
                        if (!_a.sent()) return [3 /*break*/, 7];
                        return [4 /*yield*/, tslib_1.__await(this._resultSelector(i))];
                    case 3: return [4 /*yield*/, _a.sent()];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [4 /*yield*/, tslib_1.__await(this._iterate(i))];
                    case 6:
                        i = _a.sent();
                        return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return GenerateAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function generate(initialState, condition, iterate, resultSelector) {
    return new GenerateAsyncIterable(initialState, condition, iterate, resultSelector);
}
exports.generate = generate;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZ2VuZXJhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBa0Q7QUFFbEQ7SUFBcUQsaURBQXVCO0lBTTFFLCtCQUNJLFlBQW9CLEVBQ3BCLFNBQXdELEVBQ3hELE9BQW9ELEVBQ3BELGNBQTZEO1FBSmpFLFlBS0UsaUJBQU8sU0FLUjtRQUpDLEtBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO1FBQ2xDLEtBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLEtBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLEtBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDOztJQUN4QyxDQUFDO0lBRU0sZ0NBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNXLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYTs7NEJBQUUscUNBQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBQTs7NkJBQXhCLFNBQXdCO3dCQUNqRCxxQ0FBTSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxHQUFBOzRCQUFuQyxxQkFBTSxTQUE2QixFQUFBOzt3QkFBbkMsU0FBbUMsQ0FBQzs7NEJBRHlCLHFDQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEdBQUE7O3dCQUExQixDQUFDLEdBQUcsU0FBc0IsQ0FBQTs7Ozs7O0tBR3RGO0lBQ0gsNEJBQUM7QUFBRCxDQXZCQSxBQXVCQyxDQXZCb0QsOEJBQWMsR0F1QmxFO0FBRUQsa0JBQ0ksWUFBb0IsRUFDcEIsU0FBd0QsRUFDeEQsT0FBb0QsRUFDcEQsY0FBNkQ7SUFDL0QsTUFBTSxDQUFDLElBQUkscUJBQXFCLENBQWtCLFlBQVksRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0FBQ3RHLENBQUM7QUFORCw0QkFNQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2dlbmVyYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcblxuY2xhc3MgR2VuZXJhdGVBc3luY0l0ZXJhYmxlPFRTdGF0ZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX2luaXRpYWxTdGF0ZTogVFN0YXRlO1xuICBwcml2YXRlIF9jb25kaXRpb246ICh2YWx1ZTogVFN0YXRlKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcbiAgcHJpdmF0ZSBfaXRlcmF0ZTogKHZhbHVlOiBUU3RhdGUpID0+IFRTdGF0ZSB8IFByb21pc2U8VFN0YXRlPjtcbiAgcHJpdmF0ZSBfcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIGluaXRpYWxTdGF0ZTogVFN0YXRlLFxuICAgICAgY29uZGl0aW9uOiAodmFsdWU6IFRTdGF0ZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgICBpdGVyYXRlOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFN0YXRlIHwgUHJvbWlzZTxUU3RhdGU+LFxuICAgICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIHRoaXMuX2NvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICB0aGlzLl9pdGVyYXRlID0gaXRlcmF0ZTtcbiAgICB0aGlzLl9yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX2luaXRpYWxTdGF0ZTsgYXdhaXQgdGhpcy5fY29uZGl0aW9uKGkpOyBpID0gYXdhaXQgdGhpcy5faXRlcmF0ZShpKSkge1xuICAgICAgeWllbGQgYXdhaXQgdGhpcy5fcmVzdWx0U2VsZWN0b3IoaSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZW5lcmF0ZTxUU3RhdGUsIFRSZXN1bHQ+KFxuICAgIGluaXRpYWxTdGF0ZTogVFN0YXRlLFxuICAgIGNvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgIGl0ZXJhdGU6ICh2YWx1ZTogVFN0YXRlKSA9PiBUU3RhdGUgfCBQcm9taXNlPFRTdGF0ZT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBHZW5lcmF0ZUFzeW5jSXRlcmFibGU8VFN0YXRlLCBUUmVzdWx0Pihpbml0aWFsU3RhdGUsIGNvbmRpdGlvbiwgaXRlcmF0ZSwgcmVzdWx0U2VsZWN0b3IpO1xufVxuIl19
