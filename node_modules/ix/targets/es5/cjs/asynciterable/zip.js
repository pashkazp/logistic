Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var asynciterable_1 = require("../asynciterable");
var ZipIterable = (function (_super) {
    tslib_1.__extends(ZipIterable, _super);
    function ZipIterable(left, right, fn) {
        var _this = _super.call(this) || this;
        _this._left = left;
        _this._right = right;
        _this._fn = fn;
        return _this;
    }
    ZipIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var it1, it2, _a, next1, next2;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        it1 = this._left[Symbol.asyncIterator]();
                        it2 = this._right[Symbol.asyncIterator]();
                        _b.label = 1;
                    case 1:
                        if (!1) return [3 /*break*/, 7];
                        return [4 /*yield*/, tslib_1.__await(Promise.all([it1.next(), it2.next()]))];
                    case 2:
                        _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), next1 = _a[0], next2 = _a[1];
                        if (!(!next1.done && !next2.done)) return [3 /*break*/, 5];
                        return [4 /*yield*/, tslib_1.__await(this._fn(next1.value, next2.value))];
                    case 3: return [4 /*yield*/, _b.sent()];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5: return [3 /*break*/, 7];
                    case 6: return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return ZipIterable;
}(asynciterable_1.AsyncIterableX));
function zip(left, right, fn) {
    return new ZipIterable(left, right, fn);
}
exports.zip = zip;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvemlwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0RBQWtEO0FBRWxEO0lBQTRDLHVDQUF1QjtJQUtqRSxxQkFDSSxJQUE0QixFQUM1QixLQUE2QixFQUM3QixFQUFpRTtRQUhyRSxZQUlFLGlCQUFPLFNBSVI7UUFIQyxLQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNsQixLQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixLQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQzs7SUFDaEIsQ0FBQztJQUVNLHNCQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsR0FBN0I7Ozs7Ozt3QkFDUSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQzt3QkFDekMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7Ozs2QkFDekMsQ0FBQzt3QkFDaUIscUNBQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxHQUFBOzt3QkFBNUQsS0FBQSw4QkFBaUIsU0FBMkMsS0FBQSxFQUEzRCxLQUFLLFFBQUEsRUFBRSxLQUFLLFFBQUE7NkJBQ2YsQ0FBQSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFBLEVBQTFCLHdCQUEwQjt3QkFDdEIscUNBQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBQTs0QkFBOUMscUJBQU0sU0FBd0MsRUFBQTs7d0JBQTlDLFNBQThDLENBQUM7OzRCQUUvQyx3QkFBTTs7Ozs7O0tBR1g7SUFDSCxrQkFBQztBQUFELENBM0JBLEFBMkJDLENBM0IyQyw4QkFBYyxHQTJCekQ7QUFFRCxhQUNJLElBQTRCLEVBQzVCLEtBQTZCLEVBQzdCLEVBQWlFO0lBQ25FLE1BQU0sQ0FBQyxJQUFJLFdBQVcsQ0FBbUIsSUFBSSxFQUFFLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDO0FBTEQsa0JBS0MiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS96aXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuXG5jbGFzcyBaaXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcHJpdmF0ZSBfbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2ZuOiAobGVmdDogVFNvdXJjZSwgcmlnaHQ6IFRTb3VyY2UpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHJpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3JpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGl0MSA9IHRoaXMuX2xlZnRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgY29uc3QgaXQyID0gdGhpcy5fcmlnaHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGNvbnN0IFtuZXh0MSwgbmV4dDJdID0gYXdhaXQgUHJvbWlzZS5hbGwoW2l0MS5uZXh0KCksIGl0Mi5uZXh0KCldKTtcbiAgICAgIGlmICghbmV4dDEuZG9uZSAmJiAhbmV4dDIuZG9uZSkge1xuICAgICAgICB5aWVsZCBhd2FpdCB0aGlzLl9mbihuZXh0MS52YWx1ZSwgbmV4dDIudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB6aXA8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBmbjogKGxlZnQ6IFRTb3VyY2UsIHJpZ2h0OiBUU291cmNlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBaaXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0PihsZWZ0LCByaWdodCwgZm4pO1xufVxuIl19
