Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var asynciterable_1 = require("../asynciterable");
var toarray_1 = require("./toarray");
var ScanRightAsyncIterable = (function (_super) {
    tslib_1.__extends(ScanRightAsyncIterable, _super);
    function ScanRightAsyncIterable(source, fn) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        var _this = _super.call(this) || this;
        _this._source = source;
        _this._fn = fn;
        _this._hasSeed = args.length === 1;
        _this._seed = args[0];
        return _this;
    }
    ScanRightAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return tslib_1.__asyncGenerator(this, arguments, function _a() {
            var hasValue, source, offset, item, _a;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        hasValue = false;
                        return [4 /*yield*/, tslib_1.__await(toarray_1.toArray(this._source))];
                    case 1:
                        source = _b.sent();
                        offset = source.length - 1;
                        _b.label = 2;
                    case 2:
                        if (!(offset >= 0)) return [3 /*break*/, 7];
                        item = source[offset];
                        if (!(hasValue || (hasValue = this._hasSeed))) return [3 /*break*/, 5];
                        _a = this;
                        return [4 /*yield*/, tslib_1.__await(this._fn(this._seed, item, offset))];
                    case 3:
                        _a._seed = _b.sent();
                        return [4 /*yield*/, this._seed];
                    case 4:
                        _b.sent();
                        return [3 /*break*/, 6];
                    case 5:
                        this._seed = item;
                        hasValue = true;
                        _b.label = 6;
                    case 6:
                        offset--;
                        return [3 /*break*/, 2];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    return ScanRightAsyncIterable;
}(asynciterable_1.AsyncIterableX));
function scanRight(source, accumulator) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    return new (ScanRightAsyncIterable.bind.apply(ScanRightAsyncIterable, tslib_1.__spread([void 0, source, accumulator], args)))();
}
exports.scanRight = scanRight;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvc2NhbnJpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsa0RBQWtEO0FBQ2xELHFDQUFvQztBQUVwQztJQUEyQyxrREFBaUI7SUFNMUQsZ0NBQ0ksTUFBd0IsRUFDeEIsRUFBdUQ7UUFDdkQsY0FBa0I7YUFBbEIsVUFBa0IsRUFBbEIscUJBQWtCLEVBQWxCLElBQWtCO1lBQWxCLDZCQUFrQjs7UUFIdEIsWUFJRSxpQkFBTyxTQUtSO1FBSkMsS0FBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsS0FBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxLQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLEtBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUN2QixDQUFDO0lBRU0saUNBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUE3Qjs7Ozs7O3dCQUNNLFFBQVEsR0FBRyxLQUFLLENBQUM7d0JBQ04scUNBQU0saUJBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUE7O3dCQUFwQyxNQUFNLEdBQUcsU0FBMkI7d0JBQ2pDLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUM7Ozs2QkFBRSxDQUFBLE1BQU0sSUFBSSxDQUFDLENBQUE7d0JBQ3hDLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7NkJBQ3hCLENBQUEsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQSxFQUF0Qyx3QkFBc0M7d0JBQ3hDLEtBQUEsSUFBSSxDQUFBO3dCQUFTLHFDQUFNLElBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLEdBQUE7O3dCQUF4RCxHQUFLLEtBQUssR0FBRyxTQUEyQyxDQUFDO3dCQUN6RCxxQkFBTSxJQUFJLENBQUMsS0FBSyxFQUFBOzt3QkFBaEIsU0FBZ0IsQ0FBQzs7O3dCQUVqQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQzt3QkFDbEIsUUFBUSxHQUFHLElBQUksQ0FBQzs7O3dCQVA4QixNQUFNLEVBQUUsQ0FBQTs7Ozs7O0tBVTNEO0lBQ0gsNkJBQUM7QUFBRCxDQS9CQSxBQStCQyxDQS9CMEMsOEJBQWMsR0ErQnhEO0FBU0QsbUJBQ0ksTUFBd0IsRUFDeEIsV0FBb0U7SUFDcEUsY0FBa0I7U0FBbEIsVUFBa0IsRUFBbEIscUJBQWtCLEVBQWxCLElBQWtCO1FBQWxCLDZCQUFrQjs7SUFDcEIsTUFBTSxNQUFLLHNCQUFzQixZQUF0QixzQkFBc0IsNEJBQUMsTUFBTSxFQUFFLFdBQVcsR0FBSyxJQUFJLE1BQUU7QUFDbEUsQ0FBQztBQUxELDhCQUtDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvc2NhbnJpZ2h0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3RvYXJyYXknO1xuXG5jbGFzcyBTY2FuUmlnaHRBc3luY0l0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8Uj4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD47XG4gIHByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj47XG4gIHByaXZhdGUgX3NlZWQ/OiBUIHwgUjtcbiAgcHJpdmF0ZSBfaGFzU2VlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICAgIGZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgICAuLi5hcmdzOiAoVCB8IFIpW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICAgIHRoaXMuX2hhc1NlZWQgPSBhcmdzLmxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLl9zZWVkID0gYXJnc1swXTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IHRvQXJyYXkodGhpcy5fc291cmNlKTtcbiAgICBmb3IgKGxldCBvZmZzZXQgPSBzb3VyY2UubGVuZ3RoIC0gMTsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSB7XG4gICAgICBjb25zdCBpdGVtID0gc291cmNlW29mZnNldF07XG4gICAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gdGhpcy5faGFzU2VlZCkpIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGF3YWl0IHRoaXMuX2ZuKDxSPnRoaXMuX3NlZWQsIGl0ZW0sIG9mZnNldCk7XG4gICAgICAgIHlpZWxkIHRoaXMuX3NlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWVkID0gaXRlbTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCB8IFByb21pc2U8VD4pOiBBc3luY0l0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gIHNlZWQ6IFIpOiBBc3luY0l0ZXJhYmxlWDxSPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBBc3luY0l0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5SaWdodEFzeW5jSXRlcmFibGUoc291cmNlLCBhY2N1bXVsYXRvciwgLi4uYXJncyk7XG59XG4iXX0=
