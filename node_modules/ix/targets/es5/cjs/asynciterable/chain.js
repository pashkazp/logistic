Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var asynciterable_1 = require("../asynciterable");
var ChainAsyncIterable = (function (_super) {
    tslib_1.__extends(ChainAsyncIterable, _super);
    function ChainAsyncIterable(result) {
        var _this = _super.call(this) || this;
        _this._result = result;
        return _this;
    }
    ChainAsyncIterable.prototype[Symbol.asyncIterator] = function () {
        return this._result[Symbol.asyncIterator]();
    };
    return ChainAsyncIterable;
}(asynciterable_1.AsyncIterableX));
/**
 * Returns an async iterable sequence that is the result of invoking the selector on the source sequence,
 * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use
 * the same sequence multiple times.
 * @param {AsyncIterable<TSource>} source Source sequence that will be shared in the selector function.
 * @param {function(source: AsyncIterable<TSource>): AsyncIterable<TResult>} selector Selector function which can use
 * the source sequence as many times as needed, without sharing subscriptions to the source sequence.
 * @returns An async iterable sequence that contains the elements of a sequence produced by multicasting the source
 * sequence within a selector function.
 */
function chain(source, selector) {
    return new ChainAsyncIterable(selector(source));
}
exports.chain = chain;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvY2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxrREFBa0Q7QUFFbEQ7SUFBMEMsOENBQXVCO0lBRy9ELDRCQUFZLE1BQThCO1FBQTFDLFlBQ0UsaUJBQU8sU0FFUjtRQURDLEtBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDOztJQUN4QixDQUFDO0lBRUQsNkJBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUF0QjtRQUNFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFDSCx5QkFBQztBQUFELENBWEEsQUFXQyxDQVh5Qyw4QkFBYyxHQVd2RDtBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILGVBQ0ksTUFBOEIsRUFDOUIsUUFBb0U7SUFDdEUsTUFBTSxDQUFDLElBQUksa0JBQWtCLENBQVUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUpELHNCQUlDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvY2hhaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuXG5jbGFzcyBDaGFpbkFzeW5jSXRlcmFibGU8VFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX3Jlc3VsdDogQXN5bmNJdGVyYWJsZTxUUmVzdWx0PjtcblxuICBjb25zdHJ1Y3RvcihyZXN1bHQ6IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3Jlc3VsdCA9IHJlc3VsdDtcbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc3VsdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXN5bmMgaXRlcmFibGUgc2VxdWVuY2UgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBzZWxlY3RvciBvbiB0aGUgc291cmNlIHNlcXVlbmNlLFxuICogd2l0aG91dCBzaGFyaW5nIHN1YnNjcmlwdGlvbnMuICBUaGlzIG9wZXJhdG9yIGFsbG93cyBmb3IgYSBmbHVlbnQgc3R5bGUgb2Ygd3JpdGluZyBxdWVyaWVzIHRoYXQgdXNlXG4gKiB0aGUgc2FtZSBzZXF1ZW5jZSBtdWx0aXBsZSB0aW1lcy5cbiAqIEBwYXJhbSB7QXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZSB0aGF0IHdpbGwgYmUgc2hhcmVkIGluIHRoZSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pn0gc2VsZWN0b3IgU2VsZWN0b3IgZnVuY3Rpb24gd2hpY2ggY2FuIHVzZVxuICogdGhlIHNvdXJjZSBzZXF1ZW5jZSBhcyBtYW55IHRpbWVzIGFzIG5lZWRlZCwgd2l0aG91dCBzaGFyaW5nIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHNvdXJjZSBzZXF1ZW5jZS5cbiAqIEByZXR1cm5zIEFuIGFzeW5jIGl0ZXJhYmxlIHNlcXVlbmNlIHRoYXQgY29udGFpbnMgdGhlIGVsZW1lbnRzIG9mIGEgc2VxdWVuY2UgcHJvZHVjZWQgYnkgbXVsdGljYXN0aW5nIHRoZSBzb3VyY2VcbiAqIHNlcXVlbmNlIHdpdGhpbiBhIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhaW48VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAoc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IENoYWluQXN5bmNJdGVyYWJsZTxUUmVzdWx0PihzZWxlY3Rvcihzb3VyY2UpKTtcbn1cbiJdfQ==
