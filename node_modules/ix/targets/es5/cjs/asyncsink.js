Object.defineProperty(exports, "__esModule", { value: true });
var ARRAY_VALUE = 'value';
var ARRAY_ERROR = 'error';
var AsyncSink = (function () {
    function AsyncSink() {
        this._ended = false;
        this._values = [];
        this._resolvers = [];
    }
    AsyncSink.prototype[Symbol.asyncIterator] = function () {
        return this;
    };
    AsyncSink.prototype.write = function (value) {
        this._push({ type: ARRAY_VALUE, value: value });
    };
    AsyncSink.prototype.error = function (error) {
        this._push({ type: ARRAY_ERROR, error: error });
    };
    AsyncSink.prototype._push = function (item) {
        if (this._ended) {
            throw new Error('AsyncSink already ended');
        }
        if (this._resolvers.length > 0) {
            var _a = this._resolvers.shift(), resolve = _a.resolve, reject = _a.reject;
            if (item.type === ARRAY_ERROR) {
                reject(item.error);
            }
            else {
                resolve({ done: false, value: item.value });
            }
        }
        else {
            this._values.push(item);
        }
    };
    AsyncSink.prototype.next = function () {
        var _this = this;
        if (this._values.length > 0) {
            var _a = this._values.shift(), type = _a.type, value = _a.value, error = _a.error;
            if (type === ARRAY_ERROR) {
                return Promise.reject(error);
            }
            else {
                return Promise.resolve({ done: false, value: value });
            }
        }
        if (this._ended) {
            return Promise.resolve({ done: true });
        }
        return new Promise(function (resolve, reject) {
            _this._resolvers.push({ resolve: resolve, reject: reject });
        });
    };
    AsyncSink.prototype.end = function () {
        while (this._resolvers.length > 0) {
            this._resolvers.shift().resolve({ done: true });
        }
        this._ended = true;
    };
    return AsyncSink;
}());
exports.AsyncSink = AsyncSink;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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LENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCx1QkFBRyxHQUFIO1FBQ0UsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQTZCLENBQUMsQ0FBQztRQUM5RSxDQUFDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7SUFDckIsQ0FBQztJQUNILGdCQUFDO0FBQUQsQ0FqRUEsQUFpRUMsSUFBQTtBQWpFWSw4QkFBUyIsImZpbGUiOiJhc3luY3NpbmsuanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBBUlJBWV9WQUxVRSA9ICd2YWx1ZSc7XG5jb25zdCBBUlJBWV9FUlJPUiA9ICdlcnJvcic7XG5cbmludGVyZmFjZSBBc3luY1NpbmtJdGVtPFQ+IHtcbiAgdHlwZTogc3RyaW5nO1xuICB2YWx1ZT86IFQ7XG4gIGVycm9yPzogYW55O1xufVxuXG5pbnRlcmZhY2UgQXN5bmNSZXNvbHZlcjxUPiB7XG4gIHJlc29sdmU6ICh2YWx1ZT86IFQgfCBQcm9taXNlTGlrZTxUPiB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgcmVqZWN0OiAocmVhc29uPzogYW55KSA9PiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgQXN5bmNTaW5rPFRTb3VyY2U+IGltcGxlbWVudHMgQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfZW5kZWQ6IGJvb2xlYW47XG4gIHByaXZhdGUgX3ZhbHVlczogQXN5bmNTaW5rSXRlbTxUU291cmNlPltdO1xuICBwcml2YXRlIF9yZXNvbHZlcnM6IEFzeW5jUmVzb2x2ZXI8SXRlcmF0b3JSZXN1bHQ8VFNvdXJjZT4+W107XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZW5kZWQgPSBmYWxzZTtcbiAgICB0aGlzLl92YWx1ZXMgPSBbXTtcbiAgICB0aGlzLl9yZXNvbHZlcnMgPSBbXTtcbiAgfVxuXG4gIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICB3cml0ZSh2YWx1ZTogVFNvdXJjZSkge1xuICAgIHRoaXMuX3B1c2goeyB0eXBlOiBBUlJBWV9WQUxVRSwgdmFsdWUgfSk7XG4gIH1cblxuICBlcnJvcihlcnJvcjogYW55KSB7XG4gICAgdGhpcy5fcHVzaCh7IHR5cGU6IEFSUkFZX0VSUk9SLCBlcnJvciB9KTtcbiAgfVxuXG4gIHByaXZhdGUgX3B1c2goaXRlbTogQXN5bmNTaW5rSXRlbTxUU291cmNlPikge1xuICAgIGlmICh0aGlzLl9lbmRlZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBc3luY1NpbmsgYWxyZWFkeSBlbmRlZCcpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9yZXNvbHZlcnMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3Qge3Jlc29sdmUsIHJlamVjdCB9ID0gdGhpcy5fcmVzb2x2ZXJzLnNoaWZ0KCkhO1xuICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gQVJSQVlfRVJST1IpIHtcbiAgICAgICAgcmVqZWN0KGl0ZW0uZXJyb3IhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoeyBkb25lOiBmYWxzZSwgdmFsdWU6IGl0ZW0udmFsdWUhIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl92YWx1ZXMucHVzaChpdGVtKTtcbiAgICB9XG4gIH1cblxuICBuZXh0KCkge1xuICAgIGlmICh0aGlzLl92YWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgeyB0eXBlLCB2YWx1ZSwgZXJyb3IgfSA9IHRoaXMuX3ZhbHVlcy5zaGlmdCgpITtcbiAgICAgIGlmICh0eXBlID09PSBBUlJBWV9FUlJPUikge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7IGRvbmU6IGZhbHNlLCB2YWx1ZSB9IGFzIEl0ZXJhdG9yUmVzdWx0PFRTb3VyY2U+KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZW5kZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoeyBkb25lOiB0cnVlIH0gYXMgSXRlcmF0b3JSZXN1bHQ8VFNvdXJjZT4pO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxUU291cmNlPj4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fcmVzb2x2ZXJzLnB1c2goeyByZXNvbHZlLCByZWplY3QgfSk7XG4gICAgfSk7XG4gIH1cblxuICBlbmQoKSB7XG4gICAgd2hpbGUgKHRoaXMuX3Jlc29sdmVycy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl9yZXNvbHZlcnMuc2hpZnQoKSEucmVzb2x2ZSh7IGRvbmU6IHRydWUgfSBhcyBJdGVyYXRvclJlc3VsdDxUU291cmNlPik7XG4gICAgfVxuICAgIHRoaXMuX2VuZGVkID0gdHJ1ZTtcbiAgfVxufVxuIl19
