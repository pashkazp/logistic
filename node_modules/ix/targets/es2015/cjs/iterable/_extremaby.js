Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
/**
 * @ignore
 */
function defaultCompare(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
exports.defaultCompare = defaultCompare;
/**
 * @ignore
 */
class ExtremaByIterable extends iterable_1.IterableX {
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    *[Symbol.iterator]() {
        let result = [], next;
        const it = this._source[Symbol.iterator]();
        if ((next = it.next()).done) {
            throw new Error('Sequence contains no elements');
        }
        let current = next.value, resKey = this._keyFn(current);
        result.push(current);
        while (!(next = it.next()).done) {
            let curr = next.value, key = this._keyFn(curr);
            const c = this._cmp(key, resKey);
            if (c === 0) {
                result.push(curr);
            }
            else if (c > 0) {
                result = [curr];
                resKey = key;
            }
        }
        yield* result;
    }
}
/**
 * @ignore
 */
function extremaBy(source, keyFn, cmp) {
    return new ExtremaByIterable(source, keyFn, cmp);
}
exports.extremaBy = extremaBy;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL19leHRyZW1hYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDBDQUF3QztBQUV4Qzs7R0FFRztBQUNILHdCQUFrQyxHQUFNLEVBQUUsUUFBVztJQUNuRCxNQUFNLENBQUMsR0FBRyxHQUFHLFFBQVEsR0FBRyxDQUFDLEdBQUcsR0FBRyxHQUFHLFFBQVEsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdEQsQ0FBQztBQUZELHdDQUVDO0FBRUQ7O0dBRUc7QUFDSCx1QkFBdUMsU0FBUSxvQkFBa0I7SUFLL0QsWUFDSSxNQUF5QixFQUN6QixLQUEyQixFQUMzQixHQUFpQztRQUNuQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxJQUFJLEdBQUcsR0FBRyxDQUFDO0lBQ2xCLENBQUM7SUFFRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQixJQUFJLE1BQU0sR0FBYyxFQUFFLEVBQUUsSUFBSSxDQUFDO1FBQ2pDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDM0MsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM1QixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUVELElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyQixPQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDaEMsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNqQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3BCLENBQUM7WUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pCLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNoQixNQUFNLEdBQUcsR0FBRyxDQUFDO1lBQ2YsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0NBQ0Y7QUFFRDs7R0FFRztBQUNILG1CQUNJLE1BQXlCLEVBQ3pCLEtBQTJCLEVBQzNCLEdBQWlDO0lBQ25DLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFnQixNQUFNLEVBQUUsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2xFLENBQUM7QUFMRCw4QkFLQyIsImZpbGUiOiJpdGVyYWJsZS9fZXh0cmVtYWJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlPFQ+KGtleTogVCwgbWluVmFsdWU6IFQpOiBudW1iZXIge1xuICByZXR1cm4ga2V5ID4gbWluVmFsdWUgPyAxIDoga2V5IDwgbWluVmFsdWUgPyAtMSA6IDA7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jbGFzcyBFeHRyZW1hQnlJdGVyYWJsZTxUU291cmNlLCBUS2V5PiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2tleUZuOiAoeDogVFNvdXJjZSkgPT4gVEtleTtcbiAgcHJpdmF0ZSBfY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleUZuOiAoeDogVFNvdXJjZSkgPT4gVEtleSxcbiAgICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleUZuID0ga2V5Rm47XG4gICAgdGhpcy5fY21wID0gY21wO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCByZXN1bHQ6IFRTb3VyY2VbXSA9IFtdLCBuZXh0O1xuICAgIGNvbnN0IGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICBpZiAoKG5leHQgPSBpdC5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2VxdWVuY2UgY29udGFpbnMgbm8gZWxlbWVudHMnKTtcbiAgICB9XG5cbiAgICBsZXQgY3VycmVudCA9IG5leHQudmFsdWUsIHJlc0tleSA9IHRoaXMuX2tleUZuKGN1cnJlbnQpO1xuICAgIHJlc3VsdC5wdXNoKGN1cnJlbnQpO1xuICAgIHdoaWxlICghKG5leHQgPSBpdC5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIGxldCBjdXJyID0gbmV4dC52YWx1ZSwga2V5ID0gdGhpcy5fa2V5Rm4oY3Vycik7XG4gICAgICBjb25zdCBjID0gdGhpcy5fY21wKGtleSwgcmVzS2V5KTtcbiAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGN1cnIpO1xuICAgICAgfSBlbHNlIGlmIChjID4gMCkge1xuICAgICAgICByZXN1bHQgPSBbY3Vycl07XG4gICAgICAgIHJlc0tleSA9IGtleTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB5aWVsZCogcmVzdWx0O1xuICB9XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmVtYUJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5LFxuICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlcik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRXh0cmVtYUJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleT4oc291cmNlLCBrZXlGbiwgY21wKTtcbn1cbiJdfQ==
