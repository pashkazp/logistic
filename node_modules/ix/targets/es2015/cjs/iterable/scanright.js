Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
const toarray_1 = require("./toarray");
class ScanRightIterable extends iterable_1.IterableX {
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    *[Symbol.iterator]() {
        let hasValue = false;
        const source = toarray_1.toArray(this._source);
        for (let offset = source.length - 1; offset >= 0; offset--) {
            const item = source[offset];
            if (hasValue || (hasValue = this._hasSeed)) {
                this._seed = this._fn(this._seed, item, offset);
                yield this._seed;
            }
            else {
                this._seed = item;
                hasValue = true;
            }
        }
    }
}
function scanRight(source, accumulator, ...args) {
    return new ScanRightIterable(source, accumulator, ...args);
}
exports.scanRight = scanRight;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3NjYW5yaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQXdDO0FBQ3hDLHVDQUFvQztBQUVwQyx1QkFBOEIsU0FBUSxvQkFBWTtJQU1oRCxZQUNJLE1BQW1CLEVBQ25CLEVBQTBDLEVBQzFDLEdBQUcsSUFBZTtRQUNwQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLGlCQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQztZQUMzRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDNUIsRUFBRSxDQUFDLENBQUMsUUFBUSxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBSSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDbkQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ25CLENBQUM7WUFBQyxJQUFJLENBQUMsQ0FBQztnQkFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDbEIsUUFBUSxHQUFHLElBQUksQ0FBQztZQUNsQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQVNELG1CQUNJLE1BQW1CLEVBQ25CLFdBQXVELEVBQ3ZELEdBQUcsSUFBZTtJQUNwQixNQUFNLENBQUMsSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUxELDhCQUtDIiwiZmlsZSI6Iml0ZXJhYmxlL3NjYW5yaWdodC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3RvYXJyYXknO1xuXG5jbGFzcyBTY2FuUmlnaHRJdGVyYWJsZTxULCBSPiBleHRlbmRzIEl0ZXJhYmxlWDxSPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VD47XG4gIHByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUjtcbiAgcHJpdmF0ZSBfc2VlZD86IFQgfCBSO1xuICBwcml2YXRlIF9oYXNTZWVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICAgIGZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUixcbiAgICAgIC4uLmFyZ3M6IChUIHwgUilbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2ZuID0gZm47XG4gICAgdGhpcy5faGFzU2VlZCA9IGFyZ3MubGVuZ3RoID09PSAxO1xuICAgIHRoaXMuX3NlZWQgPSBhcmdzWzBdO1xuICB9XG5cbiAgKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHNvdXJjZSA9IHRvQXJyYXkodGhpcy5fc291cmNlKTtcbiAgICBmb3IgKGxldCBvZmZzZXQgPSBzb3VyY2UubGVuZ3RoIC0gMTsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSB7XG4gICAgICBjb25zdCBpdGVtID0gc291cmNlW29mZnNldF07XG4gICAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gdGhpcy5faGFzU2VlZCkpIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IHRoaXMuX2ZuKDxSPnRoaXMuX3NlZWQsIGl0ZW0sIG9mZnNldCk7XG4gICAgICAgIHlpZWxkIHRoaXMuX3NlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWVkID0gaXRlbTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogVCwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFQpOiBJdGVyYWJsZVg8VD47XG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQsIFIgPSBUPihcbiAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSLFxuICBzZWVkOiBSKTogSXRlcmFibGVYPFI+O1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5SaWdodDxULCBSID0gVD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSLFxuICAgIC4uLmFyZ3M6IChUIHwgUilbXSk6IEl0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5SaWdodEl0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19
