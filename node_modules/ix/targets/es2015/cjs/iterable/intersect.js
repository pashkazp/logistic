Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
const arrayindexof_1 = require("../internal/arrayindexof");
const comparer_1 = require("../internal/comparer");
function arrayRemove(array, item, comparer) {
    let idx = arrayindexof_1.arrayIndexOf(array, item, comparer);
    if (idx === -1) {
        return false;
    }
    array.splice(idx, 1);
    return true;
}
class IntersectIterable extends iterable_1.IterableX {
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    *[Symbol.iterator]() {
        let map = [];
        for (let secondItem of this._second) {
            map.push(secondItem);
        }
        for (let firstItem of this._first) {
            if (arrayRemove(map, firstItem, this._comparer)) {
                yield firstItem;
            }
        }
    }
}
function intersect(first, second, comparer = comparer_1.comparer) {
    return new IntersectIterable(first, second, comparer);
}
exports.intersect = intersect;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ludGVyc2VjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQXdDO0FBQ3hDLDJEQUF3RDtBQUN4RCxtREFBbUU7QUFFbkUscUJBQXdCLEtBQVUsRUFBRSxJQUFPLEVBQUUsUUFBaUM7SUFDNUUsSUFBSSxHQUFHLEdBQUcsMkJBQVksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzlDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0lBQUMsQ0FBQztJQUNqQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELHVCQUFpQyxTQUFRLG9CQUFrQjtJQUt6RCxZQUNJLEtBQXdCLEVBQ3hCLE1BQXlCLEVBQ3pCLFFBQTZDO1FBQy9DLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQUVELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNiLEdBQUcsQ0FBQyxDQUFDLElBQUksVUFBVSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkIsQ0FBQztRQUVELEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQ2xDLEVBQUUsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELE1BQU0sU0FBUyxDQUFDO1lBQ2xCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQsbUJBQ00sS0FBd0IsRUFDeEIsTUFBeUIsRUFDekIsV0FBZ0QsbUJBQWU7SUFDbkUsTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztBQUNqRSxDQUFDO0FBTEQsOEJBS0MiLCJmaWxlIjoiaXRlcmFibGUvaW50ZXJzZWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mIH0gZnJvbSAnLi4vaW50ZXJuYWwvYXJyYXlpbmRleG9mJztcbmltcG9ydCB7IGNvbXBhcmVyIGFzIGRlZmF1bHRDb21wYXJlciB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcblxuZnVuY3Rpb24gYXJyYXlSZW1vdmU8VD4oYXJyYXk6IFRbXSwgaXRlbTogVCwgY29tcGFyZXI6ICh4OiBULCB5OiBUKSA9PiBib29sZWFuKTogYm9vbGVhbiB7XG4gIGxldCBpZHggPSBhcnJheUluZGV4T2YoYXJyYXksIGl0ZW0sIGNvbXBhcmVyKTtcbiAgaWYgKGlkeCA9PT0gLTEpIHsgcmV0dXJuIGZhbHNlOyB9XG4gIGFycmF5LnNwbGljZShpZHgsIDEpO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuY2xhc3MgSW50ZXJzZWN0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9maXJzdDogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX3NlY29uZDogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2NvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIGZpcnN0OiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHNlY29uZDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2ZpcnN0ID0gZmlyc3Q7XG4gICAgdGhpcy5fc2Vjb25kID0gc2Vjb25kO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IG1hcCA9IFtdO1xuICAgIGZvciAobGV0IHNlY29uZEl0ZW0gb2YgdGhpcy5fc2Vjb25kKSB7XG4gICAgICBtYXAucHVzaChzZWNvbmRJdGVtKTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBmaXJzdEl0ZW0gb2YgdGhpcy5fZmlyc3QpIHtcbiAgICAgIGlmIChhcnJheVJlbW92ZShtYXAsIGZpcnN0SXRlbSwgdGhpcy5fY29tcGFyZXIpKSB7XG4gICAgICAgIHlpZWxkIGZpcnN0SXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyc2VjdDxUU291cmNlPihcbiAgICAgIGZpcnN0OiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHNlY29uZDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEludGVyc2VjdEl0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==
