Object.defineProperty(exports, "__esModule", { value: true });
const iterable_1 = require("../iterable");
const bindcallback_1 = require("../internal/bindcallback");
class FilterIterable extends iterable_1.IterableX {
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    *[Symbol.iterator]() {
        let i = 0;
        for (let item of this._source) {
            if (this._predicate(item, i++)) {
                yield item;
            }
        }
    }
}
/**
 * Filters a sequence of values based on a predicate.
 * @param {Iterable<T>} source Source sequence.
 * @param {function(value: T, index: number): boolean} predicate A function to test each source element for a condition.
 * @param {Object} [thisArg] Value to use as this when executing callback.
 * @return {Iterable<T>} Sequence that contains elements from the input sequence that satisfy the condition.
 */
function filter(source, predicate, thisArg) {
    return new FilterIterable(source, bindcallback_1.bindCallback(predicate, thisArg, 2));
}
exports.filter = filter;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsMENBQXdDO0FBQ3hDLDJEQUF3RDtBQUV4RCxvQkFBOEIsU0FBUSxvQkFBa0I7SUFJdEQsWUFBWSxNQUF5QixFQUFFLFNBQXFEO1FBQzFGLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUVELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQixNQUFNLElBQUksQ0FBQztZQUNiLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsZ0JBQ0ksTUFBbUIsRUFDbkIsU0FBK0MsRUFDL0MsT0FBYTtJQUNmLE1BQU0sQ0FBQyxJQUFJLGNBQWMsQ0FBSSxNQUFNLEVBQUUsMkJBQVksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDNUUsQ0FBQztBQUxELHdCQUtDIiwiZmlsZSI6Iml0ZXJhYmxlL2ZpbHRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5cbmNsYXNzIEZpbHRlckl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAodGhpcy5fcHJlZGljYXRlKGl0ZW0sIGkrKykpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBGaWx0ZXJzIGEgc2VxdWVuY2Ugb2YgdmFsdWVzIGJhc2VkIG9uIGEgcHJlZGljYXRlLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24odmFsdWU6IFQsIGluZGV4OiBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGUgQSBmdW5jdGlvbiB0byB0ZXN0IGVhY2ggc291cmNlIGVsZW1lbnQgZm9yIGEgY29uZGl0aW9uLlxuICogQHBhcmFtIHtPYmplY3R9IFt0aGlzQXJnXSBWYWx1ZSB0byB1c2UgYXMgdGhpcyB3aGVuIGV4ZWN1dGluZyBjYWxsYmFjay5cbiAqIEByZXR1cm4ge0l0ZXJhYmxlPFQ+fSBTZXF1ZW5jZSB0aGF0IGNvbnRhaW5zIGVsZW1lbnRzIGZyb20gdGhlIGlucHV0IHNlcXVlbmNlIHRoYXQgc2F0aXNmeSB0aGUgY29uZGl0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyPFQ+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4sXG4gICAgdGhpc0FyZz86IGFueSk6IEl0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgRmlsdGVySXRlcmFibGU8VD4oc291cmNlLCBiaW5kQ2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAyKSk7XG59XG4iXX0=
