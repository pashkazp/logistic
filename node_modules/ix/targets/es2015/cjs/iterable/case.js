Object.defineProperty(exports, "__esModule", { value: true });
const defer_1 = require("./defer");
const empty_1 = require("./empty");
/**
 * Returns a sequence from a dictionary based on the result of evaluating a selector function.
 * @example
 * const map = new Map([
 *   [1, [1, 2, 3]],
 *   [2, [2, 3, 4]],
 *   [3, [4, 5, 6]]
 * ]);
 * const result = case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * const result = Ix.Iterable.case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * for (const item of result) {
 *   console.log(result);
 * }
 * @param {function(): TSource} selector Selector function used to pick a sequence from the given sources.
 * @param {Map<TSource, Iterable<TResult>>} sources Dictionary mapping selector values onto resulting sequences.
 * @param {Iterable<TResult>} [defaultSource] Default sequence to return in case there's no corresponding source
 * for the computed selector value.  If not specified, defaults to an empty sequence.
 * @return {Iterable<TResult>} The source sequence corresponding with the evaluated selector value; otherwise, the default source.
 */
function _case(selector, sources, defaultSource = empty_1.empty()) {
    return defer_1.defer(() => {
        const key = selector();
        return sources.has(key) ? sources.get(key) : defaultSource;
    });
}
exports._case = _case;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2Nhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLG1DQUFnQztBQUNoQyxtQ0FBZ0M7QUFFaEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBMEJHO0FBQ0gsZUFDSSxRQUF1QixFQUN2QixPQUF3QyxFQUN4QyxnQkFBbUMsYUFBSyxFQUFXO0lBQ3JELE1BQU0sQ0FBQyxhQUFLLENBQVU7UUFDcEIsTUFBTSxHQUFHLEdBQUcsUUFBUSxFQUFFLENBQUM7UUFDdkIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsR0FBRyxhQUFhLENBQUM7SUFDOUQsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDO0FBUkQsc0JBUUMiLCJmaWxlIjoiaXRlcmFibGUvY2FzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmltcG9ydCB7IGRlZmVyIH0gZnJvbSAnLi9kZWZlcic7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vZW1wdHknO1xuXG4vKipcbiAqIFJldHVybnMgYSBzZXF1ZW5jZSBmcm9tIGEgZGljdGlvbmFyeSBiYXNlZCBvbiB0aGUgcmVzdWx0IG9mIGV2YWx1YXRpbmcgYSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKiBjb25zdCBtYXAgPSBuZXcgTWFwKFtcbiAqICAgWzEsIFsxLCAyLCAzXV0sXG4gKiAgIFsyLCBbMiwgMywgNF1dLFxuICogICBbMywgWzQsIDUsIDZdXVxuICogXSk7XG4gKiBjb25zdCByZXN1bHQgPSBjYXNlKFxuICogICAoKSA9PiAyLFxuICogICBtYXAsXG4gKiAgIFs1LCA2LCA3XVxuICogKTtcbiAqIGNvbnN0IHJlc3VsdCA9IEl4Lkl0ZXJhYmxlLmNhc2UoXG4gKiAgICgpID0+IDIsXG4gKiAgIG1hcCxcbiAqICAgWzUsIDYsIDddXG4gKiApO1xuICogZm9yIChjb25zdCBpdGVtIG9mIHJlc3VsdCkge1xuICogICBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICogfVxuICogQHBhcmFtIHtmdW5jdGlvbigpOiBUU291cmNlfSBzZWxlY3RvciBTZWxlY3RvciBmdW5jdGlvbiB1c2VkIHRvIHBpY2sgYSBzZXF1ZW5jZSBmcm9tIHRoZSBnaXZlbiBzb3VyY2VzLlxuICogQHBhcmFtIHtNYXA8VFNvdXJjZSwgSXRlcmFibGU8VFJlc3VsdD4+fSBzb3VyY2VzIERpY3Rpb25hcnkgbWFwcGluZyBzZWxlY3RvciB2YWx1ZXMgb250byByZXN1bHRpbmcgc2VxdWVuY2VzLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUUmVzdWx0Pn0gW2RlZmF1bHRTb3VyY2VdIERlZmF1bHQgc2VxdWVuY2UgdG8gcmV0dXJuIGluIGNhc2UgdGhlcmUncyBubyBjb3JyZXNwb25kaW5nIHNvdXJjZVxuICogZm9yIHRoZSBjb21wdXRlZCBzZWxlY3RvciB2YWx1ZS4gIElmIG5vdCBzcGVjaWZpZWQsIGRlZmF1bHRzIHRvIGFuIGVtcHR5IHNlcXVlbmNlLlxuICogQHJldHVybiB7SXRlcmFibGU8VFJlc3VsdD59IFRoZSBzb3VyY2Ugc2VxdWVuY2UgY29ycmVzcG9uZGluZyB3aXRoIHRoZSBldmFsdWF0ZWQgc2VsZWN0b3IgdmFsdWU7IG90aGVyd2lzZSwgdGhlIGRlZmF1bHQgc291cmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gX2Nhc2U8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc2VsZWN0b3I6ICgpID0+IFRTb3VyY2UsXG4gICAgc291cmNlczogTWFwPFRTb3VyY2UsIEl0ZXJhYmxlPFRSZXN1bHQ+PixcbiAgICBkZWZhdWx0U291cmNlOiBJdGVyYWJsZTxUUmVzdWx0PiA9IGVtcHR5PFRSZXN1bHQ+KCkpOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gZGVmZXI8VFJlc3VsdD4oKCkgPT4ge1xuICAgIGNvbnN0IGtleSA9IHNlbGVjdG9yKCk7XG4gICAgcmV0dXJuIHNvdXJjZXMuaGFzKGtleSkgPyBzb3VyY2VzLmdldChrZXkpISA6IGRlZmF1bHRTb3VyY2U7XG4gIH0pO1xufVxuIl19
