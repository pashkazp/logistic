Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
class ScanAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let i = 0, hasValue = false;
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    if (hasValue || (hasValue = this._hasSeed)) {
                        this._seed = yield tslib_1.__await(this._fn(this._seed, item, i++));
                        yield this._seed;
                    }
                    else {
                        this._seed = item;
                        hasValue = true;
                        i++;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function scan(source, accumulator, ...args) {
    return new ScanAsyncIterable(source, accumulator, ...args);
}
exports.scan = scan;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvc2Nhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUFrRDtBQUVsRCx1QkFBOEIsU0FBUSw4QkFBaUI7SUFNckQsWUFDSSxNQUF3QixFQUN4QixFQUF1RCxFQUN2RCxHQUFHLElBQWU7UUFDcEIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztRQUNkLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFFBQVEsR0FBRyxLQUFLLENBQUM7O2dCQUM1QixHQUFHLENBQUMsQ0FBbUIsSUFBQSxLQUFBLHNCQUFBLElBQUksQ0FBQyxPQUFPLENBQUEsSUFBQTtvQkFBeEIsSUFBSSxJQUFJLGtDQUFBLENBQUE7b0JBQ2pCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUMzQyxJQUFJLENBQUMsS0FBSyxHQUFHLHNCQUFNLElBQUksQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDO3dCQUN0RCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUM7b0JBQ25CLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ04sSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7d0JBQ2xCLFFBQVEsR0FBRyxJQUFJLENBQUM7d0JBQ2hCLENBQUMsRUFBRSxDQUFDO29CQUNOLENBQUM7aUJBQ0Y7Ozs7Ozs7Ozs7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQVNELGNBQ0ksTUFBd0IsRUFDeEIsV0FBb0UsRUFDcEUsR0FBRyxJQUFlO0lBQ3BCLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBTEQsb0JBS0MiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9zY2FuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcblxuY2xhc3MgU2NhbkFzeW5jSXRlcmFibGU8VCwgUj4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxSPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUPjtcbiAgcHJpdmF0ZSBfZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPjtcbiAgcHJpdmF0ZSBfc2VlZD86IFQgfCBSO1xuICBwcml2YXRlIF9oYXNTZWVkOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICAgICAgZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAgIC4uLmFyZ3M6IChUIHwgUilbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2ZuID0gZm47XG4gICAgdGhpcy5faGFzU2VlZCA9IGFyZ3MubGVuZ3RoID09PSAxO1xuICAgIHRoaXMuX3NlZWQgPSBhcmdzWzBdO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IGkgPSAwLCBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGZvciBhd2FpdCAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gdGhpcy5faGFzU2VlZCkpIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGF3YWl0IHRoaXMuX2ZuKDxSPnRoaXMuX3NlZWQsIGl0ZW0sIGkrKyk7XG4gICAgICAgIHlpZWxkIHRoaXMuX3NlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWVkID0gaXRlbTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCB8IFByb21pc2U8VD4pOiBBc3luY0l0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQsIFIgPSBUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICBzZWVkOiBSKTogQXN5bmNJdGVyYWJsZVg8Uj47XG5leHBvcnQgZnVuY3Rpb24gc2NhbjxULCBSID0gVD4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICAgIGFjY3VtdWxhdG9yOiAoYWNjOiBUIHwgUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICAgIC4uLmFyZ3M6IChUIHwgUilbXSk6IEFzeW5jSXRlcmFibGVYPFQgfCBSPiB7XG4gIHJldHVybiBuZXcgU2NhbkFzeW5jSXRlcmFibGUoc291cmNlLCBhY2N1bXVsYXRvciwgLi4uYXJncyk7XG59XG4iXX0=
