Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
class TapAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, observer) {
        super();
        this._source = source;
        this._observer = observer;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const it = this._source[Symbol.asyncIterator]();
            while (1) {
                let next;
                try {
                    next = yield tslib_1.__await(it.next());
                }
                catch (e) {
                    if (this._observer.error) {
                        yield tslib_1.__await(this._observer.error(e));
                    }
                    throw e;
                }
                if (next.done) {
                    if (this._observer.complete) {
                        yield tslib_1.__await(this._observer.complete());
                    }
                    break;
                }
                if (this._observer.next) {
                    yield tslib_1.__await(this._observer.next(next.value));
                }
                yield next.value;
            }
        });
    }
}
function tap(source, observer) {
    return new TapAsyncIterable(source, observer);
}
exports.tap = tap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvdGFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQWtEO0FBR2xELHNCQUFnQyxTQUFRLDhCQUF1QjtJQUk3RCxZQUFZLE1BQThCLEVBQUUsUUFBdUM7UUFDakYsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUMzQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBQ2hELE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1QsSUFBSSxJQUFJLENBQUM7Z0JBQ1QsSUFBSSxDQUFDO29CQUNILElBQUksR0FBRyxzQkFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQztnQkFDekIsQ0FBQztnQkFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNYLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFBQyxzQkFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO29CQUFDLENBQUM7b0JBQzVELE1BQU0sQ0FBQyxDQUFDO2dCQUNWLENBQUM7Z0JBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQ2QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUFDLHNCQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUEsQ0FBQztvQkFBQyxDQUFDO29CQUNqRSxLQUFLLENBQUM7Z0JBQ1IsQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQUMsc0JBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUM7Z0JBQUMsQ0FBQztnQkFDbkUsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ25CLENBQUM7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQUVELGFBQ0ksTUFBOEIsRUFDOUIsUUFBdUM7SUFDekMsTUFBTSxDQUFDLElBQUksZ0JBQWdCLENBQVUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3pELENBQUM7QUFKRCxrQkFJQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL3RhcC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBQYXJ0aWFsQXN5bmNPYnNlcnZlciB9IGZyb20gJy4uL29ic2VydmVyJztcblxuY2xhc3MgVGFwQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9vYnNlcnZlcjogUGFydGlhbEFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT47XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCBvYnNlcnZlcjogUGFydGlhbEFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9vYnNlcnZlciA9IG9ic2VydmVyO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGxldCBuZXh0O1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV4dCA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29ic2VydmVyLmVycm9yKSB7IGF3YWl0IHRoaXMuX29ic2VydmVyLmVycm9yKGUpOyB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0LmRvbmUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29ic2VydmVyLmNvbXBsZXRlKSB7IGF3YWl0IHRoaXMuX29ic2VydmVyLmNvbXBsZXRlKCk7IH1cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9vYnNlcnZlci5uZXh0KSB7IGF3YWl0IHRoaXMuX29ic2VydmVyLm5leHQobmV4dC52YWx1ZSk7IH1cbiAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YXA8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIG9ic2VydmVyOiBQYXJ0aWFsQXN5bmNPYnNlcnZlcjxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYXBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgb2JzZXJ2ZXIpO1xufVxuIl19
