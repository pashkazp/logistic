Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
const bindcallback_1 = require("../internal/bindcallback");
const identity_1 = require("../internal/identity");
const tolength_1 = require("../internal/tolength");
const isiterable_1 = require("../internal/isiterable");
class FromArrayIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let i = 0;
            const length = tolength_1.toLength(this._source.length);
            while (i < length) {
                yield yield tslib_1.__await(this._selector(this._source[i], i++));
            }
        });
    }
}
class FromAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let i = 0;
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    yield yield tslib_1.__await(this._selector(item, i++));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
class FromPromiseIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const item = yield tslib_1.__await(this._source);
            yield yield tslib_1.__await(this._selector(item, 0));
        });
    }
}
class AsyncObserver {
    constructor() {
        this.values = [];
        this.hasCompleted = false;
        this.hasError = false;
        this.errorValue = null;
        this.closed = false;
    }
    next(value) {
        if (!this.closed) {
            this.values.push(value);
        }
    }
    error(err) {
        if (!this.closed) {
            this.closed = true;
            this.hasError = true;
            this.errorValue = err;
        }
    }
    complete() {
        if (!this.closed) {
            this.closed = true;
        }
    }
}
class FromObservableAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(observable, selector) {
        super();
        this._observable = observable;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const observer = new AsyncObserver();
            const subscription = this._observable.subscribe(observer);
            let i = 0;
            while (1) {
                if (observer.values.length > 0) {
                    yield yield tslib_1.__await(this._selector(observer.values.shift(), i++));
                }
                else if (observer.closed) {
                    subscription.unsubscribe();
                    if (observer.hasError) {
                        throw observer.errorValue;
                    }
                    else {
                        break;
                    }
                }
            }
        });
    }
}
function isPromise(x) {
    return x != null && Object(x) === x && typeof x['then'] === 'function';
}
function isObservable(x) {
    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';
}
function isArrayLike(x) {
    return x != null && Object(x) === x && typeof x['length'] === 'number';
}
function from(source, selector = identity_1.identityAsync, thisArg) {
    const fn = bindcallback_1.bindCallback(selector, thisArg, 2);
    if (isiterable_1.isIterable(source) || isiterable_1.isAsyncIterable(source)) {
        return new FromAsyncIterable(source, fn);
    }
    if (isPromise(source)) {
        return new FromPromiseIterable(source, fn);
    }
    if (isObservable(source)) {
        return new FromObservableAsyncIterable(source, fn);
    }
    if (isArrayLike(source)) {
        return new FromArrayIterable(source, fn);
    }
    throw new TypeError('Input type not supported');
}
exports.from = from;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
