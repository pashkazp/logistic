Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
const _sleep_1 = require("./_sleep");
class TimeoutError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, TimeoutError.prototype);
        this.message = 'Timeout has occurred';
    }
}
exports.TimeoutError = TimeoutError;
const VALUE_TYPE = 'value';
const ERROR_TYPE = 'error';
class TimeoutAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, dueTime) {
        super();
        this._source = source;
        this._dueTime = dueTime;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const it = this._source[Symbol.asyncIterator]();
            while (1) {
                const { type, value } = yield tslib_1.__await(Promise.race([
                    it.next().then(value => { return { type: VALUE_TYPE, value }; }),
                    _sleep_1.sleep(this._dueTime).then(() => { return { type: ERROR_TYPE }; })
                ]));
                if (type === ERROR_TYPE) {
                    throw new TimeoutError();
                }
                if (value.done) {
                    break;
                }
                yield value.value;
            }
        });
    }
}
function timeout(source, dueTime) {
    return new TimeoutAsyncIterable(source, dueTime);
}
exports.timeout = timeout;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvdGltZW91dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUFrRDtBQUNsRCxxQ0FBaUM7QUFFakMsa0JBQTBCLFNBQVEsS0FBSztJQUNyQztRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxPQUFPLEdBQUcsc0JBQXNCLENBQUM7SUFDeEMsQ0FBQztDQUNGO0FBTkQsb0NBTUM7QUFFRCxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUM7QUFDM0IsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDO0FBTzNCLDBCQUFvQyxTQUFRLDhCQUF1QjtJQUlqRSxZQUFZLE1BQThCLEVBQUUsT0FBZTtRQUN6RCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBQzNCLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFDaEQsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFDVCxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxHQUFHLHNCQUFNLE9BQU8sQ0FBQyxJQUFJLENBQTRCO29CQUNwRSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssTUFBTSxNQUFNLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNoRSxjQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDbEUsQ0FBQyxDQUFBLENBQUM7Z0JBRUgsRUFBRSxDQUFDLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7b0JBQ3hCLE1BQU0sSUFBSSxZQUFZLEVBQUUsQ0FBQztnQkFDM0IsQ0FBQztnQkFFRCxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFBQyxLQUFLLENBQUM7Z0JBQUMsQ0FBQztnQkFDMUIsTUFBTSxLQUFLLENBQUMsS0FBSyxDQUFDO1lBQ3BCLENBQUM7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQUVELGlCQUNJLE1BQThCLEVBQzlCLE9BQWU7SUFDakIsTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQVUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzVELENBQUM7QUFKRCwwQkFJQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL3RpbWVvdXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuL19zbGVlcCc7XG5cbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRpbWVvdXRFcnJvci5wcm90b3R5cGUpO1xuICAgIHRoaXMubWVzc2FnZSA9ICdUaW1lb3V0IGhhcyBvY2N1cnJlZCc7XG4gIH1cbn1cblxuY29uc3QgVkFMVUVfVFlQRSA9ICd2YWx1ZSc7XG5jb25zdCBFUlJPUl9UWVBFID0gJ2Vycm9yJztcblxuaW50ZXJmYWNlIFRpbWVvdXRPcGVyYXRpb248VD4ge1xuICB0eXBlOiBzdHJpbmc7XG4gIHZhbHVlPzogSXRlcmF0b3JSZXN1bHQ8VD47XG59XG5cbmNsYXNzIFRpbWVvdXRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2R1ZVRpbWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGR1ZVRpbWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2R1ZVRpbWUgPSBkdWVUaW1lO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGNvbnN0IHsgdHlwZSwgdmFsdWUgfSA9IGF3YWl0IFByb21pc2UucmFjZTxUaW1lb3V0T3BlcmF0aW9uPFRTb3VyY2U+PihbXG4gICAgICAgIGl0Lm5leHQoKS50aGVuKHZhbHVlID0+IHsgcmV0dXJuIHsgdHlwZTogVkFMVUVfVFlQRSwgdmFsdWUgfTsgfSksXG4gICAgICAgIHNsZWVwKHRoaXMuX2R1ZVRpbWUpLnRoZW4oKCkgPT4geyByZXR1cm4geyB0eXBlOiBFUlJPUl9UWVBFIH07IH0pXG4gICAgICBdKTtcblxuICAgICAgaWYgKHR5cGUgPT09IEVSUk9SX1RZUEUpIHtcbiAgICAgICAgdGhyb3cgbmV3IFRpbWVvdXRFcnJvcigpO1xuICAgICAgfVxuXG4gICAgICBpZiAodmFsdWUuZG9uZSkgeyBicmVhazsgfVxuICAgICAgeWllbGQgdmFsdWUudmFsdWU7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aW1lb3V0PFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBkdWVUaW1lOiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGltZW91dEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBkdWVUaW1lKTtcbn0iXX0=
