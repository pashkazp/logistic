Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
class BufferAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, count, skip) {
        super();
        this._source = source;
        this._count = count;
        this._skip = skip;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let buffers = [], i = 0;
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    if (i % this._skip === 0) {
                        buffers.push([]);
                    }
                    for (let buffer of buffers) {
                        buffer.push(item);
                    }
                    if (buffers.length > 0 && buffers[0].length === this._count) {
                        yield buffers.shift();
                    }
                    i++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            while (buffers.length > 0) {
                yield buffers.shift();
            }
            var e_1, _c;
        });
    }
}
function buffer(source, count, skip) {
    if (skip == null) {
        skip = count;
    }
    return new BufferAsyncIterable(source, count, skip);
}
exports.buffer = buffer;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvYnVmZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQWtEO0FBRWxELHlCQUFtQyxTQUFRLDhCQUF5QjtJQUtsRSxZQUNJLE1BQThCLEVBQzlCLEtBQWEsRUFDYixJQUFZO1FBQ1osS0FBSyxFQUFFLENBQUM7UUFDVixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUUzQixJQUFJLE9BQU8sR0FBZ0IsRUFBRSxFQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7O2dCQUN0QyxHQUFHLENBQUMsQ0FBbUIsSUFBQSxLQUFBLHNCQUFBLElBQUksQ0FBQyxPQUFPLENBQUEsSUFBQTtvQkFBeEIsSUFBSSxJQUFJLGtDQUFBLENBQUE7b0JBQ2pCLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3pCLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ25CLENBQUM7b0JBRUQsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQzt3QkFDM0IsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDcEIsQ0FBQztvQkFFRCxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUM1RCxNQUFNLE9BQU8sQ0FBQyxLQUFLLEVBQUcsQ0FBQztvQkFDekIsQ0FBQztvQkFFRCxDQUFDLEVBQUUsQ0FBQztpQkFDTDs7Ozs7Ozs7O1lBRUQsT0FBTyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUMxQixNQUFNLE9BQU8sQ0FBQyxLQUFLLEVBQUcsQ0FBQztZQUN6QixDQUFDOztRQUNILENBQUM7S0FBQTtDQUNGO0FBRUQsZ0JBQ0ksTUFBOEIsRUFDOUIsS0FBYSxFQUNiLElBQWE7SUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUFDLElBQUksR0FBRyxLQUFLLENBQUM7SUFBQyxDQUFDO0lBQ25DLE1BQU0sQ0FBQyxJQUFJLG1CQUFtQixDQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDL0QsQ0FBQztBQU5ELHdCQU1DIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvYnVmZmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcblxuY2xhc3MgQnVmZmVyQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2NvdW50OiBudW1iZXI7XG4gIHByaXZhdGUgX3NraXA6IG51bWJlcjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGNvdW50OiBudW1iZXIsXG4gICAgICBza2lwOiBudW1iZXIpIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gICAgdGhpcy5fc2tpcCA9IHNraXA7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcblxuICAgIGxldCBidWZmZXJzOiBUU291cmNlW11bXSA9IFtdLCAgaSA9IDA7XG4gICAgZm9yIGF3YWl0IChsZXQgaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChpICUgdGhpcy5fc2tpcCA9PT0gMCkge1xuICAgICAgICBidWZmZXJzLnB1c2goW10pO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBidWZmZXIgb2YgYnVmZmVycykge1xuICAgICAgICBidWZmZXIucHVzaChpdGVtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJ1ZmZlcnMubGVuZ3RoID4gMCAmJiBidWZmZXJzWzBdLmxlbmd0aCA9PT0gdGhpcy5fY291bnQpIHtcbiAgICAgICAgeWllbGQgYnVmZmVycy5zaGlmdCgpITtcbiAgICAgIH1cblxuICAgICAgaSsrO1xuICAgIH1cblxuICAgIHdoaWxlIChidWZmZXJzLmxlbmd0aCA+IDApIHtcbiAgICAgIHlpZWxkIGJ1ZmZlcnMuc2hpZnQoKSE7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWZmZXI8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGNvdW50OiBudW1iZXIsXG4gICAgc2tpcD86IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2VbXT4ge1xuICBpZiAoc2tpcCA9PSBudWxsKSB7IHNraXAgPSBjb3VudDsgfVxuICByZXR1cm4gbmV3IEJ1ZmZlckFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBjb3VudCwgc2tpcCk7XG59XG4iXX0=
