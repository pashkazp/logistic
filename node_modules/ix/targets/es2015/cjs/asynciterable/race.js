Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
class RaceAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(left, right) {
        super();
        this._left = left;
        this._right = right;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const leftIt = this._left[Symbol.asyncIterator](), rightIt = this._right[Symbol.asyncIterator]();
            let leftWins = false, rightWins = false;
            const { value, done } = yield tslib_1.__await(Promise.race([
                leftIt.next().then(x => { leftWins = true; return x; }),
                rightIt.next().then(x => { rightWins = true; return x; }),
            ]));
            if (!done) {
                yield value;
            }
            let resultIterator, otherIterator;
            if (leftWins) {
                resultIterator = leftIt;
                otherIterator = rightIt;
            }
            else {
                resultIterator = rightIt;
                otherIterator = leftIt;
            }
            // Cancel/finish other iterator
            if (otherIterator.return) {
                yield tslib_1.__await(otherIterator.return());
            }
            let next;
            while (!(next = yield tslib_1.__await(resultIterator.next())).done) {
                yield next.value;
            }
        });
    }
}
/**
 * Propagates the async sequence that reacts first.
 * @param {AsyncIterable<T>} left First async sequence.
 * @param {AsyncIterable<T>} right Second async sequence.
 * @return {AsyncIterable<T>} An async sequence that surfaces either of the given sequences, whichever reacted first.
 */
function race(left, right) {
    return new RaceAsyncIterable(left, right);
}
exports.race = race;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvcmFjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUFrRDtBQUVsRCx1QkFBaUMsU0FBUSw4QkFBdUI7SUFJOUQsWUFBWSxJQUE0QixFQUFFLEtBQTZCO1FBQ3JFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDbEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDdEIsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFDM0IsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBRSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztZQUNqRyxJQUFJLFFBQVEsR0FBRyxLQUFLLEVBQUUsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN4QyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLHNCQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUM7Z0JBQ3pDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN2RCxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUMxRCxDQUFDLENBQUEsQ0FBQztZQUVILEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztnQkFDVixNQUFNLEtBQUssQ0FBQztZQUNkLENBQUM7WUFFRCxJQUFJLGNBQXNDLEVBQUUsYUFBcUMsQ0FBQztZQUNsRixFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2dCQUNiLGNBQWMsR0FBRyxNQUFNLENBQUM7Z0JBQ3hCLGFBQWEsR0FBRyxPQUFPLENBQUM7WUFDMUIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLGNBQWMsR0FBRyxPQUFPLENBQUM7Z0JBQ3pCLGFBQWEsR0FBRyxNQUFNLENBQUM7WUFDekIsQ0FBQztZQUVELCtCQUErQjtZQUMvQixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztnQkFBQyxzQkFBTSxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUEsQ0FBQztZQUFDLENBQUM7WUFFM0QsSUFBSSxJQUFJLENBQUM7WUFDVCxPQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUcsc0JBQU0sY0FBYyxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDbEQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ25CLENBQUM7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQUVEOzs7OztHQUtHO0FBQ0gsY0FDSSxJQUE0QixFQUM1QixLQUE2QjtJQUMvQixNQUFNLENBQUMsSUFBSSxpQkFBaUIsQ0FBVSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDckQsQ0FBQztBQUpELG9CQUlDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvcmFjZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5cbmNsYXNzIFJhY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9sZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9yaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcblxuICBjb25zdHJ1Y3RvcihsZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5fcmlnaHQgPSByaWdodDtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IGxlZnRJdCA9IHRoaXMuX2xlZnRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCksIHJpZ2h0SXQgPSB0aGlzLl9yaWdodFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICBsZXQgbGVmdFdpbnMgPSBmYWxzZSwgcmlnaHRXaW5zID0gZmFsc2U7XG4gICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgIGxlZnRJdC5uZXh0KCkudGhlbih4ID0+IHsgbGVmdFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgICByaWdodEl0Lm5leHQoKS50aGVuKHggPT4geyByaWdodFdpbnMgPSB0cnVlOyByZXR1cm4geDsgfSksXG4gICAgXSk7XG5cbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIHlpZWxkIHZhbHVlO1xuICAgIH1cblxuICAgIGxldCByZXN1bHRJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPiwgb3RoZXJJdGVyYXRvcjogQXN5bmNJdGVyYXRvcjxUU291cmNlPjtcbiAgICBpZiAobGVmdFdpbnMpIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gbGVmdEl0O1xuICAgICAgb3RoZXJJdGVyYXRvciA9IHJpZ2h0SXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdEl0ZXJhdG9yID0gcmlnaHRJdDtcbiAgICAgIG90aGVySXRlcmF0b3IgPSBsZWZ0SXQ7XG4gICAgfVxuXG4gICAgLy8gQ2FuY2VsL2ZpbmlzaCBvdGhlciBpdGVyYXRvclxuICAgIGlmIChvdGhlckl0ZXJhdG9yLnJldHVybikgeyBhd2FpdCBvdGhlckl0ZXJhdG9yLnJldHVybigpOyB9XG5cbiAgICBsZXQgbmV4dDtcbiAgICB3aGlsZSAoIShuZXh0ID0gYXdhaXQgcmVzdWx0SXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICB5aWVsZCBuZXh0LnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFByb3BhZ2F0ZXMgdGhlIGFzeW5jIHNlcXVlbmNlIHRoYXQgcmVhY3RzIGZpcnN0LlxuICogQHBhcmFtIHtBc3luY0l0ZXJhYmxlPFQ+fSBsZWZ0IEZpcnN0IGFzeW5jIHNlcXVlbmNlLlxuICogQHBhcmFtIHtBc3luY0l0ZXJhYmxlPFQ+fSByaWdodCBTZWNvbmQgYXN5bmMgc2VxdWVuY2UuXG4gKiBAcmV0dXJuIHtBc3luY0l0ZXJhYmxlPFQ+fSBBbiBhc3luYyBzZXF1ZW5jZSB0aGF0IHN1cmZhY2VzIGVpdGhlciBvZiB0aGUgZ2l2ZW4gc2VxdWVuY2VzLCB3aGljaGV2ZXIgcmVhY3RlZCBmaXJzdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhY2U8VFNvdXJjZT4oXG4gICAgbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBSYWNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihsZWZ0LCByaWdodCk7XG59XG4iXX0=
