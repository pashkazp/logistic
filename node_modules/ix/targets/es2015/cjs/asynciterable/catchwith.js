Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
const returniterator_1 = require("../internal/returniterator");
class CatchWithAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, handler) {
        super();
        this._source = source;
        this._handler = handler;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let err, hasError = false, it = this._source[Symbol.asyncIterator]();
            while (1) {
                let c = {};
                try {
                    c = yield tslib_1.__await(it.next());
                    if (c.done) {
                        yield tslib_1.__await(returniterator_1.returnAsyncIterator(it));
                        break;
                    }
                }
                catch (e) {
                    err = yield tslib_1.__await(this._handler(e));
                    hasError = true;
                    yield tslib_1.__await(returniterator_1.returnAsyncIterator(it));
                    break;
                }
                yield c.value;
            }
            if (hasError) {
                try {
                    for (var _a = tslib_1.__asyncValues(err), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                        let item = yield tslib_1.__await(_b.value);
                        yield item;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            var e_1, _c;
        });
    }
}
function catchWith(source, handler) {
    return new CatchWithAsyncIterable(source, handler);
}
exports.catchWith = catchWith;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvY2F0Y2h3aXRoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQWtEO0FBQ2xELCtEQUFpRTtBQUVqRSw0QkFBc0MsU0FBUSw4QkFBdUI7SUFJbkUsWUFDSSxNQUE4QixFQUM5QixPQUFpRjtRQUNuRixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDO0lBQzFCLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBQzNCLElBQUksR0FBdUMsRUFBRSxRQUFRLEdBQUcsS0FBSyxFQUFFLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBQ3pHLE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1QsSUFBSSxDQUFDLEdBQTRCLEVBQUUsQ0FBQztnQkFFcEMsSUFBSSxDQUFDO29CQUNILENBQUMsR0FBRyxzQkFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQztvQkFDcEIsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ1gsc0JBQU0sb0NBQW1CLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQzt3QkFDOUIsS0FBSyxDQUFDO29CQUNSLENBQUM7Z0JBQ0gsQ0FBQztnQkFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNYLEdBQUcsR0FBRyxzQkFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7b0JBQzdCLFFBQVEsR0FBRyxJQUFJLENBQUM7b0JBQ2hCLHNCQUFNLG9DQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUM7b0JBQzlCLEtBQUssQ0FBQztnQkFDUixDQUFDO2dCQUVELE1BQU0sQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNoQixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs7b0JBQ2IsR0FBRyxDQUFDLENBQW1CLElBQUEsS0FBQSxzQkFBQSxHQUFJLENBQUEsSUFBQTt3QkFBaEIsSUFBSSxJQUFJLGtDQUFBLENBQUE7d0JBQ2pCLE1BQU0sSUFBSSxDQUFDO3FCQUNaOzs7Ozs7Ozs7WUFDSCxDQUFDOztRQUNILENBQUM7S0FBQTtDQUNGO0FBRUQsbUJBQ0ksTUFBOEIsRUFDOUIsT0FBaUY7SUFDbkYsTUFBTSxDQUFDLElBQUksc0JBQXNCLENBQVUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQzlELENBQUM7QUFKRCw4QkFJQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2NhdGNod2l0aC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyByZXR1cm5Bc3luY0l0ZXJhdG9yIH0gZnJvbSAnLi4vaW50ZXJuYWwvcmV0dXJuaXRlcmF0b3InO1xuXG5jbGFzcyBDYXRjaFdpdGhBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2hhbmRsZXI6IChlcnJvcjogYW55KSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGhhbmRsZXI6IChlcnJvcjogYW55KSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2hhbmRsZXIgPSBoYW5kbGVyO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IGVycjogQXN5bmNJdGVyYWJsZTxUU291cmNlPiB8IHVuZGVmaW5lZCwgaGFzRXJyb3IgPSBmYWxzZSwgaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGxldCBjID0gPEl0ZXJhdG9yUmVzdWx0PFRTb3VyY2U+Pnt9O1xuXG4gICAgICB0cnkge1xuICAgICAgICBjID0gYXdhaXQgaXQubmV4dCgpO1xuICAgICAgICBpZiAoYy5kb25lKSB7XG4gICAgICAgICAgYXdhaXQgcmV0dXJuQXN5bmNJdGVyYXRvcihpdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXJyID0gYXdhaXQgdGhpcy5faGFuZGxlcihlKTtcbiAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICBhd2FpdCByZXR1cm5Bc3luY0l0ZXJhdG9yKGl0KTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIHlpZWxkIGMudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICBmb3IgYXdhaXQgKGxldCBpdGVtIG9mIGVyciEpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhdGNoV2l0aDxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgaGFuZGxlcjogKGVycm9yOiBhbnkpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENhdGNoV2l0aEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBoYW5kbGVyKTtcbn1cbiJdfQ==
