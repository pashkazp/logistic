Object.defineProperty(exports, "__esModule", { value: true });
const asynciterable_1 = require("../asynciterable");
class ChainAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(result) {
        super();
        this._result = result;
    }
    [Symbol.asyncIterator]() {
        return this._result[Symbol.asyncIterator]();
    }
}
/**
 * Returns an async iterable sequence that is the result of invoking the selector on the source sequence,
 * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use
 * the same sequence multiple times.
 * @param {AsyncIterable<TSource>} source Source sequence that will be shared in the selector function.
 * @param {function(source: AsyncIterable<TSource>): AsyncIterable<TResult>} selector Selector function which can use
 * the source sequence as many times as needed, without sharing subscriptions to the source sequence.
 * @returns An async iterable sequence that contains the elements of a sequence produced by multicasting the source
 * sequence within a selector function.
 */
function chain(source, selector) {
    return new ChainAsyncIterable(selector(source));
}
exports.chain = chain;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvY2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9EQUFrRDtBQUVsRCx3QkFBa0MsU0FBUSw4QkFBdUI7SUFHL0QsWUFBWSxNQUE4QjtRQUN4QyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDcEIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7SUFDOUMsQ0FBQztDQUNGO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsZUFDSSxNQUE4QixFQUM5QixRQUFvRTtJQUN0RSxNQUFNLENBQUMsSUFBSSxrQkFBa0IsQ0FBVSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUMzRCxDQUFDO0FBSkQsc0JBSUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9jaGFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5cbmNsYXNzIENoYWluQXN5bmNJdGVyYWJsZTxUUmVzdWx0PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcHJpdmF0ZSBfcmVzdWx0OiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+O1xuXG4gIGNvbnN0cnVjdG9yKHJlc3VsdDogQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fcmVzdWx0ID0gcmVzdWx0O1xuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzdWx0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBhc3luYyBpdGVyYWJsZSBzZXF1ZW5jZSB0aGF0IGlzIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIHNlbGVjdG9yIG9uIHRoZSBzb3VyY2Ugc2VxdWVuY2UsXG4gKiB3aXRob3V0IHNoYXJpbmcgc3Vic2NyaXB0aW9ucy4gIFRoaXMgb3BlcmF0b3IgYWxsb3dzIGZvciBhIGZsdWVudCBzdHlsZSBvZiB3cml0aW5nIHF1ZXJpZXMgdGhhdCB1c2VcbiAqIHRoZSBzYW1lIHNlcXVlbmNlIG11bHRpcGxlIHRpbWVzLlxuICogQHBhcmFtIHtBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2UgU291cmNlIHNlcXVlbmNlIHRoYXQgd2lsbCBiZSBzaGFyZWQgaW4gdGhlIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICogQHBhcmFtIHtmdW5jdGlvbihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pOiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+fSBzZWxlY3RvciBTZWxlY3RvciBmdW5jdGlvbiB3aGljaCBjYW4gdXNlXG4gKiB0aGUgc291cmNlIHNlcXVlbmNlIGFzIG1hbnkgdGltZXMgYXMgbmVlZGVkLCB3aXRob3V0IHNoYXJpbmcgc3Vic2NyaXB0aW9ucyB0byB0aGUgc291cmNlIHNlcXVlbmNlLlxuICogQHJldHVybnMgQW4gYXN5bmMgaXRlcmFibGUgc2VxdWVuY2UgdGhhdCBjb250YWlucyB0aGUgZWxlbWVudHMgb2YgYSBzZXF1ZW5jZSBwcm9kdWNlZCBieSBtdWx0aWNhc3RpbmcgdGhlIHNvdXJjZVxuICogc2VxdWVuY2Ugd2l0aGluIGEgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbjxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I6IChzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pID0+IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgQ2hhaW5Bc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KHNlbGVjdG9yKHNvdXJjZSkpO1xufVxuIl19
