Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
class TakeUntilAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, other) {
        super();
        this._source = source;
        this._other = other;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let otherDone = false;
            this._other.then(() => otherDone = true);
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    if (otherDone) {
                        break;
                    }
                    yield item;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function takeUntil(source, other) {
    return new TakeUntilAsyncIterable(source, other);
}
exports.takeUntil = takeUntil;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvdGFrZXVudGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQWtEO0FBRWxELDRCQUFzQyxTQUFRLDhCQUF1QjtJQUluRSxZQUFZLE1BQThCLEVBQUUsS0FBbUI7UUFDN0QsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUMzQixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUM7O2dCQUN6QyxHQUFHLENBQUMsQ0FBbUIsSUFBQSxLQUFBLHNCQUFBLElBQUksQ0FBQyxPQUFPLENBQUEsSUFBQTtvQkFBeEIsSUFBSSxJQUFJLGtDQUFBLENBQUE7b0JBQ2pCLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7d0JBQUMsS0FBSyxDQUFDO29CQUFDLENBQUM7b0JBQ3pCLE1BQU0sSUFBSSxDQUFDO2lCQUNaOzs7Ozs7Ozs7O1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxtQkFDSSxNQUE4QixFQUM5QixLQUFtQjtJQUNyQixNQUFNLENBQUMsSUFBSSxzQkFBc0IsQ0FBVSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDNUQsQ0FBQztBQUpELDhCQUlDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvdGFrZXVudGlsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcblxuY2xhc3MgVGFrZVVudGlsQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9vdGhlcjogUHJvbWlzZTxhbnk+O1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgb3RoZXI6IFByb21pc2U8YW55Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX290aGVyID0gb3RoZXI7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgb3RoZXJEb25lID0gZmFsc2U7XG4gICAgdGhpcy5fb3RoZXIudGhlbigoKSA9PiBvdGhlckRvbmUgPSB0cnVlKTtcbiAgICBmb3IgYXdhaXQgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKG90aGVyRG9uZSkgeyBicmVhazsgfVxuICAgICAgeWllbGQgaXRlbTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRha2VVbnRpbDxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgb3RoZXI6IFByb21pc2U8YW55Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYWtlVW50aWxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgb3RoZXIpO1xufVxuIl19
