Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
const foreach_1 = require("./foreach");
class DebounceAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let noValue;
            let lastItem;
            let deferred;
            let resolver;
            let done = false;
            let hasError = false;
            let error;
            const reset = (hasNoValue) => {
                noValue = hasNoValue;
                lastItem = undefined;
                deferred = new Promise(r => resolver = r);
            };
            const run = () => {
                if (lastItem === undefined) {
                    noValue = true;
                    return;
                }
                const item = lastItem;
                const res = resolver;
                reset(false);
                setTimeout(run, this._time);
                res(item);
            };
            reset(true);
            foreach_1.forEach(this._source, item => {
                lastItem = item;
                if (noValue) {
                    run();
                }
            })
                .then(() => done = true)
                .catch(err => { hasError = true; error = err; });
            while (1) {
                if (done) {
                    break;
                }
                if (hasError) {
                    throw error;
                }
                yield yield tslib_1.__await(deferred);
            }
        });
    }
}
function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}
exports.debounce = debounce;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGVib3VuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxvREFBa0Q7QUFDbEQsdUNBQW9DO0FBRXBDLDJCQUFxQyxTQUFRLDhCQUF1QjtJQUlsRSxZQUFZLE1BQThCLEVBQUUsSUFBWTtRQUN0RCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBQzNCLElBQUksT0FBZ0IsQ0FBQztZQUNyQixJQUFJLFFBQTZCLENBQUM7WUFDbEMsSUFBSSxRQUEwQixDQUFDO1lBQy9CLElBQUksUUFBc0UsQ0FBQztZQUMzRSxJQUFJLElBQUksR0FBWSxLQUFLLENBQUM7WUFDMUIsSUFBSSxRQUFRLEdBQVksS0FBSyxDQUFDO1lBQzlCLElBQUksS0FBVSxDQUFDO1lBRWYsTUFBTSxLQUFLLEdBQUcsQ0FBQyxVQUFtQjtnQkFDaEMsT0FBTyxHQUFHLFVBQVUsQ0FBQztnQkFDckIsUUFBUSxHQUFHLFNBQVMsQ0FBQztnQkFDckIsUUFBUSxHQUFHLElBQUksT0FBTyxDQUFVLENBQUMsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQyxDQUFDO1lBRUYsTUFBTSxHQUFHLEdBQUc7Z0JBQ1YsRUFBRSxDQUFDLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUM7b0JBQzNCLE9BQU8sR0FBRyxJQUFJLENBQUM7b0JBQ2YsTUFBTSxDQUFDO2dCQUNULENBQUM7Z0JBRUQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDO2dCQUN0QixNQUFNLEdBQUcsR0FBRyxRQUFRLENBQUM7Z0JBQ3JCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDYixVQUFVLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDNUIsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ1osQ0FBQyxDQUFDO1lBRUYsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ1osaUJBQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUk7Z0JBQ3hCLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ2hCLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7b0JBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQUMsQ0FBQztZQUN6QixDQUFDLENBQUM7aUJBQ0QsSUFBSSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztpQkFDdkIsS0FBSyxDQUFDLEdBQUcsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRWpELE9BQU8sQ0FBQyxFQUFFLENBQUM7Z0JBQ1QsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFBQyxLQUFLLENBQUM7Z0JBQUMsQ0FBQztnQkFDcEIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFBQyxNQUFNLEtBQUssQ0FBQztnQkFBQyxDQUFDO2dCQUM5QixNQUFNLHNCQUFNLFFBQVMsQ0FBQSxDQUFDO1lBQ3hCLENBQUM7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQUVELGtCQUFrQyxNQUE4QixFQUFFLElBQVk7SUFDNUUsTUFBTSxDQUFDLElBQUkscUJBQXFCLENBQVUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFGRCw0QkFFQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2RlYm91bmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IGZvckVhY2ggfSBmcm9tICcuL2ZvcmVhY2gnO1xuXG5jbGFzcyBEZWJvdW5jZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfdGltZTogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgdGltZTogbnVtYmVyKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fdGltZSA9IHRpbWU7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgbm9WYWx1ZTogYm9vbGVhbjtcbiAgICBsZXQgbGFzdEl0ZW06IFRTb3VyY2UgfCB1bmRlZmluZWQ7XG4gICAgbGV0IGRlZmVycmVkOiBQcm9taXNlPFRTb3VyY2U+O1xuICAgIGxldCByZXNvbHZlcjogKHZhbHVlPzogVFNvdXJjZSB8IFByb21pc2VMaWtlPFRTb3VyY2U+IHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xuICAgIGxldCBkb25lOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IGhhc0Vycm9yOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IGVycm9yOiBhbnk7XG5cbiAgICBjb25zdCByZXNldCA9IChoYXNOb1ZhbHVlOiBib29sZWFuKSA9PiB7XG4gICAgICBub1ZhbHVlID0gaGFzTm9WYWx1ZTtcbiAgICAgIGxhc3RJdGVtID0gdW5kZWZpbmVkO1xuICAgICAgZGVmZXJyZWQgPSBuZXcgUHJvbWlzZTxUU291cmNlPihyID0+IHJlc29sdmVyID0gcik7XG4gICAgfTtcblxuICAgIGNvbnN0IHJ1biA9ICgpID0+IHtcbiAgICAgIGlmIChsYXN0SXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vVmFsdWUgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGl0ZW0gPSBsYXN0SXRlbTtcbiAgICAgIGNvbnN0IHJlcyA9IHJlc29sdmVyO1xuICAgICAgcmVzZXQoZmFsc2UpO1xuICAgICAgc2V0VGltZW91dChydW4sIHRoaXMuX3RpbWUpO1xuICAgICAgcmVzKGl0ZW0pO1xuICAgIH07XG5cbiAgICByZXNldCh0cnVlKTtcbiAgICBmb3JFYWNoKHRoaXMuX3NvdXJjZSwgaXRlbSA9PiB7XG4gICAgICBsYXN0SXRlbSA9IGl0ZW07XG4gICAgICBpZiAobm9WYWx1ZSkgeyBydW4oKTsgfVxuICAgIH0pXG4gICAgLnRoZW4oKCkgPT4gZG9uZSA9IHRydWUpXG4gICAgLmNhdGNoKGVyciA9PiB7IGhhc0Vycm9yID0gdHJ1ZTsgZXJyb3IgPSBlcnI7IH0pO1xuXG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGlmIChkb25lKSB7IGJyZWFrOyB9XG4gICAgICBpZiAoaGFzRXJyb3IpIHsgdGhyb3cgZXJyb3I7IH1cbiAgICAgIHlpZWxkIGF3YWl0IGRlZmVycmVkITtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYm91bmNlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgdGltZTogbnVtYmVyKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IERlYm91bmNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIHRpbWUpO1xufVxuIl19
