Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
const bindcallback_1 = require("../internal/bindcallback");
class FlatMapAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let outer = yield tslib_1.__await(_b.value);
                    const inners = yield tslib_1.__await(this._selector(outer));
                    try {
                        for (var inners_1 = tslib_1.__asyncValues(inners), inners_1_1; inners_1_1 = yield tslib_1.__await(inners_1.next()), !inners_1_1.done;) {
                            let inner = yield tslib_1.__await(inners_1_1.value);
                            yield inner;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (inners_1_1 && !inners_1_1.done && (_c = inners_1.return)) yield tslib_1.__await(_c.call(inners_1));
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) yield tslib_1.__await(_d.call(_a));
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d, e_1, _c;
        });
    }
}
function flatMap(source, selector, thisArg) {
    return new FlatMapAsyncIterable(source, bindcallback_1.bindCallback(selector, thisArg, 1));
}
exports.flatMap = flatMap;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZmxhdG1hcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLG9EQUFrRDtBQUNsRCwyREFBd0Q7QUFFeEQsMEJBQTZDLFNBQVEsOEJBQXVCO0lBSTFFLFlBQ0UsTUFBOEIsRUFDOUIsUUFBc0Y7UUFDdEYsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOzs7Z0JBQzNCLEdBQUcsQ0FBQyxDQUFvQixJQUFBLEtBQUEsc0JBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUF6QixJQUFJLEtBQUssa0NBQUEsQ0FBQTtvQkFDbEIsTUFBTSxNQUFNLEdBQUcsc0JBQU0sSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDOzt3QkFDM0MsR0FBRyxDQUFDLENBQW9CLElBQUEsV0FBQSxzQkFBQSxNQUFNLENBQUEsWUFBQTs0QkFBbkIsSUFBSSxLQUFLLDBDQUFBLENBQUE7NEJBQ2xCLE1BQU0sS0FBSyxDQUFDO3lCQUNiOzs7Ozs7Ozs7aUJBQ0Y7Ozs7Ozs7Ozs7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQUVELGlCQUNJLE1BQThCLEVBQzlCLFFBQXNGLEVBQ3RGLE9BQWE7SUFDZixNQUFNLENBQUMsSUFBSSxvQkFBb0IsQ0FBbUIsTUFBTSxFQUFFLDJCQUFZLENBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hHLENBQUM7QUFMRCwwQkFLQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2ZsYXRtYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcblxuY2xhc3MgRmxhdE1hcEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0PiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUUmVzdWx0Pj47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFJlc3VsdD4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGZvciBhd2FpdCAobGV0IG91dGVyIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgY29uc3QgaW5uZXJzID0gYXdhaXQgdGhpcy5fc2VsZWN0b3Iob3V0ZXIpO1xuICAgICAgZm9yIGF3YWl0IChsZXQgaW5uZXIgb2YgaW5uZXJzKSB7XG4gICAgICAgIHlpZWxkIGlubmVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdE1hcDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0PiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUUmVzdWx0Pj4sXG4gICAgdGhpc0FyZz86IGFueSk6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBGbGF0TWFwQXN5bmNJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0Pihzb3VyY2UsIGJpbmRDYWxsYmFjayhzZWxlY3RvciwgdGhpc0FyZywgMSkpO1xufVxuIl19
