Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const asynciterable_1 = require("../asynciterable");
const _grouping_1 = require("./_grouping");
const empty_1 = require("./empty");
const from_1 = require("./from");
const identity_1 = require("../internal/identity");
class GroupJoinAsyncIterable extends asynciterable_1.AsyncIterableX {
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const map = yield tslib_1.__await(_grouping_1.createGrouping(this._inner, this._innerSelector, identity_1.identity));
            try {
                for (var _a = tslib_1.__asyncValues(this._outer), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let outerElement = yield tslib_1.__await(_b.value);
                    const outerKey = yield tslib_1.__await(this._outerSelector(outerElement));
                    const innerElements = map.has(outerKey) ? map.get(outerKey) : empty_1.empty();
                    yield yield tslib_1.__await(this._resultSelector(outerElement, from_1.from(innerElements)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}
exports.groupJoin = groupJoin;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZ3JvdXBqb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsb0RBQWtEO0FBQ2xELDJDQUE2QztBQUM3QyxtQ0FBZ0M7QUFDaEMsaUNBQThCO0FBQzlCLG1EQUFnRDtBQUVoRCw0QkFBNEQsU0FBUSw4QkFBdUI7SUFPekYsWUFDSSxLQUE0QixFQUM1QixLQUE0QixFQUM1QixhQUFzRCxFQUN0RCxhQUFzRCxFQUN0RCxjQUEyRjtRQUM3RixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBQzNCLE1BQU0sR0FBRyxHQUFHLHNCQUFNLDBCQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLG1CQUFRLENBQUMsQ0FBQSxDQUFDOztnQkFDN0UsR0FBRyxDQUFDLENBQTJCLElBQUEsS0FBQSxzQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFBLElBQUE7b0JBQS9CLElBQUksWUFBWSxrQ0FBQSxDQUFBO29CQUN6QixNQUFNLFFBQVEsR0FBRyxzQkFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxDQUFBLENBQUM7b0JBQ3pELE1BQU0sYUFBYSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQXFCLEdBQUcsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLEdBQUcsYUFBSyxFQUFVLENBQUM7b0JBQ2hHLE1BQU0sc0JBQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsV0FBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUEsQ0FBQztpQkFDckU7Ozs7Ozs7Ozs7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQUVELG1CQUNJLEtBQTRCLEVBQzVCLEtBQTRCLEVBQzVCLGFBQXNELEVBQ3RELGFBQXNELEVBQ3RELGNBQTJGO0lBQzdGLE1BQU0sQ0FBQyxJQUFJLHNCQUFzQixDQUMvQixLQUFLLEVBQ0wsS0FBSyxFQUNMLGFBQWEsRUFDYixhQUFhLEVBQ2IsY0FBYyxDQUFDLENBQUM7QUFDcEIsQ0FBQztBQVpELDhCQVlDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvZ3JvdXBqb2luLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUdyb3VwaW5nIH0gZnJvbSAnLi9fZ3JvdXBpbmcnO1xuaW1wb3J0IHsgZW1wdHkgfSBmcm9tICcuL2VtcHR5JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5cbmNsYXNzIEdyb3VwSm9pbkFzeW5jSXRlcmFibGU8VE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICBwcml2YXRlIF9vdXRlcjogQXN5bmNJdGVyYWJsZTxUT3V0ZXI+O1xuICBwcml2YXRlIF9pbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+O1xuICBwcml2YXRlIF9vdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSB8IFByb21pc2U8VEtleT47XG4gIHByaXZhdGUgX2lubmVyU2VsZWN0b3I6ICh2YWx1ZTogVElubmVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+KSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIG91dGVyOiBBc3luY0l0ZXJhYmxlPFRPdXRlcj4sXG4gICAgICBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+LFxuICAgICAgb3V0ZXJTZWxlY3RvcjogKHZhbHVlOiBUT3V0ZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgICAgaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+KSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fb3V0ZXIgPSBvdXRlcjtcbiAgICB0aGlzLl9pbm5lciA9IGlubmVyO1xuICAgIHRoaXMuX291dGVyU2VsZWN0b3IgPSBvdXRlclNlbGVjdG9yO1xuICAgIHRoaXMuX2lubmVyU2VsZWN0b3IgPSBpbm5lclNlbGVjdG9yO1xuICAgIHRoaXMuX3Jlc3VsdFNlbGVjdG9yID0gcmVzdWx0U2VsZWN0b3I7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCBtYXAgPSBhd2FpdCBjcmVhdGVHcm91cGluZyh0aGlzLl9pbm5lciwgdGhpcy5faW5uZXJTZWxlY3RvciwgaWRlbnRpdHkpO1xuICAgIGZvciBhd2FpdCAobGV0IG91dGVyRWxlbWVudCBvZiB0aGlzLl9vdXRlcikge1xuICAgICAgY29uc3Qgb3V0ZXJLZXkgPSBhd2FpdCB0aGlzLl9vdXRlclNlbGVjdG9yKG91dGVyRWxlbWVudCk7XG4gICAgICBjb25zdCBpbm5lckVsZW1lbnRzID0gbWFwLmhhcyhvdXRlcktleSkgPyA8SXRlcmFibGU8VElubmVyPj5tYXAuZ2V0KG91dGVyS2V5KSA6IGVtcHR5PFRJbm5lcj4oKTtcbiAgICAgIHlpZWxkIGF3YWl0IHRoaXMuX3Jlc3VsdFNlbGVjdG9yKG91dGVyRWxlbWVudCwgZnJvbShpbm5lckVsZW1lbnRzKSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBncm91cEpvaW48VE91dGVyLCBUSW5uZXIsIFRLZXksIFRSZXN1bHQ+KFxuICAgIG91dGVyOiBBc3luY0l0ZXJhYmxlPFRPdXRlcj4sXG4gICAgaW5uZXI6IEFzeW5jSXRlcmFibGU8VElubmVyPixcbiAgICBvdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIHJlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IEFzeW5jSXRlcmFibGU8VElubmVyPikgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgR3JvdXBKb2luQXN5bmNJdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXIsXG4gICAgaW5uZXIsXG4gICAgb3V0ZXJTZWxlY3RvcixcbiAgICBpbm5lclNlbGVjdG9yLFxuICAgIHJlc3VsdFNlbGVjdG9yKTtcbn1cbiJdfQ==
