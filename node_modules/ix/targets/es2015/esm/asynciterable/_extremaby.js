import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
/**
 * @ignore
 */
export function defaultCompareAsync(key, minValue) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        return key > minValue ? 1 : key < minValue ? -1 : 0;
    });
}
/**
 * @ignore
 */
class ExtremaByAsyncIterator extends AsyncIterableX {
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let result = [], done, next;
            const it = this._source[Symbol.asyncIterator]();
            done = (next = yield tslib_1.__await(it.next())).done;
            if (done) {
                throw new Error('Sequence contains no elements');
            }
            let current = next.value;
            let resKey = yield tslib_1.__await(this._keyFn(current));
            done = (next = yield tslib_1.__await(it.next())).done;
            while (!done) {
                let curr = next.value;
                let key = yield tslib_1.__await(this._keyFn(curr));
                const c = yield tslib_1.__await(this._cmp(key, resKey));
                if (c === 0) {
                    result.push(curr);
                }
                else if (c > 0) {
                    result = [curr];
                    resKey = key;
                }
                done = (next = yield tslib_1.__await(it.next())).done;
            }
            yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(result)));
        });
    }
}
/**
 * @ignore
 */
export function extremaBy(source, keyFn, cmp) {
    return new ExtremaByAsyncIterator(source, keyFn, cmp);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvX2V4dHJlbWFieS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxEOztHQUVHO0FBQ0gsTUFBTSw4QkFBdUMsR0FBTSxFQUFFLFFBQVc7O1FBQzlELE1BQU0sQ0FBQyxHQUFHLEdBQUcsUUFBUSxHQUFHLENBQUMsR0FBRyxHQUFHLEdBQUcsUUFBUSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN0RCxDQUFDO0NBQUE7QUFFRDs7R0FFRztBQUNILDRCQUE0QyxTQUFRLGNBQXVCO0lBS3pFLFlBQ0ksTUFBOEIsRUFDOUIsS0FBMkMsRUFDM0MsR0FBbUQ7UUFDckQsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQztJQUNsQixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUMzQixJQUFJLE1BQU0sR0FBYyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztZQUN2QyxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBQ2hELElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxzQkFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUNyQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNULE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztZQUNuRCxDQUFDO1lBRUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUN6QixJQUFJLE1BQU0sR0FBRyxzQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUM7WUFDeEMsSUFBSSxHQUFHLENBQUMsSUFBSSxHQUFHLHNCQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBQ3JDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsQ0FBQztnQkFDYixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUN0QixJQUFJLEdBQUcsR0FBRyxzQkFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUM7Z0JBQ2xDLE1BQU0sQ0FBQyxHQUFHLHNCQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLE1BQU0sQ0FBQyxDQUFBLENBQUM7Z0JBQ3ZDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNaLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BCLENBQUM7Z0JBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqQixNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztvQkFDaEIsTUFBTSxHQUFHLEdBQUcsQ0FBQztnQkFDZixDQUFDO2dCQUNELElBQUksR0FBRyxDQUFDLElBQUksR0FBRyxzQkFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUN2QyxDQUFDO1lBRUQsc0JBQUEsT0FBTyx5QkFBQSxzQkFBQSxNQUFNLENBQUEsQ0FBQSxDQUFBLENBQUM7UUFDaEIsQ0FBQztLQUFBO0NBQ0Y7QUFFRDs7R0FFRztBQUNILE1BQU0sb0JBQ0YsTUFBOEIsRUFDOUIsS0FBMkMsRUFDM0MsR0FBbUQ7SUFDckQsTUFBTSxDQUFDLElBQUksc0JBQXNCLENBQWdCLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdkUsQ0FBQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL19leHRyZW1hYnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlQXN5bmM8VD4oa2V5OiBULCBtaW5WYWx1ZTogVCk6IFByb21pc2U8bnVtYmVyPiB7XG4gIHJldHVybiBrZXkgPiBtaW5WYWx1ZSA/IDEgOiBrZXkgPCBtaW5WYWx1ZSA/IC0xIDogMDtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmNsYXNzIEV4dHJlbWFCeUFzeW5jSXRlcmF0b3I8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfa2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfY21wOiAoeDogVEtleSwgeTogVEtleSkgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleUZuID0ga2V5Rm47XG4gICAgdGhpcy5fY21wID0gY21wO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IHJlc3VsdDogVFNvdXJjZVtdID0gW10sIGRvbmUsIG5leHQ7XG4gICAgY29uc3QgaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgZG9uZSA9IChuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lO1xuICAgIGlmIChkb25lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gICAgfVxuXG4gICAgbGV0IGN1cnJlbnQgPSBuZXh0LnZhbHVlO1xuICAgIGxldCByZXNLZXkgPSBhd2FpdCB0aGlzLl9rZXlGbihjdXJyZW50KTtcbiAgICBkb25lID0gKG5leHQgPSBhd2FpdCBpdC5uZXh0KCkpLmRvbmU7XG4gICAgd2hpbGUgKCFkb25lKSB7XG4gICAgICBsZXQgY3VyciA9IG5leHQudmFsdWU7XG4gICAgICBsZXQga2V5ID0gYXdhaXQgdGhpcy5fa2V5Rm4oY3Vycik7XG4gICAgICBjb25zdCBjID0gYXdhaXQgdGhpcy5fY21wKGtleSwgcmVzS2V5KTtcbiAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGN1cnIpO1xuICAgICAgfSBlbHNlIGlmIChjID4gMCkge1xuICAgICAgICByZXN1bHQgPSBbY3Vycl07XG4gICAgICAgIHJlc0tleSA9IGtleTtcbiAgICAgIH1cbiAgICAgIGRvbmUgPSAobmV4dCA9IGF3YWl0IGl0Lm5leHQoKSkuZG9uZTtcbiAgICB9XG5cbiAgICB5aWVsZCogcmVzdWx0O1xuICB9XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmVtYUJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeHRyZW1hQnlBc3luY0l0ZXJhdG9yPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5Rm4sIGNtcCk7XG59XG4iXX0=
