import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { createGrouping } from './_grouping';
import { empty } from './empty';
import { from } from './from';
import { identity } from '../internal/identity';
class GroupJoinAsyncIterable extends AsyncIterableX {
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const map = yield tslib_1.__await(createGrouping(this._inner, this._innerSelector, identity));
            try {
                for (var _a = tslib_1.__asyncValues(this._outer), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let outerElement = yield tslib_1.__await(_b.value);
                    const outerKey = yield tslib_1.__await(this._outerSelector(outerElement));
                    const innerElements = map.has(outerKey) ? map.get(outerKey) : empty();
                    yield yield tslib_1.__await(this._resultSelector(outerElement, from(innerElements)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
export function groupJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new GroupJoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZ3JvdXBqb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDOUIsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWhELDRCQUE0RCxTQUFRLGNBQXVCO0lBT3pGLFlBQ0ksS0FBNEIsRUFDNUIsS0FBNEIsRUFDNUIsYUFBc0QsRUFDdEQsYUFBc0QsRUFDdEQsY0FBMkY7UUFDN0YsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUNwQixJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsQ0FBQztRQUNwQyxJQUFJLENBQUMsZUFBZSxHQUFHLGNBQWMsQ0FBQztJQUN4QyxDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUMzQixNQUFNLEdBQUcsR0FBRyxzQkFBTSxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFBLENBQUM7O2dCQUM3RSxHQUFHLENBQUMsQ0FBMkIsSUFBQSxLQUFBLHNCQUFBLElBQUksQ0FBQyxNQUFNLENBQUEsSUFBQTtvQkFBL0IsSUFBSSxZQUFZLGtDQUFBLENBQUE7b0JBQ3pCLE1BQU0sUUFBUSxHQUFHLHNCQUFNLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUEsQ0FBQztvQkFDekQsTUFBTSxhQUFhLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBcUIsR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsR0FBRyxLQUFLLEVBQVUsQ0FBQztvQkFDaEcsTUFBTSxzQkFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQSxDQUFDO2lCQUNyRTs7Ozs7Ozs7OztRQUNILENBQUM7S0FBQTtDQUNGO0FBRUQsTUFBTSxvQkFDRixLQUE0QixFQUM1QixLQUE0QixFQUM1QixhQUFzRCxFQUN0RCxhQUFzRCxFQUN0RCxjQUEyRjtJQUM3RixNQUFNLENBQUMsSUFBSSxzQkFBc0IsQ0FDL0IsS0FBSyxFQUNMLEtBQUssRUFDTCxhQUFhLEVBQ2IsYUFBYSxFQUNiLGNBQWMsQ0FBQyxDQUFDO0FBQ3BCLENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9ncm91cGpvaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlR3JvdXBpbmcgfSBmcm9tICcuL19ncm91cGluZyc7XG5pbXBvcnQgeyBlbXB0eSB9IGZyb20gJy4vZW1wdHknO1xuaW1wb3J0IHsgZnJvbSB9IGZyb20gJy4vZnJvbSc7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcblxuY2xhc3MgR3JvdXBKb2luQXN5bmNJdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX291dGVyOiBBc3luY0l0ZXJhYmxlPFRPdXRlcj47XG4gIHByaXZhdGUgX2lubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj47XG4gIHByaXZhdGUgX291dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+O1xuICBwcml2YXRlIF9yZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4pID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPixcbiAgICAgIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4sXG4gICAgICBvdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgICByZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj4pID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9vdXRlciA9IG91dGVyO1xuICAgIHRoaXMuX2lubmVyID0gaW5uZXI7XG4gICAgdGhpcy5fb3V0ZXJTZWxlY3RvciA9IG91dGVyU2VsZWN0b3I7XG4gICAgdGhpcy5faW5uZXJTZWxlY3RvciA9IGlubmVyU2VsZWN0b3I7XG4gICAgdGhpcy5fcmVzdWx0U2VsZWN0b3IgPSByZXN1bHRTZWxlY3RvcjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IG1hcCA9IGF3YWl0IGNyZWF0ZUdyb3VwaW5nKHRoaXMuX2lubmVyLCB0aGlzLl9pbm5lclNlbGVjdG9yLCBpZGVudGl0eSk7XG4gICAgZm9yIGF3YWl0IChsZXQgb3V0ZXJFbGVtZW50IG9mIHRoaXMuX291dGVyKSB7XG4gICAgICBjb25zdCBvdXRlcktleSA9IGF3YWl0IHRoaXMuX291dGVyU2VsZWN0b3Iob3V0ZXJFbGVtZW50KTtcbiAgICAgIGNvbnN0IGlubmVyRWxlbWVudHMgPSBtYXAuaGFzKG91dGVyS2V5KSA/IDxJdGVyYWJsZTxUSW5uZXI+Pm1hcC5nZXQob3V0ZXJLZXkpIDogZW1wdHk8VElubmVyPigpO1xuICAgICAgeWllbGQgYXdhaXQgdGhpcy5fcmVzdWx0U2VsZWN0b3Iob3V0ZXJFbGVtZW50LCBmcm9tKGlubmVyRWxlbWVudHMpKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwSm9pbjxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPixcbiAgICBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+LFxuICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+KSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBHcm91cEpvaW5Bc3luY0l0ZXJhYmxlPFRPdXRlciwgVElubmVyLCBUS2V5LCBUUmVzdWx0PihcbiAgICBvdXRlcixcbiAgICBpbm5lcixcbiAgICBvdXRlclNlbGVjdG9yLFxuICAgIGlubmVyU2VsZWN0b3IsXG4gICAgcmVzdWx0U2VsZWN0b3IpO1xufVxuIl19
