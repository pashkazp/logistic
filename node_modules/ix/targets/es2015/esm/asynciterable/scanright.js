import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { toArray } from './toarray';
class ScanRightAsyncIterable extends AsyncIterableX {
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let hasValue = false;
            const source = yield tslib_1.__await(toArray(this._source));
            for (let offset = source.length - 1; offset >= 0; offset--) {
                const item = source[offset];
                if (hasValue || (hasValue = this._hasSeed)) {
                    this._seed = yield tslib_1.__await(this._fn(this._seed, item, offset));
                    yield this._seed;
                }
                else {
                    this._seed = item;
                    hasValue = true;
                }
            }
        });
    }
}
export function scanRight(source, accumulator, ...args) {
    return new ScanRightAsyncIterable(source, accumulator, ...args);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvc2NhbnJpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUVwQyw0QkFBbUMsU0FBUSxjQUFpQjtJQU0xRCxZQUNJLE1BQXdCLEVBQ3hCLEVBQXVELEVBQ3ZELEdBQUcsSUFBZTtRQUNwQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUMzQixJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFDckIsTUFBTSxNQUFNLEdBQUcsc0JBQU0sT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO1lBQzNDLEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLE1BQU0sSUFBSSxDQUFDLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQztnQkFDM0QsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUM1QixFQUFFLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBTSxJQUFJLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFBLENBQUM7b0JBQ3pELE1BQU0sSUFBSSxDQUFDLEtBQUssQ0FBQztnQkFDbkIsQ0FBQztnQkFBQyxJQUFJLENBQUMsQ0FBQztvQkFDTixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztvQkFDbEIsUUFBUSxHQUFHLElBQUksQ0FBQztnQkFDbEIsQ0FBQztZQUNILENBQUM7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQVNELE1BQU0sb0JBQ0YsTUFBd0IsRUFDeEIsV0FBb0UsRUFDcEUsR0FBRyxJQUFlO0lBQ3BCLE1BQU0sQ0FBQyxJQUFJLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUNsRSxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvc2NhbnJpZ2h0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IHRvQXJyYXkgfSBmcm9tICcuL3RvYXJyYXknO1xuXG5jbGFzcyBTY2FuUmlnaHRBc3luY0l0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8Uj4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD47XG4gIHByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj47XG4gIHByaXZhdGUgX3NlZWQ/OiBUIHwgUjtcbiAgcHJpdmF0ZSBfaGFzU2VlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICAgIGZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgICAuLi5hcmdzOiAoVCB8IFIpW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICAgIHRoaXMuX2hhc1NlZWQgPSBhcmdzLmxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLl9zZWVkID0gYXJnc1swXTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGNvbnN0IHNvdXJjZSA9IGF3YWl0IHRvQXJyYXkodGhpcy5fc291cmNlKTtcbiAgICBmb3IgKGxldCBvZmZzZXQgPSBzb3VyY2UubGVuZ3RoIC0gMTsgb2Zmc2V0ID49IDA7IG9mZnNldC0tKSB7XG4gICAgICBjb25zdCBpdGVtID0gc291cmNlW29mZnNldF07XG4gICAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gdGhpcy5faGFzU2VlZCkpIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGF3YWl0IHRoaXMuX2ZuKDxSPnRoaXMuX3NlZWQsIGl0ZW0sIG9mZnNldCk7XG4gICAgICAgIHlpZWxkIHRoaXMuX3NlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWVkID0gaXRlbTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCB8IFByb21pc2U8VD4pOiBBc3luY0l0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gIHNlZWQ6IFIpOiBBc3luY0l0ZXJhYmxlWDxSPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBBc3luY0l0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5SaWdodEFzeW5jSXRlcmFibGUoc291cmNlLCBhY2N1bXVsYXRvciwgLi4uYXJncyk7XG59XG4iXX0=
