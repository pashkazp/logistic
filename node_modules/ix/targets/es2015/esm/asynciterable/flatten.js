import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { isAsyncIterable } from '../internal/isiterable';
class FlattenAsyncIterable extends AsyncIterableX {
    constructor(source, depth) {
        super();
        this._source = source;
        this._depth = depth;
    }
    _flatten(source, depth) {
        return tslib_1.__asyncGenerator(this, arguments, function* _flatten_1() {
            if (depth === 0) {
                try {
                    for (var source_1 = tslib_1.__asyncValues(source), source_1_1; source_1_1 = yield tslib_1.__await(source_1.next()), !source_1_1.done;) {
                        let item = yield tslib_1.__await(source_1_1.value);
                        yield item;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield tslib_1.__await(_a.call(source_1));
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                return;
            }
            try {
                for (var source_2 = tslib_1.__asyncValues(source), source_2_1; source_2_1 = yield tslib_1.__await(source_2.next()), !source_2_1.done;) {
                    let item = yield tslib_1.__await(source_2_1.value);
                    if (isAsyncIterable(item)) {
                        try {
                            for (var _b = tslib_1.__asyncValues(this._flatten(item, depth - 1)), _c; _c = yield tslib_1.__await(_b.next()), !_c.done;) {
                                let innerItem = yield tslib_1.__await(_c.value);
                                yield innerItem;
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (_c && !_c.done && (_d = _b.return)) yield tslib_1.__await(_d.call(_b));
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                    }
                    else {
                        yield item;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (source_2_1 && !source_2_1.done && (_e = source_2.return)) yield tslib_1.__await(_e.call(source_2));
                }
                finally { if (e_3) throw e_3.error; }
            }
            var e_1, _a, e_3, _e, e_2, _d;
        });
    }
    [Symbol.asyncIterator]() {
        return this._flatten(this._source, this._depth)[Symbol.asyncIterator]();
    }
}
export function flatten(source, depth = Infinity) {
    return new FlattenAsyncIterable(source, depth);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZmxhdHRlbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUV6RCwwQkFBb0MsU0FBUSxjQUF1QjtJQUlqRSxZQUFZLE1BQThCLEVBQUUsS0FBYTtRQUN2RCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFYyxRQUFRLENBQUMsTUFBOEIsRUFBRSxLQUFhOztZQUNuRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzs7b0JBQ2hCLEdBQUcsQ0FBQyxDQUFtQixJQUFBLFdBQUEsc0JBQUEsTUFBTSxDQUFBLFlBQUE7d0JBQWxCLElBQUksSUFBSSwwQ0FBQSxDQUFBO3dCQUFjLE1BQU0sSUFBSSxDQUFDO3FCQUFFOzs7Ozs7Ozs7Z0JBQzlDLE1BQU0sQ0FBQztZQUNULENBQUM7O2dCQUNELEdBQUcsQ0FBQyxDQUFtQixJQUFBLFdBQUEsc0JBQUEsTUFBTSxDQUFBLFlBQUE7b0JBQWxCLElBQUksSUFBSSwwQ0FBQSxDQUFBO29CQUNqQixFQUFFLENBQUMsQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDOzs0QkFDMUIsR0FBRyxDQUFDLENBQXdCLElBQUEsS0FBQSxzQkFBQSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUEsSUFBQTtnQ0FBL0MsSUFBSSxTQUFTLGtDQUFBLENBQUE7Z0NBQXNDLE1BQU0sU0FBUyxDQUFDOzZCQUFFOzs7Ozs7Ozs7b0JBQ2xGLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ04sTUFBTSxJQUFJLENBQUM7b0JBQ2IsQ0FBQztpQkFDRjs7Ozs7Ozs7OztRQUNILENBQUM7S0FBQTtJQUVELENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQztRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztJQUMxRSxDQUFDO0NBQ0Y7QUFFRCxNQUFNLGtCQUFxQixNQUF3QixFQUFFLFFBQWdCLFFBQVE7SUFDM0UsTUFBTSxDQUFDLElBQUksb0JBQW9CLENBQUksTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQ3BELENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9mbGF0dGVuLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL2ludGVybmFsL2lzaXRlcmFibGUnO1xuXG5jbGFzcyBGbGF0dGVuQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9kZXB0aDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgZGVwdGg6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2RlcHRoID0gZGVwdGg7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jICpfZmxhdHRlbihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGRlcHRoOiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHtcbiAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgIGZvciBhd2FpdCAobGV0IGl0ZW0gb2Ygc291cmNlKSB7IHlpZWxkIGl0ZW07IH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZm9yIGF3YWl0IChsZXQgaXRlbSBvZiBzb3VyY2UpIHtcbiAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaXRlbSkpIHtcbiAgICAgICAgZm9yIGF3YWl0IChsZXQgaW5uZXJJdGVtIG9mIHRoaXMuX2ZsYXR0ZW4oaXRlbSwgZGVwdGggLSAxKSkgeyB5aWVsZCBpbm5lckl0ZW07IH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fZmxhdHRlbih0aGlzLl9zb3VyY2UsIHRoaXMuX2RlcHRoKVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxhdHRlbjxUPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sIGRlcHRoOiBudW1iZXIgPSBJbmZpbml0eSk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIG5ldyBGbGF0dGVuQXN5bmNJdGVyYWJsZTxUPihzb3VyY2UsIGRlcHRoKTtcbn1cbiJdfQ==
