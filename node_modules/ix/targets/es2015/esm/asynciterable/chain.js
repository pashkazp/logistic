import { AsyncIterableX } from '../asynciterable';
class ChainAsyncIterable extends AsyncIterableX {
    constructor(result) {
        super();
        this._result = result;
    }
    [Symbol.asyncIterator]() {
        return this._result[Symbol.asyncIterator]();
    }
}
/**
 * Returns an async iterable sequence that is the result of invoking the selector on the source sequence,
 * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use
 * the same sequence multiple times.
 * @param {AsyncIterable<TSource>} source Source sequence that will be shared in the selector function.
 * @param {function(source: AsyncIterable<TSource>): AsyncIterable<TResult>} selector Selector function which can use
 * the source sequence as many times as needed, without sharing subscriptions to the source sequence.
 * @returns An async iterable sequence that contains the elements of a sequence produced by multicasting the source
 * sequence within a selector function.
 */
export function chain(source, selector) {
    return new ChainAsyncIterable(selector(source));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvY2hhaW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELHdCQUFrQyxTQUFRLGNBQXVCO0lBRy9ELFlBQVksTUFBOEI7UUFDeEMsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztJQUN4QixDQUFDO0lBRUQsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0lBQzlDLENBQUM7Q0FDRjtBQUVEOzs7Ozs7Ozs7R0FTRztBQUNILE1BQU0sZ0JBQ0YsTUFBOEIsRUFDOUIsUUFBb0U7SUFDdEUsTUFBTSxDQUFDLElBQUksa0JBQWtCLENBQVUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFDM0QsQ0FBQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2NoYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcblxuY2xhc3MgQ2hhaW5Bc3luY0l0ZXJhYmxlPFRSZXN1bHQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICBwcml2YXRlIF9yZXN1bHQ6IEFzeW5jSXRlcmFibGU8VFJlc3VsdD47XG5cbiAgY29uc3RydWN0b3IocmVzdWx0OiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9yZXN1bHQgPSByZXN1bHQ7XG4gIH1cblxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9yZXN1bHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFzeW5jIGl0ZXJhYmxlIHNlcXVlbmNlIHRoYXQgaXMgdGhlIHJlc3VsdCBvZiBpbnZva2luZyB0aGUgc2VsZWN0b3Igb24gdGhlIHNvdXJjZSBzZXF1ZW5jZSxcbiAqIHdpdGhvdXQgc2hhcmluZyBzdWJzY3JpcHRpb25zLiAgVGhpcyBvcGVyYXRvciBhbGxvd3MgZm9yIGEgZmx1ZW50IHN0eWxlIG9mIHdyaXRpbmcgcXVlcmllcyB0aGF0IHVzZVxuICogdGhlIHNhbWUgc2VxdWVuY2UgbXVsdGlwbGUgdGltZXMuXG4gKiBAcGFyYW0ge0FzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UgdGhhdCB3aWxsIGJlIHNoYXJlZCBpbiB0aGUgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGU8VFJlc3VsdD59IHNlbGVjdG9yIFNlbGVjdG9yIGZ1bmN0aW9uIHdoaWNoIGNhbiB1c2VcbiAqIHRoZSBzb3VyY2Ugc2VxdWVuY2UgYXMgbWFueSB0aW1lcyBhcyBuZWVkZWQsIHdpdGhvdXQgc2hhcmluZyBzdWJzY3JpcHRpb25zIHRvIHRoZSBzb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcmV0dXJucyBBbiBhc3luYyBpdGVyYWJsZSBzZXF1ZW5jZSB0aGF0IGNvbnRhaW5zIHRoZSBlbGVtZW50cyBvZiBhIHNlcXVlbmNlIHByb2R1Y2VkIGJ5IG11bHRpY2FzdGluZyB0aGUgc291cmNlXG4gKiBzZXF1ZW5jZSB3aXRoaW4gYSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYWluPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3RvcjogKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBDaGFpbkFzeW5jSXRlcmFibGU8VFJlc3VsdD4oc2VsZWN0b3Ioc291cmNlKSk7XG59XG4iXX0=
