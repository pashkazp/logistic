import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { returnAsyncIterator } from '../internal/returniterator';
class CatchAllAsyncIterable extends AsyncIterableX {
    constructor(source) {
        super();
        this._source = source;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let error = null, hasError = false;
            for (let source of this._source) {
                const it = source[Symbol.asyncIterator]();
                error = null;
                hasError = false;
                while (1) {
                    let c = {};
                    try {
                        const { done, value } = yield tslib_1.__await(it.next());
                        if (done) {
                            yield tslib_1.__await(returnAsyncIterator(it));
                            break;
                        }
                        c = value;
                    }
                    catch (e) {
                        error = e;
                        hasError = true;
                        yield tslib_1.__await(returnAsyncIterator(it));
                        break;
                    }
                    yield c;
                }
                if (!hasError) {
                    break;
                }
            }
            if (hasError) {
                throw error;
            }
        });
    }
}
export function _catchAll(source) {
    return new CatchAllAsyncIterable(source);
}
export function _catch(source, ...args) {
    return _catchAll([source].concat(args));
}
export function _catchStatic(...source) {
    return _catchAll(source);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvY2F0Y2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUVqRSwyQkFBcUMsU0FBUSxjQUF1QjtJQUdsRSxZQUFZLE1BQXdDO1FBQ2xELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7SUFDeEIsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFDM0IsSUFBSSxLQUFLLEdBQUcsSUFBSSxFQUFFLFFBQVEsR0FBRyxLQUFLLENBQUM7WUFFbkMsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7Z0JBQ2hDLE1BQU0sRUFBRSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztnQkFFMUMsS0FBSyxHQUFHLElBQUksQ0FBQztnQkFDYixRQUFRLEdBQUcsS0FBSyxDQUFDO2dCQUVqQixPQUFPLENBQUMsRUFBRSxDQUFDO29CQUNULElBQUksQ0FBQyxHQUFZLEVBQUUsQ0FBQztvQkFFcEIsSUFBSSxDQUFDO3dCQUNILE1BQU0sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEdBQUcsc0JBQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUM7d0JBQ3hDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7NEJBQ1Qsc0JBQU0sbUJBQW1CLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQzs0QkFDOUIsS0FBSyxDQUFDO3dCQUNSLENBQUM7d0JBQ0QsQ0FBQyxHQUFHLEtBQUssQ0FBQztvQkFDWixDQUFDO29CQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ1gsS0FBSyxHQUFHLENBQUMsQ0FBQzt3QkFDVixRQUFRLEdBQUcsSUFBSSxDQUFDO3dCQUNoQixzQkFBTSxtQkFBbUIsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDO3dCQUM5QixLQUFLLENBQUM7b0JBQ1IsQ0FBQztvQkFFRCxNQUFNLENBQUMsQ0FBQztnQkFDVixDQUFDO2dCQUVELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFBQyxLQUFLLENBQUM7Z0JBQUMsQ0FBQztZQUMzQixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLEtBQUssQ0FBQztZQUFDLENBQUM7UUFDaEMsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxNQUFNLG9CQUE2QixNQUF3QztJQUN6RSxNQUFNLENBQUMsSUFBSSxxQkFBcUIsQ0FBVSxNQUFNLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBRUQsTUFBTSxpQkFBb0IsTUFBd0IsRUFBRSxHQUFHLElBQXdCO0lBQzdFLE1BQU0sQ0FBQyxTQUFTLENBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQsTUFBTSx1QkFBMEIsR0FBRyxNQUEwQjtJQUMzRCxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzNCLENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9jYXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyByZXR1cm5Bc3luY0l0ZXJhdG9yIH0gZnJvbSAnLi4vaW50ZXJuYWwvcmV0dXJuaXRlcmF0b3InO1xuXG5jbGFzcyBDYXRjaEFsbEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8QXN5bmNJdGVyYWJsZTxUU291cmNlPj47XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IGVycm9yID0gbnVsbCwgaGFzRXJyb3IgPSBmYWxzZTtcblxuICAgIGZvciAobGV0IHNvdXJjZSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGNvbnN0IGl0ID0gc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuXG4gICAgICBlcnJvciA9IG51bGw7XG4gICAgICBoYXNFcnJvciA9IGZhbHNlO1xuXG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgYyA9IDxUU291cmNlPnt9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0gYXdhaXQgaXQubmV4dCgpO1xuICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICBhd2FpdCByZXR1cm5Bc3luY0l0ZXJhdG9yKGl0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjID0gdmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIGF3YWl0IHJldHVybkFzeW5jSXRlcmF0b3IoaXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgeWllbGQgYztcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXNFcnJvcikgeyBicmVhazsgfVxuICAgIH1cblxuICAgIGlmIChoYXNFcnJvcikgeyB0aHJvdyBlcnJvcjsgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2hBbGw8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBDYXRjaEFsbEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9jYXRjaDxUPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sIC4uLmFyZ3M6IEFzeW5jSXRlcmFibGU8VD5bXSk6IEFzeW5jSXRlcmFibGVYPFQ+IHtcbiAgcmV0dXJuIF9jYXRjaEFsbDxUPihbc291cmNlXS5jb25jYXQoYXJncykpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoU3RhdGljPFQ+KC4uLnNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPltdKTogQXN5bmNJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gX2NhdGNoQWxsKHNvdXJjZSk7XG59XG4iXX0=
