import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { bindCallback } from '../internal/bindcallback';
import { identityAsync } from '../internal/identity';
import { toLength } from '../internal/tolength';
import { isIterable, isAsyncIterable } from '../internal/isiterable';
class FromArrayIterable extends AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let i = 0;
            const length = toLength(this._source.length);
            while (i < length) {
                yield yield tslib_1.__await(this._selector(this._source[i], i++));
            }
        });
    }
}
class FromAsyncIterable extends AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let i = 0;
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    yield yield tslib_1.__await(this._selector(item, i++));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
class FromPromiseIterable extends AsyncIterableX {
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const item = yield tslib_1.__await(this._source);
            yield yield tslib_1.__await(this._selector(item, 0));
        });
    }
}
class AsyncObserver {
    constructor() {
        this.values = [];
        this.hasCompleted = false;
        this.hasError = false;
        this.errorValue = null;
        this.closed = false;
    }
    next(value) {
        if (!this.closed) {
            this.values.push(value);
        }
    }
    error(err) {
        if (!this.closed) {
            this.closed = true;
            this.hasError = true;
            this.errorValue = err;
        }
    }
    complete() {
        if (!this.closed) {
            this.closed = true;
        }
    }
}
class FromObservableAsyncIterable extends AsyncIterableX {
    constructor(observable, selector) {
        super();
        this._observable = observable;
        this._selector = selector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const observer = new AsyncObserver();
            const subscription = this._observable.subscribe(observer);
            let i = 0;
            while (1) {
                if (observer.values.length > 0) {
                    yield yield tslib_1.__await(this._selector(observer.values.shift(), i++));
                }
                else if (observer.closed) {
                    subscription.unsubscribe();
                    if (observer.hasError) {
                        throw observer.errorValue;
                    }
                    else {
                        break;
                    }
                }
            }
        });
    }
}
function isPromise(x) {
    return x != null && Object(x) === x && typeof x['then'] === 'function';
}
function isObservable(x) {
    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';
}
function isArrayLike(x) {
    return x != null && Object(x) === x && typeof x['length'] === 'number';
}
export function from(source, selector = identityAsync, thisArg) {
    const fn = bindCallback(selector, thisArg, 2);
    if (isIterable(source) || isAsyncIterable(source)) {
        return new FromAsyncIterable(source, fn);
    }
    if (isPromise(source)) {
        return new FromPromiseIterable(source, fn);
    }
    if (isObservable(source)) {
        return new FromObservableAsyncIterable(source, fn);
    }
    if (isArrayLike(source)) {
        return new FromArrayIterable(source, fn);
    }
    throw new TypeError('Input type not supported');
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
