import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
class TakeLastAsyncIterable extends AsyncIterableX {
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            if (this._count === 0) {
                return;
            }
            let q = [];
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    if (q.length >= this._count) {
                        q.shift();
                    }
                    q.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            while (q.length > 0) {
                yield q.shift();
            }
            var e_1, _c;
        });
    }
}
export function takeLast(source, count) {
    return new TakeLastAsyncIterable(source, count);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvdGFrZWxhc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVsRCwyQkFBcUMsU0FBUSxjQUF1QjtJQUlsRSxZQUFZLE1BQThCLEVBQUUsS0FBYTtRQUN2RCxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3RCLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBQzNCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFBQyxNQUFNLENBQUM7WUFBQyxDQUFDO1lBRWxDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQzs7Z0JBQ1gsR0FBRyxDQUFDLENBQW1CLElBQUEsS0FBQSxzQkFBQSxJQUFJLENBQUMsT0FBTyxDQUFBLElBQUE7b0JBQXhCLElBQUksSUFBSSxrQ0FBQSxDQUFBO29CQUNqQixFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO3dCQUM1QixDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBQ1osQ0FBQztvQkFDRCxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNkOzs7Ozs7Ozs7WUFFRCxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUM7Z0JBQ3BCLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRyxDQUFDO1lBQ25CLENBQUM7O1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxNQUFNLG1CQUE0QixNQUE4QixFQUFFLEtBQWE7SUFDN0UsTUFBTSxDQUFDLElBQUkscUJBQXFCLENBQVUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO0FBQzNELENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS90YWtlbGFzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5cbmNsYXNzIFRha2VMYXN0QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9jb3VudDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBpZiAodGhpcy5fY291bnQgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICBsZXQgcSA9IFtdO1xuICAgIGZvciBhd2FpdCAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAocS5sZW5ndGggPj0gdGhpcy5fY291bnQpIHtcbiAgICAgICAgcS5zaGlmdCgpO1xuICAgICAgfVxuICAgICAgcS5wdXNoKGl0ZW0pO1xuICAgIH1cblxuICAgIHdoaWxlIChxLmxlbmd0aCA+IDApIHtcbiAgICAgIHlpZWxkIHEuc2hpZnQoKSE7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWtlTGFzdDxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGFrZUxhc3RBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQpO1xufVxuIl19
