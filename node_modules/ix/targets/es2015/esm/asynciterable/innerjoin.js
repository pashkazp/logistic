import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { createGrouping } from './_grouping';
import { identity } from '../internal/identity';
class JoinAsyncIterable extends AsyncIterableX {
    constructor(outer, inner, outerSelector, innerSelector, resultSelector) {
        super();
        this._outer = outer;
        this._inner = inner;
        this._outerSelector = outerSelector;
        this._innerSelector = innerSelector;
        this._resultSelector = resultSelector;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            const map = yield tslib_1.__await(createGrouping(this._inner, this._innerSelector, identity));
            try {
                for (var _a = tslib_1.__asyncValues(this._outer), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let outerElement = yield tslib_1.__await(_b.value);
                    const outerKey = yield tslib_1.__await(this._outerSelector(outerElement));
                    if (map.has(outerKey)) {
                        for (let innerElement of map.get(outerKey)) {
                            yield yield tslib_1.__await(this._resultSelector(outerElement, innerElement));
                        }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
export function innerJoin(outer, inner, outerSelector, innerSelector, resultSelector) {
    return new JoinAsyncIterable(outer, inner, outerSelector, innerSelector, resultSelector);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvaW5uZXJqb2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFFaEQsdUJBQXVELFNBQVEsY0FBdUI7SUFPcEYsWUFDRSxLQUE0QixFQUM1QixLQUE0QixFQUM1QixhQUFzRCxFQUN0RCxhQUFzRCxFQUN0RCxjQUE0RTtRQUM1RSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxjQUFjLEdBQUcsYUFBYSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxlQUFlLEdBQUcsY0FBYyxDQUFDO0lBQ3hDLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBQzNCLE1BQU0sR0FBRyxHQUFHLHNCQUFNLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxjQUFjLEVBQUUsUUFBUSxDQUFDLENBQUEsQ0FBQzs7Z0JBQzdFLEdBQUcsQ0FBQyxDQUEyQixJQUFBLEtBQUEsc0JBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQSxJQUFBO29CQUEvQixJQUFJLFlBQVksa0NBQUEsQ0FBQTtvQkFDekIsTUFBTSxRQUFRLEdBQUcsc0JBQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQSxDQUFDO29CQUN6RCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDdEIsR0FBRyxDQUFDLENBQUMsSUFBSSxZQUFZLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUUsQ0FBQyxDQUFDLENBQUM7NEJBQzVDLE1BQU0sc0JBQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxDQUFDLENBQUEsQ0FBQzt3QkFDL0QsQ0FBQztvQkFDSCxDQUFDO2lCQUNGOzs7Ozs7Ozs7O1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxNQUFNLG9CQUNGLEtBQTRCLEVBQzVCLEtBQTRCLEVBQzVCLGFBQXNELEVBQ3RELGFBQXNELEVBQ3RELGNBQTRFO0lBQzlFLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUMxQixLQUFLLEVBQ0wsS0FBSyxFQUNMLGFBQWEsRUFDYixhQUFhLEVBQ2IsY0FBYyxDQUFDLENBQUM7QUFDcEIsQ0FBQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2lubmVyam9pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVHcm91cGluZyB9IGZyb20gJy4vX2dyb3VwaW5nJztcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuXG5jbGFzcyBKb2luQXN5bmNJdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHByaXZhdGUgX291dGVyOiBBc3luY0l0ZXJhYmxlPFRPdXRlcj47XG4gIHByaXZhdGUgX2lubmVyOiBBc3luY0l0ZXJhYmxlPFRJbm5lcj47XG4gIHByaXZhdGUgX291dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+O1xuICBwcml2YXRlIF9yZXN1bHRTZWxlY3RvcjogKG91dGVyOiBUT3V0ZXIsIGlubmVyOiBUSW5uZXIpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIG91dGVyOiBBc3luY0l0ZXJhYmxlPFRPdXRlcj4sXG4gICAgaW5uZXI6IEFzeW5jSXRlcmFibGU8VElubmVyPixcbiAgICBvdXRlclNlbGVjdG9yOiAodmFsdWU6IFRPdXRlcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgaW5uZXJTZWxlY3RvcjogKHZhbHVlOiBUSW5uZXIpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIHJlc3VsdFNlbGVjdG9yOiAob3V0ZXI6IFRPdXRlciwgaW5uZXI6IFRJbm5lcikgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX291dGVyID0gb3V0ZXI7XG4gICAgdGhpcy5faW5uZXIgPSBpbm5lcjtcbiAgICB0aGlzLl9vdXRlclNlbGVjdG9yID0gb3V0ZXJTZWxlY3RvcjtcbiAgICB0aGlzLl9pbm5lclNlbGVjdG9yID0gaW5uZXJTZWxlY3RvcjtcbiAgICB0aGlzLl9yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgbWFwID0gYXdhaXQgY3JlYXRlR3JvdXBpbmcodGhpcy5faW5uZXIsIHRoaXMuX2lubmVyU2VsZWN0b3IsIGlkZW50aXR5KTtcbiAgICBmb3IgYXdhaXQgKGxldCBvdXRlckVsZW1lbnQgb2YgdGhpcy5fb3V0ZXIpIHtcbiAgICAgIGNvbnN0IG91dGVyS2V5ID0gYXdhaXQgdGhpcy5fb3V0ZXJTZWxlY3RvcihvdXRlckVsZW1lbnQpO1xuICAgICAgaWYgKG1hcC5oYXMob3V0ZXJLZXkpKSB7XG4gICAgICAgIGZvciAobGV0IGlubmVyRWxlbWVudCBvZiBtYXAuZ2V0KG91dGVyS2V5KSEpIHtcbiAgICAgICAgICB5aWVsZCBhd2FpdCB0aGlzLl9yZXN1bHRTZWxlY3RvcihvdXRlckVsZW1lbnQsIGlubmVyRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlubmVySm9pbjxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXI6IEFzeW5jSXRlcmFibGU8VE91dGVyPixcbiAgICBpbm5lcjogQXN5bmNJdGVyYWJsZTxUSW5uZXI+LFxuICAgIG91dGVyU2VsZWN0b3I6ICh2YWx1ZTogVE91dGVyKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBpbm5lclNlbGVjdG9yOiAodmFsdWU6IFRJbm5lcikgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgcmVzdWx0U2VsZWN0b3I6IChvdXRlcjogVE91dGVyLCBpbm5lcjogVElubmVyKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBKb2luQXN5bmNJdGVyYWJsZTxUT3V0ZXIsIFRJbm5lciwgVEtleSwgVFJlc3VsdD4oXG4gICAgb3V0ZXIsXG4gICAgaW5uZXIsXG4gICAgb3V0ZXJTZWxlY3RvcixcbiAgICBpbm5lclNlbGVjdG9yLFxuICAgIHJlc3VsdFNlbGVjdG9yKTtcbn1cbiJdfQ==
