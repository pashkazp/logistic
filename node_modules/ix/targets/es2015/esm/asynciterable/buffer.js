import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
class BufferAsyncIterable extends AsyncIterableX {
    constructor(source, count, skip) {
        super();
        this._source = source;
        this._count = count;
        this._skip = skip;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let buffers = [], i = 0;
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    if (i % this._skip === 0) {
                        buffers.push([]);
                    }
                    for (let buffer of buffers) {
                        buffer.push(item);
                    }
                    if (buffers.length > 0 && buffers[0].length === this._count) {
                        yield buffers.shift();
                    }
                    i++;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            while (buffers.length > 0) {
                yield buffers.shift();
            }
            var e_1, _c;
        });
    }
}
export function buffer(source, count, skip) {
    if (skip == null) {
        skip = count;
    }
    return new BufferAsyncIterable(source, count, skip);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvYnVmZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFbEQseUJBQW1DLFNBQVEsY0FBeUI7SUFLbEUsWUFDSSxNQUE4QixFQUM5QixLQUFhLEVBQ2IsSUFBWTtRQUNaLEtBQUssRUFBRSxDQUFDO1FBQ1YsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFFM0IsSUFBSSxPQUFPLEdBQWdCLEVBQUUsRUFBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztnQkFDdEMsR0FBRyxDQUFDLENBQW1CLElBQUEsS0FBQSxzQkFBQSxJQUFJLENBQUMsT0FBTyxDQUFBLElBQUE7b0JBQXhCLElBQUksSUFBSSxrQ0FBQSxDQUFBO29CQUNqQixFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO29CQUNuQixDQUFDO29CQUVELEdBQUcsQ0FBQyxDQUFDLElBQUksTUFBTSxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUM7d0JBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3BCLENBQUM7b0JBRUQsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzt3QkFDNUQsTUFBTSxPQUFPLENBQUMsS0FBSyxFQUFHLENBQUM7b0JBQ3pCLENBQUM7b0JBRUQsQ0FBQyxFQUFFLENBQUM7aUJBQ0w7Ozs7Ozs7OztZQUVELE9BQU8sT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQztnQkFDMUIsTUFBTSxPQUFPLENBQUMsS0FBSyxFQUFHLENBQUM7WUFDekIsQ0FBQzs7UUFDSCxDQUFDO0tBQUE7Q0FDRjtBQUVELE1BQU0saUJBQ0YsTUFBOEIsRUFDOUIsS0FBYSxFQUNiLElBQWE7SUFDZixFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQztRQUFDLElBQUksR0FBRyxLQUFLLENBQUM7SUFBQyxDQUFDO0lBQ25DLE1BQU0sQ0FBQyxJQUFJLG1CQUFtQixDQUFVLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDL0QsQ0FBQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2J1ZmZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5cbmNsYXNzIEJ1ZmZlckFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlW10+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9jb3VudDogbnVtYmVyO1xuICBwcml2YXRlIF9za2lwOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBjb3VudDogbnVtYmVyLFxuICAgICAgc2tpcDogbnVtYmVyKSB7XG4gICAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xuICAgIHRoaXMuX3NraXAgPSBza2lwO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG5cbiAgICBsZXQgYnVmZmVyczogVFNvdXJjZVtdW10gPSBbXSwgIGkgPSAwO1xuICAgIGZvciBhd2FpdCAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoaSAlIHRoaXMuX3NraXAgPT09IDApIHtcbiAgICAgICAgYnVmZmVycy5wdXNoKFtdKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgYnVmZmVyIG9mIGJ1ZmZlcnMpIHtcbiAgICAgICAgYnVmZmVyLnB1c2goaXRlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChidWZmZXJzLmxlbmd0aCA+IDAgJiYgYnVmZmVyc1swXS5sZW5ndGggPT09IHRoaXMuX2NvdW50KSB7XG4gICAgICAgIHlpZWxkIGJ1ZmZlcnMuc2hpZnQoKSE7XG4gICAgICB9XG5cbiAgICAgIGkrKztcbiAgICB9XG5cbiAgICB3aGlsZSAoYnVmZmVycy5sZW5ndGggPiAwKSB7XG4gICAgICB5aWVsZCBidWZmZXJzLnNoaWZ0KCkhO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVmZmVyPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb3VudDogbnVtYmVyLFxuICAgIHNraXA/OiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlW10+IHtcbiAgaWYgKHNraXAgPT0gbnVsbCkgeyBza2lwID0gY291bnQ7IH1cbiAgcmV0dXJuIG5ldyBCdWZmZXJBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQsIHNraXApO1xufVxuIl19
