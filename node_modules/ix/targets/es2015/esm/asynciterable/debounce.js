import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { forEach } from './foreach';
class DebounceAsyncIterable extends AsyncIterableX {
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let noValue;
            let lastItem;
            let deferred;
            let resolver;
            let done = false;
            let hasError = false;
            let error;
            const reset = (hasNoValue) => {
                noValue = hasNoValue;
                lastItem = undefined;
                deferred = new Promise(r => resolver = r);
            };
            const run = () => {
                if (lastItem === undefined) {
                    noValue = true;
                    return;
                }
                const item = lastItem;
                const res = resolver;
                reset(false);
                setTimeout(run, this._time);
                res(item);
            };
            reset(true);
            forEach(this._source, item => {
                lastItem = item;
                if (noValue) {
                    run();
                }
            })
                .then(() => done = true)
                .catch(err => { hasError = true; error = err; });
            while (1) {
                if (done) {
                    break;
                }
                if (hasError) {
                    throw error;
                }
                yield yield tslib_1.__await(deferred);
            }
        });
    }
}
export function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGVib3VuY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDLDJCQUFxQyxTQUFRLGNBQXVCO0lBSWxFLFlBQVksTUFBOEIsRUFBRSxJQUFZO1FBQ3RELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFDM0IsSUFBSSxPQUFnQixDQUFDO1lBQ3JCLElBQUksUUFBNkIsQ0FBQztZQUNsQyxJQUFJLFFBQTBCLENBQUM7WUFDL0IsSUFBSSxRQUFzRSxDQUFDO1lBQzNFLElBQUksSUFBSSxHQUFZLEtBQUssQ0FBQztZQUMxQixJQUFJLFFBQVEsR0FBWSxLQUFLLENBQUM7WUFDOUIsSUFBSSxLQUFVLENBQUM7WUFFZixNQUFNLEtBQUssR0FBRyxDQUFDLFVBQW1CO2dCQUNoQyxPQUFPLEdBQUcsVUFBVSxDQUFDO2dCQUNyQixRQUFRLEdBQUcsU0FBUyxDQUFDO2dCQUNyQixRQUFRLEdBQUcsSUFBSSxPQUFPLENBQVUsQ0FBQyxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDLENBQUM7WUFFRixNQUFNLEdBQUcsR0FBRztnQkFDVixFQUFFLENBQUMsQ0FBQyxRQUFRLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQztvQkFDM0IsT0FBTyxHQUFHLElBQUksQ0FBQztvQkFDZixNQUFNLENBQUM7Z0JBQ1QsQ0FBQztnQkFFRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUM7Z0JBQ3RCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQztnQkFDckIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUNiLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDWixDQUFDLENBQUM7WUFFRixLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJO2dCQUN4QixRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO29CQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDO2lCQUNELElBQUksQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7aUJBQ3ZCLEtBQUssQ0FBQyxHQUFHLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqRCxPQUFPLENBQUMsRUFBRSxDQUFDO2dCQUNULEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7b0JBQUMsS0FBSyxDQUFDO2dCQUFDLENBQUM7Z0JBQ3BCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7b0JBQUMsTUFBTSxLQUFLLENBQUM7Z0JBQUMsQ0FBQztnQkFDOUIsTUFBTSxzQkFBTSxRQUFTLENBQUEsQ0FBQztZQUN4QixDQUFDO1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxNQUFNLG1CQUE0QixNQUE4QixFQUFFLElBQVk7SUFDNUUsTUFBTSxDQUFDLElBQUkscUJBQXFCLENBQVUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFELENBQUMiLCJmaWxlIjoiYXN5bmNpdGVyYWJsZS9kZWJvdW5jZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBmb3JFYWNoIH0gZnJvbSAnLi9mb3JlYWNoJztcblxuY2xhc3MgRGVib3VuY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX3RpbWU6IG51bWJlcjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICB9XG5cbiAgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IG5vVmFsdWU6IGJvb2xlYW47XG4gICAgbGV0IGxhc3RJdGVtOiBUU291cmNlIHwgdW5kZWZpbmVkO1xuICAgIGxldCBkZWZlcnJlZDogUHJvbWlzZTxUU291cmNlPjtcbiAgICBsZXQgcmVzb2x2ZXI6ICh2YWx1ZT86IFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPiB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICBsZXQgZG9uZTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCBoYXNFcnJvcjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGxldCBlcnJvcjogYW55O1xuXG4gICAgY29uc3QgcmVzZXQgPSAoaGFzTm9WYWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgbm9WYWx1ZSA9IGhhc05vVmFsdWU7XG4gICAgICBsYXN0SXRlbSA9IHVuZGVmaW5lZDtcbiAgICAgIGRlZmVycmVkID0gbmV3IFByb21pc2U8VFNvdXJjZT4ociA9PiByZXNvbHZlciA9IHIpO1xuICAgIH07XG5cbiAgICBjb25zdCBydW4gPSAoKSA9PiB7XG4gICAgICBpZiAobGFzdEl0ZW0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpdGVtID0gbGFzdEl0ZW07XG4gICAgICBjb25zdCByZXMgPSByZXNvbHZlcjtcbiAgICAgIHJlc2V0KGZhbHNlKTtcbiAgICAgIHNldFRpbWVvdXQocnVuLCB0aGlzLl90aW1lKTtcbiAgICAgIHJlcyhpdGVtKTtcbiAgICB9O1xuXG4gICAgcmVzZXQodHJ1ZSk7XG4gICAgZm9yRWFjaCh0aGlzLl9zb3VyY2UsIGl0ZW0gPT4ge1xuICAgICAgbGFzdEl0ZW0gPSBpdGVtO1xuICAgICAgaWYgKG5vVmFsdWUpIHsgcnVuKCk7IH1cbiAgICB9KVxuICAgIC50aGVuKCgpID0+IGRvbmUgPSB0cnVlKVxuICAgIC5jYXRjaChlcnIgPT4geyBoYXNFcnJvciA9IHRydWU7IGVycm9yID0gZXJyOyB9KTtcblxuICAgIHdoaWxlICgxKSB7XG4gICAgICBpZiAoZG9uZSkgeyBicmVhazsgfVxuICAgICAgaWYgKGhhc0Vycm9yKSB7IHRocm93IGVycm9yOyB9XG4gICAgICB5aWVsZCBhd2FpdCBkZWZlcnJlZCE7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJvdW5jZTxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEZWJvdW5jZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCB0aW1lKTtcbn1cbiJdfQ==
