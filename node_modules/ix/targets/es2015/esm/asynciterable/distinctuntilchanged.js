import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { identityAsync } from '../internal/identity';
import { comparerAsync } from '../internal/comparer';
class DistinctUntilChangedAsyncIterable extends AsyncIterableX {
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let currentKey, hasCurrentKey = false;
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    let key = yield tslib_1.__await(this._keySelector(item));
                    let comparerEquals = false;
                    if (hasCurrentKey) {
                        comparerEquals = yield tslib_1.__await(this._comparer(currentKey, key));
                    }
                    if (!hasCurrentKey || !comparerEquals) {
                        hasCurrentKey = true;
                        currentKey = key;
                        yield item;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
export function distinctUntilChanged(source, keySelector = identityAsync, comparer = comparerAsync) {
    return new DistinctUntilChangedAsyncIterable(source, keySelector, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvZGlzdGluY3R1bnRpbGNoYW5nZWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXJELHVDQUF1RCxTQUFRLGNBQXVCO0lBS3BGLFlBQ0ksTUFBOEIsRUFDOUIsV0FBcUQsRUFDckQsUUFBbUU7UUFDckUsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQztRQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztJQUM1QixDQUFDO0lBRU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQUMzQixJQUFJLFVBQTRCLEVBQUUsYUFBYSxHQUFHLEtBQUssQ0FBQzs7Z0JBQ3hELEdBQUcsQ0FBQyxDQUFtQixJQUFBLEtBQUEsc0JBQUEsSUFBSSxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUF4QixJQUFJLElBQUksa0NBQUEsQ0FBQTtvQkFDakIsSUFBSSxHQUFHLEdBQUcsc0JBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDO29CQUN4QyxJQUFJLGNBQWMsR0FBRyxLQUFLLENBQUM7b0JBQzNCLEVBQUUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7d0JBQUMsY0FBYyxHQUFHLHNCQUFNLElBQUksQ0FBQyxTQUFTLENBQUMsVUFBVyxFQUFFLEdBQUcsQ0FBQyxDQUFBLENBQUM7b0JBQUMsQ0FBQztvQkFDL0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO3dCQUN0QyxhQUFhLEdBQUcsSUFBSSxDQUFDO3dCQUNyQixVQUFVLEdBQUcsR0FBRyxDQUFDO3dCQUNqQixNQUFNLElBQUksQ0FBQztvQkFDYixDQUFDO2lCQUNGOzs7Ozs7Ozs7O1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUFFRCxNQUFNLCtCQUNGLE1BQThCLEVBQzlCLGNBQXdELGFBQWEsRUFDckUsV0FBc0UsYUFBYTtJQUNyRixNQUFNLENBQUMsSUFBSSxpQ0FBaUMsQ0FBZ0IsTUFBTSxFQUFFLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUM3RixDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvZGlzdGluY3R1bnRpbGNoYW5nZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuaW1wb3J0IHsgaWRlbnRpdHlBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmltcG9ydCB7IGNvbXBhcmVyQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5cbmNsYXNzIERpc3RpbmN0VW50aWxDaGFuZ2VkQXN5bmNJdGVyYWJsZTxUU291cmNlLCBUS2V5PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9rZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PjtcbiAgcHJpdmF0ZSBfY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgICAgY29tcGFyZXI6IChmaXJzdDogVEtleSwgc2Vjb25kOiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleVNlbGVjdG9yID0ga2V5U2VsZWN0b3I7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBjdXJyZW50S2V5OiBUS2V5IHwgdW5kZWZpbmVkLCBoYXNDdXJyZW50S2V5ID0gZmFsc2U7XG4gICAgZm9yIGF3YWl0IChsZXQgaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGxldCBrZXkgPSBhd2FpdCB0aGlzLl9rZXlTZWxlY3RvcihpdGVtKTtcbiAgICAgIGxldCBjb21wYXJlckVxdWFscyA9IGZhbHNlO1xuICAgICAgaWYgKGhhc0N1cnJlbnRLZXkpIHsgY29tcGFyZXJFcXVhbHMgPSBhd2FpdCB0aGlzLl9jb21wYXJlcihjdXJyZW50S2V5ISwga2V5KTsgfVxuICAgICAgaWYgKCFoYXNDdXJyZW50S2V5IHx8ICFjb21wYXJlckVxdWFscykge1xuICAgICAgICBoYXNDdXJyZW50S2V5ID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudEtleSA9IGtleTtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0VW50aWxDaGFuZ2VkPFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PiA9IGlkZW50aXR5QXN5bmMsXG4gICAgY29tcGFyZXI6IChmaXJzdDogVEtleSwgc2Vjb25kOiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiA9IGNvbXBhcmVyQXN5bmMpOiAgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IERpc3RpbmN0VW50aWxDaGFuZ2VkQXN5bmNJdGVyYWJsZTxUU291cmNlLCBUS2V5Pihzb3VyY2UsIGtleVNlbGVjdG9yLCBjb21wYXJlcik7XG59XG4iXX0=
