import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { RefCountList } from '../iterable/_refcountlist';
import { create } from './create';
class PublishedAsyncBuffer extends AsyncIterableX {
    constructor(source) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = new RefCountList(0);
    }
    _getIterable(i) {
        return tslib_1.__asyncGenerator(this, arguments, function* _getIterable_1() {
            try {
                while (1) {
                    let hasValue = false, current = {};
                    if (i >= this._buffer.count) {
                        if (!this._stopped) {
                            try {
                                let next = yield tslib_1.__await(this._source.next());
                                hasValue = !next.done;
                                if (hasValue) {
                                    current = next.value;
                                }
                            }
                            catch (e) {
                                this._error = e;
                                this._stopped = true;
                            }
                        }
                        if (this._stopped) {
                            if (this._error) {
                                throw this._error;
                            }
                            else {
                                break;
                            }
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                    }
                    else {
                        hasValue = true;
                    }
                    if (hasValue) {
                        yield this._buffer.get(i);
                    }
                    else {
                        break;
                    }
                    i++;
                }
            }
            finally {
                this._buffer.done();
            }
        });
    }
    [Symbol.asyncIterator]() {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.asyncIterator]();
    }
}
export function publish(source, selector) {
    return selector ?
        create(() => tslib_1.__awaiter(this, void 0, void 0, function* () { return selector(publish(source))[Symbol.asyncIterator](); })) :
        new PublishedAsyncBuffer(source[Symbol.asyncIterator]());
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvcHVibGlzaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWxDLDBCQUE4QixTQUFRLGNBQWlCO0lBTXJELFlBQVksTUFBd0I7UUFDbEMsS0FBSyxFQUFFLENBQUM7UUFIRixhQUFRLEdBQVksS0FBSyxDQUFDO1FBSWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVjLFlBQVksQ0FBQyxDQUFTOztZQUNuQyxJQUFJLENBQUM7Z0JBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQztvQkFDVCxJQUFJLFFBQVEsR0FBRyxLQUFLLEVBQUUsT0FBTyxHQUFNLEVBQUUsQ0FBQztvQkFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQzt3QkFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzs0QkFDbkIsSUFBSSxDQUFDO2dDQUNILElBQUksSUFBSSxHQUFHLHNCQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQztnQ0FDckMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztnQ0FDdEIsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztnQ0FBQyxDQUFDOzRCQUN6QyxDQUFDOzRCQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0NBQ1gsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7Z0NBQ2hCLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDOzRCQUN2QixDQUFDO3dCQUNILENBQUM7d0JBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7NEJBQ2xCLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO2dDQUNoQixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUM7NEJBQ3BCLENBQUM7NEJBQUMsSUFBSSxDQUFDLENBQUM7Z0NBQ04sS0FBSyxDQUFDOzRCQUNSLENBQUM7d0JBQ0gsQ0FBQzt3QkFFRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDOzRCQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO3dCQUFDLENBQUM7b0JBQy9DLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ04sUUFBUSxHQUFHLElBQUksQ0FBQztvQkFDbEIsQ0FBQztvQkFFRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNiLE1BQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzVCLENBQUM7b0JBQUMsSUFBSSxDQUFDLENBQUM7d0JBQ04sS0FBSyxDQUFDO29CQUNSLENBQUM7b0JBRUQsQ0FBQyxFQUFFLENBQUM7Z0JBQ04sQ0FBQztZQUNILENBQUM7b0JBQVMsQ0FBQztnQkFDVCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ3RCLENBQUM7UUFDSCxDQUFDO0tBQUE7SUFFRCxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUMzQixNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0lBQ3ZFLENBQUM7Q0FDRjtBQU1ELE1BQU0sa0JBQ0YsTUFBOEIsRUFDOUIsUUFBb0U7SUFDdEUsTUFBTSxDQUFDLFFBQVE7UUFDYixNQUFNLENBQUMsNkRBQVksTUFBTSxDQUFOLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQSxHQUFBLENBQUM7UUFDckUsSUFBSSxvQkFBb0IsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN0RSxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvcHVibGlzaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBSZWZDb3VudExpc3QgfSBmcm9tICcuLi9pdGVyYWJsZS9fcmVmY291bnRsaXN0JztcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJy4vY3JlYXRlJztcblxuY2xhc3MgUHVibGlzaGVkQXN5bmNCdWZmZXI8VD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHByaXZhdGUgX2J1ZmZlcjogUmVmQ291bnRMaXN0PFQ+O1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmF0b3I8VD47XG4gIHByaXZhdGUgX2Vycm9yOiBhbnk7XG4gIHByaXZhdGUgX3N0b3BwZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmF0b3I8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9idWZmZXIgPSBuZXcgUmVmQ291bnRMaXN0PFQ+KDApO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyAqX2dldEl0ZXJhYmxlKGk6IG51bWJlcik6IEFzeW5jSXRlcmFibGU8VD4ge1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgaGFzVmFsdWUgPSBmYWxzZSwgY3VycmVudCA9IDxUPnt9O1xuICAgICAgICBpZiAoaSA+PSB0aGlzLl9idWZmZXIuY291bnQpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxldCBuZXh0ID0gYXdhaXQgdGhpcy5fc291cmNlLm5leHQoKTtcbiAgICAgICAgICAgICAgaGFzVmFsdWUgPSAhbmV4dC5kb25lO1xuICAgICAgICAgICAgICBpZiAoaGFzVmFsdWUpIHsgY3VycmVudCA9IG5leHQudmFsdWU7IH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlO1xuICAgICAgICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5fc3RvcHBlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2Vycm9yKSB7XG4gICAgICAgICAgICAgIHRocm93IHRoaXMuX2Vycm9yO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IHRoaXMuX2J1ZmZlci5wdXNoKGN1cnJlbnQpOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgeWllbGQgdGhpcy5fYnVmZmVyLmdldChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fYnVmZmVyLmRvbmUoKTtcbiAgICB9XG4gIH1cblxuICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk6IEFzeW5jSXRlcmF0b3I8VD4ge1xuICAgIHRoaXMuX2J1ZmZlci5yZWFkZXJDb3VudCsrO1xuICAgIHJldHVybiB0aGlzLl9nZXRJdGVyYWJsZSh0aGlzLl9idWZmZXIuY291bnQpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+O1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgc2VsZWN0b3I/OiAodmFsdWU6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pID0+IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4pOiBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PjtcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2UgfCBUUmVzdWx0PiB7XG4gIHJldHVybiBzZWxlY3RvciA/XG4gICAgY3JlYXRlKGFzeW5jICgpID0+IHNlbGVjdG9yKHB1Ymxpc2goc291cmNlKSlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkpIDpcbiAgICBuZXcgUHVibGlzaGVkQXN5bmNCdWZmZXI8VFNvdXJjZT4oc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpKTtcbn1cbiJdfQ==
