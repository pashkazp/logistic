import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
class ScanAsyncIterable extends AsyncIterableX {
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let i = 0, hasValue = false;
            try {
                for (var _a = tslib_1.__asyncValues(this._source), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let item = yield tslib_1.__await(_b.value);
                    if (hasValue || (hasValue = this._hasSeed)) {
                        this._seed = yield tslib_1.__await(this._fn(this._seed, item, i++));
                        yield this._seed;
                    }
                    else {
                        this._seed = item;
                        hasValue = true;
                        i++;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
export function scan(source, accumulator, ...args) {
    return new ScanAsyncIterable(source, accumulator, ...args);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvc2Nhbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWxELHVCQUE4QixTQUFRLGNBQWlCO0lBTXJELFlBQ0ksTUFBd0IsRUFDeEIsRUFBdUQsRUFDdkQsR0FBRyxJQUFlO1FBQ3BCLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDZCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBQzNCLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsS0FBSyxDQUFDOztnQkFDNUIsR0FBRyxDQUFDLENBQW1CLElBQUEsS0FBQSxzQkFBQSxJQUFJLENBQUMsT0FBTyxDQUFBLElBQUE7b0JBQXhCLElBQUksSUFBSSxrQ0FBQSxDQUFBO29CQUNqQixFQUFFLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQzt3QkFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxzQkFBTSxJQUFJLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQzt3QkFDdEQsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDO29CQUNuQixDQUFDO29CQUFDLElBQUksQ0FBQyxDQUFDO3dCQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO3dCQUNsQixRQUFRLEdBQUcsSUFBSSxDQUFDO3dCQUNoQixDQUFDLEVBQUUsQ0FBQztvQkFDTixDQUFDO2lCQUNGOzs7Ozs7Ozs7O1FBQ0gsQ0FBQztLQUFBO0NBQ0Y7QUFTRCxNQUFNLGVBQ0YsTUFBd0IsRUFDeEIsV0FBb0UsRUFDcEUsR0FBRyxJQUFlO0lBQ3BCLE1BQU0sQ0FBQyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztBQUM3RCxDQUFDIiwiZmlsZSI6ImFzeW5jaXRlcmFibGUvc2Nhbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5cbmNsYXNzIFNjYW5Bc3luY0l0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8Uj4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD47XG4gIHByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj47XG4gIHByaXZhdGUgX3NlZWQ/OiBUIHwgUjtcbiAgcHJpdmF0ZSBfaGFzU2VlZDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICAgIGZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgICAuLi5hcmdzOiAoVCB8IFIpW10pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICAgIHRoaXMuX2hhc1NlZWQgPSBhcmdzLmxlbmd0aCA9PT0gMTtcbiAgICB0aGlzLl9zZWVkID0gYXJnc1swXTtcbiAgfVxuXG4gIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCBpID0gMCwgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICBmb3IgYXdhaXQgKGxldCBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKGhhc1ZhbHVlIHx8IChoYXNWYWx1ZSA9IHRoaXMuX2hhc1NlZWQpKSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBhd2FpdCB0aGlzLl9mbig8Uj50aGlzLl9zZWVkLCBpdGVtLCBpKyspO1xuICAgICAgICB5aWVsZCB0aGlzLl9zZWVkO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGl0ZW07XG4gICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgaSsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2NhbjxUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogVCwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFQgfCBQcm9taXNlPFQ+KTogQXN5bmNJdGVyYWJsZVg8VD47XG5leHBvcnQgZnVuY3Rpb24gc2NhbjxULCBSID0gVD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgc2VlZDogUik6IEFzeW5jSXRlcmFibGVYPFI+O1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW48VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBBc3luY0l0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5Bc3luY0l0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19
