import * as tslib_1 from "tslib";
import { AsyncIterableX } from '../asynciterable';
import { arrayIndexOfAsync } from '../internal/arrayindexof';
import { comparerAsync } from '../internal/comparer';
function arrayRemove(array, item, comparer) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        let idx = yield arrayIndexOfAsync(array, item, comparer);
        if (idx === -1) {
            return false;
        }
        array.splice(idx, 1);
        return true;
    });
}
class IntersectAsyncIterable extends AsyncIterableX {
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    [Symbol.asyncIterator]() {
        return tslib_1.__asyncGenerator(this, arguments, function* _a() {
            let map = [];
            try {
                for (var _a = tslib_1.__asyncValues(this._second), _b; _b = yield tslib_1.__await(_a.next()), !_b.done;) {
                    let secondItem = yield tslib_1.__await(_b.value);
                    map.push(secondItem);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield tslib_1.__await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _d = tslib_1.__asyncValues(this._first), _e; _e = yield tslib_1.__await(_d.next()), !_e.done;) {
                    let firstItem = yield tslib_1.__await(_e.value);
                    if (yield tslib_1.__await(arrayRemove(map, firstItem, this._comparer))) {
                        yield firstItem;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_f = _d.return)) yield tslib_1.__await(_f.call(_d));
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_1, _c, e_2, _f;
        });
    }
}
export function intersect(first, second, comparer = comparerAsync) {
    return new IntersectAsyncIterable(first, second, comparer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzeW5jaXRlcmFibGUvaW50ZXJzZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXJELHFCQUNJLEtBQVUsRUFBRSxJQUFPLEVBQ25CLFFBQW9EOztRQUN0RCxJQUFJLEdBQUcsR0FBRyxNQUFNLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDekQsRUFBRSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7UUFBQyxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUM7SUFDZCxDQUFDO0NBQUE7QUFFRCw0QkFBc0MsU0FBUSxjQUF1QjtJQUtuRSxZQUNFLEtBQTZCLEVBQzdCLE1BQThCLEVBQzlCLFFBQWdFO1FBQ2hFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUM7SUFDNUIsQ0FBQztJQUVNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFDM0IsSUFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDOztnQkFDYixHQUFHLENBQUMsQ0FBeUIsSUFBQSxLQUFBLHNCQUFBLElBQUksQ0FBQyxPQUFPLENBQUEsSUFBQTtvQkFBOUIsSUFBSSxVQUFVLGtDQUFBLENBQUE7b0JBQ3ZCLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ3RCOzs7Ozs7Ozs7O2dCQUVELEdBQUcsQ0FBQyxDQUF3QixJQUFBLEtBQUEsc0JBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQSxJQUFBO29CQUE1QixJQUFJLFNBQVMsa0NBQUEsQ0FBQTtvQkFDdEIsRUFBRSxDQUFDLENBQUMsc0JBQU0sV0FBVyxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDO3dCQUN0RCxNQUFNLFNBQVMsQ0FBQztvQkFDbEIsQ0FBQztpQkFDRjs7Ozs7Ozs7OztRQUNILENBQUM7S0FBQTtDQUNGO0FBRUQsTUFBTSxvQkFDRixLQUE2QixFQUM3QixNQUE4QixFQUM5QixXQUFtRSxhQUFhO0lBQ2xGLE1BQU0sQ0FBQyxJQUFJLHNCQUFzQixDQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDdEUsQ0FBQyIsImZpbGUiOiJhc3luY2l0ZXJhYmxlL2ludGVyc2VjdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5pbXBvcnQgeyBhcnJheUluZGV4T2ZBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5pbXBvcnQgeyBjb21wYXJlckFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuXG5hc3luYyBmdW5jdGlvbiBhcnJheVJlbW92ZTxUPihcbiAgICBhcnJheTogVFtdLCBpdGVtOiBULFxuICAgIGNvbXBhcmVyOiAoeDogVCwgeTogVCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgbGV0IGlkeCA9IGF3YWl0IGFycmF5SW5kZXhPZkFzeW5jKGFycmF5LCBpdGVtLCBjb21wYXJlcik7XG4gIGlmIChpZHggPT09IC0xKSB7IHJldHVybiBmYWxzZTsgfVxuICBhcnJheS5zcGxpY2UoaWR4LCAxKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmNsYXNzIEludGVyc2VjdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX2ZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9zZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX2NvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2Vjb25kOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2ZpcnN0ID0gZmlyc3Q7XG4gICAgdGhpcy5fc2Vjb25kID0gc2Vjb25kO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cblxuICBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgbWFwID0gW107XG4gICAgZm9yIGF3YWl0IChsZXQgc2Vjb25kSXRlbSBvZiB0aGlzLl9zZWNvbmQpIHtcbiAgICAgIG1hcC5wdXNoKHNlY29uZEl0ZW0pO1xuICAgIH1cblxuICAgIGZvciBhd2FpdCAobGV0IGZpcnN0SXRlbSBvZiB0aGlzLl9maXJzdCkge1xuICAgICAgaWYgKGF3YWl0IGFycmF5UmVtb3ZlKG1hcCwgZmlyc3RJdGVtLCB0aGlzLl9jb21wYXJlcikpIHtcbiAgICAgICAgeWllbGQgZmlyc3RJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJzZWN0PFRTb3VyY2U+KFxuICAgIGZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBJbnRlcnNlY3RBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==
