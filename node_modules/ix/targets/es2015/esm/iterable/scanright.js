import { IterableX } from '../iterable';
import { toArray } from './toarray';
class ScanRightIterable extends IterableX {
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    *[Symbol.iterator]() {
        let hasValue = false;
        const source = toArray(this._source);
        for (let offset = source.length - 1; offset >= 0; offset--) {
            const item = source[offset];
            if (hasValue || (hasValue = this._hasSeed)) {
                this._seed = this._fn(this._seed, item, offset);
                yield this._seed;
            }
            else {
                this._seed = item;
                hasValue = true;
            }
        }
    }
}
export function scanRight(source, accumulator, ...args) {
    return new ScanRightIterable(source, accumulator, ...args);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3NjYW5yaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFcEMsdUJBQThCLFNBQVEsU0FBWTtJQU1oRCxZQUNJLE1BQW1CLEVBQ25CLEVBQTBDLEVBQzFDLEdBQUcsSUFBZTtRQUNwQixLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDaEIsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsR0FBRyxDQUFDLENBQUMsSUFBSSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDO1lBQzNELE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM1QixFQUFFLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDM0MsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUNuRCxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDbkIsQ0FBQztZQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNOLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO2dCQUNsQixRQUFRLEdBQUcsSUFBSSxDQUFDO1lBQ2xCLENBQUM7UUFDSCxDQUFDO0lBQ0gsQ0FBQztDQUNGO0FBU0QsTUFBTSxvQkFDRixNQUFtQixFQUNuQixXQUF1RCxFQUN2RCxHQUFHLElBQWU7SUFDcEIsTUFBTSxDQUFDLElBQUksaUJBQWlCLENBQUMsTUFBTSxFQUFFLFdBQVcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0FBQzdELENBQUMiLCJmaWxlIjoiaXRlcmFibGUvc2NhbnJpZ2h0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdG9hcnJheSc7XG5cbmNsYXNzIFNjYW5SaWdodEl0ZXJhYmxlPFQsIFI+IGV4dGVuZHMgSXRlcmFibGVYPFI+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUPjtcbiAgcHJpdmF0ZSBfZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSO1xuICBwcml2YXRlIF9zZWVkPzogVCB8IFI7XG4gIHByaXZhdGUgX2hhc1NlZWQ6IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgICAgZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSLFxuICAgICAgLi4uYXJnczogKFQgfCBSKVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgICB0aGlzLl9oYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gICAgdGhpcy5fc2VlZCA9IGFyZ3NbMF07XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgY29uc3Qgc291cmNlID0gdG9BcnJheSh0aGlzLl9zb3VyY2UpO1xuICAgIGZvciAobGV0IG9mZnNldCA9IHNvdXJjZS5sZW5ndGggLSAxOyBvZmZzZXQgPj0gMDsgb2Zmc2V0LS0pIHtcbiAgICAgIGNvbnN0IGl0ZW0gPSBzb3VyY2Vbb2Zmc2V0XTtcbiAgICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSB0aGlzLl9oYXNTZWVkKSkge1xuICAgICAgICB0aGlzLl9zZWVkID0gdGhpcy5fZm4oPFI+dGhpcy5fc2VlZCwgaXRlbSwgb2Zmc2V0KTtcbiAgICAgICAgeWllbGQgdGhpcy5fc2VlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBpdGVtO1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCk6IEl0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gIHNlZWQ6IFIpOiBJdGVyYWJsZVg8Uj47XG5leHBvcnQgZnVuY3Rpb24gc2NhblJpZ2h0PFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFQ+LFxuICAgIGFjY3VtdWxhdG9yOiAoYWNjOiBUIHwgUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIsXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogSXRlcmFibGVYPFQgfCBSPiB7XG4gIHJldHVybiBuZXcgU2NhblJpZ2h0SXRlcmFibGUoc291cmNlLCBhY2N1bXVsYXRvciwgLi4uYXJncyk7XG59XG4iXX0=
