import { IterableX } from '../iterable';
class DefaultIfEmptyIterable extends IterableX {
    constructor(source, defaultValue) {
        super();
        this._source = source;
        this._defaultValue = defaultValue;
    }
    *[Symbol.iterator]() {
        let state = 1;
        for (let item of this._source) {
            state = 2;
            yield item;
        }
        if (state === 1) {
            yield this._defaultValue;
        }
    }
}
/**
 * Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
 * @param {Iterable<T>} source The sequence to return a default value for if it is empty.
 * @param {T} defaultValue The default value if the sequence is empty.
 * @return An that contains the default value if source is empty; otherwise, source.
 */
export function defaultIfEmpty(source, defaultValue) {
    return new DefaultIfEmptyIterable(source, defaultValue);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2RlZmF1bHRpZmVtcHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEMsNEJBQXNDLFNBQVEsU0FBa0I7SUFJOUQsWUFBWSxNQUF5QixFQUFFLFlBQXFCO1FBQzFELEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxZQUFZLENBQUM7SUFDcEMsQ0FBQztJQUVELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztRQUNkLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQzlCLEtBQUssR0FBRyxDQUFDLENBQUM7WUFDVixNQUFNLElBQUksQ0FBQztRQUNiLENBQUM7UUFDRCxFQUFFLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNoQixNQUFNLElBQUksQ0FBQyxhQUFhLENBQUM7UUFDM0IsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVEOzs7OztHQUtHO0FBQ0gsTUFBTSx5QkFBNEIsTUFBbUIsRUFBRSxZQUFlO0lBQ3BFLE1BQU0sQ0FBQyxJQUFJLHNCQUFzQixDQUFJLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUM3RCxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL2RlZmF1bHRpZmVtcHR5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuXG5jbGFzcyBEZWZhdWx0SWZFbXB0eUl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbiAgcHJpdmF0ZSBfZGVmYXVsdFZhbHVlOiBUU291cmNlO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGRlZmF1bHRWYWx1ZTogVFNvdXJjZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2RlZmF1bHRWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gICpbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgc3RhdGUgPSAxO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBzdGF0ZSA9IDI7XG4gICAgICB5aWVsZCBpdGVtO1xuICAgIH1cbiAgICBpZiAoc3RhdGUgPT09IDEpIHtcbiAgICAgIHlpZWxkIHRoaXMuX2RlZmF1bHRWYWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50cyBvZiB0aGUgc3BlY2lmaWVkIHNlcXVlbmNlIG9yIHRoZSB0eXBlIHBhcmFtZXRlcidzIGRlZmF1bHQgdmFsdWUgaW4gYSBzaW5nbGV0b24gY29sbGVjdGlvbiBpZiB0aGUgc2VxdWVuY2UgaXMgZW1wdHkuXG4gKiBAcGFyYW0ge0l0ZXJhYmxlPFQ+fSBzb3VyY2UgVGhlIHNlcXVlbmNlIHRvIHJldHVybiBhIGRlZmF1bHQgdmFsdWUgZm9yIGlmIGl0IGlzIGVtcHR5LlxuICogQHBhcmFtIHtUfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUgaWYgdGhlIHNlcXVlbmNlIGlzIGVtcHR5LlxuICogQHJldHVybiBBbiB0aGF0IGNvbnRhaW5zIHRoZSBkZWZhdWx0IHZhbHVlIGlmIHNvdXJjZSBpcyBlbXB0eTsgb3RoZXJ3aXNlLCBzb3VyY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0SWZFbXB0eTxUPihzb3VyY2U6IEl0ZXJhYmxlPFQ+LCBkZWZhdWx0VmFsdWU6IFQpOiBJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IERlZmF1bHRJZkVtcHR5SXRlcmFibGU8VD4oc291cmNlLCBkZWZhdWx0VmFsdWUpO1xufVxuIl19
