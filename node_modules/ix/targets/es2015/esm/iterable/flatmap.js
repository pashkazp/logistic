import { IterableX } from '../iterable';
import { bindCallback } from '../internal/bindcallback';
class FlatMapIterable extends IterableX {
    constructor(source, fn) {
        super();
        this._source = source;
        this._fn = fn;
    }
    *[Symbol.iterator]() {
        for (let outerItem of this._source) {
            for (let innerItem of this._fn(outerItem)) {
                yield innerItem;
            }
        }
    }
}
/**
 * Projects each element of a sequence to iterable and flattens the resulting sequences into
 * one sequence.
 * @param {Iterable<T>} source Source sequence
 * @param {function:(value: T): Iterable<R>} selector A transform function to apply to each element.
 * @param {Object} [thisArg] An optional "this" binding for the selector function.
 * @returns {Iterable<R>} An iterable whose elements are the result of invoking the one-to-many
 * transform function on each element of the input sequence.
 */
export function flatMap(source, selector, thisArg) {
    return new FlatMapIterable(source, bindCallback(selector, thisArg, 1));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2ZsYXRtYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFeEQscUJBQXdDLFNBQVEsU0FBa0I7SUFJaEUsWUFBWSxNQUF5QixFQUFFLEVBQXlDO1FBQzlFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7UUFDdEIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBQ2hCLEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ25DLEdBQUcsQ0FBQyxDQUFDLElBQUksU0FBUyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxNQUFNLFNBQVMsQ0FBQztZQUNsQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7Q0FDRjtBQUVEOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxrQkFDRixNQUF5QixFQUN6QixRQUErQyxFQUMvQyxPQUFhO0lBQ2YsTUFBTSxDQUFDLElBQUksZUFBZSxDQUFtQixNQUFNLEVBQUUsWUFBWSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMzRixDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL2ZsYXRtYXAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2sgfSBmcm9tICcuLi9pbnRlcm5hbC9iaW5kY2FsbGJhY2snO1xuXG5jbGFzcyBGbGF0TWFwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+O1xuICBwcml2YXRlIF9mbjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUUmVzdWx0PjtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBmbjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUUmVzdWx0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2ZuID0gZm47XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgb3V0ZXJJdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgZm9yIChsZXQgaW5uZXJJdGVtIG9mIHRoaXMuX2ZuKG91dGVySXRlbSkpIHtcbiAgICAgICAgeWllbGQgaW5uZXJJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFByb2plY3RzIGVhY2ggZWxlbWVudCBvZiBhIHNlcXVlbmNlIHRvIGl0ZXJhYmxlIGFuZCBmbGF0dGVucyB0aGUgcmVzdWx0aW5nIHNlcXVlbmNlcyBpbnRvXG4gKiBvbmUgc2VxdWVuY2UuXG4gKiBAcGFyYW0ge0l0ZXJhYmxlPFQ+fSBzb3VyY2UgU291cmNlIHNlcXVlbmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uOih2YWx1ZTogVCk6IEl0ZXJhYmxlPFI+fSBzZWxlY3RvciBBIHRyYW5zZm9ybSBmdW5jdGlvbiB0byBhcHBseSB0byBlYWNoIGVsZW1lbnQuXG4gKiBAcGFyYW0ge09iamVjdH0gW3RoaXNBcmddIEFuIG9wdGlvbmFsIFwidGhpc1wiIGJpbmRpbmcgZm9yIHRoZSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqIEByZXR1cm5zIHtJdGVyYWJsZTxSPn0gQW4gaXRlcmFibGUgd2hvc2UgZWxlbWVudHMgYXJlIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIG9uZS10by1tYW55XG4gKiB0cmFuc2Zvcm0gZnVuY3Rpb24gb24gZWFjaCBlbGVtZW50IG9mIHRoZSBpbnB1dCBzZXF1ZW5jZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZsYXRNYXA8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBJdGVyYWJsZTxUUmVzdWx0PixcbiAgICB0aGlzQXJnPzogYW55KTogSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBGbGF0TWFwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4oc291cmNlLCBiaW5kQ2FsbGJhY2soc2VsZWN0b3IsIHRoaXNBcmcsIDEpKTtcbn1cbiJdfQ==
