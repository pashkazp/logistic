import { IterableX } from '../iterable';
import { MaxRefCountList, RefCountList } from './_refcountlist';
import { create } from './create';
class MemoizeBuffer extends IterableX {
    constructor(source, buffer) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = buffer;
    }
    *[Symbol.iterator]() {
        let i = 0;
        try {
            while (1) {
                let hasValue = false, current = {};
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let next = this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        throw this._error;
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
}
export function memoize(source, readerCount = -1, selector) {
    if (readerCount === -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new RefCountList(readerCount));
    }
    return create(() => selector(memoize(source, readerCount))[Symbol.iterator]());
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QztJQUVELEVBQUUsQ0FBQyxDQUFDLFdBQVcsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDcEMsTUFBTSxDQUFDLElBQUksYUFBYSxDQUFVLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxJQUFJLFlBQVksQ0FBVSxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBTSxDQUFvQixNQUFNLFFBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNyRyxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL21lbW9pemUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBJUmVmQ291bnRMaXN0LCBNYXhSZWZDb3VudExpc3QsIFJlZkNvdW50TGlzdCB9IGZyb20gJy4vX3JlZmNvdW50bGlzdCc7XG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICcuL2NyZWF0ZSc7XG5cbmNsYXNzIE1lbW9pemVCdWZmZXI8VD4gZXh0ZW5kcyBJdGVyYWJsZVg8VD4ge1xuICBwcml2YXRlIF9zb3VyY2U6IEl0ZXJhdG9yPFQ+O1xuICBwcml2YXRlIF9idWZmZXI6IElSZWZDb3VudExpc3Q8VD47XG4gIHByaXZhdGUgX2Vycm9yOiBhbnk7XG4gIHByaXZhdGUgX3N0b3BwZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhdG9yPFQ+LCBidWZmZXI6IElSZWZDb3VudExpc3Q8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9idWZmZXIgPSBidWZmZXI7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgaGFzVmFsdWUgPSBmYWxzZSwgY3VycmVudCA9IDxUPnt9O1xuICAgICAgICBpZiAoaSA+PSB0aGlzLl9idWZmZXIuY291bnQpIHtcbiAgICAgICAgICBpZiAoIXRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy5fc291cmNlLm5leHQoKTtcbiAgICAgICAgICAgICAgaGFzVmFsdWUgPSAhbmV4dC5kb25lO1xuICAgICAgICAgICAgICBpZiAoaGFzVmFsdWUpIHsgY3VycmVudCA9IG5leHQudmFsdWU7IH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5fZXJyb3IgPSBlO1xuICAgICAgICAgICAgICB0aGlzLl9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5fc3RvcHBlZCkge1xuICAgICAgICAgICAgdGhyb3cgdGhpcy5fZXJyb3I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IHRoaXMuX2J1ZmZlci5wdXNoKGN1cnJlbnQpOyB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgeWllbGQgdGhpcy5fYnVmZmVyLmdldChpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5fYnVmZmVyLmRvbmUoKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2U+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICByZWFkZXJDb3VudD86IG51bWJlcik6IEl0ZXJhYmxlWDxUU291cmNlPjtcbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICByZWFkZXJDb3VudD86IG51bWJlcixcbiAgc2VsZWN0b3I/OiAodmFsdWU6IEl0ZXJhYmxlPFRTb3VyY2U+KSA9PiBJdGVyYWJsZTxUUmVzdWx0Pik6IEl0ZXJhYmxlWDxUUmVzdWx0PjtcbmV4cG9ydCBmdW5jdGlvbiBtZW1vaXplPFRTb3VyY2UsIFRSZXN1bHQgPSBUU291cmNlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJlYWRlckNvdW50OiBudW1iZXIgPSAtMSxcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRTb3VyY2UgfCBUUmVzdWx0PiB7XG4gIGlmIChyZWFkZXJDb3VudCA9PT0gLTEgJiYgIXNlbGVjdG9yKSB7XG4gICAgcmV0dXJuIG5ldyBNZW1vaXplQnVmZmVyPFRTb3VyY2U+KHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCksIG5ldyBNYXhSZWZDb3VudExpc3Q8VFNvdXJjZT4oKSk7XG4gIH1cblxuICBpZiAocmVhZGVyQ291bnQgIT09IC0xICYmICFzZWxlY3Rvcikge1xuICAgIHJldHVybiBuZXcgTWVtb2l6ZUJ1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpLCBuZXcgUmVmQ291bnRMaXN0PFRTb3VyY2U+KHJlYWRlckNvdW50KSk7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlPFRTb3VyY2UgfCBUUmVzdWx0PigoKSA9PiBzZWxlY3RvciEobWVtb2l6ZShzb3VyY2UsIHJlYWRlckNvdW50KSlbU3ltYm9sLml0ZXJhdG9yXSgpKTtcbn1cbiJdfQ==
