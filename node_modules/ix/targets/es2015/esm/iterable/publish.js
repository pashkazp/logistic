import { IterableX } from '../iterable';
import { RefCountList } from './_refcountlist';
import { create } from './create';
class PublishedBuffer extends IterableX {
    constructor(source) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = new RefCountList(0);
    }
    *_getIterable(i) {
        try {
            while (1) {
                let hasValue = false, current = {};
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let next = this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        if (this._error) {
                            throw this._error;
                        }
                        else {
                            break;
                        }
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
    [Symbol.iterator]() {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.iterator]();
    }
}
export function publish(source, selector) {
    return selector ?
        create(() => selector(publish(source))[Symbol.iterator]()) :
        new PublishedBuffer(source[Symbol.iterator]());
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3B1Ymxpc2gudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQyxxQkFBeUIsU0FBUSxTQUFZO0lBTTNDLFlBQVksTUFBbUI7UUFDN0IsS0FBSyxFQUFFLENBQUM7UUFIRixhQUFRLEdBQVksS0FBSyxDQUFDO1FBSWhDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUksQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELENBQVMsWUFBWSxDQUFDLENBQVM7UUFDN0IsSUFBSSxDQUFDO1lBQ0gsT0FBTyxDQUFDLEVBQUUsQ0FBQztnQkFDVCxJQUFJLFFBQVEsR0FBRyxLQUFLLEVBQUUsT0FBTyxHQUFNLEVBQUUsQ0FBQztnQkFDdEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDNUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFDbkIsSUFBSSxDQUFDOzRCQUNILElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7NEJBQy9CLFFBQVEsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7NEJBQ3RCLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7Z0NBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7NEJBQUMsQ0FBQzt3QkFDekMsQ0FBQzt3QkFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDOzRCQUNYLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDOzRCQUNoQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzt3QkFDdkIsQ0FBQztvQkFDSCxDQUFDO29CQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUNsQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQzs0QkFDaEIsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDO3dCQUNwQixDQUFDO3dCQUFDLElBQUksQ0FBQyxDQUFDOzRCQUNOLEtBQUssQ0FBQzt3QkFDUixDQUFDO29CQUNILENBQUM7b0JBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzt3QkFBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFBQyxDQUFDO2dCQUMvQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ2xCLENBQUM7Z0JBRUQsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztvQkFDYixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUM1QixDQUFDO2dCQUFDLElBQUksQ0FBQyxDQUFDO29CQUNOLEtBQUssQ0FBQztnQkFDUixDQUFDO2dCQUVELENBQUMsRUFBRSxDQUFDO1lBQ04sQ0FBQztRQUNILENBQUM7Z0JBQVMsQ0FBQztZQUNULElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdEIsQ0FBQztJQUNILENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDZixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7SUFDbEUsQ0FBQztDQUNGO0FBTUQsTUFBTSxrQkFDRixNQUF5QixFQUN6QixRQUEwRDtJQUM1RCxNQUFNLENBQUMsUUFBUTtRQUNiLE1BQU0sQ0FBQyxNQUFNLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQUMxRCxJQUFJLGVBQWUsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL3B1Ymxpc2guanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5pbXBvcnQgeyBSZWZDb3VudExpc3QgfSBmcm9tICcuL19yZWZjb3VudGxpc3QnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUnO1xuXG5jbGFzcyBQdWJsaXNoZWRCdWZmZXI8VD4gZXh0ZW5kcyBJdGVyYWJsZVg8VD4ge1xuICBwcml2YXRlIF9idWZmZXI6IFJlZkNvdW50TGlzdDxUPjtcbiAgcHJpdmF0ZSBfc291cmNlOiBJdGVyYXRvcjxUPjtcbiAgcHJpdmF0ZSBfZXJyb3I6IGFueTtcbiAgcHJpdmF0ZSBfc3RvcHBlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmF0b3I8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9idWZmZXIgPSBuZXcgUmVmQ291bnRMaXN0PFQ+KDApO1xuICB9XG5cbiAgcHJpdmF0ZSAqX2dldEl0ZXJhYmxlKGk6IG51bWJlcik6IEl0ZXJhYmxlPFQ+IHtcbiAgICB0cnkge1xuICAgICAgd2hpbGUgKDEpIHtcbiAgICAgICAgbGV0IGhhc1ZhbHVlID0gZmFsc2UsIGN1cnJlbnQgPSA8VD57fTtcbiAgICAgICAgaWYgKGkgPj0gdGhpcy5fYnVmZmVyLmNvdW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsZXQgbmV4dCA9IHRoaXMuX3NvdXJjZS5uZXh0KCk7XG4gICAgICAgICAgICAgIGhhc1ZhbHVlID0gIW5leHQuZG9uZTtcbiAgICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7IGN1cnJlbnQgPSBuZXh0LnZhbHVlOyB9XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZTtcbiAgICAgICAgICAgICAgdGhpcy5fc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyB0aGlzLl9idWZmZXIucHVzaChjdXJyZW50KTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgIHlpZWxkIHRoaXMuX2J1ZmZlci5nZXQoaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuX2J1ZmZlci5kb25lKCk7XG4gICAgfVxuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8VD4ge1xuICAgIHRoaXMuX2J1ZmZlci5yZWFkZXJDb3VudCsrO1xuICAgIHJldHVybiB0aGlzLl9nZXRJdGVyYWJsZSh0aGlzLl9idWZmZXIuY291bnQpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+KTogSXRlcmFibGVYPFRTb3VyY2U+O1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gIHNlbGVjdG9yPzogKHZhbHVlOiBJdGVyYWJsZTxUU291cmNlPikgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFJlc3VsdD47XG5leHBvcnQgZnVuY3Rpb24gcHVibGlzaDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yPzogKHZhbHVlOiBJdGVyYWJsZTxUU291cmNlPikgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFNvdXJjZSB8IFRSZXN1bHQ+IHtcbiAgcmV0dXJuIHNlbGVjdG9yID9cbiAgICBjcmVhdGUoKCkgPT4gc2VsZWN0b3IocHVibGlzaChzb3VyY2UpKVtTeW1ib2wuaXRlcmF0b3JdKCkpIDpcbiAgICBuZXcgUHVibGlzaGVkQnVmZmVyPFRTb3VyY2U+KHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCkpO1xufVxuIl19
