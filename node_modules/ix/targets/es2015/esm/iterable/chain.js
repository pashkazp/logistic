import { IterableX } from '../iterable';
class ChainIterable extends IterableX {
    constructor(result) {
        super();
        this._result = result;
    }
    [Symbol.iterator]() {
        return this._result[Symbol.iterator]();
    }
}
/**
 * Returns an iterable sequence that is the result of invoking the selector on the source sequence,
 * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use
 * the same sequence multiple times.
 * @param {Iterable<TSource>} source Source sequence that will be shared in the selector function.
 * @param {function(source: Iterable<TSource>): Iterable<TResult>} selector Selector function which can use
 * the source sequence as many times as needed, without sharing subscriptions to the source sequence.
 * @returns An iterable sequence that contains the elements of a sequence produced by multicasting the source
 * sequence within a selector function.
 */
export function chain(source, selector) {
    return new ChainIterable(selector(source));
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL2NoYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEMsbUJBQTZCLFNBQVEsU0FBa0I7SUFHckQsWUFBWSxNQUF5QjtRQUNuQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFDZixNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0NBQ0Y7QUFFRDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLGdCQUNGLE1BQXlCLEVBQ3pCLFFBQTBEO0lBQzVELE1BQU0sQ0FBQyxJQUFJLGFBQWEsQ0FBVSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN0RCxDQUFDIiwiZmlsZSI6Iml0ZXJhYmxlL2NoYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuXG5jbGFzcyBDaGFpbkl0ZXJhYmxlPFRSZXN1bHQ+IGV4dGVuZHMgSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcHJpdmF0ZSBfcmVzdWx0OiBJdGVyYWJsZTxUUmVzdWx0PjtcblxuICBjb25zdHJ1Y3RvcihyZXN1bHQ6IEl0ZXJhYmxlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9yZXN1bHQgPSByZXN1bHQ7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzdWx0W1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgYW4gaXRlcmFibGUgc2VxdWVuY2UgdGhhdCBpcyB0aGUgcmVzdWx0IG9mIGludm9raW5nIHRoZSBzZWxlY3RvciBvbiB0aGUgc291cmNlIHNlcXVlbmNlLFxuICogd2l0aG91dCBzaGFyaW5nIHN1YnNjcmlwdGlvbnMuICBUaGlzIG9wZXJhdG9yIGFsbG93cyBmb3IgYSBmbHVlbnQgc3R5bGUgb2Ygd3JpdGluZyBxdWVyaWVzIHRoYXQgdXNlXG4gKiB0aGUgc2FtZSBzZXF1ZW5jZSBtdWx0aXBsZSB0aW1lcy5cbiAqIEBwYXJhbSB7SXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UgdGhhdCB3aWxsIGJlIHNoYXJlZCBpbiB0aGUgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4pOiBJdGVyYWJsZTxUUmVzdWx0Pn0gc2VsZWN0b3IgU2VsZWN0b3IgZnVuY3Rpb24gd2hpY2ggY2FuIHVzZVxuICogdGhlIHNvdXJjZSBzZXF1ZW5jZSBhcyBtYW55IHRpbWVzIGFzIG5lZWRlZCwgd2l0aG91dCBzaGFyaW5nIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHNvdXJjZSBzZXF1ZW5jZS5cbiAqIEByZXR1cm5zIEFuIGl0ZXJhYmxlIHNlcXVlbmNlIHRoYXQgY29udGFpbnMgdGhlIGVsZW1lbnRzIG9mIGEgc2VxdWVuY2UgcHJvZHVjZWQgYnkgbXVsdGljYXN0aW5nIHRoZSBzb3VyY2VcbiAqIHNlcXVlbmNlIHdpdGhpbiBhIHNlbGVjdG9yIGZ1bmN0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hhaW48VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3RvcjogKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBDaGFpbkl0ZXJhYmxlPFRSZXN1bHQ+KHNlbGVjdG9yKHNvdXJjZSkpO1xufVxuIl19
