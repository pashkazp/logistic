import { IterableX } from '../iterable';
class TapIterable extends IterableX {
    constructor(source, observer) {
        super();
        this._source = source;
        this._observer = observer;
    }
    *[Symbol.iterator]() {
        const it = this._source[Symbol.iterator]();
        while (1) {
            let next;
            try {
                next = it.next();
                if (next.done) {
                    break;
                }
            }
            catch (e) {
                if (this._observer.error) {
                    this._observer.error(e);
                }
                throw e;
            }
            if (this._observer.next) {
                this._observer.next(next.value);
            }
            yield next.value;
        }
        if (this._observer.complete) {
            this._observer.complete();
        }
    }
}
/**
 * Lazily invokes observer methods for each value in the sequence, and upon successful or exceptional termination.
 * @param {Iterable<TSource>} source Source sequence.
 * @param {PartialObserver<TSource>} observer Observer to invoke notification calls on.<
 * @return {Ierable<TSource>} Sequence exhibiting the side-effects of observer method invocation upon iteration.
 */
export function tap(source, observer) {
    return new TapIterable(source, observer);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIml0ZXJhYmxlL3RhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3hDLGlCQUEyQixTQUFRLFNBQWtCO0lBSW5ELFlBQVksTUFBeUIsRUFBRSxRQUFrQztRQUN2RSxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO0lBQzVCLENBQUM7SUFFRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNoQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQzNDLE9BQU8sQ0FBQyxFQUFFLENBQUM7WUFDVCxJQUFJLElBQUksQ0FBQztZQUNULElBQUksQ0FBQztnQkFDSCxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNqQixFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFBQyxLQUFLLENBQUM7Z0JBQUMsQ0FBQztZQUMzQixDQUFDO1lBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDWCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7b0JBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsQ0FBQztnQkFDdEQsTUFBTSxDQUFDLENBQUM7WUFDVixDQUFDO1lBRUQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUFDLENBQUM7WUFDN0QsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ25CLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0Y7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sY0FBdUIsTUFBeUIsRUFBRSxRQUFrQztJQUN4RixNQUFNLENBQUMsSUFBSSxXQUFXLENBQVUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3BELENBQUMiLCJmaWxlIjoiaXRlcmFibGUvdGFwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuaW1wb3J0IHsgUGFydGlhbE9ic2VydmVyIH0gZnJvbSAnLi4vb2JzZXJ2ZXInO1xuXG5jbGFzcyBUYXBJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG4gIHByaXZhdGUgX29ic2VydmVyOiBQYXJ0aWFsT2JzZXJ2ZXI8VFNvdXJjZT47XG5cbiAgY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgb2JzZXJ2ZXI6IFBhcnRpYWxPYnNlcnZlcjxUU291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX29ic2VydmVyID0gb2JzZXJ2ZXI7XG4gIH1cblxuICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBsZXQgbmV4dDtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5leHQgPSBpdC5uZXh0KCk7XG4gICAgICAgIGlmIChuZXh0LmRvbmUpIHsgYnJlYWs7IH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKHRoaXMuX29ic2VydmVyLmVycm9yKSB7IHRoaXMuX29ic2VydmVyLmVycm9yKGUpOyB9XG4gICAgICAgIHRocm93IGU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9vYnNlcnZlci5uZXh0KSB7IHRoaXMuX29ic2VydmVyLm5leHQobmV4dC52YWx1ZSk7IH1cbiAgICAgIHlpZWxkIG5leHQudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX29ic2VydmVyLmNvbXBsZXRlKSB7IHRoaXMuX29ic2VydmVyLmNvbXBsZXRlKCk7IH1cbiAgfVxufVxuXG4vKipcbiAqIExhemlseSBpbnZva2VzIG9ic2VydmVyIG1ldGhvZHMgZm9yIGVhY2ggdmFsdWUgaW4gdGhlIHNlcXVlbmNlLCBhbmQgdXBvbiBzdWNjZXNzZnVsIG9yIGV4Y2VwdGlvbmFsIHRlcm1pbmF0aW9uLlxuICogQHBhcmFtIHtJdGVyYWJsZTxUU291cmNlPn0gc291cmNlIFNvdXJjZSBzZXF1ZW5jZS5cbiAqIEBwYXJhbSB7UGFydGlhbE9ic2VydmVyPFRTb3VyY2U+fSBvYnNlcnZlciBPYnNlcnZlciB0byBpbnZva2Ugbm90aWZpY2F0aW9uIGNhbGxzIG9uLjxcbiAqIEByZXR1cm4ge0llcmFibGU8VFNvdXJjZT59IFNlcXVlbmNlIGV4aGliaXRpbmcgdGhlIHNpZGUtZWZmZWN0cyBvZiBvYnNlcnZlciBtZXRob2QgaW52b2NhdGlvbiB1cG9uIGl0ZXJhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRhcDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBvYnNlcnZlcjogUGFydGlhbE9ic2VydmVyPFRTb3VyY2U+KTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYXBJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIG9ic2VydmVyKTtcbn1cbiJdfQ==
