import { AsyncIterableX } from '../asynciterable';
export declare class GroupedAsyncIterable<TKey, TValue> extends AsyncIterableX<TValue> {
    readonly key: TKey;
    private _source;
    constructor(key: TKey, source: Iterable<TValue>);
    [Symbol.asyncIterator](): AsyncIterableIterator<TValue>;
}
export declare class GroupByAsyncIterable<TSource, TKey, TValue> extends AsyncIterableX<GroupedAsyncIterable<TKey, TValue>> {
    private _source;
    private _keySelector;
    private _elementSelector;
    constructor(source: AsyncIterable<TSource>, keySelector: (value: TSource) => TKey | Promise<TKey>, elementSelector: (value: TSource) => TValue | Promise<TValue>);
    [Symbol.asyncIterator](): AsyncIterableIterator<GroupedAsyncIterable<TKey, TValue>>;
}
export declare function groupBy<TSource, TKey>(source: AsyncIterable<TSource>, keySelector: (value: TSource) => TKey | Promise<TKey>): AsyncIterableX<GroupedAsyncIterable<TKey, TSource>>;
export declare function groupBy<TSource, TKey, TValue>(source: AsyncIterable<TSource>, keySelector: (value: TSource) => TKey | Promise<TKey>, elementSelector?: (value: TSource) => TValue | Promise<TValue>): AsyncIterableX<GroupedAsyncIterable<TKey, TValue>>;
