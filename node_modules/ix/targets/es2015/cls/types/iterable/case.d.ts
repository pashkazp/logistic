/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { IterableX } from '../iterable';
/**
 * Returns a sequence from a dictionary based on the result of evaluating a selector function.
 * \@example
 * const map = new Map([
 *   [1, [1, 2, 3]],
 *   [2, [2, 3, 4]],
 *   [3, [4, 5, 6]]
 * ]);
 * const result = case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * const result = Ix.Iterable.case(
 *   () => 2,
 *   map,
 *   [5, 6, 7]
 * );
 * for (const item of result) {
 *   console.log(result);
 * }
 * for the computed selector value.  If not specified, defaults to an empty sequence.
 * @template TSource, TResult
 * @param {function(): TSource} selector
 * @param {!Map<TSource, !Iterable<TResult>>} sources
 * @param {!Iterable<TResult>=} defaultSource
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
export declare function _case<TSource, TResult>(selector: () => TSource, sources: Map<TSource, Iterable<TResult>>, defaultSource?: Iterable<TResult>): IterableX<TResult>;
