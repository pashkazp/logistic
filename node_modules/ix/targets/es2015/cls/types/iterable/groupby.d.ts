/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { IterableX } from '../iterable';
/**
 * @template TKey, TValue
 */
export declare class GroupedIterable<TKey, TValue> extends IterableX<TValue> {
    readonly key: TKey;
    private _source;
    /**
     * @param {TKey} key
     * @param {!Iterable<TValue>} source
     */
    constructor(key: TKey, source: Iterable<TValue>);
    /**
     * @return {!Iterator<TValue>}
     */
    [Symbol.iterator](): Iterator<TValue>;
}
/**
 * @template TSource, TKey, TValue
 */
export declare class GroupByIterable<TSource, TKey, TValue> extends IterableX<GroupedIterable<TKey, TValue>> {
    private _source;
    private _keySelector;
    private _elementSelector;
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TSource): TValue} elementSelector
     */
    constructor(source: Iterable<TSource>, keySelector: (value: TSource) => TKey, elementSelector: (value: TSource) => TValue);
    /**
     * @return {!IterableIterator<!GroupedIterable<TKey, TValue>>}
     */
    [Symbol.iterator](): IterableIterator<GroupedIterable<TKey, TValue>>;
}
export declare function groupBy<TSource, TKey>(source: Iterable<TSource>, keySelector: (value: TSource) => TKey): IterableX<GroupedIterable<TKey, TSource>>;
export declare function groupBy<TSource, TKey, TValue>(source: Iterable<TSource>, keySelector: (value: TSource) => TKey, elementSelector?: (value: TSource) => TValue): IterableX<GroupedIterable<TKey, TValue>>;
