/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { IterableX } from '../iterable';
/**
 * @abstract
 * @template TSource
 */
export declare abstract class OrderedIterableBaseX<TSource> extends IterableX<TSource> {
    _source: Iterable<TSource>;
    /**
     * @param {!Iterable<TSource>} source
     */
    constructor(source: Iterable<TSource>);
    /**
     * @return {!IterableIterator<TSource>}
     */
    [Symbol.iterator](): IterableIterator<TSource>;
    /**
     * @template TKey
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number=} comparer
     * @return {!OrderedIterableBaseX}
     */
    thenBy<TKey>(keySelector: (item: TSource) => TKey, comparer?: (fst: TKey, snd: TKey) => number): OrderedIterableBaseX<TSource>;
    /**
     * @template TKey
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number=} comparer
     * @return {!OrderedIterableBaseX}
     */
    thenByDescending<TKey>(keySelector: (item: TSource) => TKey, comparer?: (fst: TKey, snd: TKey) => number): OrderedIterableBaseX<TSource>;
    abstract _getSorter(elements: TSource[], next?: (x: number, y: number) => number): (x: number, y: number) => number;
}
/**
 * @template TKey, TSource
 */
export declare class OrderedIterableX<TKey, TSource> extends OrderedIterableBaseX<TSource> {
    private _keySelector;
    private _comparer;
    private _descending;
    private _parent?;
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number} comparer
     * @param {boolean} descending
     * @param {!OrderedIterableBaseX<TSource>=} parent
     */
    constructor(source: Iterable<TSource>, keySelector: (item: TSource) => TKey, comparer: (fst: TKey, snd: TKey) => number, descending: boolean, parent?: OrderedIterableBaseX<TSource>);
    /**
     * @param {!Array<TSource>} elements
     * @param {function(number, number): number=} next
     * @return {function(number, number): number}
     */
    _getSorter(elements: TSource[], next?: (x: number, y: number) => number): (x: number, y: number) => number;
}
/**
 * @template TKey, TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
export declare function orderBy<TKey, TSource>(source: Iterable<TSource>, keySelector: (item: TSource) => TKey, comparer?: (fst: TKey, snd: TKey) => number): OrderedIterableX<TKey, TSource>;
/**
 * @template TKey, TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
export declare function orderByDescending<TKey, TSource>(source: Iterable<TSource>, keySelector: (item: TSource) => TKey, comparer?: (fst: TKey, snd: TKey) => number): OrderedIterableX<TKey, TSource>;
/**
 * @template TKey, TSource
 * @param {!OrderedIterableBaseX<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
export declare function thenBy<TKey, TSource>(source: OrderedIterableBaseX<TSource>, keySelector: (item: TSource) => TKey, comparer?: (fst: TKey, snd: TKey) => number): OrderedIterableX<TKey, TSource>;
/**
 * @template TKey, TSource
 * @param {!OrderedIterableBaseX<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
export declare function thenByDescending<TKey, TSource>(source: OrderedIterableBaseX<TSource>, keySelector: (item: TSource) => TKey, comparer?: (fst: TKey, snd: TKey) => number): OrderedIterableX<TKey, TSource>;
