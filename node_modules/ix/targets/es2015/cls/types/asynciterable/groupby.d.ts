/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { AsyncIterableX } from '../asynciterable';
/**
 * @template TKey, TValue
 */
export declare class GroupedAsyncIterable<TKey, TValue> extends AsyncIterableX<TValue> {
    readonly key: TKey;
    private _source;
    /**
     * @param {TKey} key
     * @param {!Iterable<TValue>} source
     */
    constructor(key: TKey, source: Iterable<TValue>);
    /**
     * @return {!AsyncIterableIterator<TValue>}
     */
    [Symbol.asyncIterator](): AsyncIterableIterator<TValue>;
}
/**
 * @template TSource, TKey, TValue
 */
export declare class GroupByAsyncIterable<TSource, TKey, TValue> extends AsyncIterableX<GroupedAsyncIterable<TKey, TValue>> {
    private _source;
    private _keySelector;
    private _elementSelector;
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TSource): (TValue|!Promise<TValue>)} elementSelector
     */
    constructor(source: AsyncIterable<TSource>, keySelector: (value: TSource) => TKey | Promise<TKey>, elementSelector: (value: TSource) => TValue | Promise<TValue>);
    /**
     * @return {!AsyncIterableIterator<!GroupedAsyncIterable<TKey, TValue>>}
     */
    [Symbol.asyncIterator](): AsyncIterableIterator<GroupedAsyncIterable<TKey, TValue>>;
}
export declare function groupBy<TSource, TKey>(source: AsyncIterable<TSource>, keySelector: (value: TSource) => TKey | Promise<TKey>): AsyncIterableX<GroupedAsyncIterable<TKey, TSource>>;
export declare function groupBy<TSource, TKey, TValue>(source: AsyncIterable<TSource>, keySelector: (value: TSource) => TKey | Promise<TKey>, elementSelector?: (value: TSource) => TValue | Promise<TValue>): AsyncIterableX<GroupedAsyncIterable<TKey, TValue>>;
