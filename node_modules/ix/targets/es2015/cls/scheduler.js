goog.module('targets.es2015.cls.scheduler'); exports = {}; var module = {id: 'targets/es2015/cls/scheduler.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.subscription");
goog.require("_Users.ptaylor.dev.ixjs.src.subscription"); // force type-only module to be loaded
/**
 * @record
 */
function Scheduler() { }
exports.Scheduler = Scheduler;
function Scheduler_tsickle_Closure_declarations() {
    /** @type {number} */
    Scheduler.prototype.now;
    /** @type {function(number): !Promise<void>} */
    Scheduler.prototype.delay;
    /** @type {function(function(): void, number): !tsickle_forward_declare_1.Subscription} */
    Scheduler.prototype.schedule;
}
/**
 * @implements {tsickle_forward_declare_1.Subscription}
 */
class ActionSubscription {
    /**
     * @param {function(): void} action
     */
    constructor(action) {
        this.isUnsubscribed = false;
        this._action = action;
    }
    /**
     * @return {void}
     */
    unsubscribe() {
        if (!this.isUnsubscribed) {
            this.isUnsubscribed = true;
            this._action();
        }
    }
}
function ActionSubscription_tsickle_Closure_declarations() {
    /** @type {boolean} */
    ActionSubscription.prototype.isUnsubscribed;
    /** @type {function(): void} */
    ActionSubscription.prototype._action;
}
/**
 * @implements {Scheduler}
 */
class DefaultScheduler {
    /**
     * @return {number}
     */
    get now() {
        return Date.now();
    }
    /**
     * @param {number} dueTime
     * @return {!Promise<void>}
     */
    delay(dueTime) {
        return new Promise(res => setTimeout(res, dueTime));
    }
    /**
     * @param {function(): void} action
     * @param {number} dueTime
     * @return {!tsickle_forward_declare_1.Subscription}
     */
    schedule(action, dueTime) {
        const /** @type {!NodeJS.Timer} */ id = setTimeout(() => action(), dueTime);
        return new ActionSubscription(() => clearTimeout(id));
    }
}
exports.DefaultScheduler = DefaultScheduler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY2hlZHVsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUdILE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQ2xHLElBQUksQ0FBQyxPQUFPLENBQUMsMENBQTBDLENBQUMsQ0FBQyxDQUFDLHNDQUFzQztBQUNoRzs7R0FFRztBQUNILHVCQUE2QixDQUFDO0FBQTlCLDhCQUE4QjtBQUc5QjtJQUNBLHFCQUFxQjtJQUNyQixTQUFTLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUN4QiwrQ0FBK0M7SUFDL0MsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDMUIsMEZBQTBGO0lBQzFGLFNBQVMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQzdCLENBQUM7QUFVRDs7R0FFRztBQXZCSDtJQTJCQTs7T0FFRztJQXpCRCxZQUFZLE1BQWtCO1FBSHhCLG1CQUFlLEdBQUUsS0FBTSxDQUFBO1FBOEIzQixJQTFCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7SUEyQnhCLENBQUM7SUFDSDs7T0FFRztJQTNCRCxXQUFXO1FBNkJULEVBQUUsQ0FBQyxDQTVCQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQSxDQUFFO1lBNkJ6QixJQTVCSSxDQUFDLGNBQWMsR0FBRSxJQUFLLENBQUM7WUE2QjNCLElBNUJJLENBQUMsT0FBTyxFQUFFLENBQUM7UUE2QmpCLENBNUJDO0lBNkJILENBNUJDO0NBQ0g7QUE4QkE7SUFDQSxzQkFBc0I7SUFDdEIsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQztJQUM1QywrQkFBK0I7SUFDL0Isa0JBQWtCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUNyQyxDQUFDO0FBRUQ7O0dBRUc7QUFyQ0g7SUF1Q0E7O09BRUc7SUF4Q0QsSUFBRyxHQUFJO1FBMENMLE1BekNNLENBQUEsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBMENwQixDQUFDO0lBQ0g7OztPQUdHO0lBM0NELEtBQUssQ0FBQyxPQUFlO1FBNkNuQixNQTVDTSxDQUFBLElBQUksT0FBUSxDQUFPLEdBQUcsSUFBRyxVQUFXLENBQUMsR0FBRyxFQUFDLE9BQVEsQ0FBQyxDQUFDLENBQUM7SUE2QzVELENBQUM7SUFDSDs7OztPQUlHO0lBL0NELFFBQVEsQ0FBQyxNQUFrQixFQUFDLE9BQWdCO1FBaUQxQyxNQUFNLDRCQWhERCxDQUFBLEVBQUcsR0FBRSxVQUFXLENBQUMsTUFBSyxNQUFPLEVBQUUsRUFBQyxPQUFRLENBQUMsQ0FBQztRQWlEL0MsTUFoRE0sQ0FBQSxJQUFJLGtCQUFtQixDQUFDLE1BQUssWUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFpRHhELENBaERDO0NBQ0g7QUFiQSw0Q0FhQSIsImZpbGUiOiJzY2hlZHVsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuL3N1YnNjcmlwdGlvbic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5zdWJzY3JpcHRpb25cIik7XG5nb29nLnJlcXVpcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuc3Vic2NyaXB0aW9uXCIpOyAvLyBmb3JjZSB0eXBlLW9ubHkgbW9kdWxlIHRvIGJlIGxvYWRlZFxuLyoqXG4gKiBAcmVjb3JkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTY2hlZHVsZXIoKSB7fVxuXG5cbmZ1bmN0aW9uIFNjaGVkdWxlcl90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5TY2hlZHVsZXIucHJvdG90eXBlLm5vdztcbi8qKiBAdHlwZSB7ZnVuY3Rpb24obnVtYmVyKTogIVByb21pc2U8dm9pZD59ICovXG5TY2hlZHVsZXIucHJvdG90eXBlLmRlbGF5O1xuLyoqIEB0eXBlIHtmdW5jdGlvbihmdW5jdGlvbigpOiB2b2lkLCBudW1iZXIpOiAhdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5TdWJzY3JpcHRpb259ICovXG5TY2hlZHVsZXIucHJvdG90eXBlLnNjaGVkdWxlO1xufVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU2NoZWR1bGVyIHtcbiAgcmVhZG9ubHkgbm93OiBudW1iZXI7XG4gIGRlbGF5KHRpbWU6IG51bWJlcik6IFByb21pc2U8dm9pZD47XG4gIHNjaGVkdWxlKFxuICAgIGFjdGlvbjogKCkgPT4gdm9pZCxcbiAgICBkdWVUaW1lOiBudW1iZXIpOiBTdWJzY3JpcHRpb247XG59XG4vKipcbiAqIEBpbXBsZW1lbnRzIHt0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLlN1YnNjcmlwdGlvbn1cbiAqL1xuY2xhc3MgQWN0aW9uU3Vic2NyaXB0aW9uIGltcGxlbWVudHMgU3Vic2NyaXB0aW9uIHtcbnB1YmxpYyBpc1Vuc3Vic2NyaWJlZCA9IGZhbHNlO1xucHJpdmF0ZSBfYWN0aW9uOiAoKSA9PiB2b2lkO1xuLyoqXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCk6IHZvaWR9IGFjdGlvblxuICovXG5jb25zdHJ1Y3RvcihhY3Rpb246ICgpID0+IHZvaWQpIHtcbiAgICB0aGlzLl9hY3Rpb24gPSBhY3Rpb247XG4gIH1cbi8qKlxuICogQHJldHVybiB7dm9pZH1cbiAqL1xudW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVW5zdWJzY3JpYmVkKSB7XG4gICAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2FjdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBBY3Rpb25TdWJzY3JpcHRpb25fdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cbkFjdGlvblN1YnNjcmlwdGlvbi5wcm90b3R5cGUuaXNVbnN1YnNjcmliZWQ7XG4vKiogQHR5cGUge2Z1bmN0aW9uKCk6IHZvaWR9ICovXG5BY3Rpb25TdWJzY3JpcHRpb24ucHJvdG90eXBlLl9hY3Rpb247XG59XG5cbi8qKlxuICogQGltcGxlbWVudHMge1NjaGVkdWxlcn1cbiAqL1xuZXhwb3J0IGNsYXNzIERlZmF1bHRTY2hlZHVsZXIgaW1wbGVtZW50cyBTY2hlZHVsZXIge1xuLyoqXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmdldCBub3coKSB7XG4gICAgcmV0dXJuIERhdGUubm93KCk7XG4gIH1cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGR1ZVRpbWVcbiAqIEByZXR1cm4geyFQcm9taXNlPHZvaWQ+fVxuICovXG5kZWxheShkdWVUaW1lOiBudW1iZXIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8dm9pZD4ocmVzID0+IHNldFRpbWVvdXQocmVzLCBkdWVUaW1lKSk7XG4gIH1cbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbigpOiB2b2lkfSBhY3Rpb25cbiAqIEBwYXJhbSB7bnVtYmVyfSBkdWVUaW1lXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5TdWJzY3JpcHRpb259XG4gKi9cbnNjaGVkdWxlKGFjdGlvbjogKCkgPT4gdm9pZCwgZHVlVGltZTogbnVtYmVyKTogU3Vic2NyaXB0aW9uIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFOb2RlSlMuVGltZXJ9ICovIGlkID0gc2V0VGltZW91dCgoKSA9PiBhY3Rpb24oKSwgZHVlVGltZSk7XG4gICAgcmV0dXJuIG5ldyBBY3Rpb25TdWJzY3JpcHRpb24oKCkgPT4gY2xlYXJUaW1lb3V0KGlkKSk7XG4gIH1cbn0iXX0=