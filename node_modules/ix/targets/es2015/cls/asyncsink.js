goog.module('targets.es2015.cls.asyncsink'); exports = {}; var module = {id: 'targets/es2015/cls/asyncsink.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

const /** @type {string} */ ARRAY_VALUE = 'value';
const /** @type {string} */ ARRAY_ERROR = 'error';
/**
 * @record
 * @template T
 */
function AsyncSinkItem() { }
function AsyncSinkItem_tsickle_Closure_declarations() {
    /** @type {string} */
    AsyncSinkItem.prototype.type;
    /** @type {T} */
    AsyncSinkItem.prototype.value;
    /** @type {?|undefined} */
    AsyncSinkItem.prototype.error;
}
/**
 * @record
 * @template T
 */
function AsyncResolver() { }
function AsyncResolver_tsickle_Closure_declarations() {
    /** @type {function((T|!PromiseLike<T>)): void} */
    AsyncResolver.prototype.resolve;
    /** @type {function(?): void} */
    AsyncResolver.prototype.reject;
}
/**
 * @template TSource
 * @implements {AsyncIterableIterator}
 */
class AsyncSink {
    constructor() {
        this._ended = false;
        this._values = [];
        this._resolvers = [];
    }
    /**
     * @return {AsyncSink}
     */
    [Symbol.asyncIterator]() {
        return this;
    }
    /**
     * @param {TSource} value
     * @return {void}
     */
    write(value) {
        this._push({ type: ARRAY_VALUE, value });
    }
    /**
     * @param {?} error
     * @return {void}
     */
    error(error) {
        this._push({ type: ARRAY_ERROR, error });
    }
    /**
     * @param {!AsyncSinkItem<TSource>} item
     * @return {void}
     */
    _push(item) {
        if (this._ended) {
            throw new Error('AsyncSink already ended');
        }
        if (this._resolvers.length > 0) {
            const { resolve, reject } = ((this._resolvers.shift()));
            if (item.type === ARRAY_ERROR) {
                reject(/** @type {?} */ ((item.error)));
            }
            else {
                resolve({ done: false, value: /** @type {TSource} */ ((item.value)) });
            }
        }
        else {
            this._values.push(item);
        }
    }
    /**
     * @return {!Promise<!IteratorResult<TSource>>}
     */
    next() {
        if (this._values.length > 0) {
            const { type, value, error } = ((this._values.shift()));
            if (type === ARRAY_ERROR) {
                return Promise.reject(error);
            }
            else {
                return Promise.resolve(/** @type {!IteratorResult<TSource>} */ ({ done: false, value }));
            }
        }
        if (this._ended) {
            return Promise.resolve(/** @type {!IteratorResult<TSource>} */ ({ done: true }));
        }
        return new Promise((resolve, reject) => {
            this._resolvers.push({ resolve, reject });
        });
    }
    /**
     * @return {void}
     */
    end() {
        while (this._resolvers.length > 0) {
            ((this._resolvers.shift())).resolve(/** @type {!IteratorResult<TSource>} */ ({ done: true }));
        }
        this._ended = true;
    }
}
exports.AsyncSink = AsyncSink;
function AsyncSink_tsickle_Closure_declarations() {
    /** @type {boolean} */
    AsyncSink.prototype._ended;
    /** @type {!Array<!AsyncSinkItem<TSource>>} */
    AsyncSink.prototype._values;
    /** @type {!Array<!AsyncResolver<!IteratorResult<TSource>>>} */
    AsyncSink.prototype._resolvers;
}
//# sourceMappingURL=data:application/json;base64,