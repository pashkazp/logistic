goog.module('targets.es2015.cls.asynciterable.race'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/race.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class RaceAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} left
     * @param {!AsyncIterable<TSource>} right
     */
    constructor(left, right) {
        super();
        this._left = left;
        this._right = right;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            const /** @type {!AsyncIterator<TSource>} */ leftIt = this._left[Symbol.asyncIterator](), /** @type {!AsyncIterator<TSource>} */ rightIt = this._right[Symbol.asyncIterator]();
            let /** @type {boolean} */ leftWins = false, /** @type {boolean} */ rightWins = false;
            const { value, done } = yield __await(Promise.race([
                leftIt.next().then(x => { leftWins = true; return x; }),
                rightIt.next().then(x => { rightWins = true; return x; }),
            ]));
            if (!done) {
                yield value;
            }
            let /** @type {!AsyncIterator<TSource>} */ resultIterator, /** @type {!AsyncIterator<TSource>} */ otherIterator;
            if (leftWins) {
                resultIterator = leftIt;
                otherIterator = rightIt;
            }
            else {
                resultIterator = rightIt;
                otherIterator = leftIt;
            }
            // Cancel/finish other iterator
            if (otherIterator.return) {
                yield __await(otherIterator.return());
            }
            let /** @type {?} */ next;
            while (!(next = yield __await(resultIterator.next())).done) {
                yield next.value;
            }
        });
    }
}
function RaceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    RaceAsyncIterable.prototype._left;
    /** @type {!AsyncIterable<TSource>} */
    RaceAsyncIterable.prototype._right;
}
/**
 * Propagates the async sequence that reacts first.
 * @template TSource
 * @param {!AsyncIterable<TSource>} left
 * @param {!AsyncIterable<TSource>} right
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function race(left, right) {
    return new RaceAsyncIterable(left, right);
}
exports.race = race;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JhY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBILHVCQUFnQyxTQUFRLDhCQUF3QjtJQVdoRTs7O09BR0c7SUFWRCxZQUFZLElBQTRCLEVBQUMsS0FBOEI7UUFZckUsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztRQVlsQixJQVhJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBYzNCLE1BQU0sc0NBYkQsQ0FBQSxNQUFPLEdBQUUsSUFBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsRUFBQSxzQ0FBQyxDQUFBLE9BQVEsR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBY2pHLElBQUksc0JBYkQsQ0FBQSxRQUFTLEdBQUUsS0FBTSxFQUFBLHNCQUFDLENBQUEsU0FBVSxHQUFFLEtBQU0sQ0FBQztZQWN4QyxNQWJLLEVBQUUsS0FBTSxFQUFDLElBQUssRUFBRSxHQUFFLGNBQU0sT0FBUSxDQUFDLElBQUksQ0FBQztnQkFjekMsTUFiTSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQUssUUFBUyxHQUFFLElBQUssQ0FBQyxDQUFBLE1BQU8sQ0FBQSxDQUFFLENBQUMsQ0FBQSxDQUFFLENBQUM7Z0JBY3ZELE9BYk8sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFLLFNBQVUsR0FBRSxJQUFLLENBQUMsQ0FBQSxNQUFPLENBQUEsQ0FBRSxDQUFDLENBQUEsQ0FBRSxDQUFDO2FBQzFELENBQUMsQ0FBQSxDQUFDO1lBZUgsRUFBRSxDQUFDLENBYkMsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFO2dCQWNWLE1BYkssS0FBTSxDQUFDO1lBY2QsQ0FiQztZQWVELElBQUksc0NBYkQsQ0FBQSxjQUF1QyxFQUFBLHNDQUFDLENBQUEsYUFBc0MsQ0FBQztZQWNsRixFQUFFLENBQUMsQ0FiQyxRQUFRLENBQUMsQ0FBQSxDQUFFO2dCQWNiLGNBYmMsR0FBRSxNQUFPLENBQUM7Z0JBY3hCLGFBYmEsR0FBRSxPQUFRLENBQUM7WUFjMUIsQ0FiQztZQUFBLElBQUssQ0FBQSxDQUFFO2dCQWNOLGNBYmMsR0FBRSxPQUFRLENBQUM7Z0JBY3pCLGFBYmEsR0FBRSxNQUFPLENBQUM7WUFjekIsQ0FiQztZQWVELCtCQUErQjtZQUMvQixFQUFFLENBQUMsQ0FiQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBRTtnQkFBQSxjQUFNLGFBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQSxDQUFDO1lBQUEsQ0FBRTtZQWUzRCxJQUFJLGdCQWJELENBQUEsSUFBSyxDQUFDO1lBY1QsT0FiTyxDQUFDLENBQUMsSUFBSSxHQUFFLGNBQU0sY0FBZSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBRTtnQkFjbEQsTUFiSyxJQUFLLENBQUMsS0FBSyxDQUFDO1lBY25CLENBYkM7UUFjSCxDQWJDO0tBQUE7Q0FDSDtBQWVBO0lBQ0Esc0NBQXNDO0lBQ3RDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDbEMsc0NBQXNDO0lBQ3RDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFDbkMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQXBCSCxjQXNCSSxJQXJCNEIsRUFzQjVCLEtBckI2QjtJQXNCL0IsTUFyQk0sQ0FBQSxJQUFJLGlCQUFrQixDQUFVLElBQUksRUFBQyxLQUFNLENBQUMsQ0FBQztBQXNCckQsQ0FyQkM7QUFKRCxvQkFJQyIsImZpbGUiOiJyYWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFJhY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3JpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBsZWZ0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSByaWdodFxuICovXG5jb25zdHJ1Y3RvcihsZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5fcmlnaHQgPSByaWdodDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBsZWZ0SXQgPSB0aGlzLl9sZWZ0W1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyByaWdodEl0ID0gdGhpcy5fcmlnaHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gbGVmdFdpbnMgPSBmYWxzZSwgLyoqIEB0eXBlIHtib29sZWFufSAqLyByaWdodFdpbnMgPSBmYWxzZTtcbiAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xuICAgICAgbGVmdEl0Lm5leHQoKS50aGVuKHggPT4geyBsZWZ0V2lucyA9IHRydWU7IHJldHVybiB4OyB9KSxcbiAgICAgIHJpZ2h0SXQubmV4dCgpLnRoZW4oeCA9PiB7IHJpZ2h0V2lucyA9IHRydWU7IHJldHVybiB4OyB9KSxcbiAgICBdKTtcblxuICAgIGlmICghZG9uZSkge1xuICAgICAgeWllbGQgdmFsdWU7XG4gICAgfVxuXG4gICAgbGV0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIHJlc3VsdEl0ZXJhdG9yOiBBc3luY0l0ZXJhdG9yPFRTb3VyY2U+LCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBvdGhlckl0ZXJhdG9yOiBBc3luY0l0ZXJhdG9yPFRTb3VyY2U+O1xuICAgIGlmIChsZWZ0V2lucykge1xuICAgICAgcmVzdWx0SXRlcmF0b3IgPSBsZWZ0SXQ7XG4gICAgICBvdGhlckl0ZXJhdG9yID0gcmlnaHRJdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0SXRlcmF0b3IgPSByaWdodEl0O1xuICAgICAgb3RoZXJJdGVyYXRvciA9IGxlZnRJdDtcbiAgICB9XG5cbiAgICAvLyBDYW5jZWwvZmluaXNoIG90aGVyIGl0ZXJhdG9yXG4gICAgaWYgKG90aGVySXRlcmF0b3IucmV0dXJuKSB7IGF3YWl0IG90aGVySXRlcmF0b3IucmV0dXJuKCk7IH1cblxuICAgIGxldCAvKiogQHR5cGUgez99ICovIG5leHQ7XG4gICAgd2hpbGUgKCEobmV4dCA9IGF3YWl0IHJlc3VsdEl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgeWllbGQgbmV4dC52YWx1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gUmFjZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5SYWNlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2xlZnQ7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuUmFjZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9yaWdodDtcbn1cblxuLyoqXG4gKiBQcm9wYWdhdGVzIHRoZSBhc3luYyBzZXF1ZW5jZSB0aGF0IHJlYWN0cyBmaXJzdC5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBsZWZ0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSByaWdodFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByYWNlPFRTb3VyY2U+KFxuICAgIGxlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgUmFjZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4obGVmdCwgcmlnaHQpO1xufVxuIl19