goog.module('targets.es2015.cls.asynciterable.orderby'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/orderby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var toarray_1 = goog.require('targets.es2015.cls.asynciterable.toarray');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.toarray");
var sorter_1 = goog.require('targets.es2015.cls.internal.sorter');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.sorter");
/**
 * @abstract
 * @template TSource
 */
class OrderedAsyncIterableBaseX extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            const /** @type {!Array<TSource>} */ array = yield __await(toarray_1.toArray(this._source));
            const /** @type {number} */ len = array.length;
            const /** @type {!Array<number>} */ indices = new Array(len);
            for (let /** @type {number} */ i = 0, /** @type {number} */ len = array.length; i < len; i++) {
                indices[i] = i;
            }
            indices.sort(this._getSorter(array));
            for (const /** @type {number} */ index of indices) {
                yield array[index];
            }
        });
    }
    /**
     * @template TKey
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number=} comparer
     * @return {!OrderedAsyncIterableBaseX}
     */
    thenBy(keySelector, comparer = sorter_1.sorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedAsyncIterableX(this._source, keySelector, comparer, false, this);
    }
    /**
     * @template TKey
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number=} comparer
     * @return {!OrderedAsyncIterableBaseX}
     */
    thenByDescending(keySelector, comparer = sorter_1.sorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedAsyncIterableX(this._source, keySelector, comparer, true, this);
    }
}
exports.OrderedAsyncIterableBaseX = OrderedAsyncIterableBaseX;
function OrderedAsyncIterableBaseX_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    OrderedAsyncIterableBaseX.prototype._source;
    /**
     * @abstract
     * @param {!Array<TSource>} elements
     * @param {function(number, number): number=} next
     * @return {function(number, number): number}
     */
    OrderedAsyncIterableBaseX.prototype._getSorter = function (elements, next) { };
}
/**
 * @template TKey, TSource
 */
class OrderedAsyncIterableX extends OrderedAsyncIterableBaseX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number} comparer
     * @param {boolean} descending
     * @param {!OrderedAsyncIterableBaseX<TSource>=} parent
     */
    constructor(source, keySelector, comparer, descending, parent) {
        super(source);
        this._keySelector = keySelector;
        this._comparer = comparer;
        this._descending = descending;
        this._parent = parent;
    }
    /**
     * @param {!Array<TSource>} elements
     * @param {function(number, number): number=} next
     * @return {function(number, number): number}
     */
    _getSorter(elements, next) {
        const /** @type {!Array<TKey>} */ keys = elements.map(this._keySelector);
        const /** @type {function(TKey, TKey): number} */ comparer = this._comparer;
        const /** @type {!OrderedAsyncIterableBaseX<TSource>} */ parent = this._parent;
        const /** @type {boolean} */ descending = this._descending;
        const /** @type {function(number, number): number} */ sorter = (x, y) => {
            const /** @type {number} */ result = comparer(keys[x], keys[y]);
            if (result === 0) {
                return next ? next(x, y) : x - y;
            }
            return descending ? -result : result;
        };
        return parent ? parent._getSorter(elements, sorter) : sorter;
    }
}
exports.OrderedAsyncIterableX = OrderedAsyncIterableX;
function OrderedAsyncIterableX_tsickle_Closure_declarations() {
    /** @type {function(TSource): TKey} */
    OrderedAsyncIterableX.prototype._keySelector;
    /** @type {function(TKey, TKey): number} */
    OrderedAsyncIterableX.prototype._comparer;
    /** @type {boolean} */
    OrderedAsyncIterableX.prototype._descending;
    /** @type {!OrderedAsyncIterableBaseX<TSource>} */
    OrderedAsyncIterableX.prototype._parent;
}
/**
 * @template TKey, TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedAsyncIterableX<TKey, TSource>}
 */
function orderBy(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source, keySelector, comparer, false);
}
exports.orderBy = orderBy;
/**
 * @template TKey, TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedAsyncIterableX<TKey, TSource>}
 */
function orderByDescending(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source, keySelector, comparer, true);
}
exports.orderByDescending = orderByDescending;
/**
 * @template TKey, TSource
 * @param {!OrderedAsyncIterableBaseX<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedAsyncIterableX<TKey, TSource>}
 */
function thenBy(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source._source, keySelector, comparer, false, source);
}
exports.thenBy = thenBy;
/**
 * @template TKey, TSource
 * @param {!OrderedAsyncIterableBaseX<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedAsyncIterableX<TKey, TSource>}
 */
function thenByDescending(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedAsyncIterableX(source._source, keySelector, comparer, true, source);
}
exports.thenByDescending = thenByDescending;
//# sourceMappingURL=data:application/json;base64,