goog.module('targets.es2015.cls.asynciterable.filter'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/filter.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.es2015.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource
 */
class FilterAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
     * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
     */
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {number} */ i = 0;
            try {
                for (var /** @type {!AsyncIterable<TSource>} */ _a = __asyncValues(/** @type {!AsyncIterable<TSource>} */ ((this._source))), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ item = yield __await(_b.value);
                    if (yield __await(this._predicate(item, i++))) {
                        yield item;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function FilterAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} */
    FilterAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (boolean|!Promise<boolean>)} */
    FilterAsyncIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {(!Iterable<(TSource|!PromiseLike<TSource>)>|!AsyncIterable<TSource>)} source
 * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function filter(source, predicate, thisArg) {
    return new FilterAsyncIterable(source, bindcallback_1.bindCallback(predicate, thisArg, 2));
}
exports.filter = filter;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ZpbHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwyREFOcUI7QUFPckIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7O0dBRUc7QUFSSCx5QkFBa0MsU0FBUSw4QkFBd0I7SUFZbEU7OztPQUdHO0lBWEQsWUFhRSxNQVp5RSxFQWF6RSxTQVp3RTtRQWF4RSxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDO0lBYTlCLENBQUM7SUFDSDs7T0FFRztJQWJNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFlM0IsSUFBSSxxQkFkRCxDQUFBLENBQUUsR0FBRSxDQUFFLENBQUM7O2dCQWVWLEdBZEcsQ0FBQSxDQUFnQixJQUFBLHNDQUFBLENBQUEsS0FBQSxjQUFBLHNDQUFBLENBQUEsQ0FBNEIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFBLENBQUMsQ0FBQSxJQUFBO29CQUFsRCxJQUFBLHNCQUFHLENBQUEsSUFBSywwQkFBQSxDQUFBO29CQWVqQixFQUFFLENBQUMsQ0FkQyxjQUFLLElBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUU7d0JBZXJDLE1BZEssSUFBSyxDQUFDO29CQWViLENBZEM7aUJBQ0Y7Ozs7Ozs7Ozs7UUFlSCxDQWRDO0tBQUE7Q0FDSDtBQWdCQTtJQUNBLG1GQUFtRjtJQUNuRixtQkFBbUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3RDLHFFQUFxRTtJQUNyRSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBQ3pDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUEzQkgsZ0JBNkJJLE1BNUJ5RSxFQTZCekUsU0E1QndFLEVBNkJ4RSxPQTVCYTtJQTZCZixNQTVCTSxDQUFBLElBQUksbUJBQW9CLENBQVUsTUFBTSxFQUFDLDJCQUFhLENBQUMsU0FBUyxFQUFDLE9BQVEsRUFBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBNkJ2RixDQTVCQztBQUxELHdCQUtDIiwiZmlsZSI6ImZpbHRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmJpbmRjYWxsYmFja1wiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgRmlsdGVyQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZSB8IFByb21pc2VMaWtlPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9wcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gUHJvbWlzZTxib29sZWFuPiB8IGJvb2xlYW47XG4vKipcbiAqIEBwYXJhbSB7KCFJdGVyYWJsZTwoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pPnwhQXN5bmNJdGVyYWJsZTxUU291cmNlPil9IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IHByZWRpY2F0ZVxuICovXG5jb25zdHJ1Y3RvcihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3ByZWRpY2F0ZSA9IHByZWRpY2F0ZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLygoIDxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pih0aGlzLl9zb3VyY2UpKSkpIHtcbiAgICAgIGlmIChhd2FpdCB0aGlzLl9wcmVkaWNhdGUoaXRlbSwgaSsrKSkge1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBGaWx0ZXJBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyghSXRlcmFibGU8KFRTb3VyY2V8IVByb21pc2VMaWtlPFRTb3VyY2U+KT58IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4pfSAqL1xuRmlsdGVyQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuRmlsdGVyQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3ByZWRpY2F0ZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHsoIUl0ZXJhYmxlPChUU291cmNlfCFQcm9taXNlTGlrZTxUU291cmNlPik+fCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KX0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gcHJlZGljYXRlXG4gKiBAcGFyYW0gez89fSB0aGlzQXJnXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlcjxUU291cmNlPihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPj4gfCBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBQcm9taXNlPGJvb2xlYW4+IHwgYm9vbGVhbixcbiAgICB0aGlzQXJnPzogYW55KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEZpbHRlckFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBiaW5kQ2FsbGJhY2socHJlZGljYXRlLCB0aGlzQXJnLCAyKSk7XG59XG4iXX0=