goog.module('targets.es2015.cls.asynciterable.onerrorresumenext'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/onerrorresumenext.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class OnErrorResumeNextAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!Iterable<!AsyncIterable<TSource>>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            for (let /** @type {!AsyncIterable<TSource>} */ item of this._source) {
                let /** @type {!AsyncIterator<TSource>} */ it = item[Symbol.asyncIterator]();
                while (1) {
                    let /** @type {?} */ next;
                    try {
                        next = yield __await(it.next());
                    }
                    catch (e) {
                        break;
                    }
                    if (next.done) {
                        break;
                    }
                    yield next.value;
                }
            }
        });
    }
}
function OnErrorResumeNextAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!AsyncIterable<TSource>>} */
    OnErrorResumeNextAsyncIterable.prototype._source;
}
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {...!AsyncIterable<T>} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function onErrorResumeNext(source, ...args) {
    return new OnErrorResumeNextAsyncIterable([source, ...args]);
}
exports.onErrorResumeNext = onErrorResumeNext;
/**
 * @template T
 * @param {...!AsyncIterable<T>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function onErrorResumeNextStatic(...source) {
    return new OnErrorResumeNextAsyncIterable(source);
}
exports.onErrorResumeNextStatic = onErrorResumeNextStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL29uZXJyb3JyZXN1bWVuZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCxvQ0FBNkMsU0FBUSw4QkFBd0I7SUFVN0U7O09BRUc7SUFURCxZQUFZLE1BQXdDO1FBV2xELEtBVkssRUFBRSxDQUFDO1FBV1IsSUFWSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7SUFXeEIsQ0FBQztJQUNIOztPQUVHO0lBWE0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWEzQixHQUFHLENBQUMsQ0FaQyxJQUFBLHNDQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO2dCQWE5QixJQUFJLHNDQVpELENBQUEsRUFBRyxHQUFFLElBQUssQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztnQkFhdEMsT0FaTyxDQUFDLEVBQUMsQ0FBRTtvQkFhVCxJQUFJLGdCQVpELENBQUEsSUFBSyxDQUFDO29CQWFULElBWkcsQ0FBRTt3QkFhSCxJQVpJLEdBQUUsY0FBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQztvQkFhekIsQ0FaQztvQkFBQSxLQUFBLENBQUEsQ0FBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO3dCQWFYLEtBQUssQ0FaQztvQkFhUixDQVpDO29CQWNELEVBQUUsQ0FBQyxDQVpDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFO3dCQUFBLEtBQUEsQ0FBTztvQkFBQSxDQUFFO29CQWF6QixNQVpLLElBQUssQ0FBQyxLQUFLLENBQUM7Z0JBYW5CLENBWkM7WUFhSCxDQVpDO1FBYUgsQ0FaQztLQUFBO0NBQ0g7QUFjQTtJQUNBLGlEQUFpRDtJQUNqRCw4QkFBOEIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ2pELENBQUM7QUFFRDs7Ozs7R0FLRztBQXRCSCwyQkFBcUMsTUFBd0IsRUFBQyxHQUFJLElBQXdCO0lBd0J4RixNQXZCTSxDQUFBLElBQUksOEJBQStCLENBQUksQ0FBQyxNQUFNLEVBQUMsR0FBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBd0JsRSxDQUFDO0FBekJELDhDQXlCQztBQUNEOzs7O0dBSUc7QUExQkgsaUNBQTJDLEdBQUcsTUFBMEI7SUE0QnRFLE1BM0JNLENBQUEsSUFBSSw4QkFBK0IsQ0FBSSxNQUFNLENBQUMsQ0FBQztBQTRCdkQsQ0EzQkM7QUFGRCwwREFFQyIsImZpbGUiOiJvbmVycm9ycmVzdW1lbmV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBPbkVycm9yUmVzdW1lTmV4dEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IGl0ZW1bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG5leHQgPSBhd2FpdCBpdC5uZXh0KCk7XG4gICAgICAgIH0gY2F0Y2ggKCAvKiogQHR5cGUgez99ICovZSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQuZG9uZSkgeyBicmVhazsgfVxuICAgICAgICB5aWVsZCBuZXh0LnZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBPbkVycm9yUmVzdW1lTmV4dEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pn0gKi9cbk9uRXJyb3JSZXN1bWVOZXh0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0gey4uLiFBc3luY0l0ZXJhYmxlPFQ+fSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG9uRXJyb3JSZXN1bWVOZXh0PFQ+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPiwgLi4uYXJnczogQXN5bmNJdGVyYWJsZTxUPltdKTogQXN5bmNJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IE9uRXJyb3JSZXN1bWVOZXh0QXN5bmNJdGVyYWJsZTxUPihbc291cmNlLCAuLi5hcmdzXSk7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0gey4uLiFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gb25FcnJvclJlc3VtZU5leHRTdGF0aWM8VD4oLi4uc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+W10pOiBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgT25FcnJvclJlc3VtZU5leHRBc3luY0l0ZXJhYmxlPFQ+KHNvdXJjZSk7XG59XG4iXX0=