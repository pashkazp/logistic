goog.module('targets.es2015.cls.asynciterable.except'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/except.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var arrayindexof_1 = goog.require('targets.es2015.cls.internal.arrayindexof');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource
 */
class ExceptAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} first
     * @param {!AsyncIterable<TSource>} second
     * @param {function(TSource, TSource): (boolean|!Promise<boolean>)} comparer
     */
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!Array<?>} */ map = [];
            try {
                for (var _a = __asyncValues(this._second), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ secondItem = yield __await(_b.value);
                    map.push(secondItem);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _d = __asyncValues(this._first), _e; _e = yield __await(_d.next()), !_e.done;) {
                    let /** @type {TSource} */ firstItem = yield __await(_e.value);
                    if ((yield __await(arrayindexof_1.arrayIndexOfAsync(map, firstItem, this._comparer))) === -1) {
                        map.push(firstItem);
                        yield firstItem;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_f = _d.return)) yield __await(_f.call(_d));
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_1, _c, e_2, _f;
        });
    }
}
function ExceptAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ExceptAsyncIterable.prototype._first;
    /** @type {!AsyncIterable<TSource>} */
    ExceptAsyncIterable.prototype._second;
    /** @type {function(TSource, TSource): (boolean|!Promise<boolean>)} */
    ExceptAsyncIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} first
 * @param {!AsyncIterable<TSource>} second
 * @param {function(TSource, TSource): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function except(first, second, comparer = comparer_1.comparerAsync) {
    return new ExceptAsyncIterable(first, second, comparer);
}
exports.except = except;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2V4Y2VwdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwyREFOMEI7QUFPMUIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBUDdDO0FBUTdELG1EQVBzQjtBQVF0QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7R0FFRztBQVRILHlCQUFrQyxTQUFRLDhCQUF3QjtJQWNsRTs7OztPQUlHO0lBYkQsWUFlSSxLQWQ2QixFQWU3QixNQWQ4QixFQWU5QixRQWRnRTtRQWVsRSxLQWRLLEVBQUUsQ0FBQztRQWVSLElBZEksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBZXBCLElBZEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBZXRCLElBZEksQ0FBQyxTQUFTLEdBQUUsUUFBUyxDQUFDO0lBZTVCLENBQUM7SUFDSDs7T0FFRztJQWZNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFpQjNCLElBQUksd0JBaEJELENBQUEsR0FBSSxHQUFFLEVBQUcsQ0FBQzs7Z0JBaUJiLEdBaEJHLENBQUEsQ0FBeUIsSUFBQSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUE5QixJQUFBLHNCQUFHLENBQUEsVUFBVywwQkFBQSxDQUFBO29CQWlCdkIsR0FoQkcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ3RCOzs7Ozs7Ozs7O2dCQWtCRCxHQWhCRyxDQUFBLENBQXdCLElBQUEsS0FBQSxjQUFBLElBQUssQ0FBQyxNQUFNLENBQUEsSUFBQTtvQkFBNUIsSUFBQSxzQkFBRyxDQUFBLFNBQVUsMEJBQUEsQ0FBQTtvQkFpQnRCLEVBQUUsQ0FBQyxDQWhCQyxDQUFBLGNBQUssZ0NBQWtCLENBQUMsR0FBRyxFQUFDLFNBQVUsRUFBQyxJQUFLLENBQUMsU0FBUyxDQUFDLENBQUEsTUFBSSxDQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBaUJuRSxHQWhCRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFpQnBCLE1BaEJLLFNBQVUsQ0FBQztvQkFpQmxCLENBaEJDO2lCQUNGOzs7Ozs7Ozs7O1FBaUJILENBaEJDO0tBQUE7Q0FDSDtBQWtCQTtJQUNBLHNDQUFzQztJQUN0QyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ3JDLHNDQUFzQztJQUN0QyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3RDLHNFQUFzRTtJQUN0RSxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ3hDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUEvQkgsZ0JBaUNJLEtBaEM2QixFQWlDN0IsTUFoQzhCLEVBaUM5QixXQWhDa0Usd0JBQWM7SUFpQ2xGLE1BaENNLENBQUEsSUFBSSxtQkFBb0IsQ0FBVSxLQUFLLEVBQUMsTUFBTyxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBaUNuRSxDQWhDQztBQUxELHdCQUtDIiwiZmlsZSI6ImV4Y2VwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYXJyYXlpbmRleG9mXCIpO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBFeGNlcHRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9zZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBmaXJzdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbXBhcmVyXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBzZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9maXJzdCA9IGZpcnN0O1xuICAgIHRoaXMuX3NlY29uZCA9IHNlY29uZDtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gbWFwID0gW107XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBzZWNvbmRJdGVtIG9mIHRoaXMuX3NlY29uZCkge1xuICAgICAgbWFwLnB1c2goc2Vjb25kSXRlbSk7XG4gICAgfVxuXG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBmaXJzdEl0ZW0gb2YgdGhpcy5fZmlyc3QpIHtcbiAgICAgIGlmIChhd2FpdCBhcnJheUluZGV4T2ZBc3luYyhtYXAsIGZpcnN0SXRlbSwgdGhpcy5fY29tcGFyZXIpID09PSAtMSkge1xuICAgICAgICBtYXAucHVzaChmaXJzdEl0ZW0pO1xuICAgICAgICB5aWVsZCBmaXJzdEl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIEV4Y2VwdEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeGNlcHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZmlyc3Q7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRXhjZXB0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NlY29uZDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cbkV4Y2VwdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb21wYXJlcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gZmlyc3RcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNlY29uZFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXhjZXB0PFRTb3VyY2U+KFxuICAgIGZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+ID0gY29tcGFyZXJBc3luYyk6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeGNlcHRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==