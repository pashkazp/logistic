goog.module('targets.es2015.cls.asynciterable.distinctuntilchanged'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/distinctuntilchanged.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource, TKey
 */
class DistinctUntilChangedAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TKey, TKey): (boolean|!Promise<boolean>)} comparer
     */
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {TKey} */ currentKey, /** @type {boolean} */ hasCurrentKey = false;
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ item = yield __await(_b.value);
                    let /** @type {TKey} */ key = yield __await(this._keySelector(item));
                    let /** @type {boolean} */ comparerEquals = false;
                    if (hasCurrentKey) {
                        comparerEquals = yield __await(this._comparer(/** @type {TKey} */ ((currentKey)), key));
                    }
                    if (!hasCurrentKey || !comparerEquals) {
                        hasCurrentKey = true;
                        currentKey = key;
                        yield item;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function DistinctUntilChangedAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    DistinctUntilChangedAsyncIterable.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    DistinctUntilChangedAsyncIterable.prototype._keySelector;
    /** @type {function(TKey, TKey): (boolean|!Promise<boolean>)} */
    DistinctUntilChangedAsyncIterable.prototype._comparer;
}
/**
 * @template TSource, TKey
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)=} keySelector
 * @param {function(TKey, TKey): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function distinctUntilChanged(source, keySelector = identity_1.identityAsync, comparer = comparer_1.comparerAsync) {
    return new DistinctUntilChangedAsyncIterable(source, keySelector, comparer);
}
exports.distinctUntilChanged = distinctUntilChanged;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2Rpc3RpbmN0dW50aWxjaGFuZ2VkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELG1EQU5zQjtBQU90QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FQakQ7QUFRckQsbURBUHNCO0FBUXRCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQ3ZHOztHQUVHO0FBVEgsdUNBQXNELFNBQVEsOEJBQXdCO0lBY3RGOzs7O09BSUc7SUFiRCxZQWVJLE1BZDhCLEVBZTlCLFdBZHFELEVBZXJELFFBZG1FO1FBZXJFLEtBZEssRUFBRSxDQUFDO1FBZVIsSUFkSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFldEIsSUFkSSxDQUFDLFlBQVksR0FBRSxXQUFZLENBQUM7UUFlaEMsSUFkSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFlNUIsQ0FBQztJQUNIOztPQUVHO0lBZk0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWlCM0IsSUFBSSxtQkFoQkQsQ0FBQSxVQUE2QixFQUFBLHNCQUFDLENBQUEsYUFBYyxHQUFFLEtBQU0sQ0FBQzs7Z0JBaUJ4RCxHQWhCRyxDQUFBLENBQW1CLElBQUEsS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUEsSUFBQTtvQkFBeEIsSUFBQSxzQkFBRyxDQUFBLElBQUssMEJBQUEsQ0FBQTtvQkFpQmpCLElBQUksbUJBaEJELENBQUEsR0FBSSxHQUFFLGNBQU0sSUFBSyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDO29CQWlCeEMsSUFBSSxzQkFoQkQsQ0FBQSxjQUFlLEdBQUUsS0FBTSxDQUFDO29CQWlCM0IsRUFBRSxDQUFDLENBaEJDLGFBQWEsQ0FBQyxDQUFBLENBQUU7d0JBQUEsY0FBZSxHQUFFLGNBQU0sSUFBSyxDQUFDLFNBQVMsQ0FBQSxtQkFBQSxDQUFBLENBQUEsQ0FBQyxVQUFBLENBQUEsQ0FBVyxFQUFDLEdBQUksQ0FBQyxDQUFBLENBQUM7b0JBQUEsQ0FBRTtvQkFpQi9FLEVBQUUsQ0FBQyxDQWhCQyxDQUFDLGFBQWEsSUFBRyxDQUFFLGNBQWMsQ0FBQyxDQUFBLENBQUU7d0JBaUJ0QyxhQWhCYSxHQUFFLElBQUssQ0FBQzt3QkFpQnJCLFVBaEJVLEdBQUUsR0FBSSxDQUFDO3dCQWlCakIsTUFoQkssSUFBSyxDQUFDO29CQWlCYixDQWhCQztpQkFDRjs7Ozs7Ozs7OztRQWlCSCxDQWhCQztLQUFBO0NBQ0g7QUFrQkE7SUFDQSxzQ0FBc0M7SUFDdEMsaUNBQWlDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNwRCx1REFBdUQ7SUFDdkQsaUNBQWlDLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUN6RCxnRUFBZ0U7SUFDaEUsaUNBQWlDLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUN0RCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBL0JILDhCQWlDSSxNQWhDOEIsRUFpQzlCLGNBaEN1RCx3QkFBYyxFQWlDckUsV0FoQ3FFLHdCQUFjO0lBaUNyRixNQWhDTSxDQUFBLElBQUksaUNBQWtDLENBQWdCLE1BQU0sRUFBQyxXQUFZLEVBQUMsUUFBUyxDQUFDLENBQUM7QUFpQzdGLENBaENDO0FBTEQsb0RBS0MiLCJmaWxlIjoiZGlzdGluY3R1bnRpbGNoYW5nZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGlkZW50aXR5QXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcbmltcG9ydCB7IGNvbXBhcmVyQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXlcbiAqL1xuY2xhc3MgRGlzdGluY3RVbnRpbENoYW5nZWRBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfa2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT47XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IChUS2V5fCFQcm9taXNlPFRLZXk+KX0ga2V5U2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29tcGFyZXJcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICAgIGNvbXBhcmVyOiAoZmlyc3Q6IFRLZXksIHNlY29uZDogVEtleSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7VEtleX0gKi8gY3VycmVudEtleTogVEtleSB8IHVuZGVmaW5lZCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNDdXJyZW50S2V5ID0gZmFsc2U7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7VEtleX0gKi8ga2V5ID0gYXdhaXQgdGhpcy5fa2V5U2VsZWN0b3IoaXRlbSk7XG4gICAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBjb21wYXJlckVxdWFscyA9IGZhbHNlO1xuICAgICAgaWYgKGhhc0N1cnJlbnRLZXkpIHsgY29tcGFyZXJFcXVhbHMgPSBhd2FpdCB0aGlzLl9jb21wYXJlciggLyoqIEB0eXBlIHtUS2V5fSAqLygoY3VycmVudEtleSkpLCBrZXkpOyB9XG4gICAgICBpZiAoIWhhc0N1cnJlbnRLZXkgfHwgIWNvbXBhcmVyRXF1YWxzKSB7XG4gICAgICAgIGhhc0N1cnJlbnRLZXkgPSB0cnVlO1xuICAgICAgICBjdXJyZW50S2V5ID0ga2V5O1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBEaXN0aW5jdFVudGlsQ2hhbmdlZEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5EaXN0aW5jdFVudGlsQ2hhbmdlZEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9ICovXG5EaXN0aW5jdFVudGlsQ2hhbmdlZEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9rZXlTZWxlY3Rvcjtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cbkRpc3RpbmN0VW50aWxDaGFuZ2VkQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IChUS2V5fCFQcm9taXNlPFRLZXk+KT19IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPik9fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXN0aW5jdFVudGlsQ2hhbmdlZDxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4gPSBpZGVudGl0eUFzeW5jLFxuICAgIGNvbXBhcmVyOiAoZmlyc3Q6IFRLZXksIHNlY29uZDogVEtleSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4gPSBjb21wYXJlckFzeW5jKTogIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEaXN0aW5jdFVudGlsQ2hhbmdlZEFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVEtleT4oc291cmNlLCBrZXlTZWxlY3RvciwgY29tcGFyZXIpO1xufVxuIl19