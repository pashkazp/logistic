goog.module('targets.es2015.cls.asynciterable.distinct'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/distinct.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var arrayindexof_1 = goog.require('targets.es2015.cls.internal.arrayindexof');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource, TKey
 */
class DistinctAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TKey, TKey): (boolean|!Promise<boolean>)} comparer
     */
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!Array<?>} */ set = [];
            try {
                for (var /** @type {!AsyncIterable<TSource>} */ _a = __asyncValues(/** @type {!AsyncIterable<TSource>} */ ((this._source))), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ item = yield __await(_b.value);
                    let /** @type {TKey} */ key = yield __await(this._keySelector(item));
                    if ((yield __await(arrayindexof_1.arrayIndexOfAsync(set, key, this._comparer))) === -1) {
                        set.push(key);
                        yield item;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function DistinctAsyncIterable_tsickle_Closure_declarations() {
    /** @type {(!AsyncIterable<TSource>|!Iterable<(TSource|!PromiseLike<TSource>)>)} */
    DistinctAsyncIterable.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    DistinctAsyncIterable.prototype._keySelector;
    /** @type {function(TKey, TKey): (boolean|!Promise<boolean>)} */
    DistinctAsyncIterable.prototype._comparer;
}
/**
 * @template TSource, TKey
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)=} keySelector
 * @param {function(TKey, TKey): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function distinct(source, keySelector = identity_1.identityAsync, comparer = comparer_1.comparerAsync) {
    return new DistinctAsyncIterable(source, keySelector, comparer);
}
exports.distinct = distinct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2Rpc3RpbmN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELG1EQU5zQjtBQU90QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FQakQ7QUFRckQsMkRBUDBCO0FBUTFCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQVI3QztBQVM3RCxtREFSc0I7QUFTdEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFWSCwyQkFBMEMsU0FBUSw4QkFBd0I7SUFlMUU7Ozs7T0FJRztJQWRELFlBZ0JJLE1BZjhCLEVBZ0I5QixXQWZxRCxFQWdCckQsUUFmMEQ7UUFnQjVELEtBZkssRUFBRSxDQUFDO1FBZ0JSLElBZkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBZ0J0QixJQWZJLENBQUMsWUFBWSxHQUFFLFdBQVksQ0FBQztRQWdCaEMsSUFmSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFnQjVCLENBQUM7SUFDSDs7T0FFRztJQWhCTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBa0IzQixJQUFJLHdCQWpCRCxDQUFBLEdBQUksR0FBRSxFQUFHLENBQUM7O2dCQW1CYixHQWpCRyxDQUFBLENBQWdCLElBQUEsc0NBQUEsQ0FBQSxLQUFBLGNBQUEsc0NBQUEsQ0FBQSxDQUE0QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUEsQ0FBQyxDQUFBLElBQUE7b0JBQWxELElBQUEsc0JBQUcsQ0FBQSxJQUFLLDBCQUFBLENBQUE7b0JBa0JqQixJQUFJLG1CQWpCRCxDQUFBLEdBQUksR0FBRSxjQUFNLElBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQztvQkFrQnhDLEVBQUUsQ0FBQyxDQWpCQyxDQUFBLGNBQUssZ0NBQWtCLENBQUMsR0FBRyxFQUFDLEdBQUksRUFBQyxJQUFLLENBQUMsU0FBUyxDQUFDLENBQUEsTUFBSSxDQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBa0I3RCxHQWpCRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFrQmQsTUFqQkssSUFBSyxDQUFDO29CQWtCYixDQWpCQztpQkFDRjs7Ozs7Ozs7OztRQWtCSCxDQWpCQztLQUFBO0NBQ0g7QUFtQkE7SUFDQSxtRkFBbUY7SUFDbkYscUJBQXFCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN4Qyx1REFBdUQ7SUFDdkQscUJBQXFCLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUM3QyxnRUFBZ0U7SUFDaEUscUJBQXFCLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztBQUMxQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBaENILGtCQWtDSSxNQWpDOEIsRUFrQzlCLGNBakN1RCx3QkFBYyxFQWtDckUsV0FqQzRELHdCQUFjO0lBa0M1RSxNQWpDTSxDQUFBLElBQUkscUJBQXNCLENBQWdCLE1BQU0sRUFBQyxXQUFZLEVBQUMsUUFBUyxDQUFDLENBQUM7QUFrQ2pGLENBakNDO0FBTEQsNEJBS0MiLCJmaWxlIjoiZGlzdGluY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGlkZW50aXR5QXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcbmltcG9ydCB7IGFycmF5SW5kZXhPZkFzeW5jIH0gZnJvbSAnLi4vaW50ZXJuYWwvYXJyYXlpbmRleG9mJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmFycmF5aW5kZXhvZlwiKTtcbmltcG9ydCB7IGNvbXBhcmVyQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV80ID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXlcbiAqL1xuY2xhc3MgRGlzdGluY3RBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2UgPFRTb3VyY2U+PiB8IEFzeW5jSXRlcmFibGUgPFRTb3VyY2U+O1xucHJpdmF0ZSBfa2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT47XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IChUS2V5fCFQcm9taXNlPFRLZXk+KX0ga2V5U2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29tcGFyZXJcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICAgIGNvbXBhcmVyOiAoeDogVEtleSwgeTogVEtleSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2NvbXBhcmVyID0gY29tcGFyZXI7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFycmF5PD8+fSAqLyBzZXQgPSBbXTtcblxuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLygoIDxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pih0aGlzLl9zb3VyY2UpKSkpIHtcbiAgICAgIGxldCAvKiogQHR5cGUge1RLZXl9ICovIGtleSA9IGF3YWl0IHRoaXMuX2tleVNlbGVjdG9yKGl0ZW0pO1xuICAgICAgaWYgKGF3YWl0IGFycmF5SW5kZXhPZkFzeW5jKHNldCwga2V5LCB0aGlzLl9jb21wYXJlcikgPT09IC0xKSB7XG4gICAgICAgIHNldC5wdXNoKGtleSk7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIERpc3RpbmN0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHsoIUFzeW5jSXRlcmFibGU8VFNvdXJjZT58IUl0ZXJhYmxlPChUU291cmNlfCFQcm9taXNlTGlrZTxUU291cmNlPik+KX0gKi9cbkRpc3RpbmN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IChUS2V5fCFQcm9taXNlPFRLZXk+KX0gKi9cbkRpc3RpbmN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2tleVNlbGVjdG9yO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuRGlzdGluY3RBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fY29tcGFyZXI7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXlcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pPX0ga2V5U2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KT19IGNvbXBhcmVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PiA9IGlkZW50aXR5QXN5bmMsXG4gICAgY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiA9IGNvbXBhcmVyQXN5bmMpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGlzdGluY3RBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+KHNvdXJjZSwga2V5U2VsZWN0b3IsIGNvbXBhcmVyKTtcbn1cbiJdfQ==