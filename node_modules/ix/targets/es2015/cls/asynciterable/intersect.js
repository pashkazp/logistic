goog.module('targets.es2015.cls.asynciterable.intersect'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/intersect.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var arrayindexof_1 = goog.require('targets.es2015.cls.internal.arrayindexof');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!Array<T>} array
 * @param {T} item
 * @param {function(T, T): (boolean|!Promise<boolean>)} comparer
 * @return {!Promise<boolean>}
 */
function arrayRemove(array, item, comparer) {
    return __awaiter(this, void 0, void 0, function* () {
        let /** @type {number} */ idx = yield arrayindexof_1.arrayIndexOfAsync(array, item, comparer);
        if (idx === -1) {
            return false;
        }
        array.splice(idx, 1);
        return true;
    });
}
/**
 * @template TSource
 */
class IntersectAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} first
     * @param {!AsyncIterable<TSource>} second
     * @param {function(TSource, TSource): (boolean|!Promise<boolean>)} comparer
     */
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!Array<?>} */ map = [];
            try {
                for (var _a = __asyncValues(this._second), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ secondItem = yield __await(_b.value);
                    map.push(secondItem);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _d = __asyncValues(this._first), _e; _e = yield __await(_d.next()), !_e.done;) {
                    let /** @type {TSource} */ firstItem = yield __await(_e.value);
                    if (yield __await(arrayRemove(map, firstItem, this._comparer))) {
                        yield firstItem;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_f = _d.return)) yield __await(_f.call(_d));
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_1, _c, e_2, _f;
        });
    }
}
function IntersectAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    IntersectAsyncIterable.prototype._first;
    /** @type {!AsyncIterable<TSource>} */
    IntersectAsyncIterable.prototype._second;
    /** @type {function(TSource, TSource): (boolean|!Promise<boolean>)} */
    IntersectAsyncIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} first
 * @param {!AsyncIterable<TSource>} second
 * @param {function(TSource, TSource): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function intersect(first, second, comparer = comparer_1.comparerAsync) {
    return new IntersectAsyncIterable(first, second, comparer);
}
exports.intersect = intersect;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ludGVyc2VjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwyREFOMEI7QUFPMUIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBUDdDO0FBUTdELG1EQVBzQjtBQVF0QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7Ozs7O0dBTUc7QUFiSCxxQkFlSSxLQWRVLEVBQUMsSUFBUSxFQWVuQixRQWRvRDs7UUFldEQsSUFBSSxxQkFkRCxDQUFBLEdBQUksR0FBRSxNQUFNLGdDQUFrQixDQUFDLEtBQUssRUFBQyxJQUFLLEVBQUMsUUFBUyxDQUFDLENBQUM7UUFlekQsRUFBRSxDQUFDLENBZEMsR0FBRyxLQUFJLENBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtZQUFBLE1BQU8sQ0FBQSxLQUFNLENBQUM7UUFBQSxDQUFFO1FBZWpDLEtBZEssQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFDLENBQUUsQ0FBQyxDQUFDO1FBZXJCLE1BZE0sQ0FBQSxJQUFLLENBQUM7SUFlZCxDQUFDO0NBQUE7QUFDRDs7R0FFRztBQWZILDRCQUFxQyxTQUFRLDhCQUF3QjtJQW9CckU7Ozs7T0FJRztJQW5CRCxZQXFCRSxLQXBCNkIsRUFxQjdCLE1BcEI4QixFQXFCOUIsUUFwQmdFO1FBcUJoRSxLQXBCSyxFQUFFLENBQUM7UUFxQlIsSUFwQkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBcUJwQixJQXBCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFxQnRCLElBcEJJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQztJQXFCNUIsQ0FBQztJQUNIOztPQUVHO0lBckJNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUF1QjNCLElBQUksd0JBdEJELENBQUEsR0FBSSxHQUFFLEVBQUcsQ0FBQzs7Z0JBdUJiLEdBdEJHLENBQUEsQ0FBeUIsSUFBQSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUE5QixJQUFBLHNCQUFHLENBQUEsVUFBVywwQkFBQSxDQUFBO29CQXVCdkIsR0F0QkcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7aUJBQ3RCOzs7Ozs7Ozs7O2dCQXdCRCxHQXRCRyxDQUFBLENBQXdCLElBQUEsS0FBQSxjQUFBLElBQUssQ0FBQyxNQUFNLENBQUEsSUFBQTtvQkFBNUIsSUFBQSxzQkFBRyxDQUFBLFNBQVUsMEJBQUEsQ0FBQTtvQkF1QnRCLEVBQUUsQ0FBQyxDQXRCQyxjQUFLLFdBQVksQ0FBQyxHQUFHLEVBQUMsU0FBVSxFQUFDLElBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQSxDQUFDLENBQUEsQ0FBRTt3QkF1QnRELE1BdEJLLFNBQVUsQ0FBQztvQkF1QmxCLENBdEJDO2lCQUNGOzs7Ozs7Ozs7O1FBdUJILENBdEJDO0tBQUE7Q0FDSDtBQXdCQTtJQUNBLHNDQUFzQztJQUN0QyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ3hDLHNDQUFzQztJQUN0QyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3pDLHNFQUFzRTtJQUN0RSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQzNDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUFyQ0gsbUJBdUNJLEtBdEM2QixFQXVDN0IsTUF0QzhCLEVBdUM5QixXQXRDa0Usd0JBQWM7SUF1Q2xGLE1BdENNLENBQUEsSUFBSSxzQkFBdUIsQ0FBVSxLQUFLLEVBQUMsTUFBTyxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBdUN0RSxDQXRDQztBQUxELDhCQUtDIiwiZmlsZSI6ImludGVyc2VjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYXJyYXlpbmRleG9mXCIpO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXJyYXk8VD59IGFycmF5XG4gKiBAcGFyYW0ge1R9IGl0ZW1cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVCwgVCk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyFQcm9taXNlPGJvb2xlYW4+fVxuICovXG5hc3luYyBmdW5jdGlvbiBhcnJheVJlbW92ZTxUPihcbiAgICBhcnJheTogVFtdLCBpdGVtOiBULFxuICAgIGNvbXBhcmVyOiAoeDogVCwgeTogVCkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpZHggPSBhd2FpdCBhcnJheUluZGV4T2ZBc3luYyhhcnJheSwgaXRlbSwgY29tcGFyZXIpO1xuICBpZiAoaWR4ID09PSAtMSkgeyByZXR1cm4gZmFsc2U7IH1cbiAgYXJyYXkuc3BsaWNlKGlkeCwgMSk7XG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBJbnRlcnNlY3RBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9zZWNvbmQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBmaXJzdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IGNvbXBhcmVyXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgIGZpcnN0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlY29uZDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9maXJzdCA9IGZpcnN0O1xuICAgIHRoaXMuX3NlY29uZCA9IHNlY29uZDtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gbWFwID0gW107XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBzZWNvbmRJdGVtIG9mIHRoaXMuX3NlY29uZCkge1xuICAgICAgbWFwLnB1c2goc2Vjb25kSXRlbSk7XG4gICAgfVxuXG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBmaXJzdEl0ZW0gb2YgdGhpcy5fZmlyc3QpIHtcbiAgICAgIGlmIChhd2FpdCBhcnJheVJlbW92ZShtYXAsIGZpcnN0SXRlbSwgdGhpcy5fY29tcGFyZXIpKSB7XG4gICAgICAgIHlpZWxkIGZpcnN0SXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gSW50ZXJzZWN0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkludGVyc2VjdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9maXJzdDtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5JbnRlcnNlY3RBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc2Vjb25kO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuSW50ZXJzZWN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBmaXJzdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPik9fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnRlcnNlY3Q8VFNvdXJjZT4oXG4gICAgZmlyc3Q6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2Vjb25kOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4gPSBjb21wYXJlckFzeW5jKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEludGVyc2VjdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oZmlyc3QsIHNlY29uZCwgY29tcGFyZXIpO1xufVxuIl19