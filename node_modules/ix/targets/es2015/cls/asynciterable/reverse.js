goog.module('targets.es2015.cls.asynciterable.reverse'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/reverse.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class ReverseAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!Array<?>} */ results = [];
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ item = yield __await(_b.value);
                    results.unshift(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            yield __await(yield* __asyncDelegator(__asyncValues(results)));
            var e_1, _c;
        });
    }
}
function ReverseAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ReverseAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function reverse(source) {
    return new ReverseAsyncIterable(source);
}
exports.reverse = reverse;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JldmVyc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBILDBCQUFtQyxTQUFRLDhCQUF3QjtJQVVuRTs7T0FFRztJQVRELFlBQVksTUFBOEI7UUFXeEMsS0FWSyxFQUFFLENBQUM7UUFXUixJQVZJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztJQVd4QixDQUFDO0lBQ0g7O09BRUc7SUFYTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBYTNCLElBQUksd0JBWkQsQ0FBQSxPQUFRLEdBQUUsRUFBRyxDQUFDOztnQkFhakIsR0FaRyxDQUFBLENBQW1CLElBQUEsS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUEsSUFBQTtvQkFBeEIsSUFBQSxzQkFBRyxDQUFBLElBQUssMEJBQUEsQ0FBQTtvQkFhakIsT0FaTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDdkI7Ozs7Ozs7OztZQWFELGNBQUEsT0FaTSxpQkFBQSxjQUFBLE9BQVEsQ0FBQSxDQUFBLENBQUEsQ0FBQzs7UUFhakIsQ0FaQztLQUFBO0NBQ0g7QUFjQTtJQUNBLHNDQUFzQztJQUN0QyxvQkFBb0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ3ZDLENBQUM7QUFFRDs7OztHQUlHO0FBckJILGlCQUFpQyxNQUE4QjtJQXVCN0QsTUF0Qk0sQ0FBQSxJQUFJLG9CQUFxQixDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBdUJuRCxDQXRCQztBQUZELDBCQUVDIiwiZmlsZSI6InJldmVyc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgUmV2ZXJzZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIHJlc3VsdHMgPSBbXTtcbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICByZXN1bHRzLnVuc2hpZnQoaXRlbSk7XG4gICAgfVxuICAgIHlpZWxkKiByZXN1bHRzO1xuICB9XG59XG5cbmZ1bmN0aW9uIFJldmVyc2VBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuUmV2ZXJzZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXZlcnNlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBSZXZlcnNlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19