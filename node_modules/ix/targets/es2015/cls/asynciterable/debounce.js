goog.module('targets.es2015.cls.asynciterable.debounce'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/debounce.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var foreach_1 = goog.require('targets.es2015.cls.asynciterable.foreach');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.foreach");
/**
 * @template TSource
 */
class DebounceAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} time
     */
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {boolean} */ noValue;
            let /** @type {TSource} */ lastItem;
            let /** @type {!Promise<TSource>} */ deferred;
            let /** @type {function((TSource|!PromiseLike<TSource>)): void} */ resolver;
            let /** @type {boolean} */ done = false;
            let /** @type {boolean} */ hasError = false;
            let /** @type {?} */ error;
            const /** @type {function(boolean): void} */ reset = (hasNoValue) => {
                noValue = hasNoValue;
                lastItem = undefined;
                deferred = new Promise(r => resolver = r);
            };
            const /** @type {function(): void} */ run = () => {
                if (lastItem === undefined) {
                    noValue = true;
                    return;
                }
                const /** @type {TSource} */ item = lastItem;
                const /** @type {function((TSource|!PromiseLike<TSource>)): void} */ res = resolver;
                reset(false);
                setTimeout(run, this._time);
                res(item);
            };
            reset(true);
            foreach_1.forEach(this._source, item => {
                lastItem = item;
                if (noValue) {
                    run();
                }
            })
                .then(() => done = true)
                .catch(err => { hasError = true; error = err; });
            while (1) {
                if (done) {
                    break;
                }
                if (hasError) {
                    throw error;
                }
                yield yield __await(/** @type {!Promise<TSource>} */ ((deferred)));
            }
        });
    }
}
function DebounceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    DebounceAsyncIterable.prototype._source;
    /** @type {number} */
    DebounceAsyncIterable.prototype._time;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} time
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function debounce(source, time) {
    return new DebounceAsyncIterable(source, time);
}
exports.debounce = debounce;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2RlYm91bmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELHVDQU5nQjtBQU9oQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FBQztBQUMzRzs7R0FFRztBQVJILDJCQUFvQyxTQUFRLDhCQUF3QjtJQVlwRTs7O09BR0c7SUFYRCxZQUFZLE1BQThCLEVBQUMsSUFBYTtRQWF0RCxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDO0lBYXBCLENBQUM7SUFDSDs7T0FFRztJQWJNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFlM0IsSUFBSSxzQkFkRCxDQUFBLE9BQWlCLENBQUM7WUFlckIsSUFBSSxzQkFkRCxDQUFBLFFBQThCLENBQUM7WUFlbEMsSUFBSSxnQ0FkRCxDQUFBLFFBQTJCLENBQUM7WUFlL0IsSUFBSSw4REFkRCxDQUFBLFFBQXVFLENBQUM7WUFlM0UsSUFBSSxzQkFkRCxDQUFBLElBQUssR0FBVyxLQUFNLENBQUM7WUFlMUIsSUFBSSxzQkFkRCxDQUFBLFFBQVMsR0FBVyxLQUFNLENBQUM7WUFlOUIsSUFBSSxnQkFkRCxDQUFBLEtBQVcsQ0FBQztZQWdCZixNQUFNLHNDQWRELENBQUEsS0FBTSxHQUFFLENBQUUsVUFBbUI7Z0JBZWhDLE9BZE8sR0FBRSxVQUFXLENBQUM7Z0JBZXJCLFFBZFEsR0FBRSxTQUFVLENBQUM7Z0JBZXJCLFFBZFEsR0FBRSxJQUFJLE9BQVEsQ0FBVSxDQUFDLElBQUcsUUFBUyxHQUFFLENBQUUsQ0FBQyxDQUFDO1lBZXJELENBZEMsQ0FBQztZQWdCRixNQUFNLCtCQWRELENBQUEsR0FBSSxHQUFFO2dCQWVULEVBQUUsQ0FBQyxDQWRDLFFBQVEsS0FBSSxTQUFVLENBQUMsQ0FBQSxDQUFFO29CQWUzQixPQWRPLEdBQUUsSUFBSyxDQUFDO29CQWVmLE1BQU0sQ0FkQztnQkFlVCxDQWRDO2dCQWdCRCxNQUFNLHNCQWRELENBQUEsSUFBSyxHQUFFLFFBQVMsQ0FBQztnQkFldEIsTUFBTSw4REFkRCxDQUFBLEdBQUksR0FBRSxRQUFTLENBQUM7Z0JBZXJCLEtBZEssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFlYixVQWRVLENBQUMsR0FBRyxFQUFDLElBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFlNUIsR0FkRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBZVosQ0FkQyxDQUFDO1lBZ0JGLEtBZEssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQWVaLGlCQWRPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBQyxJQUFLO2dCQWV4QixRQWRRLEdBQUUsSUFBSyxDQUFDO2dCQWVoQixFQUFFLENBQUMsQ0FkQyxPQUFPLENBQUMsQ0FBQSxDQUFFO29CQUFBLEdBQUksRUFBRSxDQUFDO2dCQUFBLENBQUU7WUFlekIsQ0FkQyxDQUFDO2lCQUNELElBQUksQ0FBQyxNQUFLLElBQUssR0FBRSxJQUFLLENBQUM7aUJBQ3ZCLEtBQUssQ0FBQyxHQUFHLE1BQUssUUFBUyxHQUFFLElBQUssQ0FBQyxDQUFBLEtBQU0sR0FBRSxHQUFJLENBQUMsQ0FBQSxDQUFFLENBQUMsQ0FBQztZQWdCakQsT0FkTyxDQUFDLEVBQUMsQ0FBRTtnQkFlVCxFQUFFLENBQUMsQ0FkQyxJQUFJLENBQUMsQ0FBQSxDQUFFO29CQUFBLEtBQUEsQ0FBTztnQkFBQSxDQUFFO2dCQWVwQixFQUFFLENBQUMsQ0FkQyxRQUFRLENBQUMsQ0FBQSxDQUFFO29CQUFBLE1BQU0sS0FBTSxDQUFDO2dCQUFBLENBQUU7Z0JBZTlCLE1BZEssY0FBQSxnQ0FBQSxDQUFBLENBQUEsQ0FBTSxRQUFBLENBQUEsQ0FBVSxDQUFBLENBQUM7WUFleEIsQ0FkQztRQWVILENBZEM7S0FBQTtDQUNIO0FBZ0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDeEMscUJBQXFCO0lBQ3JCLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDdEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBMUJILGtCQUFrQyxNQUE4QixFQUFDLElBQWE7SUE0QjVFLE1BM0JNLENBQUEsSUFBSSxxQkFBc0IsQ0FBVSxNQUFNLEVBQUMsSUFBSyxDQUFDLENBQUM7QUE0QjFELENBM0JDO0FBRkQsNEJBRUMiLCJmaWxlIjoiZGVib3VuY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGZvckVhY2ggfSBmcm9tICcuL2ZvcmVhY2gnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5mb3JlYWNoXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBEZWJvdW5jZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF90aW1lOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCB0aW1lOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl90aW1lID0gdGltZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBub1ZhbHVlOiBib29sZWFuO1xuICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGxhc3RJdGVtOiBUU291cmNlIHwgdW5kZWZpbmVkO1xuICAgIGxldCAvKiogQHR5cGUgeyFQcm9taXNlPFRTb3VyY2U+fSAqLyBkZWZlcnJlZDogUHJvbWlzZTxUU291cmNlPjtcbiAgICBsZXQgLyoqIEB0eXBlIHtmdW5jdGlvbigoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pKTogdm9pZH0gKi8gcmVzb2x2ZXI6ICh2YWx1ZT86IFRTb3VyY2UgfCBQcm9taXNlTGlrZTxUU291cmNlPiB8IHVuZGVmaW5lZCkgPT4gdm9pZDtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBkb25lOiBib29sZWFuID0gZmFsc2U7XG4gICAgbGV0IC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzRXJyb3I6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBsZXQgLyoqIEB0eXBlIHs/fSAqLyBlcnJvcjogYW55O1xuXG4gICAgY29uc3QgLyoqIEB0eXBlIHtmdW5jdGlvbihib29sZWFuKTogdm9pZH0gKi8gcmVzZXQgPSAoaGFzTm9WYWx1ZTogYm9vbGVhbikgPT4ge1xuICAgICAgbm9WYWx1ZSA9IGhhc05vVmFsdWU7XG4gICAgICBsYXN0SXRlbSA9IHVuZGVmaW5lZDtcbiAgICAgIGRlZmVycmVkID0gbmV3IFByb21pc2U8VFNvdXJjZT4ociA9PiByZXNvbHZlciA9IHIpO1xuICAgIH07XG5cbiAgICBjb25zdCAvKiogQHR5cGUge2Z1bmN0aW9uKCk6IHZvaWR9ICovIHJ1biA9ICgpID0+IHtcbiAgICAgIGlmIChsYXN0SXRlbSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vVmFsdWUgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSA9IGxhc3RJdGVtO1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHtmdW5jdGlvbigoVFNvdXJjZXwhUHJvbWlzZUxpa2U8VFNvdXJjZT4pKTogdm9pZH0gKi8gcmVzID0gcmVzb2x2ZXI7XG4gICAgICByZXNldChmYWxzZSk7XG4gICAgICBzZXRUaW1lb3V0KHJ1biwgdGhpcy5fdGltZSk7XG4gICAgICByZXMoaXRlbSk7XG4gICAgfTtcblxuICAgIHJlc2V0KHRydWUpO1xuICAgIGZvckVhY2godGhpcy5fc291cmNlLCBpdGVtID0+IHtcbiAgICAgIGxhc3RJdGVtID0gaXRlbTtcbiAgICAgIGlmIChub1ZhbHVlKSB7IHJ1bigpOyB9XG4gICAgfSlcbiAgICAudGhlbigoKSA9PiBkb25lID0gdHJ1ZSlcbiAgICAuY2F0Y2goZXJyID0+IHsgaGFzRXJyb3IgPSB0cnVlOyBlcnJvciA9IGVycjsgfSk7XG5cbiAgICB3aGlsZSAoMSkge1xuICAgICAgaWYgKGRvbmUpIHsgYnJlYWs7IH1cbiAgICAgIGlmIChoYXNFcnJvcikgeyB0aHJvdyBlcnJvcjsgfVxuICAgICAgeWllbGQgYXdhaXQgLyoqIEB0eXBlIHshUHJvbWlzZTxUU291cmNlPn0gKi8oKCBkZWZlcnJlZCkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBEZWJvdW5jZUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5EZWJvdW5jZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cbkRlYm91bmNlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3RpbWU7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IHRpbWVcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVib3VuY2U8VFNvdXJjZT4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LCB0aW1lOiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRGVib3VuY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgdGltZSk7XG59XG4iXX0=