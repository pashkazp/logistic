goog.module('targets.es2015.cls.asynciterable.scanright'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/scanright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var toarray_1 = goog.require('targets.es2015.cls.asynciterable.toarray');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.toarray");
/**
 * @template T, R
 */
class ScanRightAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<T>} source
     * @param {function((T|R), T, number): (R|!Promise<R>)} fn
     * @param {...(T|R)} args
     */
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    /**
     * @return {!AsyncIterableIterator<R>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {boolean} */ hasValue = false;
            const /** @type {!Array<T>} */ source = yield __await(toarray_1.toArray(this._source));
            for (let /** @type {number} */ offset = source.length - 1; offset >= 0; offset--) {
                const /** @type {T} */ item = source[offset];
                if (hasValue || (hasValue = this._hasSeed)) {
                    this._seed = yield __await(this._fn(/** @type {R} */ (this._seed), item, offset));
                    yield this._seed;
                }
                else {
                    this._seed = item;
                    hasValue = true;
                }
            }
        });
    }
}
function ScanRightAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<T>} */
    ScanRightAsyncIterable.prototype._source;
    /** @type {function((T|R), T, number): (R|!Promise<R>)} */
    ScanRightAsyncIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanRightAsyncIterable.prototype._seed;
    /** @type {boolean} */
    ScanRightAsyncIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(T|R)>}
 */
function scanRight(source, accumulator, ...args) {
    return new ScanRightAsyncIterable(source, accumulator, ...args);
}
exports.scanRight = scanRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NjYW5yaWdodC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCx1Q0FOZ0I7QUFPaEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7QUFDM0c7O0dBRUc7QUFSSCw0QkFBa0MsU0FBUSw4QkFBa0I7SUFjNUQ7Ozs7T0FJRztJQVpELFlBY0ksTUFid0IsRUFjeEIsRUFidUQsRUFjdkQsR0FiRyxJQUFlO1FBY3BCLEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsSUFiSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7UUFjZCxJQWJJLENBQUMsUUFBUSxHQUFFLElBQUssQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDO1FBY2xDLElBYkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBY3ZCLENBQUM7SUFDSDs7T0FFRztJQWRNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFnQjNCLElBQUksc0JBZkQsQ0FBQSxRQUFTLEdBQUUsS0FBTSxDQUFDO1lBZ0JyQixNQUFNLHdCQWZELENBQUEsTUFBTyxHQUFFLGNBQU0saUJBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQztZQWdCM0MsR0FBRyxDQUFDLENBZkMsSUFBQSxxQkFBRyxDQUFBLE1BQU8sR0FBRSxNQUFPLENBQUMsTUFBTSxHQUFFLENBQUUsRUFBQyxNQUFPLElBQUcsQ0FBRSxFQUFDLE1BQU8sRUFBRSxFQUFDLENBQUU7Z0JBZ0IzRCxNQUFNLGdCQWZELENBQUEsSUFBSyxHQUFFLE1BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFnQjVCLEVBQUUsQ0FBQyxDQWZDLFFBQVEsSUFBRyxDQUFFLFFBQVEsR0FBRSxJQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO29CQWdCM0MsSUFmSSxDQUFDLEtBQUssR0FBRSxjQUFNLElBQUssQ0FBQyxHQUFHLENBQUEsZ0JBQUEsQ0FBQSxDQUFJLElBQUksQ0FBQyxLQUFBLENBQUssRUFBQyxJQUFLLEVBQUMsTUFBTyxDQUFDLENBQUEsQ0FBQztvQkFnQnpELE1BZkssSUFBSyxDQUFDLEtBQUssQ0FBQztnQkFnQm5CLENBZkM7Z0JBQUEsSUFBSyxDQUFBLENBQUU7b0JBZ0JOLElBZkksQ0FBQyxLQUFLLEdBQUUsSUFBSyxDQUFDO29CQWdCbEIsUUFmUSxHQUFFLElBQUssQ0FBQztnQkFnQmxCLENBZkM7WUFnQkgsQ0FmQztRQWdCSCxDQWZDO0tBQUE7Q0FDSDtBQWlCQTtJQUNBLGdDQUFnQztJQUNoQyxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3pDLDBEQUEwRDtJQUMxRCxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ3JDLG9CQUFvQjtJQUNwQixzQkFBc0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ3ZDLHNCQUFzQjtJQUN0QixzQkFBc0IsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQzFDLENBQUM7QUFVRDs7Ozs7O0dBTUc7QUFqQ0gsbUJBbUNJLE1BbEN3QixFQW1DeEIsV0FsQ29FLEVBbUNwRSxHQWxDRyxJQUFlO0lBbUNwQixNQWxDTSxDQUFBLElBQUksc0JBQXVCLENBQUMsTUFBTSxFQUFDLFdBQVksRUFBQyxHQUFJLElBQUksQ0FBQyxDQUFDO0FBbUNsRSxDQWxDQztBQUxELDhCQUtDIiwiZmlsZSI6InNjYW5yaWdodC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdG9hcnJheSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLnRvYXJyYXlcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBULCBSXG4gKi9cbmNsYXNzIFNjYW5SaWdodEFzeW5jSXRlcmFibGU8VCwgUj4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxSPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VD47XG5wcml2YXRlIF9mbjogKGFjYzogVCB8IFIsIHg6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+O1xucHJpdmF0ZSBfc2VlZD86IFQgfCBSO1xucHJpdmF0ZSBfaGFzU2VlZDogYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiAoUnwhUHJvbWlzZTxSPil9IGZuXG4gKiBAcGFyYW0gey4uLihUfFIpfSBhcmdzXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICAgICAgZm46IChhY2M6IFQgfCBSLCB4OiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAgIC4uLmFyZ3M6IChUIHwgUilbXSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2ZuID0gZm47XG4gICAgdGhpcy5faGFzU2VlZCA9IGFyZ3MubGVuZ3RoID09PSAxO1xuICAgIHRoaXMuX3NlZWQgPSBhcmdzWzBdO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8Uj59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc1ZhbHVlID0gZmFsc2U7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshQXJyYXk8VD59ICovIHNvdXJjZSA9IGF3YWl0IHRvQXJyYXkodGhpcy5fc291cmNlKTtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gb2Zmc2V0ID0gc291cmNlLmxlbmd0aCAtIDE7IG9mZnNldCA+PSAwOyBvZmZzZXQtLSkge1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHtUfSAqLyBpdGVtID0gc291cmNlW29mZnNldF07XG4gICAgICBpZiAoaGFzVmFsdWUgfHwgKGhhc1ZhbHVlID0gdGhpcy5faGFzU2VlZCkpIHtcbiAgICAgICAgdGhpcy5fc2VlZCA9IGF3YWl0IHRoaXMuX2ZuKCAvKiogQHR5cGUge1J9ICovKCg8Uj50aGlzLl9zZWVkKSksIGl0ZW0sIG9mZnNldCk7XG4gICAgICAgIHlpZWxkIHRoaXMuX3NlZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zZWVkID0gaXRlbTtcbiAgICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBTY2FuUmlnaHRBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFQ+fSAqL1xuU2NhblJpZ2h0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gKi9cblNjYW5SaWdodEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9mbjtcbi8qKiBAdHlwZSB7KFR8Uil9ICovXG5TY2FuUmlnaHRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc2VlZDtcbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblNjYW5SaWdodEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9oYXNTZWVkO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFQsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBUIHwgUHJvbWlzZTxUPik6IEFzeW5jSXRlcmFibGVYPFQ+O1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW5SaWdodDxULCBSID0gVD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgc2VlZDogUik6IEFzeW5jSXRlcmFibGVYPFI+O1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKChUfFIpLCBULCBudW1iZXIpOiAoUnwhUHJvbWlzZTxSPil9IGFjY3VtdWxhdG9yXG4gKiBAcGFyYW0gey4uLihUfFIpfSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDwoVHxSKT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzY2FuUmlnaHQ8VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBBc3luY0l0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5SaWdodEFzeW5jSXRlcmFibGUoc291cmNlLCBhY2N1bXVsYXRvciwgLi4uYXJncyk7XG59XG4iXX0=