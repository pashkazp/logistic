goog.module('targets.es2015.cls.asynciterable.slice'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/slice.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class SliceAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} begin
     * @param {number} end
     */
    constructor(source, begin, end) {
        super();
        this._source = source;
        this._begin = begin;
        this._end = end;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator](), /** @type {number} */ begin = this._begin, /** @type {?} */ next;
            while (begin > 0 && !(next = yield __await(it.next())).done) {
                begin--;
            }
            let /** @type {number} */ end = this._end;
            if (end > 0) {
                while (!(next = yield __await(it.next())).done) {
                    yield next.value;
                    if (--end === 0) {
                        break;
                    }
                }
            }
        });
    }
}
function SliceAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    SliceAsyncIterable.prototype._source;
    /** @type {number} */
    SliceAsyncIterable.prototype._begin;
    /** @type {number} */
    SliceAsyncIterable.prototype._end;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} begin
 * @param {number=} end
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function slice(source, begin, end = Infinity) {
    return new SliceAsyncIterable(source, begin, end);
}
exports.slice = slice;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NsaWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCx3QkFBaUMsU0FBUSw4QkFBd0I7SUFZakU7Ozs7T0FJRztJQVhELFlBQVksTUFBOEIsRUFBQyxLQUFjLEVBQUMsR0FBWTtRQWFwRSxLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBYXBCLElBWkksQ0FBQyxJQUFJLEdBQUUsR0FBSSxDQUFDO0lBYWxCLENBQUM7SUFDSDs7T0FFRztJQWJNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFlM0IsSUFBSSxzQ0FkRCxDQUFBLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxFQUFBLHFCQUFDLENBQUEsS0FBTSxHQUFFLElBQUssQ0FBQyxNQUFNLEVBQUEsZ0JBQUMsQ0FBQSxJQUFLLENBQUM7WUFlekUsT0FkTyxLQUFLLEdBQUUsQ0FBRSxJQUFHLENBQUUsQ0FBQyxJQUFJLEdBQUUsY0FBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksRUFBQyxDQUFFO2dCQWVuRCxLQWRLLEVBQUUsQ0FBQztZQWVWLENBZEM7WUFnQkQsSUFBSSxxQkFkRCxDQUFBLEdBQUksR0FBRSxJQUFLLENBQUMsSUFBSSxDQUFDO1lBZXBCLEVBQUUsQ0FBQyxDQWRDLEdBQUcsR0FBRSxDQUFFLENBQUMsQ0FBQSxDQUFFO2dCQWVaLE9BZE8sQ0FBQyxDQUFDLElBQUksR0FBRSxjQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUU7b0JBZXRDLE1BZEssSUFBSyxDQUFDLEtBQUssQ0FBQztvQkFlakIsRUFBRSxDQUFDLENBZEMsRUFBRSxHQUFHLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTt3QkFBQSxLQUFBLENBQU87b0JBQUEsQ0FBRTtnQkFlN0IsQ0FkQztZQWVILENBZEM7UUFlSCxDQWRDO0tBQUE7Q0FDSDtBQWdCQTtJQUNBLHNDQUFzQztJQUN0QyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3JDLHFCQUFxQjtJQUNyQixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ3BDLHFCQUFxQjtJQUNyQixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2xDLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUE3QkgsZUErQkksTUE5QjhCLEVBK0I5QixLQTlCYSxFQStCYixNQTlCYSxRQUFTO0lBK0J4QixNQTlCTSxDQUFBLElBQUksa0JBQW1CLENBQVUsTUFBTSxFQUFDLEtBQU0sRUFBQyxHQUFJLENBQUMsQ0FBQztBQStCN0QsQ0E5QkM7QUFMRCxzQkFLQyIsImZpbGUiOiJzbGljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBTbGljZUFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9iZWdpbjogbnVtYmVyO1xucHJpdmF0ZSBfZW5kOiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGJlZ2luXG4gKiBAcGFyYW0ge251bWJlcn0gZW5kXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgYmVnaW46IG51bWJlciwgZW5kOiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9iZWdpbiA9IGJlZ2luO1xuICAgIHRoaXMuX2VuZCA9IGVuZDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCksIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBiZWdpbiA9IHRoaXMuX2JlZ2luLCAvKiogQHR5cGUgez99ICovIG5leHQ7XG4gICAgd2hpbGUgKGJlZ2luID4gMCAmJiAhKG5leHQgPSBhd2FpdCBpdC5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIGJlZ2luLS07XG4gICAgfVxuXG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBlbmQgPSB0aGlzLl9lbmQ7XG4gICAgaWYgKGVuZCA+IDApIHtcbiAgICAgIHdoaWxlICghKG5leHQgPSBhd2FpdCBpdC5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgeWllbGQgbmV4dC52YWx1ZTtcbiAgICAgICAgaWYgKC0tZW5kID09PSAwKSB7IGJyZWFrOyB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFNsaWNlQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblNsaWNlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7bnVtYmVyfSAqL1xuU2xpY2VBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fYmVnaW47XG4vKiogQHR5cGUge251bWJlcn0gKi9cblNsaWNlQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2VuZDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gYmVnaW5cbiAqIEBwYXJhbSB7bnVtYmVyPX0gZW5kXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNsaWNlPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBiZWdpbjogbnVtYmVyLFxuICAgIGVuZDogbnVtYmVyID0gSW5maW5pdHkpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgU2xpY2VBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgYmVnaW4sIGVuZCk7XG59XG4iXX0=