goog.module('targets.es2015.cls.asynciterable.union'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/union.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var arrayindexof_1 = goog.require('targets.es2015.cls.internal.arrayindexof');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource
 */
class UnionAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} left
     * @param {!AsyncIterable<TSource>} right
     * @param {function(TSource, TSource): (boolean|!Promise<boolean>)} comparer
     */
    constructor(left, right, comparer) {
        super();
        this._left = left;
        this._right = right;
        this._comparer = comparer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!Array<?>} */ map = [];
            try {
                for (var _a = __asyncValues(this._left), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ lItem = yield __await(_b.value);
                    if ((yield __await(arrayindexof_1.arrayIndexOfAsync(map, lItem, this._comparer))) === -1) {
                        map.push(lItem);
                        yield lItem;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _d = __asyncValues(this._right), _e; _e = yield __await(_d.next()), !_e.done;) {
                    let /** @type {TSource} */ rItem = yield __await(_e.value);
                    if ((yield __await(arrayindexof_1.arrayIndexOfAsync(map, rItem, this._comparer))) === -1) {
                        map.push(rItem);
                        yield rItem;
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_f = _d.return)) yield __await(_f.call(_d));
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_1, _c, e_2, _f;
        });
    }
}
function UnionAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    UnionAsyncIterable.prototype._left;
    /** @type {!AsyncIterable<TSource>} */
    UnionAsyncIterable.prototype._right;
    /** @type {function(TSource, TSource): (boolean|!Promise<boolean>)} */
    UnionAsyncIterable.prototype._comparer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} left
 * @param {!AsyncIterable<TSource>} right
 * @param {function(TSource, TSource): (boolean|!Promise<boolean>)=} comparer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function union(left, right, comparer = comparer_1.comparerAsync) {
    return new UnionAsyncIterable(left, right, comparer);
}
exports.union = union;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3VuaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELDJEQU4wQjtBQU8xQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FQN0M7QUFRN0QsbURBUHNCO0FBUXRCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQ3ZHOztHQUVHO0FBVEgsd0JBQWlDLFNBQVEsOEJBQXdCO0lBY2pFOzs7O09BSUc7SUFiRCxZQWVJLElBZDRCLEVBZTVCLEtBZDZCLEVBZTdCLFFBZGdFO1FBZWxFLEtBZEssRUFBRSxDQUFDO1FBZVIsSUFkSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7UUFlbEIsSUFkSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFlcEIsSUFkSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFlNUIsQ0FBQztJQUNIOztPQUVHO0lBZk0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWlCM0IsSUFBSSx3QkFoQkQsQ0FBQSxHQUFJLEdBQUUsRUFBRyxDQUFDOztnQkFpQmIsR0FoQkcsQ0FBQSxDQUFvQixJQUFBLEtBQUEsY0FBQSxJQUFLLENBQUMsS0FBSyxDQUFBLElBQUE7b0JBQXZCLElBQUEsc0JBQUcsQ0FBQSxLQUFNLDBCQUFBLENBQUE7b0JBaUJsQixFQUFFLENBQUMsQ0FoQkMsQ0FBQSxjQUFLLGdDQUFrQixDQUFDLEdBQUcsRUFBQyxLQUFNLEVBQUMsSUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBLE1BQUksQ0FBRSxDQUFDLENBQUMsQ0FBQSxDQUFFO3dCQWlCL0QsR0FoQkcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBaUJoQixNQWhCSyxLQUFNLENBQUM7b0JBaUJkLENBaEJDO2lCQUNGOzs7Ozs7Ozs7O2dCQWtCRCxHQWhCRyxDQUFBLENBQW9CLElBQUEsS0FBQSxjQUFBLElBQUssQ0FBQyxNQUFNLENBQUEsSUFBQTtvQkFBeEIsSUFBQSxzQkFBRyxDQUFBLEtBQU0sMEJBQUEsQ0FBQTtvQkFpQmxCLEVBQUUsQ0FBQyxDQWhCQyxDQUFBLGNBQUssZ0NBQWtCLENBQUMsR0FBRyxFQUFDLEtBQU0sRUFBQyxJQUFLLENBQUMsU0FBUyxDQUFDLENBQUEsTUFBSSxDQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7d0JBaUIvRCxHQWhCRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFpQmhCLE1BaEJLLEtBQU0sQ0FBQztvQkFpQmQsQ0FoQkM7aUJBQ0Y7Ozs7Ozs7Ozs7UUFpQkgsQ0FoQkM7S0FBQTtDQUNIO0FBa0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDbkMsc0NBQXNDO0lBQ3RDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDcEMsc0VBQXNFO0lBQ3RFLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDdkMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQS9CSCxlQWlDSSxJQWhDNEIsRUFpQzVCLEtBaEM2QixFQWlDN0IsV0FoQ2tFLHdCQUFjO0lBaUNsRixNQWhDTSxDQUFBLElBQUksa0JBQW1CLENBQVUsSUFBSSxFQUFDLEtBQU0sRUFBQyxRQUFTLENBQUMsQ0FBQztBQWlDaEUsQ0FoQ0M7QUFMRCxzQkFLQyIsImZpbGUiOiJ1bmlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYXJyYXlJbmRleE9mQXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYXJyYXlpbmRleG9mXCIpO1xuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBVbmlvbkFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9sZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBsZWZ0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSByaWdodFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIGxlZnQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2xlZnQgPSBsZWZ0O1xuICAgIHRoaXMuX3JpZ2h0ID0gcmlnaHQ7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIG1hcCA9IFtdO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gbEl0ZW0gb2YgdGhpcy5fbGVmdCkge1xuICAgICAgaWYgKGF3YWl0IGFycmF5SW5kZXhPZkFzeW5jKG1hcCwgbEl0ZW0sIHRoaXMuX2NvbXBhcmVyKSA9PT0gLTEpIHtcbiAgICAgICAgbWFwLnB1c2gobEl0ZW0pO1xuICAgICAgICB5aWVsZCBsSXRlbTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIHJJdGVtIG9mIHRoaXMuX3JpZ2h0KSB7XG4gICAgICBpZiAoYXdhaXQgYXJyYXlJbmRleE9mQXN5bmMobWFwLCBySXRlbSwgdGhpcy5fY29tcGFyZXIpID09PSAtMSkge1xuICAgICAgICBtYXAucHVzaChySXRlbSk7XG4gICAgICAgIHlpZWxkIHJJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBVbmlvbkFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5VbmlvbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9sZWZ0O1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblVuaW9uQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3JpZ2h0O1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSAqL1xuVW5pb25Bc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fY29tcGFyZXI7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IGxlZnRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHJpZ2h0XG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPik9fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bmlvbjxUU291cmNlPihcbiAgICBsZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHJpZ2h0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4gPSBjb21wYXJlckFzeW5jKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFVuaW9uQXN5bmNJdGVyYWJsZTxUU291cmNlPihsZWZ0LCByaWdodCwgY29tcGFyZXIpO1xufVxuIl19