goog.module('targets.es2015.cls.asynciterable._extremaby'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/_extremaby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @ignore
 * @template T
 * @param {T} key
 * @param {T} minValue
 * @return {!Promise<number>}
 */
function defaultCompareAsync(key, minValue) {
    return __awaiter(this, void 0, void 0, function* () {
        return key > minValue ? 1 : key < minValue ? -1 : 0;
    });
}
exports.defaultCompareAsync = defaultCompareAsync;
/**
 * @ignore
 * @template TSource, TKey
 */
class ExtremaByAsyncIterator extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keyFn
     * @param {function(TKey, TKey): (number|!Promise<number>)} cmp
     */
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!Array<TSource>} */ result = [], /** @type {?} */ done, /** @type {?} */ next;
            const /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
            done = (next = yield __await(it.next())).done;
            if (done) {
                throw new Error('Sequence contains no elements');
            }
            let /** @type {TSource} */ current = next.value;
            let /** @type {TKey} */ resKey = yield __await(this._keyFn(current));
            done = (next = yield __await(it.next())).done;
            while (!done) {
                let /** @type {TSource} */ curr = next.value;
                let /** @type {TKey} */ key = yield __await(this._keyFn(curr));
                const /** @type {number} */ c = yield __await(this._cmp(key, resKey));
                if (c === 0) {
                    result.push(curr);
                }
                else if (c > 0) {
                    result = [curr];
                    resKey = key;
                }
                done = (next = yield __await(it.next())).done;
            }
            yield __await(yield* __asyncDelegator(__asyncValues(result)));
        });
    }
}
function ExtremaByAsyncIterator_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ExtremaByAsyncIterator.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    ExtremaByAsyncIterator.prototype._keyFn;
    /** @type {function(TKey, TKey): (number|!Promise<number>)} */
    ExtremaByAsyncIterator.prototype._cmp;
}
/**
 * @ignore
 * @template TSource, TKey
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)} keyFn
 * @param {function(TKey, TKey): (number|!Promise<number>)} cmp
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function extremaBy(source, keyFn, cmp) {
    return new ExtremaByAsyncIterator(source, keyFn, cmp);
}
exports.extremaBy = extremaBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL19leHRyZW1hYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7Ozs7O0dBTUc7QUFSSCw2QkFBNkMsR0FBTSxFQUFDLFFBQVk7O1FBVTlELE1BVE0sQ0FBQSxHQUFJLEdBQUUsUUFBUyxHQUFFLENBQUUsR0FBRSxHQUFJLEdBQUUsUUFBUyxHQUFFLENBQUUsQ0FBQyxHQUFFLENBQUUsQ0FBQztJQVV0RCxDQUFDO0NBQUE7QUFYRCxrREFXQztBQUNEOzs7R0FHRztBQVJILDRCQUEyQyxTQUFRLDhCQUF3QjtJQWEzRTs7OztPQUlHO0lBWkQsWUFjSSxNQWI4QixFQWM5QixLQWIyQyxFQWMzQyxHQWJtRDtRQWNyRCxLQWJLLEVBQUUsQ0FBQztRQWNSLElBYkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBY3RCLElBYkksQ0FBQyxNQUFNLEdBQUUsS0FBTSxDQUFDO1FBY3BCLElBYkksQ0FBQyxJQUFJLEdBQUUsR0FBSSxDQUFDO0lBY2xCLENBQUM7SUFDSDs7T0FFRztJQWRNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFnQjNCLElBQUksOEJBZkQsQ0FBQSxNQUFPLEdBQWEsRUFBRyxFQUFBLGdCQUFDLENBQUEsSUFBSyxFQUFBLGdCQUFDLENBQUEsSUFBSyxDQUFDO1lBZ0J2QyxNQUFNLHNDQWZELENBQUEsRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFnQmhELElBZkksR0FBRSxDQUFFLElBQUksR0FBRSxjQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDO1lBZ0JyQyxFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsQ0FBQSxDQUFFO2dCQWdCVCxNQWZLLElBQUksS0FBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7WUFnQm5ELENBZkM7WUFpQkQsSUFBSSxzQkFmRCxDQUFBLE9BQVEsR0FBRSxJQUFLLENBQUMsS0FBSyxDQUFDO1lBZ0J6QixJQUFJLG1CQWZELENBQUEsTUFBTyxHQUFFLGNBQU0sSUFBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO1lBZ0J4QyxJQWZJLEdBQUUsQ0FBRSxJQUFJLEdBQUUsY0FBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQztZQWdCckMsT0FmTyxDQUFDLElBQUksRUFBQyxDQUFFO2dCQWdCYixJQUFJLHNCQWZELENBQUEsSUFBSyxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUM7Z0JBZ0J0QixJQUFJLG1CQWZELENBQUEsR0FBSSxHQUFFLGNBQU0sSUFBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFDO2dCQWdCbEMsTUFBTSxxQkFmRCxDQUFBLENBQUUsR0FBRSxjQUFNLElBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLE1BQU8sQ0FBQyxDQUFBLENBQUM7Z0JBZ0J2QyxFQUFFLENBQUMsQ0FmQyxDQUFDLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTtvQkFnQlosTUFmTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFnQnBCLENBZkM7Z0JBQUEsSUFBSyxDQUFBLEVBQUEsQ0FBQSxDQUFLLENBQUMsR0FBRSxDQUFFLENBQUMsQ0FBQSxDQUFFO29CQWdCakIsTUFmTSxHQUFFLENBQUUsSUFBSSxDQUFDLENBQUM7b0JBZ0JoQixNQWZNLEdBQUUsR0FBSSxDQUFDO2dCQWdCZixDQWZDO2dCQWdCRCxJQWZJLEdBQUUsQ0FBRSxJQUFJLEdBQUUsY0FBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQyxDQUFDLElBQUksQ0FBQztZQWdCdkMsQ0FmQztZQWlCRCxjQUFBLE9BZk0saUJBQUEsY0FBQSxNQUFPLENBQUEsQ0FBQSxDQUFBLENBQUM7UUFnQmhCLENBZkM7S0FBQTtDQUNIO0FBaUJBO0lBQ0Esc0NBQXNDO0lBQ3RDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDekMsdURBQXVEO0lBQ3ZELHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDeEMsOERBQThEO0lBQzlELHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7QUFDdEMsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUE1QkgsbUJBOEJJLE1BN0I4QixFQThCOUIsS0E3QjJDLEVBOEIzQyxHQTdCbUQ7SUE4QnJELE1BN0JNLENBQUEsSUFBSSxzQkFBdUIsQ0FBZ0IsTUFBTSxFQUFDLEtBQU0sRUFBQyxHQUFJLENBQUMsQ0FBQztBQThCdkUsQ0E3QkM7QUFMRCw4QkFLQyIsImZpbGUiOiJfZXh0cmVtYWJ5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEBpZ25vcmVcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0ge1R9IGtleVxuICogQHBhcmFtIHtUfSBtaW5WYWx1ZVxuICogQHJldHVybiB7IVByb21pc2U8bnVtYmVyPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlQXN5bmM8VD4oa2V5OiBULCBtaW5WYWx1ZTogVCk6IFByb21pc2U8bnVtYmVyPiB7XG4gIHJldHVybiBrZXkgPiBtaW5WYWx1ZSA/IDEgOiBrZXkgPCBtaW5WYWx1ZSA/IC0xIDogMDtcbn1cbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXlcbiAqL1xuY2xhc3MgRXh0cmVtYUJ5QXN5bmNJdGVyYXRvcjxUU291cmNlLCBUS2V5PiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2tleUZuOiAoeDogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT47XG5wcml2YXRlIF9jbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBrZXlGblxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKG51bWJlcnwhUHJvbWlzZTxudW1iZXI+KX0gY21wXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2tleUZuID0ga2V5Rm47XG4gICAgdGhpcy5fY21wID0gY21wO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTxUU291cmNlPn0gKi8gcmVzdWx0OiBUU291cmNlW10gPSBbXSwgLyoqIEB0eXBlIHs/fSAqLyBkb25lLCAvKiogQHR5cGUgez99ICovIG5leHQ7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgZG9uZSA9IChuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lO1xuICAgIGlmIChkb25lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gICAgfVxuXG4gICAgbGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gY3VycmVudCA9IG5leHQudmFsdWU7XG4gICAgbGV0IC8qKiBAdHlwZSB7VEtleX0gKi8gcmVzS2V5ID0gYXdhaXQgdGhpcy5fa2V5Rm4oY3VycmVudCk7XG4gICAgZG9uZSA9IChuZXh0ID0gYXdhaXQgaXQubmV4dCgpKS5kb25lO1xuICAgIHdoaWxlICghZG9uZSkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gY3VyciA9IG5leHQudmFsdWU7XG4gICAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyBrZXkgPSBhd2FpdCB0aGlzLl9rZXlGbihjdXJyKTtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBjID0gYXdhaXQgdGhpcy5fY21wKGtleSwgcmVzS2V5KTtcbiAgICAgIGlmIChjID09PSAwKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKGN1cnIpO1xuICAgICAgfSBlbHNlIGlmIChjID4gMCkge1xuICAgICAgICByZXN1bHQgPSBbY3Vycl07XG4gICAgICAgIHJlc0tleSA9IGtleTtcbiAgICAgIH1cbiAgICAgIGRvbmUgPSAobmV4dCA9IGF3YWl0IGl0Lm5leHQoKSkuZG9uZTtcbiAgICB9XG5cbiAgICB5aWVsZCogcmVzdWx0O1xuICB9XG59XG5cbmZ1bmN0aW9uIEV4dHJlbWFCeUFzeW5jSXRlcmF0b3JfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeHRyZW1hQnlBc3luY0l0ZXJhdG9yLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSAqL1xuRXh0cmVtYUJ5QXN5bmNJdGVyYXRvci5wcm90b3R5cGUuX2tleUZuO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKG51bWJlcnwhUHJvbWlzZTxudW1iZXI+KX0gKi9cbkV4dHJlbWFCeUFzeW5jSXRlcmF0b3IucHJvdG90eXBlLl9jbXA7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXlcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBrZXlGblxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogKG51bWJlcnwhUHJvbWlzZTxudW1iZXI+KX0gY21wXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4dHJlbWFCeTxUU291cmNlLCBUS2V5PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRXh0cmVtYUJ5QXN5bmNJdGVyYXRvcjxUU291cmNlLCBUS2V5Pihzb3VyY2UsIGtleUZuLCBjbXApO1xufVxuIl19