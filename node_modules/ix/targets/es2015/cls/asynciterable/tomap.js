goog.module('targets.es2015.cls.asynciterable.tomap'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/tomap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @template TSource, TKey, TElement
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
 * @param {function(TSource): (TElement|!Promise<TElement>)=} elementSelector
 * @return {!Promise<!Map<TKey, (TSource|TElement)>>}
 */
function toMap(source, keySelector, elementSelector = identity_1.identityAsync) {
    return __awaiter(this, void 0, void 0, function* () {
        let /** @type {!Map<TKey, (TSource|TElement)>} */ map = new Map();
        try {
            for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield source_1.next(), !source_1_1.done;) {
                let /** @type {TSource} */ item = yield source_1_1.value;
                let /** @type {TElement} */ value = yield elementSelector(item);
                let /** @type {TKey} */ key = yield keySelector(item);
                map.set(key, value);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield _a.call(source_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return map;
        var e_1, _a;
    });
}
exports.toMap = toMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3RvbWFwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxtREFMc0I7QUFNdEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBTmpEO0FBZXJEOzs7Ozs7R0FNRztBQVpILGVBY0ksTUFiOEIsRUFjOUIsV0Fib0QsRUFjcEQsa0JBYmtFLHdCQUFjOztRQWVsRixJQUFJLDZDQWJELENBQUEsR0FBSSxHQUFFLElBQUksR0FBSSxFQUE0QixDQUFDOztZQWM5QyxHQWJHLENBQUEsQ0FBbUIsSUFBQSxXQUFBLGNBQUEsTUFBTyxDQUFBLFlBQUE7Z0JBQWxCLElBQUEsc0JBQUcsQ0FBQSxJQUFLLHlCQUFBLENBQUE7Z0JBY2pCLElBQUksdUJBYkQsQ0FBQSxLQUFNLEdBQUUsTUFBTSxlQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO2dCQWN4QyxJQUFJLG1CQWJELENBQUEsR0FBSSxHQUFFLE1BQU0sV0FBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQWNsQyxHQWJHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBQyxLQUFNLENBQUMsQ0FBQzthQUNyQjs7Ozs7Ozs7O1FBY0QsTUFiTSxDQUFBLEdBQUksQ0FBQzs7SUFjYixDQWJDO0NBQUE7QUFaRCxzQkFZQyIsImZpbGUiOiJ0b21hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IGlkZW50aXR5QXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRvTWFwPFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKGl0ZW06IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+KTogUHJvbWlzZTxNYXA8VEtleSwgVFNvdXJjZT4+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHRvTWFwPFRTb3VyY2UsIFRLZXksIFRFbGVtZW50ID0gVFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAoaXRlbTogVFNvdXJjZSkgPT4gVEtleSB8IFByb21pc2U8VEtleT4sXG4gICAgZWxlbWVudFNlbGVjdG9yPzogKGl0ZW06IFRTb3VyY2UpID0+IFRFbGVtZW50IHwgUHJvbWlzZTxURWxlbWVudD4pOiBQcm9taXNlPE1hcDxUS2V5LCBURWxlbWVudD4+O1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleSwgVEVsZW1lbnRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRLZXl8IVByb21pc2U8VEtleT4pfSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKFRFbGVtZW50fCFQcm9taXNlPFRFbGVtZW50Pik9fSBlbGVtZW50U2VsZWN0b3JcbiAqIEByZXR1cm4geyFQcm9taXNlPCFNYXA8VEtleSwgKFRTb3VyY2V8VEVsZW1lbnQpPj59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB0b01hcDxUU291cmNlLCBUS2V5LCBURWxlbWVudCA9IFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKGl0ZW06IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGVsZW1lbnRTZWxlY3RvcjogKGl0ZW06IFRTb3VyY2UpID0+IFRFbGVtZW50IHwgUHJvbWlzZTxURWxlbWVudD4gPSBpZGVudGl0eUFzeW5jKTpcbiAgICBQcm9taXNlPE1hcDxUS2V5LCBURWxlbWVudCB8IFRTb3VyY2U+PiB7XG4gIGxldCAvKiogQHR5cGUgeyFNYXA8VEtleSwgKFRTb3VyY2V8VEVsZW1lbnQpPn0gKi8gbWFwID0gbmV3IE1hcDxUS2V5LCBURWxlbWVudCB8IFRTb3VyY2U+KCk7XG4gIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtURWxlbWVudH0gKi8gdmFsdWUgPSBhd2FpdCBlbGVtZW50U2VsZWN0b3IoaXRlbSk7XG4gICAgbGV0IC8qKiBAdHlwZSB7VEtleX0gKi8ga2V5ID0gYXdhaXQga2V5U2VsZWN0b3IoaXRlbSk7XG4gICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgfVxuICByZXR1cm4gbWFwO1xufVxuIl19