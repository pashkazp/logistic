goog.module('targets.es2015.cls.asynciterable.timeout'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/timeout.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _sleep_1 = goog.require('targets.es2015.cls.asynciterable._sleep');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._sleep");
class TimeoutError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, TimeoutError.prototype);
        this.message = 'Timeout has occurred';
    }
}
exports.TimeoutError = TimeoutError;
const /** @type {string} */ VALUE_TYPE = 'value';
const /** @type {string} */ ERROR_TYPE = 'error';
/**
 * @record
 * @template T
 */
function TimeoutOperation() { }
function TimeoutOperation_tsickle_Closure_declarations() {
    /** @type {string} */
    TimeoutOperation.prototype.type;
    /** @type {!IteratorResult<T>} */
    TimeoutOperation.prototype.value;
}
/**
 * @template TSource
 */
class TimeoutAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} dueTime
     */
    constructor(source, dueTime) {
        super();
        this._source = source;
        this._dueTime = dueTime;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            const /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
            while (1) {
                const { type, value } = yield __await(Promise.race([
                    it.next().then(value => { return { type: VALUE_TYPE, value }; }),
                    _sleep_1.sleep(this._dueTime).then(() => { return { type: ERROR_TYPE }; })
                ]));
                if (type === ERROR_TYPE) {
                    throw new TimeoutError();
                }
                if (value.done) {
                    break;
                }
                yield value.value;
            }
        });
    }
}
function TimeoutAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TimeoutAsyncIterable.prototype._source;
    /** @type {number} */
    TimeoutAsyncIterable.prototype._dueTime;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} dueTime
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function timeout(source, dueTime) {
    return new TimeoutAsyncIterable(source, dueTime);
}
exports.timeout = timeout;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3RpbWVvdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQscUNBTmM7QUFPZCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsa0RBQWtELENBQUMsQ0FBQztBQUwxRyxrQkFBeUIsU0FBUSxLQUFNO0lBQ3JDO1FBT0UsS0FOSyxFQUFFLENBQUM7UUFPUixNQU5NLENBQUMsY0FBYyxDQUFDLElBQUksRUFBQyxZQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFPcEQsSUFOSSxDQUFDLE9BQU8sR0FBRSxzQkFBdUIsQ0FBQztJQU94QyxDQU5DO0NBQ0Y7QUFORCxvQ0FNQztBQVFELE1BQU0scUJBTkQsQ0FBQSxVQUFXLEdBQUUsT0FBUSxDQUFDO0FBTzNCLE1BQU0scUJBTkQsQ0FBQSxVQUFXLEdBQUUsT0FBUSxDQUFBO0FBTzFCOzs7R0FHRztBQUNILDhCQUE2QixDQUFDO0FBRzlCO0lBQ0EscUJBQXFCO0lBQ3JCLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7SUFDaEMsaUNBQWlDO0lBQ2pDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7QUFDakMsQ0FBQztBQU9EOztHQUVHO0FBckJILDBCQUFtQyxTQUFRLDhCQUF3QjtJQXlCbkU7OztPQUdHO0lBeEJELFlBQVksTUFBOEIsRUFBQyxPQUFnQjtRQTBCekQsS0F6QkssRUFBRSxDQUFDO1FBMEJSLElBekJJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQTBCdEIsSUF6QkksQ0FBQyxRQUFRLEdBQUUsT0FBUSxDQUFDO0lBMEIxQixDQUFDO0lBQ0g7O09BRUc7SUExQk0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQTRCM0IsTUFBTSxzQ0EzQkQsQ0FBQSxFQUFHLEdBQUUsSUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztZQTRCaEQsT0EzQk8sQ0FBQyxFQUFDLENBQUU7Z0JBNEJULE1BM0JLLEVBQUUsSUFBSyxFQUFDLEtBQU0sRUFBRSxHQUFFLGNBQU0sT0FBUSxDQUFDLElBQUksQ0FBNEI7b0JBNEJwRSxFQTNCRSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLE1BQUssTUFBTyxDQUFBLEVBQUUsSUFBSyxFQUFDLFVBQVcsRUFBQyxLQUFNLEVBQUUsQ0FBQyxDQUFBLENBQUUsQ0FBQztvQkE0QmhFLGNBM0JLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFPLE1BQU8sQ0FBQSxFQUFFLElBQUssRUFBQyxVQUFXLEVBQUUsQ0FBQyxDQUFBLENBQUUsQ0FBQztpQkFDbEUsQ0FBQyxDQUFBLENBQUM7Z0JBNkJILEVBQUUsQ0FBQyxDQTNCQyxJQUFJLEtBQUksVUFBVyxDQUFDLENBQUEsQ0FBRTtvQkE0QnhCLE1BM0JLLElBQUksWUFBYSxFQUFFLENBQUM7Z0JBNEIzQixDQTNCQztnQkE2QkQsRUFBRSxDQUFDLENBM0JDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFFO29CQUFBLEtBQUEsQ0FBTztnQkFBQSxDQUFFO2dCQTRCMUIsTUEzQkssS0FBTSxDQUFDLEtBQUssQ0FBQztZQTRCcEIsQ0EzQkM7UUE0QkgsQ0EzQkM7S0FBQTtDQUNIO0FBNkJBO0lBQ0Esc0NBQXNDO0lBQ3RDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdkMscUJBQXFCO0lBQ3JCLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBdkNILGlCQXlDSSxNQXhDOEIsRUF5QzlCLE9BeENlO0lBeUNqQixNQXhDTSxDQUFBLElBQUksb0JBQXFCLENBQVUsTUFBTSxFQUFDLE9BQVEsQ0FBQyxDQUFDO0FBeUM1RCxDQUFDO0FBNUNELDBCQTRDQyIsImZpbGUiOiJ0aW1lb3V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG5pbXBvcnQgeyBzbGVlcCB9IGZyb20gJy4vX3NsZWVwJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUuX3NsZWVwXCIpO1xuZXhwb3J0IGNsYXNzIFRpbWVvdXRFcnJvciBleHRlbmRzIEVycm9yIHtcbmNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIFRpbWVvdXRFcnJvci5wcm90b3R5cGUpO1xuICAgIHRoaXMubWVzc2FnZSA9ICdUaW1lb3V0IGhhcyBvY2N1cnJlZCc7XG4gIH1cbn1cblxuY29uc3QgLyoqIEB0eXBlIHtzdHJpbmd9ICovIFZBTFVFX1RZUEUgPSAndmFsdWUnO1xuY29uc3QgLyoqIEB0eXBlIHtzdHJpbmd9ICovIEVSUk9SX1RZUEUgPSAnZXJyb3InO1xuLyoqXG4gKiBAcmVjb3JkXG4gKiBAdGVtcGxhdGUgVFxuICovXG5mdW5jdGlvbiBUaW1lb3V0T3BlcmF0aW9uKCkge31cblxuXG5mdW5jdGlvbiBUaW1lb3V0T3BlcmF0aW9uX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge3N0cmluZ30gKi9cblRpbWVvdXRPcGVyYXRpb24ucHJvdG90eXBlLnR5cGU7XG4vKiogQHR5cGUgeyFJdGVyYXRvclJlc3VsdDxUPn0gKi9cblRpbWVvdXRPcGVyYXRpb24ucHJvdG90eXBlLnZhbHVlO1xufVxuXG5cbmludGVyZmFjZSBUaW1lb3V0T3BlcmF0aW9uPFQ+IHtcbiAgdHlwZTogc3RyaW5nO1xuICB2YWx1ZT86IEl0ZXJhdG9yUmVzdWx0PFQ+O1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUaW1lb3V0QXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2R1ZVRpbWU6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gZHVlVGltZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGR1ZVRpbWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2R1ZVRpbWUgPSBkdWVUaW1lO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0ID0gdGhpcy5fc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpO1xuICAgIHdoaWxlICgxKSB7XG4gICAgICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBhd2FpdCBQcm9taXNlLnJhY2U8VGltZW91dE9wZXJhdGlvbjxUU291cmNlPj4oW1xuICAgICAgICBpdC5uZXh0KCkudGhlbih2YWx1ZSA9PiB7IHJldHVybiB7IHR5cGU6IFZBTFVFX1RZUEUsIHZhbHVlIH07IH0pLFxuICAgICAgICBzbGVlcCh0aGlzLl9kdWVUaW1lKS50aGVuKCgpID0+IHsgcmV0dXJuIHsgdHlwZTogRVJST1JfVFlQRSB9OyB9KVxuICAgICAgXSk7XG5cbiAgICAgIGlmICh0eXBlID09PSBFUlJPUl9UWVBFKSB7XG4gICAgICAgIHRocm93IG5ldyBUaW1lb3V0RXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHZhbHVlLmRvbmUpIHsgYnJlYWs7IH1cbiAgICAgIHlpZWxkIHZhbHVlLnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUaW1lb3V0QXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblRpbWVvdXRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5UaW1lb3V0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2R1ZVRpbWU7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGR1ZVRpbWVcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGltZW91dDxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgZHVlVGltZTogbnVtYmVyKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRpbWVvdXRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgZHVlVGltZSk7XG59Il19