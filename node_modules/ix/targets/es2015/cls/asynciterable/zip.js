goog.module('targets.es2015.cls.asynciterable.zip'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/zip.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource, TResult
 */
class ZipIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} left
     * @param {!AsyncIterable<TSource>} right
     * @param {function(TSource, TSource): (TResult|!Promise<TResult>)} fn
     */
    constructor(left, right, fn) {
        super();
        this._left = left;
        this._right = right;
        this._fn = fn;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            const /** @type {!AsyncIterator<TSource>} */ it1 = this._left[Symbol.asyncIterator]();
            const /** @type {!AsyncIterator<TSource>} */ it2 = this._right[Symbol.asyncIterator]();
            while (1) {
                const [next1, next2] = yield __await(Promise.all([it1.next(), it2.next()]));
                if (!next1.done && !next2.done) {
                    yield yield __await(this._fn(next1.value, next2.value));
                }
                else {
                    break;
                }
            }
        });
    }
}
function ZipIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ZipIterable.prototype._left;
    /** @type {!AsyncIterable<TSource>} */
    ZipIterable.prototype._right;
    /** @type {function(TSource, TSource): (TResult|!Promise<TResult>)} */
    ZipIterable.prototype._fn;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} left
 * @param {!AsyncIterable<TSource>} right
 * @param {function(TSource, TSource): (TResult|!Promise<TResult>)} fn
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function zip(left, right, fn) {
    return new ZipIterable(left, right, fn);
}
exports.zip = zip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3ppcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgsaUJBQW1DLFNBQVEsOEJBQXdCO0lBWW5FOzs7O09BSUc7SUFYRCxZQWFJLElBWjRCLEVBYTVCLEtBWjZCLEVBYTdCLEVBWmlFO1FBYW5FLEtBWkssRUFBRSxDQUFDO1FBYVIsSUFaSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7UUFhbEIsSUFaSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFhcEIsSUFaSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7SUFhaEIsQ0FBQztJQUNIOztPQUVHO0lBYk0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWUzQixNQUFNLHNDQWRELENBQUEsR0FBSSxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFlL0MsTUFBTSxzQ0FkRCxDQUFBLEdBQUksR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBZWhELE9BZE8sQ0FBQyxFQUFDLENBQUU7Z0JBZVQsTUFkSyxDQUFFLEtBQUssRUFBQyxLQUFNLENBQUMsR0FBRSxjQUFNLE9BQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLEVBQUMsR0FBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQSxDQUFDO2dCQWVuRSxFQUFFLENBQUMsQ0FkQyxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUcsQ0FBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTtvQkFlL0IsTUFkSyxjQUFNLElBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBQyxLQUFNLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQztnQkFlakQsQ0FkQztnQkFBQSxJQUFLLENBQUEsQ0FBRTtvQkFlTixLQUFLLENBZEM7Z0JBZVIsQ0FkQztZQWVILENBZEM7UUFlSCxDQWRDO0tBQUE7Q0FDSDtBQWdCQTtJQUNBLHNDQUFzQztJQUN0QyxXQUFXLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztJQUM1QixzQ0FBc0M7SUFDdEMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFDN0Isc0VBQXNFO0lBQ3RFLFdBQVcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0FBQzFCLENBQUM7QUFFRDs7Ozs7O0dBTUc7QUE3QkgsYUErQkksSUE5QjRCLEVBK0I1QixLQTlCNkIsRUErQjdCLEVBOUJpRTtJQStCbkUsTUE5Qk0sQ0FBQSxJQUFJLFdBQVksQ0FBbUIsSUFBSSxFQUFDLEtBQU0sRUFBQyxFQUFHLENBQUMsQ0FBQztBQStCNUQsQ0E5QkM7QUFMRCxrQkFLQyIsImZpbGUiOiJ6aXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRSZXN1bHRcbiAqL1xuY2xhc3MgWmlwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9sZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9mbjogKGxlZnQ6IFRTb3VyY2UsIHJpZ2h0OiBUU291cmNlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gbGVmdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gcmlnaHRcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IChUUmVzdWx0fCFQcm9taXNlPFRSZXN1bHQ+KX0gZm5cbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBsZWZ0OiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgcmlnaHQ6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBmbjogKGxlZnQ6IFRTb3VyY2UsIHJpZ2h0OiBUU291cmNlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5fcmlnaHQgPSByaWdodDtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFJlc3VsdD59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0MSA9IHRoaXMuX2xlZnRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQyID0gdGhpcy5fcmlnaHRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGNvbnN0IFtuZXh0MSwgbmV4dDJdID0gYXdhaXQgUHJvbWlzZS5hbGwoW2l0MS5uZXh0KCksIGl0Mi5uZXh0KCldKTtcbiAgICAgIGlmICghbmV4dDEuZG9uZSAmJiAhbmV4dDIuZG9uZSkge1xuICAgICAgICB5aWVsZCBhd2FpdCB0aGlzLl9mbihuZXh0MS52YWx1ZSwgbmV4dDIudmFsdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIFppcEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuWmlwSXRlcmFibGUucHJvdG90eXBlLl9sZWZ0O1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblppcEl0ZXJhYmxlLnByb3RvdHlwZS5fcmlnaHQ7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9ICovXG5aaXBJdGVyYWJsZS5wcm90b3R5cGUuX2ZuO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBsZWZ0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSByaWdodFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogKFRSZXN1bHR8IVByb21pc2U8VFJlc3VsdD4pfSBmblxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB6aXA8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgbGVmdDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICByaWdodDogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBmbjogKGxlZnQ6IFRTb3VyY2UsIHJpZ2h0OiBUU291cmNlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0Pik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBaaXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0PihsZWZ0LCByaWdodCwgZm4pO1xufVxuIl19