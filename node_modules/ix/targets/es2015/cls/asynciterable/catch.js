goog.module('targets.es2015.cls.asynciterable.catch'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/catch.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var returniterator_1 = goog.require('targets.es2015.cls.internal.returniterator');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.returniterator");
/**
 * @template TSource
 */
class CatchAllAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!Iterable<!AsyncIterable<TSource>>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {?} */ error = null, /** @type {boolean} */ hasError = false;
            for (let /** @type {!AsyncIterable<TSource>} */ source of this._source) {
                const /** @type {!AsyncIterator<TSource>} */ it = source[Symbol.asyncIterator]();
                error = null;
                hasError = false;
                while (1) {
                    let /** @type {TSource} */ c = ({});
                    try {
                        const { done, value } = yield __await(it.next());
                        if (done) {
                            yield __await(returniterator_1.returnAsyncIterator(it));
                            break;
                        }
                        c = value;
                    }
                    catch (e) {
                        error = e;
                        hasError = true;
                        yield __await(returniterator_1.returnAsyncIterator(it));
                        break;
                    }
                    yield c;
                }
                if (!hasError) {
                    break;
                }
            }
            if (hasError) {
                throw error;
            }
        });
    }
}
function CatchAllAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!AsyncIterable<TSource>>} */
    CatchAllAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!Iterable<!AsyncIterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function _catchAll(source) {
    return new CatchAllAsyncIterable(source);
}
exports._catchAll = _catchAll;
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {...!AsyncIterable<T>} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function _catch(source, ...args) {
    return _catchAll([source].concat(args));
}
exports._catch = _catch;
/**
 * @template T
 * @param {...!AsyncIterable<T>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function _catchStatic(...source) {
    return _catchAll(source);
}
exports._catchStatic = _catchStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2NhdGNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELCtEQU40QjtBQU81QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMscURBQXFELENBQUMsQ0FBQztBQUM3Rzs7R0FFRztBQVJILDJCQUFvQyxTQUFRLDhCQUF3QjtJQVdwRTs7T0FFRztJQVZELFlBQVksTUFBd0M7UUFZbEQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztJQVl4QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBYzNCLElBQUksZ0JBYkQsQ0FBQSxLQUFNLEdBQUUsSUFBSyxFQUFBLHNCQUFDLENBQUEsUUFBUyxHQUFFLEtBQU0sQ0FBQztZQWVuQyxHQUFHLENBQUMsQ0FiQyxJQUFBLHNDQUFHLENBQUEsTUFBTyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO2dCQWNoQyxNQUFNLHNDQWJELENBQUEsRUFBRyxHQUFFLE1BQU8sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQztnQkFlMUMsS0FiSyxHQUFFLElBQUssQ0FBQztnQkFjYixRQWJRLEdBQUUsS0FBTSxDQUFDO2dCQWVqQixPQWJPLENBQUMsRUFBQyxDQUFFO29CQWNULElBQUksc0JBYkQsQ0FBQSxDQUFFLEdBQUEsQ0FBWSxFQUFBLENBQUUsQ0FBQztvQkFlcEIsSUFiRyxDQUFFO3dCQWNILE1BYkssRUFBRSxJQUFLLEVBQUMsS0FBTSxFQUFFLEdBQUUsY0FBTSxFQUFHLENBQUMsSUFBSSxFQUFFLENBQUEsQ0FBQzt3QkFjeEMsRUFBRSxDQUFDLENBYkMsSUFBSSxDQUFDLENBQUEsQ0FBRTs0QkFjVCxjQWJLLG9DQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUM7NEJBYzlCLEtBQUssQ0FiQzt3QkFjUixDQWJDO3dCQWNELENBYkMsR0FBRSxLQUFNLENBQUM7b0JBY1osQ0FiQztvQkFBQSxLQUFBLENBQUEsQ0FBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO3dCQWNYLEtBYkssR0FBRSxDQUFFLENBQUM7d0JBY1YsUUFiUSxHQUFFLElBQUssQ0FBQzt3QkFjaEIsY0FiSyxvQ0FBb0IsQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDO3dCQWM5QixLQUFLLENBYkM7b0JBY1IsQ0FiQztvQkFlRCxNQWJLLENBQUUsQ0FBQztnQkFjVixDQWJDO2dCQWVELEVBQUUsQ0FBQyxDQWJDLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTtvQkFBQSxLQUFBLENBQU87Z0JBQUEsQ0FBRTtZQWMzQixDQWJDO1lBZUQsRUFBRSxDQUFDLENBYkMsUUFBUSxDQUFDLENBQUEsQ0FBRTtnQkFBQSxNQUFNLEtBQU0sQ0FBQztZQUFBLENBQUU7UUFjaEMsQ0FiQztLQUFBO0NBQ0g7QUFlQTtJQUNBLGlEQUFpRDtJQUNqRCxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ3hDLENBQUM7QUFFRDs7OztHQUlHO0FBdEJILG1CQUFtQyxNQUF3QztJQXdCekUsTUF2Qk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBd0JwRCxDQUFDO0FBekJELDhCQXlCQztBQUNEOzs7OztHQUtHO0FBM0JILGdCQUEwQixNQUF3QixFQUFDLEdBQUksSUFBd0I7SUE2QjdFLE1BNUJNLENBQUEsU0FBVSxDQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUE2QjdDLENBQUM7QUE5QkQsd0JBOEJDO0FBQ0Q7Ozs7R0FJRztBQS9CSCxzQkFBZ0MsR0FBRyxNQUEwQjtJQWlDM0QsTUFoQ00sQ0FBQSxTQUFVLENBQUMsTUFBTSxDQUFDLENBQUM7QUFpQzNCLENBaENDO0FBRkQsb0NBRUMiLCJmaWxlIjoiY2F0Y2guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IHJldHVybkFzeW5jSXRlcmF0b3IgfSBmcm9tICcuLi9pbnRlcm5hbC9yZXR1cm5pdGVyYXRvcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5yZXR1cm5pdGVyYXRvclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgQ2F0Y2hBbGxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgez99ICovIGVycm9yID0gbnVsbCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNFcnJvciA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi8gc291cmNlIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSBzb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG5cbiAgICAgIGVycm9yID0gbnVsbDtcbiAgICAgIGhhc0Vycm9yID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGMgPSAvKiogQHR5cGUge1RTb3VyY2V9ICovKCggPFRTb3VyY2U+e30pKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGF3YWl0IGl0Lm5leHQoKTtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgYXdhaXQgcmV0dXJuQXN5bmNJdGVyYXRvcihpdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgYyA9IHZhbHVlO1xuICAgICAgICB9IGNhdGNoICggLyoqIEB0eXBlIHs/fSAqL2UpIHtcbiAgICAgICAgICBlcnJvciA9IGU7XG4gICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIGF3YWl0IHJldHVybkFzeW5jSXRlcmF0b3IoaXQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgeWllbGQgYztcbiAgICAgIH1cblxuICAgICAgaWYgKCFoYXNFcnJvcikgeyBicmVhazsgfVxuICAgIH1cblxuICAgIGlmIChoYXNFcnJvcikgeyB0aHJvdyBlcnJvcjsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIENhdGNoQWxsQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+fSAqL1xuQ2F0Y2hBbGxBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2hBbGw8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBDYXRjaEFsbEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlKTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHsuLi4hQXN5bmNJdGVyYWJsZTxUPn0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2g8VD4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LCAuLi5hcmdzOiBBc3luY0l0ZXJhYmxlPFQ+W10pOiBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBfY2F0Y2hBbGw8VD4oW3NvdXJjZV0uY29uY2F0KGFyZ3MpKTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7Li4uIUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBfY2F0Y2hTdGF0aWM8VD4oLi4uc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+W10pOiBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBfY2F0Y2hBbGwoc291cmNlKTtcbn1cbiJdfQ==