goog.module('targets.es2015.cls.asynciterable.tap'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/tap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
/**
 * @template TSource
 */
class TapAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {(!NextAsyncObserver<TSource>|!ErrorAsyncObserver<TSource>|!CompletionAsyncObserver<TSource>)} observer
     */
    constructor(source, observer) {
        super();
        this._source = source;
        this._observer = observer;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            const /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
            while (1) {
                let /** @type {?} */ next;
                try {
                    next = yield __await(it.next());
                }
                catch (e) {
                    if (this._observer.error) {
                        yield __await(this._observer.error(e));
                    }
                    throw e;
                }
                if (next.done) {
                    if (this._observer.complete) {
                        yield __await(this._observer.complete());
                    }
                    break;
                }
                if (this._observer.next) {
                    yield __await(this._observer.next(next.value));
                }
                yield next.value;
            }
        });
    }
}
function TapAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TapAsyncIterable.prototype._source;
    /** @type {(!NextAsyncObserver<TSource>|!ErrorAsyncObserver<TSource>|!CompletionAsyncObserver<TSource>)} */
    TapAsyncIterable.prototype._observer;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {(!NextAsyncObserver<TSource>|!ErrorAsyncObserver<TSource>|!CompletionAsyncObserver<TSource>)} observer
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function tap(source, observer) {
    return new TapAsyncIterable(source, observer);
}
exports.tap = tap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3RhcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQVFsRCxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5RixJQUFJLENBQUMsT0FBTyxDQUFDLHNDQUFzQyxDQUFDLENBQUMsQ0FBQyxzQ0FBc0M7QUFDNUY7O0dBRUc7QUFUSCxzQkFBK0IsU0FBUSw4QkFBd0I7SUFhL0Q7OztPQUdHO0lBWkQsWUFBWSxNQUE4QixFQUFDLFFBQXdDO1FBY2pGLEtBYkssRUFBRSxDQUFDO1FBY1IsSUFiSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFjdEIsSUFiSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFjNUIsQ0FBQztJQUNIOztPQUVHO0lBZE0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWdCM0IsTUFBTSxzQ0FmRCxDQUFBLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1lBZ0JoRCxPQWZPLENBQUMsRUFBQyxDQUFFO2dCQWdCVCxJQUFJLGdCQWZELENBQUEsSUFBSyxDQUFDO2dCQWdCVCxJQWZHLENBQUU7b0JBZ0JILElBZkksR0FBRSxjQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDO2dCQWdCekIsQ0FmQztnQkFBQSxLQUFBLENBQUEsQ0FBUSxDQUFDLENBQUMsQ0FBQSxDQUFFO29CQWdCWCxFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUU7d0JBQUEsY0FBTSxJQUFLLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDO29CQUFBLENBQUU7b0JBZ0I1RCxNQWZLLENBQUUsQ0FBQztnQkFnQlYsQ0FmQztnQkFpQkQsRUFBRSxDQUFDLENBZkMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7b0JBZ0JkLEVBQUUsQ0FBQyxDQWZDLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTt3QkFBQSxjQUFNLElBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUEsQ0FBQztvQkFBQSxDQUFFO29CQWdCakUsS0FBSyxDQWZDO2dCQWdCUixDQWZDO2dCQWlCRCxFQUFFLENBQUMsQ0FmQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUU7b0JBQUEsY0FBTSxJQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQztnQkFBQSxDQUFFO2dCQWdCbkUsTUFmSyxJQUFLLENBQUMsS0FBSyxDQUFDO1lBZ0JuQixDQWZDO1FBZ0JILENBZkM7S0FBQTtDQUNIO0FBaUJBO0lBQ0Esc0NBQXNDO0lBQ3RDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDbkMsMkdBQTJHO0lBQzNHLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDckMsQ0FBQztBQUVEOzs7OztHQUtHO0FBM0JILGFBNkJJLE1BNUI4QixFQTZCOUIsUUE1QnVDO0lBNkJ6QyxNQTVCTSxDQUFBLElBQUksZ0JBQWlCLENBQVUsTUFBTSxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBNkJ6RCxDQTVCQztBQUpELGtCQUlDIiwiZmlsZSI6InRhcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgUGFydGlhbEFzeW5jT2JzZXJ2ZXIgfSBmcm9tICcuLi9vYnNlcnZlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5vYnNlcnZlclwiKTtcbmdvb2cucmVxdWlyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5vYnNlcnZlclwiKTsgLy8gZm9yY2UgdHlwZS1vbmx5IG1vZHVsZSB0byBiZSBsb2FkZWRcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgVGFwQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX29ic2VydmVyOiBQYXJ0aWFsQXN5bmNPYnNlcnZlcjxUU291cmNlPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0geyghTmV4dEFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT58IUVycm9yQXN5bmNPYnNlcnZlcjxUU291cmNlPnwhQ29tcGxldGlvbkFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT4pfSBvYnNlcnZlclxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIG9ic2VydmVyOiBQYXJ0aWFsQXN5bmNPYnNlcnZlcjxUU291cmNlPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX29ic2VydmVyID0gb2JzZXJ2ZXI7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgd2hpbGUgKDEpIHtcbiAgICAgIGxldCAvKiogQHR5cGUgez99ICovIG5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBuZXh0ID0gYXdhaXQgaXQubmV4dCgpO1xuICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYnNlcnZlci5lcnJvcikgeyBhd2FpdCB0aGlzLl9vYnNlcnZlci5lcnJvcihlKTsgfVxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dC5kb25lKSB7XG4gICAgICAgIGlmICh0aGlzLl9vYnNlcnZlci5jb21wbGV0ZSkgeyBhd2FpdCB0aGlzLl9vYnNlcnZlci5jb21wbGV0ZSgpOyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5fb2JzZXJ2ZXIubmV4dCkgeyBhd2FpdCB0aGlzLl9vYnNlcnZlci5uZXh0KG5leHQudmFsdWUpOyB9XG4gICAgICB5aWVsZCBuZXh0LnZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYXBBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuVGFwQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7KCFOZXh0QXN5bmNPYnNlcnZlcjxUU291cmNlPnwhRXJyb3JBc3luY09ic2VydmVyPFRTb3VyY2U+fCFDb21wbGV0aW9uQXN5bmNPYnNlcnZlcjxUU291cmNlPil9ICovXG5UYXBBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fb2JzZXJ2ZXI7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHsoIU5leHRBc3luY09ic2VydmVyPFRTb3VyY2U+fCFFcnJvckFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT58IUNvbXBsZXRpb25Bc3luY09ic2VydmVyPFRTb3VyY2U+KX0gb2JzZXJ2ZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFwPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBvYnNlcnZlcjogUGFydGlhbEFzeW5jT2JzZXJ2ZXI8VFNvdXJjZT4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGFwQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIG9ic2VydmVyKTtcbn1cbiJdfQ==