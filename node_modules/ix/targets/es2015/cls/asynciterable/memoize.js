goog.module('targets.es2015.cls.asynciterable.memoize'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/memoize.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _refcountlist_1 = goog.require('targets.es2015.cls.iterable._refcountlist');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.es2015.cls.asynciterable.create');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.create");
/**
 * @template T
 */
class MemoizeAsyncBuffer extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterator<T>} source
     * @param {!tsickle_forward_declare_2.IRefCountList<T>} buffer
     */
    constructor(source, buffer) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = buffer;
    }
    /**
     * @return {!AsyncIterableIterator<T>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {number} */ i = 0;
            try {
                while (1) {
                    let /** @type {boolean} */ hasValue = false, /** @type {T} */ current = ({});
                    if (i >= this._buffer.count) {
                        if (!this._stopped) {
                            try {
                                let /** @type {!IteratorResult<T>} */ next = yield __await(this._source.next());
                                hasValue = !next.done;
                                if (hasValue) {
                                    current = next.value;
                                }
                            }
                            catch (e) {
                                this._error = e;
                                this._stopped = true;
                            }
                        }
                        if (this._stopped) {
                            throw this._error;
                        }
                        if (hasValue) {
                            this._buffer.push(current);
                        }
                    }
                    else {
                        hasValue = true;
                    }
                    if (hasValue) {
                        yield this._buffer.get(i);
                    }
                    else {
                        break;
                    }
                    i++;
                }
            }
            finally {
                this._buffer.done();
            }
        });
    }
}
function MemoizeAsyncBuffer_tsickle_Closure_declarations() {
    /** @type {!AsyncIterator<T>} */
    MemoizeAsyncBuffer.prototype._source;
    /** @type {!tsickle_forward_declare_2.IRefCountList<T>} */
    MemoizeAsyncBuffer.prototype._buffer;
    /** @type {?} */
    MemoizeAsyncBuffer.prototype._error;
    /** @type {boolean} */
    MemoizeAsyncBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {number=} readerCount
 * @param {function(!AsyncIterable<TSource>): !AsyncIterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(TSource|TResult)>}
 */
function memoize(source, readerCount = -1, selector) {
    if (readerCount === -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new _refcountlist_1.MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeAsyncBuffer(source[Symbol.asyncIterator](), new _refcountlist_1.RefCountList(readerCount));
    }
    return create_1.create(() => ((selector))(memoize(source, readerCount))[Symbol.asyncIterator]());
}
exports.memoize = memoize;
//# sourceMappingURL=data:application/json;base64,