goog.module('targets.es2015.cls.asynciterable.groupby'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/groupby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var _grouping_1 = goog.require('targets.es2015.cls.asynciterable._grouping');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._grouping");
/**
 * @template TKey, TValue
 */
class GroupedAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {TKey} key
     * @param {!Iterable<TValue>} source
     */
    constructor(key, source) {
        super();
        this.key = key;
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TValue>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            for (let /** @type {TValue} */ item of this._source) {
                yield item;
            }
        });
    }
}
exports.GroupedAsyncIterable = GroupedAsyncIterable;
function GroupedAsyncIterable_tsickle_Closure_declarations() {
    /** @type {TKey} */
    GroupedAsyncIterable.prototype.key;
    /** @type {!Iterable<TValue>} */
    GroupedAsyncIterable.prototype._source;
}
/**
 * @template TSource, TKey, TValue
 */
class GroupByAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
     * @param {function(TSource): (TValue|!Promise<TValue>)} elementSelector
     */
    constructor(source, keySelector, elementSelector) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._elementSelector = elementSelector;
    }
    /**
     * @return {!AsyncIterableIterator<!GroupedAsyncIterable<TKey, TValue>>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            const /** @type {!Map<TKey, !Array<TValue>>} */ map = yield __await(_grouping_1.createGrouping(this._source, this._keySelector, this._elementSelector));
            for (let [key, values] of map) {
                yield new GroupedAsyncIterable(key, values);
            }
        });
    }
}
exports.GroupByAsyncIterable = GroupByAsyncIterable;
function GroupByAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    GroupByAsyncIterable.prototype._source;
    /** @type {function(TSource): (TKey|!Promise<TKey>)} */
    GroupByAsyncIterable.prototype._keySelector;
    /** @type {function(TSource): (TValue|!Promise<TValue>)} */
    GroupByAsyncIterable.prototype._elementSelector;
}
/**
 * @template TSource, TKey, TValue
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
 * @param {function(TSource): (TValue|!Promise<TValue>)=} elementSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<!GroupedAsyncIterable<TKey, TValue>>}
 */
function groupBy(source, keySelector, elementSelector = identity_1.identityAsync) {
    return new GroupByAsyncIterable(source, keySelector, elementSelector);
}
exports.groupBy = groupBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2dyb3VwYnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsbURBTnNCO0FBT3RCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQVBqRDtBQVFyRCwyQ0FQdUI7QUFRdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDN0c7O0dBRUc7QUFUSCwwQkFBK0MsU0FBUSw4QkFBdUI7SUFhOUU7OztPQUdHO0lBWkQsWUFBWSxHQUFTLEVBQUMsTUFBeUI7UUFjN0MsS0FiSyxFQUFFLENBQUM7UUFjUixJQWJJLENBQUMsR0FBRyxHQUFFLEdBQUksQ0FBQztRQWNmLElBYkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBY3hCLENBQUM7SUFDSDs7T0FFRztJQWRNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFnQjNCLEdBQUcsQ0FBQyxDQWZDLElBQUEscUJBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7Z0JBZ0I5QixNQWZLLElBQUssQ0FBQztZQWdCYixDQWZDO1FBZ0JILENBZkM7S0FBQTtDQUNIO0FBZkEsb0RBZUE7QUFpQkE7SUFDQSxtQkFBbUI7SUFDbkIsb0JBQW9CLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztJQUNuQyxnQ0FBZ0M7SUFDaEMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUN2QyxDQUFDO0FBRUQ7O0dBRUc7QUF4QkgsMEJBQXdELFNBQVEsOEJBQW1EO0lBNkJuSDs7OztPQUlHO0lBNUJELFlBOEJJLE1BN0I4QixFQThCOUIsV0E3QnFELEVBOEJyRCxlQTdCNkQ7UUE4Qi9ELEtBN0JLLEVBQUUsQ0FBQztRQThCUixJQTdCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUE4QnRCLElBN0JJLENBQUMsWUFBWSxHQUFFLFdBQVksQ0FBQztRQThCaEMsSUE3QkksQ0FBQyxnQkFBZ0IsR0FBRSxlQUFnQixDQUFDO0lBOEIxQyxDQUFDO0lBQ0g7O09BRUc7SUE5Qk0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWdDM0IsTUFBTSx5Q0EvQkQsQ0FBQSxHQUFJLEdBQUUsY0FBTSwwQkFBZSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSyxDQUFDLFlBQVksRUFBQyxJQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQSxDQUFDO1lBZ0N6RixHQUFHLENBQUMsQ0EvQkMsSUFBRyxDQUFFLEdBQUcsRUFBQyxNQUFPLENBQUMsSUFBRyxHQUFJLENBQUMsQ0FBQSxDQUFFO2dCQWdDOUIsTUEvQkssSUFBSSxvQkFBcUIsQ0FBQyxHQUFHLEVBQUMsTUFBTyxDQUFDLENBQUM7WUFnQzlDLENBL0JDO1FBZ0NILENBL0JDO0tBQUE7Q0FDSDtBQXJCQSxvREFxQkE7QUFpQ0E7SUFDQSxzQ0FBc0M7SUFDdEMsb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN2Qyx1REFBdUQ7SUFDdkQsb0JBQW9CLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQztJQUM1QywyREFBMkQ7SUFDM0Qsb0JBQW9CLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDO0FBQ2hELENBQUM7QUFVRDs7Ozs7O0dBTUc7QUEvQ0gsaUJBaURJLE1BaEQ4QixFQWlEOUIsV0FoRHFELEVBaURyRCxrQkFoRCtELHdCQUFjO0lBa0QvRSxNQWhETSxDQUFBLElBQUksb0JBQXFCLENBQXdCLE1BQU0sRUFBQyxXQUFZLEVBQUMsZUFBZ0IsQ0FBQyxDQUFDO0FBaUQvRixDQWhEQztBQU5ELDBCQU1DIiwiZmlsZSI6Imdyb3VwYnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGlkZW50aXR5QXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcbmltcG9ydCB7IGNyZWF0ZUdyb3VwaW5nIH0gZnJvbSAnLi9fZ3JvdXBpbmcnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMyA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZS5fZ3JvdXBpbmdcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUS2V5LCBUVmFsdWVcbiAqL1xuZXhwb3J0IGNsYXNzIEdyb3VwZWRBc3luY0l0ZXJhYmxlPFRLZXksIFRWYWx1ZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUVmFsdWU+IHtcbnB1YmxpYyByZWFkb25seSBrZXk6IFRLZXk7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPFRWYWx1ZT47XG4vKipcbiAqIEBwYXJhbSB7VEtleX0ga2V5XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUVmFsdWU+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioa2V5OiBUS2V5LCBzb3VyY2U6IEl0ZXJhYmxlPFRWYWx1ZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRWYWx1ZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFZhbHVlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgeWllbGQgaXRlbTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gR3JvdXBlZEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7VEtleX0gKi9cbkdyb3VwZWRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5rZXk7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUVmFsdWU+fSAqL1xuR3JvdXBlZEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXksIFRWYWx1ZVxuICovXG5leHBvcnQgY2xhc3MgR3JvdXBCeUFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVEtleSwgVFZhbHVlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPEdyb3VwZWRBc3luY0l0ZXJhYmxlPFRLZXksIFRWYWx1ZT4+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+O1xucHJpdmF0ZSBfZWxlbWVudFNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRWYWx1ZSB8IFByb21pc2U8VFZhbHVlPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVFZhbHVlfCFQcm9taXNlPFRWYWx1ZT4pfSBlbGVtZW50U2VsZWN0b3JcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgICAgIGVsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUgfCBQcm9taXNlPFRWYWx1ZT4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2VsZW1lbnRTZWxlY3RvciA9IGVsZW1lbnRTZWxlY3RvcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPCFHcm91cGVkQXN5bmNJdGVyYWJsZTxUS2V5LCBUVmFsdWU+Pn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshTWFwPFRLZXksICFBcnJheTxUVmFsdWU+Pn0gKi8gbWFwID0gYXdhaXQgY3JlYXRlR3JvdXBpbmcodGhpcy5fc291cmNlLCB0aGlzLl9rZXlTZWxlY3RvciwgdGhpcy5fZWxlbWVudFNlbGVjdG9yKTtcbiAgICBmb3IgKGxldCBba2V5LCB2YWx1ZXNdIG9mIG1hcCkge1xuICAgICAgeWllbGQgbmV3IEdyb3VwZWRBc3luY0l0ZXJhYmxlKGtleSwgdmFsdWVzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gR3JvdXBCeUFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5Hcm91cEJ5QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IChUS2V5fCFQcm9taXNlPFRLZXk+KX0gKi9cbkdyb3VwQnlBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fa2V5U2VsZWN0b3I7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVFZhbHVlfCFQcm9taXNlPFRWYWx1ZT4pfSAqL1xuR3JvdXBCeUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9lbGVtZW50U2VsZWN0b3I7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+KTogQXN5bmNJdGVyYWJsZVg8R3JvdXBlZEFzeW5jSXRlcmFibGU8VEtleSwgVFNvdXJjZT4+O1xuZXhwb3J0IGZ1bmN0aW9uIGdyb3VwQnk8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5IHwgUHJvbWlzZTxUS2V5PixcbiAgZWxlbWVudFNlbGVjdG9yPzogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUgfCBQcm9taXNlPFRWYWx1ZT4pOiBBc3luY0l0ZXJhYmxlWDxHcm91cGVkQXN5bmNJdGVyYWJsZTxUS2V5LCBUVmFsdWU+Pjtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXksIFRWYWx1ZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVFZhbHVlfCFQcm9taXNlPFRWYWx1ZT4pPX0gZWxlbWVudFNlbGVjdG9yXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDwhR3JvdXBlZEFzeW5jSXRlcmFibGU8VEtleSwgVFZhbHVlPj59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBncm91cEJ5PFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGVsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUgfCBQcm9taXNlPFRWYWx1ZT4gPSBpZGVudGl0eUFzeW5jKTpcbiAgICBBc3luY0l0ZXJhYmxlWDxHcm91cGVkQXN5bmNJdGVyYWJsZTxUS2V5LCBUVmFsdWU+PiB7XG4gIHJldHVybiBuZXcgR3JvdXBCeUFzeW5jSXRlcmFibGU8VFNvdXJjZSwgVEtleSwgVFZhbHVlPihzb3VyY2UsIGtleVNlbGVjdG9yLCBlbGVtZW50U2VsZWN0b3IpO1xufVxuIl19