goog.module('targets.es2015.cls.asynciterable.catchwith'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/catchwith.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var returniterator_1 = goog.require('targets.es2015.cls.internal.returniterator');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.returniterator");
/**
 * @template TSource
 */
class CatchWithAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(?): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} handler
     */
    constructor(source, handler) {
        super();
        this._source = source;
        this._handler = handler;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!AsyncIterable<TSource>} */ err, /** @type {boolean} */ hasError = false, /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
            while (1) {
                let /** @type {!IteratorResult<TSource>} */ c = ({});
                try {
                    c = yield __await(it.next());
                    if (c.done) {
                        yield __await(returniterator_1.returnAsyncIterator(it));
                        break;
                    }
                }
                catch (e) {
                    err = yield __await(this._handler(e));
                    hasError = true;
                    yield __await(returniterator_1.returnAsyncIterator(it));
                    break;
                }
                yield c.value;
            }
            if (hasError) {
                try {
                    for (var /** @type {!AsyncIterable<TSource>} */ _a = __asyncValues(/** @type {!AsyncIterable<TSource>} */ ((err))), _b; _b = yield __await(_a.next()), !_b.done;) {
                        let /** @type {TSource} */ item = yield __await(_b.value);
                        yield item;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            var e_1, _c;
        });
    }
}
function CatchWithAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    CatchWithAsyncIterable.prototype._source;
    /** @type {function(?): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} */
    CatchWithAsyncIterable.prototype._handler;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(?): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} handler
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function catchWith(source, handler) {
    return new CatchWithAsyncIterable(source, handler);
}
exports.catchWith = catchWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2NhdGNod2l0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCwrREFONEI7QUFPNUIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDN0c7O0dBRUc7QUFSSCw0QkFBcUMsU0FBUSw4QkFBd0I7SUFZckU7OztPQUdHO0lBWEQsWUFhSSxNQVo4QixFQWE5QixPQVppRjtRQWFuRixLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxRQUFRLEdBQUUsT0FBUSxDQUFDO0lBYTFCLENBQUM7SUFDSDs7T0FFRztJQWJNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7WUFlM0IsSUFBSSxzQ0FkRCxDQUFBLEdBQXdDLEVBQUEsc0JBQUMsQ0FBQSxRQUFTLEdBQUUsS0FBTSxFQUFBLHNDQUFDLENBQUEsRUFBRyxHQUFFLElBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUM7WUFlekcsT0FkTyxDQUFDLEVBQUMsQ0FBRTtnQkFlVCxJQUFJLHVDQWRELENBQUEsQ0FBRSxHQUFBLENBQTRCLEVBQUEsQ0FBRSxDQUFDO2dCQWdCcEMsSUFkRyxDQUFFO29CQWVILENBZEMsR0FBRSxjQUFNLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxDQUFDO29CQWVwQixFQUFFLENBQUMsQ0FkQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTt3QkFlWCxjQWRLLG9DQUFvQixDQUFDLEVBQUUsQ0FBQyxDQUFBLENBQUM7d0JBZTlCLEtBQUssQ0FkQztvQkFlUixDQWRDO2dCQWVILENBZEM7Z0JBQUEsS0FBQSxDQUFBLENBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTtvQkFlWCxHQWRHLEdBQUUsY0FBTSxJQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7b0JBZTdCLFFBZFEsR0FBRSxJQUFLLENBQUM7b0JBZWhCLGNBZEssb0NBQW9CLENBQUMsRUFBRSxDQUFDLENBQUEsQ0FBQztvQkFlOUIsS0FBSyxDQWRDO2dCQWVSLENBZEM7Z0JBZ0JELE1BZEssQ0FBRSxDQUFDLEtBQUssQ0FBQztZQWVoQixDQWRDO1lBZ0JELEVBQUUsQ0FBQyxDQWRDLFFBQVEsQ0FBQyxDQUFBLENBQUU7O29CQWViLEdBZEcsQ0FBQSxDQUFnQixJQUFBLHNDQUFBLENBQUEsS0FBQSxjQUFBLHNDQUFBLENBQUEsQ0FBQSxDQUFHLEdBQUEsQ0FBQSxDQUFLLENBQUEsSUFBQTt3QkFBaEIsSUFBQSxzQkFBRyxDQUFBLElBQUssMEJBQUEsQ0FBQTt3QkFlakIsTUFkSyxJQUFLLENBQUM7cUJBQ1o7Ozs7Ozs7OztZQWVILENBZEM7O1FBZUgsQ0FkQztLQUFBO0NBQ0g7QUFnQkE7SUFDQSxzQ0FBc0M7SUFDdEMsc0JBQXNCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN6Qyx1RkFBdUY7SUFDdkYsc0JBQXNCLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUMxQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUExQkgsbUJBNEJJLE1BM0I4QixFQTRCOUIsT0EzQmlGO0lBNEJuRixNQTNCTSxDQUFBLElBQUksc0JBQXVCLENBQVUsTUFBTSxFQUFDLE9BQVEsQ0FBQyxDQUFDO0FBNEI5RCxDQTNCQztBQUpELDhCQUlDIiwiZmlsZSI6ImNhdGNod2l0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgcmV0dXJuQXN5bmNJdGVyYXRvciB9IGZyb20gJy4uL2ludGVybmFsL3JldHVybml0ZXJhdG9yJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLnJldHVybml0ZXJhdG9yXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBDYXRjaFdpdGhBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfaGFuZGxlcjogKGVycm9yOiBhbnkpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6ICghQXN5bmNJdGVyYWJsZTxUU291cmNlPnwhUHJvbWlzZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj4pfSBoYW5kbGVyXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgaGFuZGxlcjogKGVycm9yOiBhbnkpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5faGFuZGxlciA9IGhhbmRsZXI7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovIGVycjogQXN5bmNJdGVyYWJsZTxUU291cmNlPiB8IHVuZGVmaW5lZCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNFcnJvciA9IGZhbHNlLCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICB3aGlsZSAoMSkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7IUl0ZXJhdG9yUmVzdWx0PFRTb3VyY2U+fSAqLyBjID0gLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VFNvdXJjZT59ICovKCggPEl0ZXJhdG9yUmVzdWx0PFRTb3VyY2U+Pnt9KSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGMgPSBhd2FpdCBpdC5uZXh0KCk7XG4gICAgICAgIGlmIChjLmRvbmUpIHtcbiAgICAgICAgICBhd2FpdCByZXR1cm5Bc3luY0l0ZXJhdG9yKGl0KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgIGVyciA9IGF3YWl0IHRoaXMuX2hhbmRsZXIoZSk7XG4gICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgYXdhaXQgcmV0dXJuQXN5bmNJdGVyYXRvcihpdCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB5aWVsZCBjLnZhbHVlO1xuICAgIH1cblxuICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovKCggZXJyKSkpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQ2F0Y2hXaXRoQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkNhdGNoV2l0aEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKD8pOiAoIUFzeW5jSXRlcmFibGU8VFNvdXJjZT58IVByb21pc2U8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KX0gKi9cbkNhdGNoV2l0aEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9oYW5kbGVyO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6ICghQXN5bmNJdGVyYWJsZTxUU291cmNlPnwhUHJvbWlzZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj4pfSBoYW5kbGVyXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNhdGNoV2l0aDxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgaGFuZGxlcjogKGVycm9yOiBhbnkpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENhdGNoV2l0aEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlLCBoYW5kbGVyKTtcbn1cbiJdfQ==