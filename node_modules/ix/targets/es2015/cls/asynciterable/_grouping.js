goog.module('targets.es2015.cls.asynciterable._grouping'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/_grouping.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @ignore
 * @template TSource, TKey, TValue
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (TKey|!Promise<TKey>)} keySelector
 * @param {function(TSource): (TValue|!Promise<TValue>)} elementSelector
 * @return {!Promise<!Map<TKey, !Array<TValue>>>}
 */
function createGrouping(source, keySelector, elementSelector) {
    return __awaiter(this, void 0, void 0, function* () {
        let /** @type {!Map<TKey, !Array<TValue>>} */ map = new Map();
        try {
            for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield source_1.next(), !source_1_1.done;) {
                let /** @type {TSource} */ item = yield source_1_1.value;
                let /** @type {TKey} */ key = yield keySelector(item);
                let /** @type {!Array<TValue>} */ grouping = map.get(key);
                if (!map.has(key)) {
                    grouping = [];
                    map.set(key, grouping);
                }
                let /** @type {TValue} */ element = yield elementSelector(item); /** @type {!Array<TValue>} */
                ((grouping)).push(element);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield _a.call(source_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return map;
        var e_1, _a;
    });
}
exports.createGrouping = createGrouping;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL19ncm91cGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBR0g7Ozs7Ozs7R0FPRztBQVZILHdCQVlJLE1BWDhCLEVBWTlCLFdBWHFELEVBWXJELGVBWDZEOztRQVkvRCxJQUFJLHlDQVhELENBQUEsR0FBSSxHQUFFLElBQUksR0FBSSxFQUFrQixDQUFDOztZQVlwQyxHQVhHLENBQUEsQ0FBbUIsSUFBQSxXQUFBLGNBQUEsTUFBTyxDQUFBLFlBQUE7Z0JBQWxCLElBQUEsc0JBQUcsQ0FBQSxJQUFLLHlCQUFBLENBQUE7Z0JBWWpCLElBQUksbUJBWEQsQ0FBQSxHQUFJLEdBQUUsTUFBTSxXQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBWWxDLElBQUksNkJBWEQsQ0FBQSxRQUFTLEdBQUUsR0FBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFZNUIsRUFBRSxDQUFDLENBWEMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUEsQ0FBRTtvQkFZbEIsUUFYUSxHQUFFLEVBQUcsQ0FBQztvQkFZZCxHQVhHLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBQyxRQUFTLENBQUMsQ0FBQztnQkFZekIsQ0FYQztnQkFZRCxJQUFJLHFCQVhELENBQUEsT0FBUSxHQUFFLE1BQU0sZUFBZ0IsQ0FBQyxJQUFJLENBQUMsQ0FBQSxDQUFBLDZCQUFBO2dCQUFBLENBQUEsQ0FZekMsUUFBUSxDQUFDLENBWEEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDekI7Ozs7Ozs7OztRQWFELE1BWE0sQ0FBQSxHQUFJLENBQUM7O0lBWWIsQ0FYQztDQUFBO0FBakJELHdDQWlCQyIsImZpbGUiOiJfZ3JvdXBpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5cbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXksIFRWYWx1ZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVEtleXwhUHJvbWlzZTxUS2V5Pil9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiAoVFZhbHVlfCFQcm9taXNlPFRWYWx1ZT4pfSBlbGVtZW50U2VsZWN0b3JcbiAqIEByZXR1cm4geyFQcm9taXNlPCFNYXA8VEtleSwgIUFycmF5PFRWYWx1ZT4+Pn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUdyb3VwaW5nPFRTb3VyY2UsIFRLZXksIFRWYWx1ZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXkgfCBQcm9taXNlPFRLZXk+LFxuICAgIGVsZW1lbnRTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUVmFsdWUgfCBQcm9taXNlPFRWYWx1ZT4pOiBQcm9taXNlPE1hcDxUS2V5LCBUVmFsdWVbXT4+IHtcbiAgbGV0IC8qKiBAdHlwZSB7IU1hcDxUS2V5LCAhQXJyYXk8VFZhbHVlPj59ICovIG1hcCA9IG5ldyBNYXA8VEtleSwgVFZhbHVlW10+KCk7XG4gIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyBrZXkgPSBhd2FpdCBrZXlTZWxlY3RvcihpdGVtKTtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8VFZhbHVlPn0gKi8gZ3JvdXBpbmcgPSBtYXAuZ2V0KGtleSk7XG4gICAgaWYgKCFtYXAuaGFzKGtleSkpIHtcbiAgICAgIGdyb3VwaW5nID0gW107XG4gICAgICBtYXAuc2V0KGtleSwgZ3JvdXBpbmcpO1xuICAgIH1cbiAgICBsZXQgLyoqIEB0eXBlIHtUVmFsdWV9ICovIGVsZW1lbnQgPSBhd2FpdCBlbGVtZW50U2VsZWN0b3IoaXRlbSk7IC8qKiBAdHlwZSB7IUFycmF5PFRWYWx1ZT59ICovKChcbiAgICBncm91cGluZykpLnB1c2goZWxlbWVudCk7XG4gIH1cblxuICByZXR1cm4gbWFwO1xufVxuIl19