goog.module('targets.es2015.cls.asynciterable.reduceright'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/reduceright.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var toarray_1 = goog.require('targets.es2015.cls.asynciterable.toarray');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.toarray");
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!Promise<(T|R)>}
 */
function reduceRight(source, accumulator, ...args) {
    return __awaiter(this, void 0, void 0, function* () {
        let [seed] = args;
        const /** @type {boolean} */ hasSeed = args.length === 1;
        let /** @type {boolean} */ hasValue = false;
        const /** @type {!Array<T>} */ array = yield toarray_1.toArray(source);
        for (let /** @type {number} */ offset = array.length - 1; offset >= 0; offset--) {
            const /** @type {T} */ item = array[offset];
            if (hasValue || (hasValue = hasSeed)) {
                seed = yield accumulator(seed, item, offset);
            }
            else {
                seed = item;
                hasValue = true;
            }
        }
        if (hasSeed && !hasValue) {
            return ((seed));
        }
        if (!hasValue) {
            throw new Error('Sequence contains no elements');
        }
        return ((seed));
    });
}
exports.reduceRight = reduceRight;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JlZHVjZXJpZ2h0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCx1Q0FMZ0I7QUFNaEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLG1EQUFtRCxDQUFDLENBTnRFO0FBZXBDOzs7Ozs7R0FNRztBQVpILHFCQWNJLE1BYndCLEVBY3hCLFdBYm9FLEVBY3BFLEdBYkcsSUFBZTs7UUFjcEIsSUFiRyxDQUFFLElBQUksQ0FBQyxHQUFFLElBQUssQ0FBQztRQWNsQixNQUFNLHNCQWJELENBQUEsT0FBUSxHQUFFLElBQUssQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDO1FBY2xDLElBQUksc0JBYkQsQ0FBQSxRQUFTLEdBQUUsS0FBTSxDQUFDO1FBY3JCLE1BQU0sd0JBYkQsQ0FBQSxLQUFNLEdBQUUsTUFBTSxpQkFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBY3BDLEdBQUcsQ0FBQyxDQWJDLElBQUEscUJBQUcsQ0FBQSxNQUFPLEdBQUUsS0FBTSxDQUFDLE1BQU0sR0FBRSxDQUFFLEVBQUMsTUFBTyxJQUFHLENBQUUsRUFBQyxNQUFPLEVBQUUsRUFBQyxDQUFFO1lBYzFELE1BQU0sZ0JBYkQsQ0FBQSxJQUFLLEdBQUUsS0FBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBYzNCLEVBQUUsQ0FBQyxDQWJDLFFBQVEsSUFBRyxDQUFFLFFBQVEsR0FBRSxPQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBY3JDLElBYkksR0FBRSxNQUFNLFdBQVksQ0FBQyxJQUFJLEVBQUMsSUFBSyxFQUFDLE1BQU8sQ0FBQyxDQUFDO1lBYy9DLENBYkM7WUFBQSxJQUFLLENBQUEsQ0FBRTtnQkFjTixJQWJJLEdBQUUsSUFBSyxDQUFDO2dCQWNaLFFBYlEsR0FBRSxJQUFLLENBQUM7WUFjbEIsQ0FiQztRQWNILENBYkM7UUFlRCxFQUFFLENBQUMsQ0FiQyxPQUFPLElBQUcsQ0FBRSxRQUFRLENBQUMsQ0FBQSxDQUFFO1lBY3pCLE1BQU0sQ0FBcUIsQ0FBQyxDQWJ0QixJQUFBLENBQUEsQ0FBTSxDQUFDO1FBY2YsQ0FiQztRQWVELEVBQUUsQ0FBQyxDQWJDLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTtZQWNkLE1BYkssSUFBSSxLQUFNLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQWNuRCxDQWJDO1FBZUQsTUFBTSxDQUFxQixDQUFDLENBYnRCLElBQUEsQ0FBQSxDQUFNLENBQUM7SUFjZixDQWJDO0NBQUE7QUEzQkQsa0NBMkJDIiwiZmlsZSI6InJlZHVjZXJpZ2h0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgdG9BcnJheSB9IGZyb20gJy4vdG9hcnJheSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLnRvYXJyYXlcIik7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWR1Y2VSaWdodDxUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogVCwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFQgfCBQcm9taXNlPFQ+KTogUHJvbWlzZTxUPjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWR1Y2VSaWdodDxULCBSID0gVD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgc2VlZDogUik6IFByb21pc2U8Uj47XG4vKipcbiAqIEB0ZW1wbGF0ZSBULCBSXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gYWNjdW11bGF0b3JcbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqIEByZXR1cm4geyFQcm9taXNlPChUfFIpPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0PFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgYWNjdW11bGF0b3I6IChhY2M6IFQgfCBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogUHJvbWlzZTxUIHwgUj4ge1xuICBsZXQgW3NlZWRdID0gYXJncztcbiAgY29uc3QgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc1ZhbHVlID0gZmFsc2U7XG4gIGNvbnN0IC8qKiBAdHlwZSB7IUFycmF5PFQ+fSAqLyBhcnJheSA9IGF3YWl0IHRvQXJyYXkoc291cmNlKTtcbiAgZm9yIChsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIG9mZnNldCA9IGFycmF5Lmxlbmd0aCAtIDE7IG9mZnNldCA+PSAwOyBvZmZzZXQtLSkge1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7VH0gKi8gaXRlbSA9IGFycmF5W29mZnNldF07XG4gICAgaWYgKGhhc1ZhbHVlIHx8IChoYXNWYWx1ZSA9IGhhc1NlZWQpKSB7XG4gICAgICBzZWVkID0gYXdhaXQgYWNjdW11bGF0b3Ioc2VlZCwgaXRlbSwgb2Zmc2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VlZCA9IGl0ZW07XG4gICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGhhc1NlZWQgJiYgIWhhc1ZhbHVlKSB7XG4gICAgcmV0dXJuIC8qKiBAdHlwZSB7KFR8Uil9ICovKCggc2VlZCkpO1xuICB9XG5cbiAgaWYgKCFoYXNWYWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2VxdWVuY2UgY29udGFpbnMgbm8gZWxlbWVudHMnKTtcbiAgfVxuXG4gIHJldHVybiAvKiogQHR5cGUgeyhUfFIpfSAqLygoIHNlZWQpKTtcbn1cbiJdfQ==