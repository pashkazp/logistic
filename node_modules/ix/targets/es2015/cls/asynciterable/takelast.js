goog.module('targets.es2015.cls.asynciterable.takelast'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/takelast.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class TakeLastAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            if (this._count === 0) {
                return;
            }
            let /** @type {!Array<?>} */ q = [];
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ item = yield __await(_b.value);
                    if (q.length >= this._count) {
                        q.shift();
                    }
                    q.push(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            while (q.length > 0) {
                yield ((q.shift()));
            }
            var e_1, _c;
        });
    }
}
function TakeLastAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    TakeLastAsyncIterable.prototype._source;
    /** @type {number} */
    TakeLastAsyncIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function takeLast(source, count) {
    return new TakeLastAsyncIterable(source, count);
}
exports.takeLast = takeLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rha2VsYXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCwyQkFBb0MsU0FBUSw4QkFBd0I7SUFXcEU7OztPQUdHO0lBVkQsWUFBWSxNQUE4QixFQUFDLEtBQWM7UUFZdkQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBYzNCLEVBQUUsQ0FBQyxDQWJDLElBQUksQ0FBQyxNQUFNLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTtnQkFBQSxNQUFBLENBQVE7WUFBQSxDQUFFO1lBZWxDLElBQUksd0JBYkQsQ0FBQSxDQUFFLEdBQUUsRUFBRyxDQUFDOztnQkFjWCxHQWJHLENBQUEsQ0FBbUIsSUFBQSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUF4QixJQUFBLHNCQUFHLENBQUEsSUFBSywwQkFBQSxDQUFBO29CQWNqQixFQUFFLENBQUMsQ0FiQyxDQUFDLENBQUMsTUFBTSxJQUFHLElBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFFO3dCQWM1QixDQWJDLENBQUMsS0FBSyxFQUFFLENBQUM7b0JBY1osQ0FiQztvQkFjRCxDQWJDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUNkOzs7Ozs7Ozs7WUFlRCxPQWJPLENBQUMsQ0FBQyxNQUFNLEdBQUUsQ0FBRSxFQUFDLENBQUU7Z0JBY3BCLE1BQTRCLENBQUMsQ0FieEIsQ0FBRSxDQUFDLEtBQUssRUFBQSxDQUFBLENBQUcsQ0FBQztZQWNuQixDQWJDOztRQWNILENBYkM7S0FBQTtDQUNIO0FBZUE7SUFDQSxzQ0FBc0M7SUFDdEMscUJBQXFCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUN4QyxxQkFBcUI7SUFDckIscUJBQXFCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUN2QyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6Qkgsa0JBQWtDLE1BQThCLEVBQUMsS0FBYztJQTJCN0UsTUExQk0sQ0FBQSxJQUFJLHFCQUFzQixDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTJCM0QsQ0ExQkM7QUFGRCw0QkFFQyIsImZpbGUiOiJ0YWtlbGFzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUYWtlTGFzdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9jb3VudCA9IGNvdW50O1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGlmICh0aGlzLl9jb3VudCA9PT0gMCkgeyByZXR1cm47IH1cblxuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gcSA9IFtdO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChxLmxlbmd0aCA+PSB0aGlzLl9jb3VudCkge1xuICAgICAgICBxLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgICBxLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHEubGVuZ3RoID4gMCkge1xuICAgICAgeWllbGQgLyoqIEB0eXBlIHtUU291cmNlfSAqLygoIHEuc2hpZnQoKSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYWtlTGFzdEFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5UYWtlTGFzdEFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblRha2VMYXN0QXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2NvdW50O1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWtlTGFzdDxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgVGFrZUxhc3RBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQpO1xufVxuIl19