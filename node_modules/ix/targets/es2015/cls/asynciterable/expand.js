goog.module('targets.es2015.cls.asynciterable.expand'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/expand.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class ExpandAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!Array<!AsyncIterable<TSource>>} */ q = [this._source];
            while (q.length > 0) {
                let /** @type {!AsyncIterable<TSource>} */ src = q.shift();
                try {
                    for (var /** @type {!AsyncIterable<TSource>} */ _a = __asyncValues(/** @type {!AsyncIterable<TSource>} */ ((src))), _b; _b = yield __await(_a.next()), !_b.done;) {
                        let /** @type {TSource} */ item = yield __await(_b.value);
                        let /** @type {!AsyncIterable<TSource>} */ items = yield __await(this._selector(item));
                        q.push(items);
                        yield item;
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            var e_1, _c;
        });
    }
}
function ExpandAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ExpandAsyncIterable.prototype._source;
    /** @type {function(TSource): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} */
    ExpandAsyncIterable.prototype._selector;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} selector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function expand(source, selector) {
    return new ExpandAsyncIterable(source, selector);
}
exports.expand = expand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2V4cGFuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgseUJBQWtDLFNBQVEsOEJBQXdCO0lBV2xFOzs7T0FHRztJQVZELFlBWUksTUFYOEIsRUFZOUIsUUFYc0Y7UUFZeEYsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQztJQVk1QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBYzNCLElBQUksOENBYkQsQ0FBQSxDQUFFLEdBQUUsQ0FBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFjdkIsT0FiTyxDQUFDLENBQUMsTUFBTSxHQUFFLENBQUUsRUFBQyxDQUFFO2dCQWNwQixJQUFJLHNDQWJELENBQUEsR0FBSSxHQUFFLENBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQzs7b0JBY3BCLEdBYkcsQ0FBQSxDQUFnQixJQUFBLHNDQUFBLENBQUEsS0FBQSxjQUFBLHNDQUFBLENBQUEsQ0FBQSxDQUFHLEdBQUEsQ0FBQSxDQUFLLENBQUEsSUFBQTt3QkFBaEIsSUFBQSxzQkFBRyxDQUFBLElBQUssMEJBQUEsQ0FBQTt3QkFjakIsSUFBSSxzQ0FiRCxDQUFBLEtBQU0sR0FBRSxjQUFNLElBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQzt3QkFjdkMsQ0FiQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzt3QkFjZCxNQWJLLElBQUssQ0FBQztxQkFDWjs7Ozs7Ozs7O1lBY0gsQ0FiQzs7UUFjSCxDQWJDO0tBQUE7Q0FDSDtBQWVBO0lBQ0Esc0NBQXNDO0lBQ3RDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdEMsNkZBQTZGO0lBQzdGLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILGdCQTJCSSxNQTFCOEIsRUEyQjlCLFFBMUJzRjtJQTRCeEYsTUExQk0sQ0FBQSxJQUFJLG1CQUFvQixDQUFVLE1BQU0sRUFBQyxRQUFTLENBQUMsQ0FBQztBQTJCNUQsQ0ExQkM7QUFMRCx3QkFLQyIsImZpbGUiOiJleHBhbmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgRXhwYW5kQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3NlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICghQXN5bmNJdGVyYWJsZTxUU291cmNlPnwhUHJvbWlzZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj4pfSBzZWxlY3RvclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fc2VsZWN0b3IgPSBzZWxlY3RvcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+fSAqLyBxID0gW3RoaXMuX3NvdXJjZV07XG4gICAgd2hpbGUgKHEubGVuZ3RoID4gMCkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovIHNyYyA9IHEuc2hpZnQoKTtcbiAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLygoIHNyYykpKSB7XG4gICAgICAgIGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLyBpdGVtcyA9IGF3YWl0IHRoaXMuX3NlbGVjdG9yKGl0ZW0pO1xuICAgICAgICBxLnB1c2goaXRlbXMpO1xuICAgICAgICB5aWVsZCBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBFeHBhbmRBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRXhwYW5kQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICghQXN5bmNJdGVyYWJsZTxUU291cmNlPnwhUHJvbWlzZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj4pfSAqL1xuRXhwYW5kQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NlbGVjdG9yO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICghQXN5bmNJdGVyYWJsZTxUU291cmNlPnwhUHJvbWlzZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj4pfSBzZWxlY3RvclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBleHBhbmQ8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KTpcbiAgICAgIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBFeHBhbmRBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgc2VsZWN0b3IpO1xufVxuIl19