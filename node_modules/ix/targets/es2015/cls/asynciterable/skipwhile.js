goog.module('targets.es2015.cls.asynciterable.skipwhile'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/skipwhile.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class SkipWhileAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
     */
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {boolean} */ yielding = false, /** @type {number} */ i = 0;
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ element = yield __await(_b.value);
                    if (!yielding && !(yield __await(this._predicate(element, i++)))) {
                        yielding = true;
                    }
                    if (yielding) {
                        yield element;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function SkipWhileAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    SkipWhileAsyncIterable.prototype._source;
    /** @type {function(TSource, number): (boolean|!Promise<boolean>)} */
    SkipWhileAsyncIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource, number): (boolean|!Promise<boolean>)} predicate
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function skipWhile(source, predicate) {
    return new SkipWhileAsyncIterable(source, predicate);
}
exports.skipWhile = skipWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NraXB3aGlsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgsNEJBQXFDLFNBQVEsOEJBQXdCO0lBV3JFOzs7T0FHRztJQVZELFlBWUksTUFYOEIsRUFZOUIsU0FYd0U7UUFZMUUsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsVUFBVSxHQUFFLFNBQVUsQ0FBQztJQVk5QixDQUFDO0lBQ0g7O09BRUc7SUFaTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBYzNCLElBQUksc0JBYkQsQ0FBQSxRQUFTLEdBQUUsS0FBTSxFQUFBLHFCQUFDLENBQUEsQ0FBRSxHQUFFLENBQUUsQ0FBQzs7Z0JBYzVCLEdBYkcsQ0FBQSxDQUFzQixJQUFBLEtBQUEsY0FBQSxJQUFLLENBQUMsT0FBTyxDQUFBLElBQUE7b0JBQTNCLElBQUEsc0JBQUcsQ0FBQSxPQUFRLDBCQUFBLENBQUE7b0JBY3BCLEVBQUUsQ0FBQyxDQWJDLENBQUMsUUFBUSxJQUFHLENBQUUsQ0FBQyxjQUFLLElBQUssQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUEsQ0FBRTt3QkFBQSxRQUFTLEdBQUUsSUFBSyxDQUFDO29CQUFBLENBQUU7b0JBYzdFLEVBQUUsQ0FBQyxDQWJDLFFBQVEsQ0FBQyxDQUFBLENBQUU7d0JBQUEsTUFBTSxPQUFRLENBQUM7b0JBQUEsQ0FBRTtpQkFDakM7Ozs7Ozs7Ozs7UUFjSCxDQWJDO0tBQUE7Q0FDSDtBQWVBO0lBQ0Esc0NBQXNDO0lBQ3RDLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDekMscUVBQXFFO0lBQ3JFLHNCQUFzQixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7QUFDNUMsQ0FBQztBQUVEOzs7OztHQUtHO0FBekJILG1CQTJCSSxNQTFCOEIsRUEyQjlCLFNBMUJ3RTtJQTJCMUUsTUExQk0sQ0FBQSxJQUFJLHNCQUF1QixDQUFVLE1BQU0sRUFBQyxTQUFVLENBQUMsQ0FBQztBQTJCaEUsQ0ExQkM7QUFKRCw4QkFJQyIsImZpbGUiOiJza2lwd2hpbGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgU2tpcFdoaWxlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3ByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gcHJlZGljYXRlXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgICAgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fcHJlZGljYXRlID0gcHJlZGljYXRlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIHlpZWxkaW5nID0gZmFsc2UsIC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMDtcbiAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGVsZW1lbnQgb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAoIXlpZWxkaW5nICYmICEoYXdhaXQgdGhpcy5fcHJlZGljYXRlKGVsZW1lbnQsIGkrKykpKSB7IHlpZWxkaW5nID0gdHJ1ZTsgfVxuICAgICAgaWYgKHlpZWxkaW5nKSB7IHlpZWxkIGVsZW1lbnQ7IH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2tpcFdoaWxlQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cblNraXBXaGlsZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cblNraXBXaGlsZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9wcmVkaWNhdGU7XG59XG5cbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IHByZWRpY2F0ZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBza2lwV2hpbGU8VFNvdXJjZT4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHByZWRpY2F0ZTogKHZhbHVlOiBUU291cmNlLCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBTa2lwV2hpbGVBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgcHJlZGljYXRlKTtcbn1cbiJdfQ==