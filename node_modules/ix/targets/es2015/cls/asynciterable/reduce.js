goog.module('targets.es2015.cls.asynciterable.reduce'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/reduce.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!Promise<(T|R)>}
 */
function reduce(source, accumulator, ...args) {
    return __awaiter(this, void 0, void 0, function* () {
        let [seed] = args;
        const /** @type {boolean} */ hasSeed = args.length === 1;
        let /** @type {number} */ i = 0, /** @type {boolean} */ hasValue = false;
        try {
            for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield source_1.next(), !source_1_1.done;) {
                let /** @type {T} */ item = yield source_1_1.value;
                if (hasValue || (hasValue = hasSeed)) {
                    seed = yield accumulator(seed, item, i++);
                }
                else {
                    seed = item;
                    hasValue = true;
                    i++;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield _a.call(source_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (hasSeed && !hasValue) {
            return ((seed));
        }
        if (!hasValue) {
            throw new Error('Sequence contains no elements');
        }
        return ((seed));
        var e_1, _a;
    });
}
exports.reduce = reduce;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3JlZHVjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBU0g7Ozs7OztHQU1HO0FBWEgsZ0JBYUksTUFad0IsRUFheEIsV0Fab0UsRUFhcEUsR0FaRyxJQUFlOztRQWFwQixJQVpHLENBQUUsSUFBSSxDQUFDLEdBQUUsSUFBSyxDQUFDO1FBYWxCLE1BQU0sc0JBWkQsQ0FBQSxPQUFRLEdBQUUsSUFBSyxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUM7UUFhbEMsSUFBSSxxQkFaRCxDQUFBLENBQUUsR0FBRSxDQUFFLEVBQUEsc0JBQUMsQ0FBQSxRQUFTLEdBQUUsS0FBTSxDQUFDOztZQWE1QixHQVpHLENBQUEsQ0FBbUIsSUFBQSxXQUFBLGNBQUEsTUFBTyxDQUFBLFlBQUE7Z0JBQWxCLElBQUEsZ0JBQUcsQ0FBQSxJQUFLLHlCQUFBLENBQUE7Z0JBYWpCLEVBQUUsQ0FBQyxDQVpDLFFBQVEsSUFBRyxDQUFFLFFBQVEsR0FBRSxPQUFRLENBQUMsQ0FBQyxDQUFBLENBQUU7b0JBYXJDLElBWkksR0FBRSxNQUFNLFdBQVksQ0FBQyxJQUFJLEVBQUMsSUFBSyxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUM7Z0JBYTVDLENBWkM7Z0JBQUEsSUFBSyxDQUFBLENBQUU7b0JBYU4sSUFaSSxHQUFFLElBQUssQ0FBQztvQkFhWixRQVpRLEdBQUUsSUFBSyxDQUFDO29CQWFoQixDQVpDLEVBQUUsQ0FBQztnQkFhTixDQVpDO2FBQ0Y7Ozs7Ozs7OztRQWNELEVBQUUsQ0FBQyxDQVpDLE9BQU8sSUFBRyxDQUFFLFFBQVEsQ0FBQyxDQUFBLENBQUU7WUFhekIsTUFBTSxDQUFxQixDQUFDLENBWnRCLElBQUEsQ0FBQSxDQUFNLENBQUM7UUFhZixDQVpDO1FBY0QsRUFBRSxDQUFDLENBWkMsQ0FBQyxRQUFRLENBQUMsQ0FBQSxDQUFFO1lBYWQsTUFaSyxJQUFJLEtBQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBYW5ELENBWkM7UUFjRCxNQUFNLENBQXFCLENBQUMsQ0FadEIsSUFBQSxDQUFBLENBQU0sQ0FBQzs7SUFhZixDQVpDO0NBQUE7QUExQkQsd0JBMEJDIiwiZmlsZSI6InJlZHVjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiByZWR1Y2U8VD4oXG4gIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgYWNjdW11bGF0b3I6IChhY2M6IFQsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBUIHwgUHJvbWlzZTxUPik6IFByb21pc2U8VD47XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVkdWNlPFQsIFIgPSBUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICBzZWVkOiBSKTogUHJvbWlzZTxSPjtcbi8qKlxuICogQHRlbXBsYXRlIFQsIFJcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigoVHxSKSwgVCwgbnVtYmVyKTogKFJ8IVByb21pc2U8Uj4pfSBhY2N1bXVsYXRvclxuICogQHBhcmFtIHsuLi4oVHxSKX0gYXJnc1xuICogQHJldHVybiB7IVByb21pc2U8KFR8Uik+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcmVkdWNlPFQsIFIgPSBUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgYWNjdW11bGF0b3I6IChhY2M6IFQgfCBSLCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj4sXG4gICAgLi4uYXJnczogKFQgfCBSKVtdKTogUHJvbWlzZTxUIHwgUj4ge1xuICBsZXQgW3NlZWRdID0gYXJncztcbiAgY29uc3QgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDAsIC8qKiBAdHlwZSB7Ym9vbGVhbn0gKi8gaGFzVmFsdWUgPSBmYWxzZTtcbiAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUfSAqLyBpdGVtIG9mIHNvdXJjZSkge1xuICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSBoYXNTZWVkKSkge1xuICAgICAgc2VlZCA9IGF3YWl0IGFjY3VtdWxhdG9yKHNlZWQsIGl0ZW0sIGkrKyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNlZWQgPSBpdGVtO1xuICAgICAgaGFzVmFsdWUgPSB0cnVlO1xuICAgICAgaSsrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChoYXNTZWVkICYmICFoYXNWYWx1ZSkge1xuICAgIHJldHVybiAvKiogQHR5cGUgeyhUfFIpfSAqLygoIHNlZWQpKTtcbiAgfVxuXG4gIGlmICghaGFzVmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gIH1cblxuICByZXR1cm4gLyoqIEB0eXBlIHsoVHxSKX0gKi8oKCBzZWVkKSk7XG59XG4iXX0=