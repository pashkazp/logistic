goog.module('targets.es2015.cls.asynciterable.throttle'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/throttle.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class ThrottleAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {number} time
     */
    constructor(source, time) {
        super();
        this._source = source;
        this._time = time;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {?} */ currentTime, /** @type {?} */ previousTime;
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    const /** @type {TSource} */ item = yield __await(_b.value);
                    currentTime = Date.now();
                    if (!previousTime || currentTime - previousTime > this._time) {
                        previousTime = currentTime;
                        yield item;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function ThrottleAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    ThrottleAsyncIterable.prototype._source;
    /** @type {number} */
    ThrottleAsyncIterable.prototype._time;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @param {number} time
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function throttle(source, time) {
    return new ThrottleAsyncIterable(source, time);
}
exports.throttle = throttle;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rocm90dGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCwyQkFBb0MsU0FBUSw4QkFBd0I7SUFXcEU7OztPQUdHO0lBVkQsWUFBWSxNQUE4QixFQUFDLElBQWE7UUFZdEQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztJQVlwQixDQUFDO0lBQ0g7O09BRUc7SUFaTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBYzNCLElBQUksZ0JBYkQsQ0FBQSxXQUFZLEVBQUEsZ0JBQUMsQ0FBQSxZQUFhLENBQUM7O2dCQWM5QixHQWJHLENBQUEsQ0FBcUIsSUFBQSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUExQixNQUFBLHNCQUFLLENBQUEsSUFBSywwQkFBQSxDQUFBO29CQWNuQixXQWJXLEdBQUUsSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO29CQWN6QixFQUFFLENBQUMsQ0FiQyxDQUFDLFlBQVksSUFBRyxXQUFZLEdBQUUsWUFBYSxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFFO3dCQWM3RCxZQWJZLEdBQUUsV0FBWSxDQUFDO3dCQWMzQixNQWJLLElBQUssQ0FBQztvQkFjYixDQWJDO2lCQUNGOzs7Ozs7Ozs7O1FBY0gsQ0FiQztLQUFBO0NBQ0g7QUFlQTtJQUNBLHNDQUFzQztJQUN0QyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3hDLHFCQUFxQjtJQUNyQixxQkFBcUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0FBQ3RDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxrQkFBa0MsTUFBOEIsRUFBQyxJQUFhO0lBMkI1RSxNQTFCTSxDQUFBLElBQUkscUJBQXNCLENBQVUsTUFBTSxFQUFDLElBQUssQ0FBQyxDQUFDO0FBMkIxRCxDQTFCQztBQUZELDRCQUVDIiwiZmlsZSI6InRocm90dGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFRocm90dGxlQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3RpbWU6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sIHRpbWU6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3RpbWUgPSB0aW1lO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgez99ICovIGN1cnJlbnRUaW1lLCAvKiogQHR5cGUgez99ICovIHByZXZpb3VzVGltZTtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIGlmICghcHJldmlvdXNUaW1lIHx8IGN1cnJlbnRUaW1lIC0gcHJldmlvdXNUaW1lID4gdGhpcy5fdGltZSkge1xuICAgICAgICBwcmV2aW91c1RpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gVGhyb3R0bGVBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuVGhyb3R0bGVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5UaHJvdHRsZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl90aW1lO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPiwgdGltZTogbnVtYmVyKTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRocm90dGxlQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIHRpbWUpO1xufVxuIl19