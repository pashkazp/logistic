goog.module('targets.es2015.cls.asynciterable.generatetime'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/generatetime.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var _sleep_1 = goog.require('targets.es2015.cls.asynciterable._sleep');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable._sleep");
/**
 * @template TState, TResult
 */
class GenerateTimeAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {TState} initialState
     * @param {function(TState): (boolean|!Promise<boolean>)} condition
     * @param {function(TState): (TState|!Promise<TState>)} iterate
     * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
     * @param {function(TState): (number|!Promise<number>)} timeSelector
     */
    constructor(initialState, condition, iterate, resultSelector, timeSelector) {
        super();
        this._initialState = initialState;
        this._condition = condition;
        this._iterate = iterate;
        this._resultSelector = resultSelector;
        this._timeSelector = timeSelector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            for (let /** @type {TState} */ i = this._initialState; yield __await(this._condition(i)); i = yield __await(this._iterate(i))) {
                yield __await(_sleep_1.sleep(yield __await(this._timeSelector(i))));
                yield yield __await(this._resultSelector(i));
            }
        });
    }
}
function GenerateTimeAsyncIterable_tsickle_Closure_declarations() {
    /** @type {TState} */
    GenerateTimeAsyncIterable.prototype._initialState;
    /** @type {function(TState): (boolean|!Promise<boolean>)} */
    GenerateTimeAsyncIterable.prototype._condition;
    /** @type {function(TState): (TState|!Promise<TState>)} */
    GenerateTimeAsyncIterable.prototype._iterate;
    /** @type {function(TState): (TResult|!Promise<TResult>)} */
    GenerateTimeAsyncIterable.prototype._resultSelector;
    /** @type {function(TState): (number|!Promise<number>)} */
    GenerateTimeAsyncIterable.prototype._timeSelector;
}
/**
 * @template TState, TResult
 * @param {TState} initialState
 * @param {function(TState): (boolean|!Promise<boolean>)} condition
 * @param {function(TState): (TState|!Promise<TState>)} iterate
 * @param {function(TState): (TResult|!Promise<TResult>)} resultSelector
 * @param {function(TState): (number|!Promise<number>)} timeSelector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function generateTime(initialState, condition, iterate, resultSelector, timeSelector) {
    return new GenerateTimeAsyncIterable(initialState, condition, iterate, resultSelector, timeSelector);
}
exports.generateTime = generateTime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2dlbmVyYXRldGltZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQU5oRDtBQU9sRCxxQ0FOYztBQU9kLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO0FBQzFHOztHQUVHO0FBUkgsK0JBQWdELFNBQVEsOEJBQXdCO0lBZWhGOzs7Ozs7T0FNRztJQWRELFlBZ0JJLFlBZm9CLEVBZ0JwQixTQWZ3RCxFQWdCeEQsT0Fmb0QsRUFnQnBELGNBZjZELEVBZ0I3RCxZQWZ5RDtRQWdCM0QsS0FmSyxFQUFFLENBQUM7UUFnQlIsSUFmSSxDQUFDLGFBQWEsR0FBRSxZQUFhLENBQUM7UUFnQmxDLElBZkksQ0FBQyxVQUFVLEdBQUUsU0FBVSxDQUFDO1FBZ0I1QixJQWZJLENBQUMsUUFBUSxHQUFFLE9BQVEsQ0FBQztRQWdCeEIsSUFmSSxDQUFDLGVBQWUsR0FBRSxjQUFlLENBQUM7UUFnQnRDLElBZkksQ0FBQyxhQUFhLEdBQUUsWUFBYSxDQUFDO0lBZ0JwQyxDQUFDO0lBQ0g7O09BRUc7SUFoQk0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWtCM0IsR0FBRyxDQUFDLENBakJDLElBQUEscUJBQUcsQ0FBQSxDQUFFLEdBQUUsSUFBSyxDQUFDLGFBQWEsRUFBQyxjQUFNLElBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUEsRUFBQyxDQUFFLEdBQUUsY0FBTSxJQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFBLEVBQUMsQ0FBRTtnQkFrQnRGLGNBakJLLGNBQU0sQ0FBQyxjQUFLLElBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFBLENBQUM7Z0JBa0J6QyxNQWpCSyxjQUFNLElBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztZQWtCdEMsQ0FqQkM7UUFrQkgsQ0FqQkM7S0FBQTtDQUNIO0FBbUJBO0lBQ0EscUJBQXFCO0lBQ3JCLHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDbEQsNERBQTREO0lBQzVELHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDL0MsMERBQTBEO0lBQzFELHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUM7SUFDN0MsNERBQTREO0lBQzVELHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7SUFDcEQsMERBQTBEO0lBQzFELHlCQUF5QixDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUM7QUFDbEQsQ0FBQztBQUVEOzs7Ozs7OztHQVFHO0FBdENILHNCQXdDSSxZQXZDb0IsRUF3Q3BCLFNBdkN3RCxFQXdDeEQsT0F2Q29ELEVBd0NwRCxjQXZDNkQsRUF3QzdELFlBdkN5RDtJQXdDM0QsTUF2Q00sQ0FBQSxJQUFJLHlCQUEwQixDQXdDbEMsWUF2Q1ksRUF3Q1osU0F2Q1MsRUF3Q1QsT0F2Q08sRUF3Q1AsY0F2Q2MsRUF3Q2QsWUF2Q1ksQ0FBQyxDQUFDO0FBd0NsQixDQXZDQztBQVpELG9DQVlDIiwiZmlsZSI6ImdlbmVyYXRldGltZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgc2xlZXAgfSBmcm9tICcuL19zbGVlcCc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlLl9zbGVlcFwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTdGF0ZSwgVFJlc3VsdFxuICovXG5jbGFzcyBHZW5lcmF0ZVRpbWVBc3luY0l0ZXJhYmxlPFRTdGF0ZSwgVFJlc3VsdD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUUmVzdWx0PiB7XG5wcml2YXRlIF9pbml0aWFsU3RhdGU6IFRTdGF0ZTtcbnByaXZhdGUgX2NvbmRpdGlvbjogKHZhbHVlOiBUU3RhdGUpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+O1xucHJpdmF0ZSBfaXRlcmF0ZTogKHZhbHVlOiBUU3RhdGUpID0+IFRTdGF0ZSB8IFByb21pc2U8VFN0YXRlPjtcbnByaXZhdGUgX3Jlc3VsdFNlbGVjdG9yOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFJlc3VsdCB8IFByb21pc2U8VFJlc3VsdD47XG5wcml2YXRlIF90aW1lU2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj47XG4vKipcbiAqIEBwYXJhbSB7VFN0YXRlfSBpbml0aWFsU3RhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pfSBjb25kaXRpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRTdGF0ZXwhUHJvbWlzZTxUU3RhdGU+KX0gaXRlcmF0ZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAoVFJlc3VsdHwhUHJvbWlzZTxUUmVzdWx0Pil9IHJlc3VsdFNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChudW1iZXJ8IVByb21pc2U8bnVtYmVyPil9IHRpbWVTZWxlY3RvclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIGluaXRpYWxTdGF0ZTogVFN0YXRlLFxuICAgICAgY29uZGl0aW9uOiAodmFsdWU6IFRTdGF0ZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgICBpdGVyYXRlOiAodmFsdWU6IFRTdGF0ZSkgPT4gVFN0YXRlIHwgUHJvbWlzZTxUU3RhdGU+LFxuICAgICAgcmVzdWx0U2VsZWN0b3I6ICh2YWx1ZTogVFN0YXRlKSA9PiBUUmVzdWx0IHwgUHJvbWlzZTxUUmVzdWx0PixcbiAgICAgIHRpbWVTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5faW5pdGlhbFN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICAgIHRoaXMuX2NvbmRpdGlvbiA9IGNvbmRpdGlvbjtcbiAgICB0aGlzLl9pdGVyYXRlID0gaXRlcmF0ZTtcbiAgICB0aGlzLl9yZXN1bHRTZWxlY3RvciA9IHJlc3VsdFNlbGVjdG9yO1xuICAgIHRoaXMuX3RpbWVTZWxlY3RvciA9IHRpbWVTZWxlY3RvcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG5hc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTdGF0ZX0gKi8gaSA9IHRoaXMuX2luaXRpYWxTdGF0ZTsgYXdhaXQgdGhpcy5fY29uZGl0aW9uKGkpOyBpID0gYXdhaXQgdGhpcy5faXRlcmF0ZShpKSkge1xuICAgICAgYXdhaXQgc2xlZXAoYXdhaXQgdGhpcy5fdGltZVNlbGVjdG9yKGkpKTtcbiAgICAgIHlpZWxkIGF3YWl0IHRoaXMuX3Jlc3VsdFNlbGVjdG9yKGkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBHZW5lcmF0ZVRpbWVBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge1RTdGF0ZX0gKi9cbkdlbmVyYXRlVGltZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9pbml0aWFsU3RhdGU7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTdGF0ZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gKi9cbkdlbmVyYXRlVGltZUFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9jb25kaXRpb247XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTdGF0ZSk6IChUU3RhdGV8IVByb21pc2U8VFN0YXRlPil9ICovXG5HZW5lcmF0ZVRpbWVBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5faXRlcmF0ZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRSZXN1bHR8IVByb21pc2U8VFJlc3VsdD4pfSAqL1xuR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3Jlc3VsdFNlbGVjdG9yO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU3RhdGUpOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pfSAqL1xuR2VuZXJhdGVUaW1lQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3RpbWVTZWxlY3Rvcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFN0YXRlLCBUUmVzdWx0XG4gKiBAcGFyYW0ge1RTdGF0ZX0gaW5pdGlhbFN0YXRlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChib29sZWFufCFQcm9taXNlPGJvb2xlYW4+KX0gY29uZGl0aW9uXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTdGF0ZSk6IChUU3RhdGV8IVByb21pc2U8VFN0YXRlPil9IGl0ZXJhdGVcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFN0YXRlKTogKFRSZXN1bHR8IVByb21pc2U8VFJlc3VsdD4pfSByZXN1bHRTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUU3RhdGUpOiAobnVtYmVyfCFQcm9taXNlPG51bWJlcj4pfSB0aW1lU2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVUaW1lPFRTdGF0ZSwgVFJlc3VsdD4oXG4gICAgaW5pdGlhbFN0YXRlOiBUU3RhdGUsXG4gICAgY29uZGl0aW9uOiAodmFsdWU6IFRTdGF0ZSkgPT4gYm9vbGVhbiB8IFByb21pc2U8Ym9vbGVhbj4sXG4gICAgaXRlcmF0ZTogKHZhbHVlOiBUU3RhdGUpID0+IFRTdGF0ZSB8IFByb21pc2U8VFN0YXRlPixcbiAgICByZXN1bHRTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IFRSZXN1bHQgfCBQcm9taXNlPFRSZXN1bHQ+LFxuICAgIHRpbWVTZWxlY3RvcjogKHZhbHVlOiBUU3RhdGUpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPik6IEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBHZW5lcmF0ZVRpbWVBc3luY0l0ZXJhYmxlPFRTdGF0ZSwgVFJlc3VsdD4oXG4gICAgaW5pdGlhbFN0YXRlLFxuICAgIGNvbmRpdGlvbixcbiAgICBpdGVyYXRlLFxuICAgIHJlc3VsdFNlbGVjdG9yLFxuICAgIHRpbWVTZWxlY3Rvcik7XG59XG4iXX0=