goog.module('targets.es2015.cls.asynciterable.findindex'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/findindex.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var bindcallback_1 = goog.require('targets.es2015.cls.internal.bindcallback');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {function(T, number): (boolean|!Promise<boolean>)} predicate
 * @param {?=} thisArg
 * @return {!Promise<number>}
 */
function findIndex(source, predicate, thisArg) {
    return __awaiter(this, void 0, void 0, function* () {
        const /** @type {?} */ fn = bindcallback_1.bindCallback(predicate, thisArg, 2);
        let /** @type {number} */ i = 0;
        try {
            for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield source_1.next(), !source_1_1.done;) {
                let /** @type {T} */ item = yield source_1_1.value;
                if (yield fn(item, i++)) {
                    return i;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield _a.call(source_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return -1;
        var e_1, _a;
    });
}
exports.findIndex = findIndex;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ZpbmRpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMkRBTHFCO0FBTXJCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQzNHOzs7Ozs7R0FNRztBQVhILG1CQWFJLE1BWndCLEVBYXhCLFNBWmtFLEVBYWxFLE9BWmE7O1FBYWYsTUFBTSxnQkFaRCxDQUFBLEVBQUcsR0FBRSwyQkFBYSxDQUFDLFNBQVMsRUFBQyxPQUFRLEVBQUMsQ0FBRSxDQUFDLENBQUM7UUFhL0MsSUFBSSxxQkFaRCxDQUFBLENBQUUsR0FBRSxDQUFFLENBQUM7O1lBY1YsR0FaRyxDQUFBLENBQW1CLElBQUEsV0FBQSxjQUFBLE1BQU8sQ0FBQSxZQUFBO2dCQUFsQixJQUFBLGdCQUFHLENBQUEsSUFBSyx5QkFBQSxDQUFBO2dCQWFqQixFQUFFLENBQUMsQ0FaQyxNQUFLLEVBQUcsQ0FBQyxJQUFJLEVBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7b0JBYXhCLE1BWk0sQ0FBQSxDQUFFLENBQUM7Z0JBYVgsQ0FaQzthQUNGOzs7Ozs7Ozs7UUFhRCxNQVpNLENBQUEsQ0FBRSxDQUFDLENBQUM7O0lBYVosQ0FaQztDQUFBO0FBYkQsOEJBYUMiLCJmaWxlIjoiZmluZGluZGV4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmJpbmRjYWxsYmFja1wiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihULCBudW1iZXIpOiAoYm9vbGVhbnwhUHJvbWlzZTxib29sZWFuPil9IHByZWRpY2F0ZVxuICogQHBhcmFtIHs/PX0gdGhpc0FyZ1xuICogQHJldHVybiB7IVByb21pc2U8bnVtYmVyPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGZpbmRJbmRleDxUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4gfCBQcm9taXNlPGJvb2xlYW4+LFxuICAgIHRoaXNBcmc/OiBhbnkpOiBQcm9taXNlPG51bWJlcj4ge1xuICBjb25zdCAvKiogQHR5cGUgez99ICovIGZuID0gYmluZENhbGxiYWNrKHByZWRpY2F0ZSwgdGhpc0FyZywgMik7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7XG5cbiAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUfSAqLyBpdGVtIG9mIHNvdXJjZSkge1xuICAgIGlmIChhd2FpdCBmbihpdGVtLCBpKyspKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuIl19