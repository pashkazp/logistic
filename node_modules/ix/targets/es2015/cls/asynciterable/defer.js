goog.module('targets.es2015.cls.asynciterable.defer'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/defer.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class DeferAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {function(): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} fn
     */
    constructor(fn) {
        super();
        this._fn = fn;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {!AsyncIterable<TSource>} */ items = yield __await(this._fn());
            try {
                for (var items_1 = __asyncValues(items), items_1_1; items_1_1 = yield __await(items_1.next()), !items_1_1.done;) {
                    let /** @type {TSource} */ item = yield __await(items_1_1.value);
                    yield item;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) yield __await(_a.call(items_1));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _a;
        });
    }
}
function DeferAsyncIterable_tsickle_Closure_declarations() {
    /** @type {function(): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} */
    DeferAsyncIterable.prototype._fn;
}
/**
 * @template TSource
 * @param {function(): (!AsyncIterable<TSource>|!Promise<!AsyncIterable<TSource>>)} factory
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function defer(factory) {
    return new DeferAsyncIterable(factory);
}
exports.defer = defer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2RlZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBQUM7QUFDbkc7O0dBRUc7QUFQSCx3QkFBaUMsU0FBUSw4QkFBd0I7SUFVakU7O09BRUc7SUFURCxZQUFZLEVBQWtFO1FBVzVFLEtBVkssRUFBRSxDQUFDO1FBV1IsSUFWSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7SUFXaEIsQ0FBQztJQUNIOztPQUVHO0lBWE0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWEzQixJQUFJLHNDQVpELENBQUEsS0FBTSxHQUFFLGNBQU0sSUFBSyxDQUFDLEdBQUcsRUFBRSxDQUFBLENBQUM7O2dCQWE3QixHQVpHLENBQUEsQ0FBbUIsSUFBQSxVQUFBLGNBQUEsS0FBTSxDQUFBLFdBQUE7b0JBQWpCLElBQUEsc0JBQUcsQ0FBQSxJQUFLLGlDQUFBLENBQUE7b0JBQVksTUFBTSxJQUFLLENBQUM7aUJBQUU7Ozs7Ozs7Ozs7UUFhL0MsQ0FaQztLQUFBO0NBQ0g7QUFjQTtJQUNBLHNGQUFzRjtJQUN0RixrQkFBa0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0FBQ2pDLENBQUM7QUFFRDs7OztHQUlHO0FBckJILGVBdUJJLE9BdEJ1RTtJQXVCekUsTUF0Qk0sQ0FBQSxJQUFJLGtCQUFtQixDQUFVLE9BQU8sQ0FBQyxDQUFDO0FBdUJsRCxDQXRCQztBQUhELHNCQUdDIiwiZmlsZSI6ImRlZmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgQXN5bmNJdGVyYWJsZVggfSBmcm9tICcuLi9hc3luY2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIERlZmVyQXN5bmNJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX2ZuOiAoKSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pjtcbi8qKlxuICogQHBhcmFtIHtmdW5jdGlvbigpOiAoIUFzeW5jSXRlcmFibGU8VFNvdXJjZT58IVByb21pc2U8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KX0gZm5cbiAqL1xuY29uc3RydWN0b3IoZm46ICgpID0+IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSAqLyBpdGVtcyA9IGF3YWl0IHRoaXMuX2ZuKCk7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIGl0ZW1zKSB7IHlpZWxkIGl0ZW07IH1cbiAgfVxufVxuXG5mdW5jdGlvbiBEZWZlckFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKTogKCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fCFQcm9taXNlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pil9ICovXG5EZWZlckFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9mbjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbigpOiAoIUFzeW5jSXRlcmFibGU8VFNvdXJjZT58IVByb21pc2U8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KX0gZmFjdG9yeVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZlcjxUU291cmNlPihcbiAgICBmYWN0b3J5OiAoKSA9PiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pik6IEFzeW5jSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEZWZlckFzeW5jSXRlcmFibGU8VFNvdXJjZT4oZmFjdG9yeSk7XG59XG4iXX0=