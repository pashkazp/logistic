goog.module('targets.es2015.cls.asynciterable.share'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/share.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var create_1 = goog.require('targets.es2015.cls.asynciterable.create');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable.create");
/**
 * @template T
 */
class SharedAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterator<T>} it
     */
    constructor(it) {
        super();
        this._it = it;
    }
    /**
     * @return {!AsyncIterator<T>}
     */
    [Symbol.asyncIterator]() {
        return this._it;
    }
}
function SharedAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterator<T>} */
    SharedAsyncIterable.prototype._it;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {function(!AsyncIterable<TSource>): (!AsyncIterable<TResult>|!Promise<!AsyncIterable<TResult>>)=} selector
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(TSource|TResult)>}
 */
function share(source, selector) {
    return selector ?
        create_1.create(() => __awaiter(this, void 0, void 0, function* () {
            const /** @type {!AsyncIterable<TResult>} */ it = yield selector(new SharedAsyncIterable(source[Symbol.asyncIterator]()));
            return it[Symbol.asyncIterator]();
        })) :
        new SharedAsyncIterable(source[Symbol.asyncIterator]());
}
exports.share = share;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NoYXJlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxvREFMdUI7QUFNdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDJDQUEyQyxDQUFDLENBTmhEO0FBT2xELHFDQU5lO0FBT2YsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGtEQUFrRCxDQUFDLENBQUM7QUFDMUc7O0dBRUc7QUFSSCx5QkFBNEIsU0FBUSw4QkFBa0I7SUFXdEQ7O09BRUc7SUFWRCxZQUFZLEVBQW9CO1FBWTlCLEtBWEssRUFBRSxDQUFDO1FBWVIsSUFYSSxDQUFDLEdBQUcsR0FBRSxFQUFHLENBQUM7SUFZaEIsQ0FBQztJQUNIOztPQUVHO0lBWkQsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDO1FBY3BCLE1BYk0sQ0FBQSxJQUFLLENBQUMsR0FBRyxDQUFDO0lBY2xCLENBYkM7Q0FDSDtBQWVBO0lBQ0EsZ0NBQWdDO0lBQ2hDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUM7QUFDbEMsQ0FBQztBQVNEOzs7OztHQUtHO0FBeEJILGVBMEJJLE1BekI4QixFQTBCOUIsUUF6QnNHO0lBMkJ4RyxNQXpCTSxDQUFBLFFBQVM7UUEwQmIsZUF6Qk0sQ0EwQko7WUFDRSxNQUFNLHNDQXpCRCxDQUFBLEVBQUcsR0FBRSxNQUFNLFFBQVMsQ0FBQyxJQUFHLG1CQUFvQixDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUEwQm5GLE1BekJNLENBQUEsRUFBRyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBMEJuQyxDQXpCQyxDQUFBLENBQUM7UUEwQkwsSUF6QkcsbUJBQW9CLENBQVUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLENBQUM7QUEwQnJFLENBekJDO0FBWEQsc0JBV0MiLCJmaWxlIjoic2hhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJy4vY3JlYXRlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmFzeW5jaXRlcmFibGUuY3JlYXRlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICovXG5jbGFzcyBTaGFyZWRBc3luY0l0ZXJhYmxlPFQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VD4ge1xucHJpdmF0ZSBfaXQ6IEFzeW5jSXRlcmF0b3I8VD47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmF0b3I8VD59IGl0XG4gKi9cbmNvbnN0cnVjdG9yKGl0OiBBc3luY0l0ZXJhdG9yPFQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9pdCA9IGl0O1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhdG9yPFQ+fVxuICovXG5bU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIHJldHVybiB0aGlzLl9pdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBTaGFyZWRBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFQ+fSAqL1xuU2hhcmVkQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX2l0O1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzaGFyZTxUU291cmNlPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPjtcbmV4cG9ydCBmdW5jdGlvbiBzaGFyZTxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I/OiAodmFsdWU6IEFzeW5jSXRlcmFibGU8VFNvdXJjZT4pID0+IEFzeW5jSXRlcmFibGU8VFJlc3VsdD4gfCBQcm9taXNlPEFzeW5jSXRlcmFibGU8VFJlc3VsdD4+KTpcbiAgICAgIEFzeW5jSXRlcmFibGVYPFRSZXN1bHQ+O1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+KTogKCFBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+fCFQcm9taXNlPCFBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+Pik9fSBzZWxlY3RvclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8KFRTb3VyY2V8VFJlc3VsdCk+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhcmU8VFNvdXJjZSwgVFJlc3VsdCA9IFRTb3VyY2U+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0PiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUUmVzdWx0Pj4pOlxuICAgICAgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZSB8IFRSZXN1bHQ+IHtcbiAgcmV0dXJuIHNlbGVjdG9yID9cbiAgICBjcmVhdGU8VFJlc3VsdD4oXG4gICAgICBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFJlc3VsdD59ICovIGl0ID0gYXdhaXQgc2VsZWN0b3IobmV3IFNoYXJlZEFzeW5jSXRlcmFibGUoc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpKSk7XG4gICAgICAgIHJldHVybiBpdFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgICAgICB9KSA6XG4gICAgbmV3IFNoYXJlZEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpKTtcbn1cbiJdfQ==