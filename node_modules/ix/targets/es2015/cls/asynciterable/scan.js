goog.module('targets.es2015.cls.asynciterable.scan'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/scan.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template T, R
 */
class ScanAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<T>} source
     * @param {function((T|R), T, number): (R|!Promise<R>)} fn
     * @param {...(T|R)} args
     */
    constructor(source, fn, ...args) {
        super();
        this._source = source;
        this._fn = fn;
        this._hasSeed = args.length === 1;
        this._seed = args[0];
    }
    /**
     * @return {!AsyncIterableIterator<R>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            let /** @type {number} */ i = 0, /** @type {boolean} */ hasValue = false;
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {T} */ item = yield __await(_b.value);
                    if (hasValue || (hasValue = this._hasSeed)) {
                        this._seed = yield __await(this._fn(/** @type {R} */ (this._seed), item, i++));
                        yield this._seed;
                    }
                    else {
                        this._seed = item;
                        hasValue = true;
                        i++;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_c = _a.return)) yield __await(_c.call(_a));
                }
                finally { if (e_1) throw e_1.error; }
            }
            var e_1, _c;
        });
    }
}
function ScanAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<T>} */
    ScanAsyncIterable.prototype._source;
    /** @type {function((T|R), T, number): (R|!Promise<R>)} */
    ScanAsyncIterable.prototype._fn;
    /** @type {(T|R)} */
    ScanAsyncIterable.prototype._seed;
    /** @type {boolean} */
    ScanAsyncIterable.prototype._hasSeed;
}
/**
 * @template T, R
 * @param {!AsyncIterable<T>} source
 * @param {function((T|R), T, number): (R|!Promise<R>)} accumulator
 * @param {...(T|R)} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<(T|R)>}
 */
function scan(source, accumulator, ...args) {
    return new ScanAsyncIterable(source, accumulator, ...args);
}
exports.scan = scan;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NjYW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FBQztBQUNuRzs7R0FFRztBQVBILHVCQUE2QixTQUFRLDhCQUFrQjtJQWF2RDs7OztPQUlHO0lBWEQsWUFhSSxNQVp3QixFQWF4QixFQVp1RCxFQWF2RCxHQVpHLElBQWU7UUFhcEIsS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztRQWFkLElBWkksQ0FBQyxRQUFRLEdBQUUsSUFBSyxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUM7UUFhbEMsSUFaSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFhdkIsQ0FBQztJQUNIOztPQUVHO0lBYk0sQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDOztZQWUzQixJQUFJLHFCQWRELENBQUEsQ0FBRSxHQUFFLENBQUUsRUFBQSxzQkFBQyxDQUFBLFFBQVMsR0FBRSxLQUFNLENBQUM7O2dCQWU1QixHQWRHLENBQUEsQ0FBbUIsSUFBQSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUF4QixJQUFBLGdCQUFHLENBQUEsSUFBSywwQkFBQSxDQUFBO29CQWVqQixFQUFFLENBQUMsQ0FkQyxRQUFRLElBQUcsQ0FBRSxRQUFRLEdBQUUsSUFBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTt3QkFlM0MsSUFkSSxDQUFDLEtBQUssR0FBRSxjQUFNLElBQUssQ0FBQyxHQUFHLENBQUEsZ0JBQUEsQ0FBQSxDQUFJLElBQUksQ0FBQyxLQUFBLENBQUssRUFBQyxJQUFLLEVBQUMsQ0FBRSxFQUFFLENBQUMsQ0FBQSxDQUFDO3dCQWV0RCxNQWRLLElBQUssQ0FBQyxLQUFLLENBQUM7b0JBZW5CLENBZEM7b0JBQUEsSUFBSyxDQUFBLENBQUU7d0JBZU4sSUFkSSxDQUFDLEtBQUssR0FBRSxJQUFLLENBQUM7d0JBZWxCLFFBZFEsR0FBRSxJQUFLLENBQUM7d0JBZWhCLENBZEMsRUFBRSxDQUFDO29CQWVOLENBZEM7aUJBQ0Y7Ozs7Ozs7Ozs7UUFlSCxDQWRDO0tBQUE7Q0FDSDtBQWdCQTtJQUNBLGdDQUFnQztJQUNoQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BDLDBEQUEwRDtJQUMxRCxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO0lBQ2hDLG9CQUFvQjtJQUNwQixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDO0lBQ2xDLHNCQUFzQjtJQUN0QixpQkFBaUIsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDO0FBQ3JDLENBQUM7QUFVRDs7Ozs7O0dBTUc7QUFoQ0gsY0FrQ0ksTUFqQ3dCLEVBa0N4QixXQWpDb0UsRUFrQ3BFLEdBakNHLElBQWU7SUFrQ3BCLE1BakNNLENBQUEsSUFBSSxpQkFBa0IsQ0FBQyxNQUFNLEVBQUMsV0FBWSxFQUFDLEdBQUksSUFBSSxDQUFDLENBQUM7QUFrQzdELENBakNDO0FBTEQsb0JBS0MiLCJmaWxlIjoic2Nhbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVCwgUlxuICovXG5jbGFzcyBTY2FuQXN5bmNJdGVyYWJsZTxULCBSPiBleHRlbmRzIEFzeW5jSXRlcmFibGVYPFI+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUPjtcbnByaXZhdGUgX2ZuOiAoYWNjOiBUIHwgUiwgeDogVCwgaW5kZXg6IG51bWJlcikgPT4gUiB8IFByb21pc2U8Uj47XG5wcml2YXRlIF9zZWVkPzogVCB8IFI7XG5wcml2YXRlIF9oYXNTZWVkOiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gZm5cbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqL1xuY29uc3RydWN0b3IoXG4gICAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgICBmbjogKGFjYzogVCB8IFIsIHg6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICAgICAgLi4uYXJnczogKFQgfCBSKVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fZm4gPSBmbjtcbiAgICB0aGlzLl9oYXNTZWVkID0gYXJncy5sZW5ndGggPT09IDE7XG4gICAgdGhpcy5fc2VlZCA9IGFyZ3NbMF07XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxSPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBpID0gMCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VH0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGlmIChoYXNWYWx1ZSB8fCAoaGFzVmFsdWUgPSB0aGlzLl9oYXNTZWVkKSkge1xuICAgICAgICB0aGlzLl9zZWVkID0gYXdhaXQgdGhpcy5fZm4oIC8qKiBAdHlwZSB7Un0gKi8oKDxSPnRoaXMuX3NlZWQpKSwgaXRlbSwgaSsrKTtcbiAgICAgICAgeWllbGQgdGhpcy5fc2VlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3NlZWQgPSBpdGVtO1xuICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU2NhbkFzeW5jSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VD59ICovXG5TY2FuQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gKi9cblNjYW5Bc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fZm47XG4vKiogQHR5cGUgeyhUfFIpfSAqL1xuU2NhbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9zZWVkO1xuLyoqIEB0eXBlIHtib29sZWFufSAqL1xuU2NhbkFzeW5jSXRlcmFibGUucHJvdG90eXBlLl9oYXNTZWVkO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQ+KFxuICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gIGFjY3VtdWxhdG9yOiAoYWNjOiBULCB2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gVCB8IFByb21pc2U8VD4pOiBBc3luY0l0ZXJhYmxlWDxUPjtcbmV4cG9ydCBmdW5jdGlvbiBzY2FuPFQsIFIgPSBUPihcbiAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICBhY2N1bXVsYXRvcjogKGFjYzogUiwgdmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IFIgfCBQcm9taXNlPFI+LFxuICBzZWVkOiBSKTogQXN5bmNJdGVyYWJsZVg8Uj47XG4vKipcbiAqIEB0ZW1wbGF0ZSBULCBSXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKFR8UiksIFQsIG51bWJlcik6IChSfCFQcm9taXNlPFI+KX0gYWNjdW11bGF0b3JcbiAqIEBwYXJhbSB7Li4uKFR8Uil9IGFyZ3NcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPChUfFIpPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNjYW48VCwgUiA9IFQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUPixcbiAgICBhY2N1bXVsYXRvcjogKGFjYzogVCB8IFIsIHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBSIHwgUHJvbWlzZTxSPixcbiAgICAuLi5hcmdzOiAoVCB8IFIpW10pOiBBc3luY0l0ZXJhYmxlWDxUIHwgUj4ge1xuICByZXR1cm4gbmV3IFNjYW5Bc3luY0l0ZXJhYmxlKHNvdXJjZSwgYWNjdW11bGF0b3IsIC4uLmFyZ3MpO1xufVxuIl19