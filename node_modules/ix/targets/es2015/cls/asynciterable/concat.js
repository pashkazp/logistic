goog.module('targets.es2015.cls.asynciterable.concat'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/concat.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
/**
 * @template TSource
 */
class ConcatAllAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<!AsyncIterable<TSource>>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {!AsyncIterable<TSource>} */ outer = yield __await(_b.value);
                    try {
                        for (var outer_1 = __asyncValues(outer), outer_1_1; outer_1_1 = yield __await(outer_1.next()), !outer_1_1.done;) {
                            let /** @type {TSource} */ item = yield __await(outer_1_1.value);
                            yield item;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (outer_1_1 && !outer_1_1.done && (_c = outer_1.return)) yield __await(_c.call(outer_1));
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) yield __await(_d.call(_a));
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d, e_1, _c;
        });
    }
}
function ConcatAllAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<!AsyncIterable<TSource>>} */
    ConcatAllAsyncIterable.prototype._source;
}
/**
 * @template TSource
 */
class ConcatAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!Iterable<!AsyncIterable<TSource>>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!AsyncIterableIterator<TSource>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            for (let /** @type {!AsyncIterable<TSource>} */ outer of this._source) {
                try {
                    for (var outer_2 = __asyncValues(outer), outer_2_1; outer_2_1 = yield __await(outer_2.next()), !outer_2_1.done;) {
                        let /** @type {TSource} */ item = yield __await(outer_2_1.value);
                        yield item;
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (outer_2_1 && !outer_2_1.done && (_a = outer_2.return)) yield __await(_a.call(outer_2));
                    }
                    finally { if (e_3) throw e_3.error; }
                }
            }
            var e_3, _a;
        });
    }
}
function ConcatAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!AsyncIterable<TSource>>} */
    ConcatAsyncIterable.prototype._source;
}
/**
 * @template TSource
 * @param {!AsyncIterable<!AsyncIterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function concatAll(source) {
    return new ConcatAllAsyncIterable(source);
}
exports.concatAll = concatAll;
/**
 * @template TSource
 * @param {!Iterable<!AsyncIterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TSource>}
 */
function _concatAll(source) {
    return new ConcatAsyncIterable(source);
}
exports._concatAll = _concatAll;
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {...!AsyncIterable<T>} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function concat(source, ...args) {
    return new ConcatAsyncIterable([source, ...args]);
}
exports.concat = concat;
/**
 * @template T
 * @param {...!AsyncIterable<T>} args
 * @return {!tsickle_forward_declare_1.AsyncIterableX<T>}
 */
function concatStatic(...args) {
    return new ConcatAsyncIterable(args);
}
exports.concatStatic = concatStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2NvbmNhdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsb0RBTHVCO0FBTXZCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywyQ0FBMkMsQ0FBQyxDQUFDO0FBQ25HOztHQUVHO0FBUEgsNEJBQXFDLFNBQVEsOEJBQXdCO0lBVXJFOztPQUVHO0lBVEQsWUFBWSxNQUE2QztRQVd2RCxLQVZLLEVBQUUsQ0FBQztRQVdSLElBVkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBV3hCLENBQUM7SUFDSDs7T0FFRztJQVhNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQzs7O2dCQWEzQixHQVpHLENBQUEsQ0FBb0IsSUFBQSxLQUFBLGNBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQSxJQUFBO29CQUF6QixJQUFBLHNDQUFHLENBQUEsS0FBTSwwQkFBQSxDQUFBOzt3QkFhbEIsR0FaRyxDQUFBLENBQW1CLElBQUEsVUFBQSxjQUFBLEtBQU0sQ0FBQSxXQUFBOzRCQUFqQixJQUFBLHNCQUFHLENBQUEsSUFBSyxpQ0FBQSxDQUFBOzRCQUFZLE1BQU0sSUFBSyxDQUFDO3lCQUFFOzs7Ozs7Ozs7aUJBQzlDOzs7Ozs7Ozs7O1FBYUgsQ0FaQztLQUFBO0NBQ0g7QUFjQTtJQUNBLHNEQUFzRDtJQUN0RCxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ3pDLENBQUM7QUFFRDs7R0FFRztBQW5CSCx5QkFBa0MsU0FBUSw4QkFBd0I7SUFzQmxFOztPQUVHO0lBckJELFlBQVksTUFBd0M7UUF1QmxELEtBdEJLLEVBQUUsQ0FBQztRQXVCUixJQXRCSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7SUF1QnhCLENBQUM7SUFDSDs7T0FFRztJQXZCTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7O1lBeUIzQixHQUFHLENBQUMsQ0F4QkMsSUFBQSxzQ0FBRyxDQUFBLEtBQU0sSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTs7b0JBeUIvQixHQXhCRyxDQUFBLENBQW1CLElBQUEsVUFBQSxjQUFBLEtBQU0sQ0FBQSxXQUFBO3dCQUFqQixJQUFBLHNCQUFHLENBQUEsSUFBSyxpQ0FBQSxDQUFBO3dCQUFZLE1BQU0sSUFBSyxDQUFDO3FCQUFFOzs7Ozs7Ozs7WUF5Qi9DLENBeEJDOztRQXlCSCxDQXhCQztLQUFBO0NBQ0g7QUEwQkE7SUFDQSxpREFBaUQ7SUFDakQsbUJBQW1CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztBQUN0QyxDQUFDO0FBRUQ7Ozs7R0FJRztBQWpDSCxtQkFBbUMsTUFBNkM7SUFtQzlFLE1BbENNLENBQUEsSUFBSSxzQkFBdUIsQ0FBVSxNQUFNLENBQUMsQ0FBQztBQW1DckQsQ0FBQztBQXBDRCw4QkFvQ0M7QUFDRDs7OztHQUlHO0FBckNILG9CQUFvQyxNQUF3QztJQXVDMUUsTUF0Q00sQ0FBQSxJQUFJLG1CQUFvQixDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBdUNsRCxDQUFDO0FBeENELGdDQXdDQztBQUNEOzs7OztHQUtHO0FBMUNILGdCQUEwQixNQUF3QixFQUFDLEdBQUksSUFBd0I7SUE0QzdFLE1BM0NNLENBQUEsSUFBSSxtQkFBb0IsQ0FBSSxDQUFDLE1BQU0sRUFBQyxHQUFJLElBQUksQ0FBQyxDQUFDLENBQUM7QUE0Q3ZELENBQUM7QUE3Q0Qsd0JBNkNDO0FBQ0Q7Ozs7R0FJRztBQTlDSCxzQkFBZ0MsR0FBRyxJQUF3QjtJQWdEekQsTUEvQ00sQ0FBQSxJQUFJLG1CQUFvQixDQUFJLElBQUksQ0FBQyxDQUFDO0FBZ0QxQyxDQS9DQztBQUZELG9DQUVDIiwiZmlsZSI6ImNvbmNhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEFzeW5jSXRlcmFibGVYIH0gZnJvbSAnLi4vYXN5bmNpdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5hc3luY2l0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBDb25jYXRBbGxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbmFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkge1xuICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovIG91dGVyIG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIG91dGVyKSB7IHlpZWxkIGl0ZW07IH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQ29uY2F0QWxsQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj59ICovXG5Db25jYXRBbGxBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIENvbmNhdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj59IHNvdXJjZVxuICovXG5jb25zdHJ1Y3Rvcihzb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi8gb3V0ZXIgb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBmb3IgYXdhaXQgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2Ygb3V0ZXIpIHsgeWllbGQgaXRlbTsgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBDb25jYXRBc3luY0l0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTwhQXN5bmNJdGVyYWJsZTxUU291cmNlPj59ICovXG5Db25jYXRBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPCFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+Pn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdEFsbDxUU291cmNlPihzb3VyY2U6IEFzeW5jSXRlcmFibGU8QXN5bmNJdGVyYWJsZTxUU291cmNlPj4pOiBBc3luY0l0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ29uY2F0QWxsQXN5bmNJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8IUFzeW5jSXRlcmFibGU8VFNvdXJjZT4+fSBzb3VyY2VcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkFzeW5jSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NvbmNhdEFsbDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPEFzeW5jSXRlcmFibGU8VFNvdXJjZT4+KTogQXN5bmNJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENvbmNhdEFzeW5jSXRlcmFibGU8VFNvdXJjZT4oc291cmNlKTtcbn1cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VD59IHNvdXJjZVxuICogQHBhcmFtIHsuLi4hQXN5bmNJdGVyYWJsZTxUPn0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQ8VD4oc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LCAuLi5hcmdzOiBBc3luY0l0ZXJhYmxlPFQ+W10pOiBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgQ29uY2F0QXN5bmNJdGVyYWJsZTxUPihbc291cmNlLCAuLi5hcmdzXSk7XG59XG4vKipcbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0gey4uLiFBc3luY0l0ZXJhYmxlPFQ+fSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5Bc3luY0l0ZXJhYmxlWDxUPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbmNhdFN0YXRpYzxUPiguLi5hcmdzOiBBc3luY0l0ZXJhYmxlPFQ+W10pOiBBc3luY0l0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgQ29uY2F0QXN5bmNJdGVyYWJsZTxUPihhcmdzKTtcbn1cbiJdfQ==