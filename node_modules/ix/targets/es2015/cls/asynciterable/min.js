goog.module('targets.es2015.cls.asynciterable.min'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/min.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */


var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!AsyncIterable<?>} source
 * @param {function(?): (number|!Promise<number>)=} selector
 * @return {!Promise<number>}
 */
function min(source, selector = identity_1.identityAsync) {
    return __awaiter(this, void 0, void 0, function* () {
        let /** @type {boolean} */ atleastOnce = false;
        let /** @type {number} */ value = Infinity;
        try {
            for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield source_1.next(), !source_1_1.done;) {
                let /** @type {?} */ item = yield source_1_1.value;
                if (!atleastOnce) {
                    atleastOnce = true;
                }
                let /** @type {number} */ x = yield selector(item);
                if (x < value) {
                    value = x;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield _a.call(source_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!atleastOnce) {
            throw new Error('Sequence contains no elements');
        }
        return value;
        var e_1, _a;
    });
}
exports.min = min;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL21pbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFISCxZQUFZLENBQUM7O0FBTWIsbURBTHNCO0FBTXRCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQU5qRDtBQWNyRDs7OztHQUlHO0FBVkgsYUFZSSxNQVgwQixFQVkxQixXQVhnRCx3QkFBYzs7UUFZaEUsSUFBSSxzQkFYRCxDQUFBLFdBQVksR0FBRSxLQUFNLENBQUM7UUFZeEIsSUFBSSxxQkFYRCxDQUFBLEtBQU0sR0FBRSxRQUFTLENBQUM7O1lBWXJCLEdBWEcsQ0FBQSxDQUFtQixJQUFBLFdBQUEsY0FBQSxNQUFPLENBQUEsWUFBQTtnQkFBbEIsSUFBQSxnQkFBRyxDQUFBLElBQUsseUJBQUEsQ0FBQTtnQkFZakIsRUFBRSxDQUFDLENBWEMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFFO29CQVlqQixXQVhXLEdBQUUsSUFBSyxDQUFDO2dCQVlyQixDQVhDO2dCQVlELElBQUkscUJBWEQsQ0FBQSxDQUFFLEdBQUUsTUFBTSxRQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBWTdCLEVBQUUsQ0FBQyxDQVhDLENBQUMsR0FBRSxLQUFNLENBQUMsQ0FBQSxDQUFFO29CQUFBLEtBQU0sR0FBRSxDQUFFLENBQUM7Z0JBQUEsQ0FBRTthQUM5Qjs7Ozs7Ozs7O1FBWUQsRUFBRSxDQUFDLENBWEMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFFO1lBWWpCLE1BWEssSUFBSSxLQUFNLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQVluRCxDQVhDO1FBYUQsTUFYTSxDQUFBLEtBQU0sQ0FBQzs7SUFZZixDQVhDO0NBQUE7QUFqQkQsa0JBaUJDIiwiZmlsZSI6Im1pbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbid1c2Ugc3RyaWN0JztcbmltcG9ydCB7IGlkZW50aXR5QXN5bmMgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pbihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8bnVtYmVyPixcbiAgICBzZWxlY3Rvcj86ICh4OiBudW1iZXIpID0+IG51bWJlciB8IFByb21pc2U8bnVtYmVyPik6IFByb21pc2U8bnVtYmVyPjtcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtaW48VD4oXG4gICAgc291cmNlOiBBc3luY0l0ZXJhYmxlPFQ+LFxuICAgIHNlbGVjdG9yOiAoeDogVCkgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+KTogUHJvbWlzZTxudW1iZXI+O1xuLyoqXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPD8+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oPyk6IChudW1iZXJ8IVByb21pc2U8bnVtYmVyPik9fSBzZWxlY3RvclxuICogQHJldHVybiB7IVByb21pc2U8bnVtYmVyPn1cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG1pbihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8YW55PixcbiAgICBzZWxlY3RvcjogKHg6IGFueSkgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+ID0gaWRlbnRpdHlBc3luYyk6IFByb21pc2U8bnVtYmVyPiB7XG4gIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGF0bGVhc3RPbmNlID0gZmFsc2U7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gdmFsdWUgPSBJbmZpbml0eTtcbiAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHs/fSAqLyBpdGVtIG9mIHNvdXJjZSkge1xuICAgIGlmICghYXRsZWFzdE9uY2UpIHtcbiAgICAgIGF0bGVhc3RPbmNlID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyB4ID0gYXdhaXQgc2VsZWN0b3IoaXRlbSk7XG4gICAgaWYgKHggPCB2YWx1ZSkgeyB2YWx1ZSA9IHg7IH1cbiAgfVxuICBpZiAoIWF0bGVhc3RPbmNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTZXF1ZW5jZSBjb250YWlucyBubyBlbGVtZW50cycpO1xuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufVxuIl19