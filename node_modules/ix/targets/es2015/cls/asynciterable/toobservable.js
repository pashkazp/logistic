goog.module('targets.es2015.cls.asynciterable.toobservable'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/toobservable.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.observer");
goog.require("_Users.ptaylor.dev.ixjs.src.observer"); // force type-only module to be loaded
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.subscription");
goog.require("_Users.ptaylor.dev.ixjs.src.subscription"); // force type-only module to be loaded
/**
 * @implements {tsickle_forward_declare_2.Subscription}
 */
class BooleanSubscription {
    constructor() {
        this.isUnsubscribed = false;
    }
    /**
     * @return {void}
     */
    unsubscribe() {
        this.isUnsubscribed = true;
    }
}
function BooleanSubscription_tsickle_Closure_declarations() {
    /** @type {boolean} */
    BooleanSubscription.prototype.isUnsubscribed;
}
/**
 * @template TSource
 * @implements {tsickle_forward_declare_1.Observable}
 */
class AsyncIterableObservable {
    /**
     * @param {!AsyncIterable<TSource>} source
     */
    constructor(source) {
        this._source = source;
    }
    /**
     * @param {!tsickle_forward_declare_1.Observer<TSource>} observer
     * @return {!BooleanSubscription}
     */
    subscribe(observer) {
        const /** @type {!BooleanSubscription} */ subscription = new BooleanSubscription();
        const /** @type {!AsyncIterator<TSource>} */ it = this._source[Symbol.asyncIterator]();
        const /** @type {function(): void} */ f = () => {
            it.next()
                .then(({ value, done }) => {
                if (!subscription.isUnsubscribed) {
                    if (done) {
                        observer.complete();
                    }
                    else {
                        observer.next(value);
                        f();
                    }
                }
            })
                .catch(err => {
                if (!subscription.isUnsubscribed) {
                    observer.error(err);
                }
            });
        };
        f();
        return subscription;
    }
}
function AsyncIterableObservable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    AsyncIterableObservable.prototype._source;
}
/**
 * @template TSource
 * @param {!AsyncIterable<TSource>} source
 * @return {!tsickle_forward_declare_1.Observable<TSource>}
 */
function toObservable(source) {
    return new AsyncIterableObservable(source);
}
exports.toObservable = toObservable;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3Rvb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBR0gsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDLENBQUMsc0NBUEg7QUFTbkQsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDbEcsSUFBSSxDQUFDLE9BQU8sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDLENBQUMsc0NBQXNDO0FBQ2hHOztHQUVHO0FBVkg7SUFBQTtRQUNRLG1CQUFlLEdBQVcsS0FBTSxDQUFBO0lBS3hDLENBQUE7SUFPQTs7T0FFRztJQVpELFdBQVc7UUFjVCxJQWJJLENBQUMsY0FBYyxHQUFFLElBQUssQ0FBQztJQWM3QixDQWJDO0NBQ0g7QUFlQTtJQUNBLHNCQUFzQjtJQUN0QixtQkFBbUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDO0FBQzdDLENBQUM7QUFFRDs7O0dBR0c7QUFyQkg7SUF3QkE7O09BRUc7SUF2QkQsWUFBWSxNQUE4QjtRQXlCeEMsSUF4QkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBeUJ4QixDQUFDO0lBQ0g7OztPQUdHO0lBMUJELFNBQVMsQ0FBQyxRQUEyQjtRQTRCbkMsTUFBTSxtQ0EzQkQsQ0FBQSxZQUFhLEdBQUUsSUFBSSxtQkFBb0IsRUFBRSxDQUFDO1FBNkIvQyxNQUFNLHNDQTNCRCxDQUFBLEVBQUcsR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBNEJoRCxNQUFNLCtCQTNCRCxDQUFBLENBQUUsR0FBRTtZQTRCUCxFQTNCRSxDQUFDLElBQUksRUFBRTtpQkFDTixJQUFJLENBQUMsQ0FBQyxFQUFDLEtBQUssRUFBQyxJQUFLLEVBQUM7Z0JBNEJsQixFQUFFLENBQUMsQ0EzQkMsQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUEsQ0FBRTtvQkE0QmpDLEVBQUUsQ0FBQyxDQTNCQyxJQUFJLENBQUMsQ0FBQSxDQUFFO3dCQTRCVCxRQTNCUSxDQUFDLFFBQVEsRUFBRSxDQUFDO29CQTRCdEIsQ0EzQkM7b0JBQUEsSUFBSyxDQUFBLENBQUU7d0JBNEJOLFFBM0JRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQTRCckIsQ0EzQkMsRUFBRSxDQUFDO29CQTRCTixDQTNCQztnQkE0QkgsQ0EzQkM7WUE0QkgsQ0EzQkMsQ0FBQztpQkFDRCxLQUFLLENBQUMsR0FBRztnQkE0QlIsRUFBRSxDQUFDLENBM0JDLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFBLENBQUU7b0JBNEJqQyxRQTNCUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkE0QnRCLENBM0JDO1lBNEJILENBM0JDLENBQUMsQ0FBQztRQTRCUCxDQTNCQyxDQUFDO1FBNEJGLENBM0JDLEVBQUUsQ0FBQztRQTZCSixNQTNCTSxDQUFBLFlBQWEsQ0FBQztJQTRCdEIsQ0EzQkM7Q0FDSDtBQTZCQTtJQUNBLHNDQUFzQztJQUN0Qyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQzFDLENBQUM7QUFFRDs7OztHQUlHO0FBcENILHNCQUFzQyxNQUE4QjtJQXNDbEUsTUFyQ00sQ0FBQSxJQUFJLHVCQUF3QixDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBc0N0RCxDQXJDQztBQUZELG9DQUVDIiwiZmlsZSI6InRvb2JzZXJ2YWJsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAnLi4vb2JzZXJ2ZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMub2JzZXJ2ZXJcIik7XG5nb29nLnJlcXVpcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMub2JzZXJ2ZXJcIik7IC8vIGZvcmNlIHR5cGUtb25seSBtb2R1bGUgdG8gYmUgbG9hZGVkXG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9zdWJzY3JpcHRpb24nO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuc3Vic2NyaXB0aW9uXCIpO1xuZ29vZy5yZXF1aXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLnN1YnNjcmlwdGlvblwiKTsgLy8gZm9yY2UgdHlwZS1vbmx5IG1vZHVsZSB0byBiZSBsb2FkZWRcbi8qKlxuICogQGltcGxlbWVudHMge3RzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuU3Vic2NyaXB0aW9ufVxuICovXG5jbGFzcyBCb29sZWFuU3Vic2NyaXB0aW9uIGltcGxlbWVudHMgU3Vic2NyaXB0aW9uIHtcbnB1YmxpYyBpc1Vuc3Vic2NyaWJlZDogYm9vbGVhbiA9IGZhbHNlO1xuLyoqXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG51bnN1YnNjcmliZSgpIHtcbiAgICB0aGlzLmlzVW5zdWJzY3JpYmVkID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBCb29sZWFuU3Vic2NyaXB0aW9uX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUge2Jvb2xlYW59ICovXG5Cb29sZWFuU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5pc1Vuc3Vic2NyaWJlZDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQGltcGxlbWVudHMge3RzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuT2JzZXJ2YWJsZX1cbiAqL1xuY2xhc3MgQXN5bmNJdGVyYWJsZU9ic2VydmFibGU8VFNvdXJjZT4gaW1wbGVtZW50cyBPYnNlcnZhYmxlPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPjtcbi8qKlxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPikge1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcGFyYW0geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLk9ic2VydmVyPFRTb3VyY2U+fSBvYnNlcnZlclxuICogQHJldHVybiB7IUJvb2xlYW5TdWJzY3JpcHRpb259XG4gKi9cbnN1YnNjcmliZShvYnNlcnZlcjogT2JzZXJ2ZXI8VFNvdXJjZT4pIHtcbiAgICBjb25zdCAvKiogQHR5cGUgeyFCb29sZWFuU3Vic2NyaXB0aW9ufSAqLyBzdWJzY3JpcHRpb24gPSBuZXcgQm9vbGVhblN1YnNjcmlwdGlvbigpO1xuXG4gICAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQgPSB0aGlzLl9zb3VyY2VbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgY29uc3QgLyoqIEB0eXBlIHtmdW5jdGlvbigpOiB2b2lkfSAqLyBmID0gKCkgPT4ge1xuICAgICAgaXQubmV4dCgpXG4gICAgICAgIC50aGVuKCh7dmFsdWUsIGRvbmV9KSA9PiB7XG4gICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24uaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIGlmIChkb25lKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgZigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICAgICAgLmNhdGNoKGVyciA9PiB7XG4gICAgICAgICAgaWYgKCFzdWJzY3JpcHRpb24uaXNVbnN1YnNjcmliZWQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIGYoKTtcblxuICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gIH1cbn1cblxuZnVuY3Rpb24gQXN5bmNJdGVyYWJsZU9ic2VydmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59ICovXG5Bc3luY0l0ZXJhYmxlT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5PYnNlcnZhYmxlPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gdG9PYnNlcnZhYmxlPFRTb3VyY2U+KHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPik6IE9ic2VydmFibGU8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEFzeW5jSXRlcmFibGVPYnNlcnZhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG4iXX0=