goog.module('targets.es2015.cls.asynciterable.flatmap'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/flatmap.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var asynciterable_1 = goog.require('targets.es2015.cls.asynciterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.asynciterable");
var bindcallback_1 = goog.require('targets.es2015.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource, TResult
 */
class FlatMapAsyncIterable extends asynciterable_1.AsyncIterableX {
    /**
     * @param {!AsyncIterable<TSource>} source
     * @param {function(TSource): (!AsyncIterable<TResult>|!Promise<!AsyncIterable<TResult>>)} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!AsyncIterableIterator<TResult>}
     */
    [Symbol.asyncIterator]() {
        return __asyncGenerator(this, arguments, function* _a() {
            try {
                for (var _a = __asyncValues(this._source), _b; _b = yield __await(_a.next()), !_b.done;) {
                    let /** @type {TSource} */ outer = yield __await(_b.value);
                    const /** @type {!AsyncIterable<TResult>} */ inners = yield __await(this._selector(outer));
                    try {
                        for (var inners_1 = __asyncValues(inners), inners_1_1; inners_1_1 = yield __await(inners_1.next()), !inners_1_1.done;) {
                            let /** @type {TResult} */ inner = yield __await(inners_1_1.value);
                            yield inner;
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (inners_1_1 && !inners_1_1.done && (_c = inners_1.return)) yield __await(_c.call(inners_1));
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_b && !_b.done && (_d = _a.return)) yield __await(_d.call(_a));
                }
                finally { if (e_2) throw e_2.error; }
            }
            var e_2, _d, e_1, _c;
        });
    }
}
function FlatMapAsyncIterable_tsickle_Closure_declarations() {
    /** @type {!AsyncIterable<TSource>} */
    FlatMapAsyncIterable.prototype._source;
    /** @type {function(TSource): (!AsyncIterable<TResult>|!Promise<!AsyncIterable<TResult>>)} */
    FlatMapAsyncIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 * @param {!AsyncIterable<TSource>} source
 * @param {function(TSource): (!AsyncIterable<TResult>|!Promise<!AsyncIterable<TResult>>)} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.AsyncIterableX<TResult>}
 */
function flatMap(source, selector, thisArg) {
    return new FlatMapAsyncIterable(source, bindcallback_1.bindCallback(selector, thisArg, 1));
}
exports.flatMap = flatMap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2ZsYXRtYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG9EQUx1QjtBQU12QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsMkNBQTJDLENBQUMsQ0FOaEQ7QUFPbEQsMkRBTnFCO0FBT3JCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQzNHOztHQUVHO0FBUkgsMEJBQTRDLFNBQVEsOEJBQXdCO0lBWTVFOzs7T0FHRztJQVhELFlBYUUsTUFaOEIsRUFhOUIsUUFac0Y7UUFhdEYsS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWF0QixJQVpJLENBQUMsU0FBUyxHQUFFLFFBQVMsQ0FBQztJQWE1QixDQUFDO0lBQ0g7O09BRUc7SUFiTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7OztnQkFlM0IsR0FkRyxDQUFBLENBQW9CLElBQUEsS0FBQSxjQUFBLElBQUssQ0FBQyxPQUFPLENBQUEsSUFBQTtvQkFBekIsSUFBQSxzQkFBRyxDQUFBLEtBQU0sMEJBQUEsQ0FBQTtvQkFlbEIsTUFBTSxzQ0FkRCxDQUFBLE1BQU8sR0FBRSxjQUFNLElBQUssQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQzs7d0JBZTNDLEdBZEcsQ0FBQSxDQUFvQixJQUFBLFdBQUEsY0FBQSxNQUFPLENBQUEsWUFBQTs0QkFBbkIsSUFBQSxzQkFBRyxDQUFBLEtBQU0sa0NBQUEsQ0FBQTs0QkFlbEIsTUFkSyxLQUFNLENBQUM7eUJBQ2I7Ozs7Ozs7OztpQkFDRjs7Ozs7Ozs7OztRQWVILENBZEM7S0FBQTtDQUNIO0FBZ0JBO0lBQ0Esc0NBQXNDO0lBQ3RDLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDdkMsNkZBQTZGO0lBQzdGLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDekMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQTNCSCxpQkE2QkksTUE1QjhCLEVBNkI5QixRQTVCc0YsRUE2QnRGLE9BNUJhO0lBNkJmLE1BNUJNLENBQUEsSUFBSSxvQkFBcUIsQ0FBbUIsTUFBTSxFQUFDLDJCQUFhLENBQUMsUUFBUSxFQUFDLE9BQVEsRUFBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBNkJoRyxDQTVCQztBQUxELDBCQUtDIiwiZmlsZSI6ImZsYXRtYXAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBBc3luY0l0ZXJhYmxlWCB9IGZyb20gJy4uL2FzeW5jaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuYXN5bmNpdGVyYWJsZVwiKTtcbmltcG9ydCB7IGJpbmRDYWxsYmFjayB9IGZyb20gJy4uL2ludGVybmFsL2JpbmRjYWxsYmFjayc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5iaW5kY2FsbGJhY2tcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKi9cbmNsYXNzIEZsYXRNYXBBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfc291cmNlOiBBc3luY0l0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gQXN5bmNJdGVyYWJsZTxUUmVzdWx0PiB8IFByb21pc2U8QXN5bmNJdGVyYWJsZTxUUmVzdWx0Pj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogKCFBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+fCFQcm9taXNlPCFBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+Pil9IHNlbGVjdG9yXG4gKi9cbmNvbnN0cnVjdG9yKFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUFzeW5jSXRlcmFibGVJdGVyYXRvcjxUUmVzdWx0Pn1cbiAqL1xuYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7XG4gICAgZm9yIGF3YWl0IChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBvdXRlciBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7IUFzeW5jSXRlcmFibGU8VFJlc3VsdD59ICovIGlubmVycyA9IGF3YWl0IHRoaXMuX3NlbGVjdG9yKG91dGVyKTtcbiAgICAgIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7VFJlc3VsdH0gKi8gaW5uZXIgb2YgaW5uZXJzKSB7XG4gICAgICAgIHlpZWxkIGlubmVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBGbGF0TWFwQXN5bmNJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshQXN5bmNJdGVyYWJsZTxUU291cmNlPn0gKi9cbkZsYXRNYXBBc3luY0l0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlKTogKCFBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+fCFQcm9taXNlPCFBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+Pil9ICovXG5GbGF0TWFwQXN5bmNJdGVyYWJsZS5wcm90b3R5cGUuX3NlbGVjdG9yO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6ICghQXN5bmNJdGVyYWJsZTxUUmVzdWx0PnwhUHJvbWlzZTwhQXN5bmNJdGVyYWJsZTxUUmVzdWx0Pj4pfSBzZWxlY3RvclxuICogQHBhcmFtIHs/PX0gdGhpc0FyZ1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBmbGF0TWFwPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIHNvdXJjZTogQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+IHwgUHJvbWlzZTxBc3luY0l0ZXJhYmxlPFRSZXN1bHQ+PixcbiAgICB0aGlzQXJnPzogYW55KTogQXN5bmNJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IEZsYXRNYXBBc3luY0l0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+KHNvdXJjZSwgYmluZENhbGxiYWNrKHNlbGVjdG9yLCB0aGlzQXJnLCAxKSk7XG59XG4iXX0=