goog.module('targets.es2015.cls.asynciterable.average'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/average.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!AsyncIterable<?>} source
 * @param {function(?): (number|!Promise<number>)=} selector
 * @return {!Promise<number>}
 */
function average(source, selector = identity_1.identityAsync) {
    return __awaiter(this, void 0, void 0, function* () {
        let /** @type {number} */ sum = 0;
        let /** @type {number} */ count = 0;
        try {
            for (var source_1 = __asyncValues(source), source_1_1; source_1_1 = yield source_1.next(), !source_1_1.done;) {
                let /** @type {?} */ item = yield source_1_1.value;
                sum += yield selector(item);
                count++;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (source_1_1 && !source_1_1.done && (_a = source_1.return)) yield _a.call(source_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (count === 0) {
            throw new Error('Empty collection');
        }
        return sum / count;
        var e_1, _a;
    });
}
exports.average = average;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL2F2ZXJhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG1EQUxzQjtBQU10QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FOakQ7QUFjckQ7Ozs7R0FJRztBQVZILGlCQVlJLE1BWDBCLEVBWTFCLFdBWGdELHdCQUFjOztRQVloRSxJQUFJLHFCQVhELENBQUEsR0FBSSxHQUFFLENBQUUsQ0FBQztRQVlaLElBQUkscUJBWEQsQ0FBQSxLQUFNLEdBQUUsQ0FBRSxDQUFDOztZQVlkLEdBWEcsQ0FBQSxDQUFtQixJQUFBLFdBQUEsY0FBQSxNQUFPLENBQUEsWUFBQTtnQkFBbEIsSUFBQSxnQkFBRyxDQUFBLElBQUsseUJBQUEsQ0FBQTtnQkFZakIsR0FYRyxJQUFHLE1BQU0sUUFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQVk1QixLQVhLLEVBQUUsQ0FBQzthQUNUOzs7Ozs7Ozs7UUFhRCxFQUFFLENBQUMsQ0FYQyxLQUFLLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTtZQVloQixNQVhLLElBQUksS0FBTSxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFZdEMsQ0FYQztRQWFELE1BWE0sQ0FBQSxHQUFJLEdBQUUsS0FBTSxDQUFDOztJQVlyQixDQVhDO0NBQUE7QUFmRCwwQkFlQyIsImZpbGUiOiJhdmVyYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgaWRlbnRpdHlBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXZlcmFnZShcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPG51bWJlciB8IFByb21pc2VMaWtlPG51bWJlcj4+IHwgQXN5bmNJdGVyYWJsZTxudW1iZXI+LFxuICAgIHNlbGVjdG9yPzogKHg6IG51bWJlcikgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+KTogUHJvbWlzZTxudW1iZXI+O1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF2ZXJhZ2U8VFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlIHwgUHJvbWlzZUxpa2U8VFNvdXJjZT4+IHwgQXN5bmNJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3Rvcj86ICh4OiBUU291cmNlKSA9PiBudW1iZXIgfCBQcm9taXNlPG51bWJlcj4pOiBQcm9taXNlPG51bWJlcj47XG4vKipcbiAqIEBwYXJhbSB7IUFzeW5jSXRlcmFibGU8Pz59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbig/KTogKG51bWJlcnwhUHJvbWlzZTxudW1iZXI+KT19IHNlbGVjdG9yXG4gKiBAcmV0dXJuIHshUHJvbWlzZTxudW1iZXI+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gYXZlcmFnZShcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8YW55PixcbiAgICBzZWxlY3RvcjogKHg6IGFueSkgPT4gbnVtYmVyIHwgUHJvbWlzZTxudW1iZXI+ID0gaWRlbnRpdHlBc3luYyk6IFByb21pc2U8bnVtYmVyPiB7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gc3VtID0gMDtcbiAgbGV0IC8qKiBAdHlwZSB7bnVtYmVyfSAqLyBjb3VudCA9IDA7XG4gIGZvciBhd2FpdCAobGV0IC8qKiBAdHlwZSB7P30gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBzdW0gKz0gYXdhaXQgc2VsZWN0b3IoaXRlbSk7XG4gICAgY291bnQrKztcbiAgfVxuXG4gIGlmIChjb3VudCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignRW1wdHkgY29sbGVjdGlvbicpO1xuICB9XG5cbiAgcmV0dXJuIHN1bSAvIGNvdW50O1xufVxuIl19