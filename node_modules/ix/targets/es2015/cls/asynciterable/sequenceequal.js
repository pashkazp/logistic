goog.module('targets.es2015.cls.asynciterable.sequenceequal'); exports = {}; var module = {id: 'targets/es2015/cls/asynciterable/sequenceequal.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template T
 * @param {!AsyncIterable<T>} source
 * @param {!AsyncIterable<T>} other
 * @param {function(T, T): (boolean|!Promise<boolean>)=} comparer
 * @return {!Promise<boolean>}
 */
function sequenceEqual(source, other, comparer = comparer_1.comparerAsync) {
    return __awaiter(this, void 0, void 0, function* () {
        const /** @type {!AsyncIterator<T>} */ it1 = source[Symbol.asyncIterator](), /** @type {!AsyncIterator<T>} */ it2 = other[Symbol.asyncIterator]();
        let /** @type {!IteratorResult<T>} */ next1, /** @type {!IteratorResult<T>} */ next2;
        while (!(next1 = yield it1.next()).done) {
            if (!(!(next2 = yield it2.next()).done && (yield comparer(next1.value, next2.value)))) {
                return false;
            }
        }
        return (yield it2.next()).done;
    });
}
exports.sequenceEqual = sequenceEqual;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hc3luY2l0ZXJhYmxlL3NlcXVlbmNlZXF1YWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG1EQUxzQjtBQU10QixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7Ozs7O0dBTUc7QUFYSCx1QkFhSSxNQVp3QixFQWF4QixLQVp1QixFQWF2QixXQVorRCx3QkFBYzs7UUFhL0UsTUFBTSxnQ0FaRCxDQUFBLEdBQUksR0FBRSxNQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUEsZ0NBQUMsQ0FBQSxHQUFJLEdBQUUsS0FBTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO1FBYWhGLElBQUksaUNBWkQsQ0FBQSxLQUF5QixFQUFBLGlDQUFDLENBQUEsS0FBeUIsQ0FBQztRQWF2RCxPQVpPLENBQUMsQ0FBQyxLQUFLLEdBQUUsTUFBTSxHQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUMsQ0FBRTtZQWF4QyxFQUFFLENBQUMsQ0FaQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRSxNQUFNLEdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksS0FBRyxNQUFNLFFBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLEtBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQWFwRixNQVpNLENBQUEsS0FBTSxDQUFDO1lBYWYsQ0FaQztRQWFILENBWkM7UUFjRCxNQVpNLENBQUEsQ0FBRSxNQUFLLEdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQztJQWFqQyxDQVpDO0NBQUE7QUFiRCxzQ0FhQyIsImZpbGUiOiJzZXF1ZW5jZWVxdWFsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgY29tcGFyZXJBc3luYyB9IGZyb20gJy4uL2ludGVybmFsL2NvbXBhcmVyJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmNvbXBhcmVyXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHshQXN5bmNJdGVyYWJsZTxUPn0gc291cmNlXG4gKiBAcGFyYW0geyFBc3luY0l0ZXJhYmxlPFQ+fSBvdGhlclxuICogQHBhcmFtIHtmdW5jdGlvbihULCBUKTogKGJvb2xlYW58IVByb21pc2U8Ym9vbGVhbj4pPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyFQcm9taXNlPGJvb2xlYW4+fVxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc2VxdWVuY2VFcXVhbDxUPihcbiAgICBzb3VyY2U6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgb3RoZXI6IEFzeW5jSXRlcmFibGU8VD4sXG4gICAgY29tcGFyZXI6IChmaXJzdDogVCwgc2Vjb25kOiBUKSA9PiBib29sZWFuIHwgUHJvbWlzZTxib29sZWFuPiA9IGNvbXBhcmVyQXN5bmMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgY29uc3QgLyoqIEB0eXBlIHshQXN5bmNJdGVyYXRvcjxUPn0gKi8gaXQxID0gc291cmNlW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpLCAvKiogQHR5cGUgeyFBc3luY0l0ZXJhdG9yPFQ+fSAqLyBpdDIgPSBvdGhlcltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTtcbiAgbGV0IC8qKiBAdHlwZSB7IUl0ZXJhdG9yUmVzdWx0PFQ+fSAqLyBuZXh0MTogSXRlcmF0b3JSZXN1bHQ8VD4sIC8qKiBAdHlwZSB7IUl0ZXJhdG9yUmVzdWx0PFQ+fSAqLyBuZXh0MjogSXRlcmF0b3JSZXN1bHQ8VD47XG4gIHdoaWxlICghKG5leHQxID0gYXdhaXQgaXQxLm5leHQoKSkuZG9uZSkge1xuICAgIGlmICghKCEobmV4dDIgPSBhd2FpdCBpdDIubmV4dCgpKS5kb25lICYmIGF3YWl0IGNvbXBhcmVyKG5leHQxLnZhbHVlLCBuZXh0Mi52YWx1ZSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIChhd2FpdCBpdDIubmV4dCgpKS5kb25lO1xufVxuIl19