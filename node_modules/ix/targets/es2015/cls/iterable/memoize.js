goog.module('targets.es2015.cls.iterable.memoize'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/memoize.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var _refcountlist_1 = goog.require('targets.es2015.cls.iterable._refcountlist');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.es2015.cls.iterable.create');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.create");
/**
 * @template T
 */
class MemoizeBuffer extends iterable_1.IterableX {
    /**
     * @param {!Iterator<T>} source
     * @param {!tsickle_forward_declare_2.IRefCountList<T>} buffer
     */
    constructor(source, buffer) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = buffer;
    }
    /**
     * @return {!IterableIterator<T>}
     */
    *[Symbol.iterator]() {
        let /** @type {number} */ i = 0;
        try {
            while (1) {
                let /** @type {boolean} */ hasValue = false, /** @type {T} */ current = ({});
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let /** @type {!IteratorResult<T>} */ next = this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        throw this._error;
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
}
function MemoizeBuffer_tsickle_Closure_declarations() {
    /** @type {!Iterator<T>} */
    MemoizeBuffer.prototype._source;
    /** @type {!tsickle_forward_declare_2.IRefCountList<T>} */
    MemoizeBuffer.prototype._buffer;
    /** @type {?} */
    MemoizeBuffer.prototype._error;
    /** @type {boolean} */
    MemoizeBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {number=} readerCount
 * @param {function(!Iterable<TSource>): !Iterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.IterableX<(TSource|TResult)>}
 */
function memoize(source, readerCount = -1, selector) {
    if (readerCount === -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new _refcountlist_1.MaxRefCountList());
    }
    if (readerCount !== -1 && !selector) {
        return new MemoizeBuffer(source[Symbol.iterator](), new _refcountlist_1.RefCountList(readerCount));
    }
    return create_1.create(() => ((selector))(memoize(source, readerCount))[Symbol.iterator]());
}
exports.memoize = memoize;
//# sourceMappingURL=data:application/json;base64,