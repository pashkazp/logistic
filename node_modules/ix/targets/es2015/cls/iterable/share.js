goog.module('targets.es2015.cls.iterable.share'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/share.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var create_1 = goog.require('targets.es2015.cls.iterable.create');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.create");
/**
 * @template T
 */
class SharedIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterator<T>} it
     */
    constructor(it) {
        super();
        this._it = it;
    }
    /**
     * @return {!Iterator<T>}
     */
    [Symbol.iterator]() {
        return this._it;
    }
}
function SharedIterable_tsickle_Closure_declarations() {
    /** @type {!Iterator<T>} */
    SharedIterable.prototype._it;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(!Iterable<TSource>): !Iterable<TResult>=} fn
 * @return {!tsickle_forward_declare_1.IterableX<(TSource|TResult)>}
 */
function share(source, fn) {
    return fn ?
        create_1.create(() => fn(new SharedIterable(source[Symbol.iterator]()))[Symbol.iterator]()) :
        new SharedIterable(source[Symbol.iterator]());
}
exports.share = share;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zaGFyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQU5yRDtBQU94QyxxQ0FOZTtBQU9mLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDO0FBQ3JHOztHQUVHO0FBUkgsb0JBQXVCLFNBQVEsb0JBQWE7SUFXNUM7O09BRUc7SUFWRCxZQUFZLEVBQWU7UUFZekIsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztJQVloQixDQUFDO0lBQ0g7O09BRUc7SUFaRCxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFjZixNQWJNLENBQUEsSUFBSyxDQUFDLEdBQUcsQ0FBQztJQWNsQixDQWJDO0NBQ0g7QUFlQTtJQUNBLDJCQUEyQjtJQUMzQixjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUM3QixDQUFDO0FBT0Q7Ozs7O0dBS0c7QUF4QkgsZUEwQkksTUF6QnlCLEVBMEJ6QixFQXpCb0Q7SUEwQnRELE1BekJNLENBQUEsRUFBRztRQTBCUCxlQXpCTSxDQUFDLE1BQUssRUFBRyxDQUFDLElBQUcsY0FBZSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUEwQmxGLElBekJHLGNBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQTBCbEQsQ0F6QkM7QUFORCxzQkFNQyIsImZpbGUiOiJzaGFyZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnLi9jcmVhdGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUuY3JlYXRlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICovXG5jbGFzcyBTaGFyZWRJdGVyYWJsZTxUPiBleHRlbmRzIEl0ZXJhYmxlWDxUPiB7XG5wcml2YXRlIF9pdDogSXRlcmF0b3I8VD47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhdG9yPFQ+fSBpdFxuICovXG5jb25zdHJ1Y3RvcihpdDogSXRlcmF0b3I8VD4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX2l0ID0gaXQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhdG9yPFQ+fVxuICovXG5bU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5faXQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gU2hhcmVkSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhdG9yPFQ+fSAqL1xuU2hhcmVkSXRlcmFibGUucHJvdG90eXBlLl9pdDtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gc2hhcmU8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPik6IEl0ZXJhYmxlWDxUU291cmNlPjtcbmV4cG9ydCBmdW5jdGlvbiBzaGFyZTxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIGZuPzogKHZhbHVlOiBJdGVyYWJsZTxUU291cmNlPikgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFJlc3VsdD47XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFJdGVyYWJsZTxUU291cmNlPik6ICFJdGVyYWJsZTxUUmVzdWx0Pj19IGZuXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8KFRTb3VyY2V8VFJlc3VsdCk+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhcmU8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBmbj86ICh2YWx1ZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRTb3VyY2UgfCBUUmVzdWx0PiB7XG4gIHJldHVybiBmbiA/XG4gICAgY3JlYXRlKCgpID0+IGZuKG5ldyBTaGFyZWRJdGVyYWJsZShzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpKSlbU3ltYm9sLml0ZXJhdG9yXSgpKSA6XG4gICAgbmV3IFNoYXJlZEl0ZXJhYmxlKHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCkpO1xufVxuIl19