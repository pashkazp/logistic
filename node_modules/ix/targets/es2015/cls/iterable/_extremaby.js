goog.module('targets.es2015.cls.iterable._extremaby'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/_extremaby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @ignore
 * @template T
 * @param {T} key
 * @param {T} minValue
 * @return {number}
 */
function defaultCompare(key, minValue) {
    return key > minValue ? 1 : key < minValue ? -1 : 0;
}
exports.defaultCompare = defaultCompare;
/**
 * @ignore
 * @template TSource, TKey
 */
class ExtremaByIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keyFn
     * @param {function(TKey, TKey): number} cmp
     */
    constructor(source, keyFn, cmp) {
        super();
        this._source = source;
        this._keyFn = keyFn;
        this._cmp = cmp;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Array<TSource>} */ result = [], /** @type {?} */ next;
        const /** @type {!Iterator<TSource>} */ it = this._source[Symbol.iterator]();
        if ((next = it.next()).done) {
            throw new Error('Sequence contains no elements');
        }
        let /** @type {TSource} */ current = next.value, /** @type {TKey} */ resKey = this._keyFn(current);
        result.push(current);
        while (!(next = it.next()).done) {
            let /** @type {TSource} */ curr = next.value, /** @type {TKey} */ key = this._keyFn(curr);
            const /** @type {number} */ c = this._cmp(key, resKey);
            if (c === 0) {
                result.push(curr);
            }
            else if (c > 0) {
                result = [curr];
                resKey = key;
            }
        }
        yield* result;
    }
}
function ExtremaByIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    ExtremaByIterable.prototype._source;
    /** @type {function(TSource): TKey} */
    ExtremaByIterable.prototype._keyFn;
    /** @type {function(TKey, TKey): number} */
    ExtremaByIterable.prototype._cmp;
}
/**
 * @ignore
 * @template TSource, TKey
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keyFn
 * @param {function(TKey, TKey): number} cmp
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function extremaBy(source, keyFn, cmp) {
    return new ExtremaByIterable(source, keyFn, cmp);
}
exports.extremaBy = extremaBy;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9fZXh0cmVtYWJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUY7Ozs7OztHQU1HO0FBUkgsd0JBQWtDLEdBQU0sRUFBQyxRQUFZO0lBVW5ELE1BVE0sQ0FBQSxHQUFJLEdBQUUsUUFBUyxHQUFFLENBQUUsR0FBRSxHQUFJLEdBQUUsUUFBUyxHQUFFLENBQUUsQ0FBQyxHQUFFLENBQUUsQ0FBQztBQVV0RCxDQUFDO0FBWEQsd0NBV0M7QUFDRDs7O0dBR0c7QUFSSCx1QkFBc0MsU0FBUSxvQkFBbUI7SUFhakU7Ozs7T0FJRztJQVpELFlBY0ksTUFieUIsRUFjekIsS0FiMkIsRUFjM0IsR0FiaUM7UUFjbkMsS0FiSyxFQUFFLENBQUM7UUFjUixJQWJJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQWN0QixJQWJJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWNwQixJQWJJLENBQUMsSUFBSSxHQUFFLEdBQUksQ0FBQztJQWNsQixDQUFDO0lBQ0g7O09BRUc7SUFkRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWdCaEIsSUFBSSw4QkFmRCxDQUFBLE1BQU8sR0FBYSxFQUFHLEVBQUEsZ0JBQUMsQ0FBQSxJQUFLLENBQUM7UUFnQmpDLE1BQU0saUNBZkQsQ0FBQSxFQUFHLEdBQUUsSUFBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQWdCM0MsRUFBRSxDQUFDLENBZkMsQ0FBQyxJQUFJLEdBQUUsRUFBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBRTtZQWdCNUIsTUFmSyxJQUFJLEtBQU0sQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBZ0JuRCxDQWZDO1FBaUJELElBQUksc0JBZkQsQ0FBQSxPQUFRLEdBQUUsSUFBSyxDQUFDLEtBQUssRUFBQSxtQkFBQyxDQUFBLE1BQU8sR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBZ0J4RCxNQWZNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBZ0JyQixPQWZPLENBQUMsQ0FBQyxJQUFJLEdBQUUsRUFBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUU7WUFnQmhDLElBQUksc0JBZkQsQ0FBQSxJQUFLLEdBQUUsSUFBSyxDQUFDLEtBQUssRUFBQSxtQkFBQyxDQUFBLEdBQUksR0FBRSxJQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBZ0IvQyxNQUFNLHFCQWZELENBQUEsQ0FBRSxHQUFFLElBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFDLE1BQU8sQ0FBQyxDQUFDO1lBZ0JqQyxFQUFFLENBQUMsQ0FmQyxDQUFDLEtBQUksQ0FBRSxDQUFDLENBQUEsQ0FBRTtnQkFnQlosTUFmTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQWdCcEIsQ0FmQztZQUFBLElBQUssQ0FBQSxFQUFBLENBQUEsQ0FBSyxDQUFDLEdBQUUsQ0FBRSxDQUFDLENBQUEsQ0FBRTtnQkFnQmpCLE1BZk0sR0FBRSxDQUFFLElBQUksQ0FBQyxDQUFDO2dCQWdCaEIsTUFmTSxHQUFFLEdBQUksQ0FBQztZQWdCZixDQWZDO1FBZ0JILENBZkM7UUFpQkQsT0FmTSxNQUFPLENBQUM7SUFnQmhCLENBZkM7Q0FDSDtBQWlCQTtJQUNBLGlDQUFpQztJQUNqQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BDLHNDQUFzQztJQUN0QyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ25DLDJDQUEyQztJQUMzQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2pDLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBNUJILG1CQThCSSxNQTdCeUIsRUE4QnpCLEtBN0IyQixFQThCM0IsR0E3QmlDO0lBOEJuQyxNQTdCTSxDQUFBLElBQUksaUJBQWtCLENBQWdCLE1BQU0sRUFBQyxLQUFNLEVBQUMsR0FBSSxDQUFDLENBQUM7QUE4QmxFLENBN0JDO0FBTEQsOEJBS0MiLCJmaWxlIjoiX2V4dHJlbWFieS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAaWdub3JlXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSBrZXlcbiAqIEBwYXJhbSB7VH0gbWluVmFsdWVcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlPFQ+KGtleTogVCwgbWluVmFsdWU6IFQpOiBudW1iZXIge1xuICByZXR1cm4ga2V5ID4gbWluVmFsdWUgPyAxIDoga2V5IDwgbWluVmFsdWUgPyAtMSA6IDA7XG59XG4vKipcbiAqIEBpZ25vcmVcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5XG4gKi9cbmNsYXNzIEV4dHJlbWFCeUl0ZXJhYmxlPFRTb3VyY2UsIFRLZXk+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9rZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXk7XG5wcml2YXRlIF9jbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXI7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9IGtleUZuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBudW1iZXJ9IGNtcFxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlGbjogKHg6IFRTb3VyY2UpID0+IFRLZXksXG4gICAgICBjbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBudW1iZXIpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlGbiA9IGtleUZuO1xuICAgIHRoaXMuX2NtcCA9IGNtcDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTxUU291cmNlPn0gKi8gcmVzdWx0OiBUU291cmNlW10gPSBbXSwgLyoqIEB0eXBlIHs/fSAqLyBuZXh0O1xuICAgIGNvbnN0IC8qKiBAdHlwZSB7IUl0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHRoaXMuX3NvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgaWYgKChuZXh0ID0gaXQubmV4dCgpKS5kb25lKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NlcXVlbmNlIGNvbnRhaW5zIG5vIGVsZW1lbnRzJyk7XG4gICAgfVxuXG4gICAgbGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gY3VycmVudCA9IG5leHQudmFsdWUsIC8qKiBAdHlwZSB7VEtleX0gKi8gcmVzS2V5ID0gdGhpcy5fa2V5Rm4oY3VycmVudCk7XG4gICAgcmVzdWx0LnB1c2goY3VycmVudCk7XG4gICAgd2hpbGUgKCEobmV4dCA9IGl0Lm5leHQoKSkuZG9uZSkge1xuICAgICAgbGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gY3VyciA9IG5leHQudmFsdWUsIC8qKiBAdHlwZSB7VEtleX0gKi8ga2V5ID0gdGhpcy5fa2V5Rm4oY3Vycik7XG4gICAgICBjb25zdCAvKiogQHR5cGUge251bWJlcn0gKi8gYyA9IHRoaXMuX2NtcChrZXksIHJlc0tleSk7XG4gICAgICBpZiAoYyA9PT0gMCkge1xuICAgICAgICByZXN1bHQucHVzaChjdXJyKTtcbiAgICAgIH0gZWxzZSBpZiAoYyA+IDApIHtcbiAgICAgICAgcmVzdWx0ID0gW2N1cnJdO1xuICAgICAgICByZXNLZXkgPSBrZXk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgeWllbGQqIHJlc3VsdDtcbiAgfVxufVxuXG5mdW5jdGlvbiBFeHRyZW1hQnlJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeHRyZW1hQnlJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9ICovXG5FeHRyZW1hQnlJdGVyYWJsZS5wcm90b3R5cGUuX2tleUZuO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogbnVtYmVyfSAqL1xuRXh0cmVtYUJ5SXRlcmFibGUucHJvdG90eXBlLl9jbXA7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRLZXlcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9IGtleUZuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBudW1iZXJ9IGNtcFxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXh0cmVtYUJ5PFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5Rm46ICh4OiBUU291cmNlKSA9PiBUS2V5LFxuICAgIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IG51bWJlcik6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgRXh0cmVtYUJ5SXRlcmFibGU8VFNvdXJjZSwgVEtleT4oc291cmNlLCBrZXlGbiwgY21wKTtcbn1cbiJdfQ==