goog.module('targets.es2015.cls.iterable.orderby'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/orderby.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var sorter_1 = goog.require('targets.es2015.cls.internal.sorter');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.sorter");
/**
 * @abstract
 * @template TSource
 */
class OrderedIterableBaseX extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        const /** @type {!Array<TSource>} */ array = Array.from(this._source);
        const /** @type {number} */ len = array.length;
        const /** @type {!Array<number>} */ indices = new Array(len);
        for (let /** @type {number} */ i = 0, /** @type {number} */ len = array.length; i < len; i++) {
            indices[i] = i;
        }
        indices.sort(this._getSorter(array));
        for (const /** @type {number} */ index of indices) {
            yield array[index];
        }
    }
    /**
     * @template TKey
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number=} comparer
     * @return {!OrderedIterableBaseX}
     */
    thenBy(keySelector, comparer = sorter_1.sorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedIterableX(this._source, keySelector, comparer, false, this);
    }
    /**
     * @template TKey
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number=} comparer
     * @return {!OrderedIterableBaseX}
     */
    thenByDescending(keySelector, comparer = sorter_1.sorter) {
        /* tslint:disable-next-line: no-use-before-declare */
        return new OrderedIterableX(this._source, keySelector, comparer, true, this);
    }
}
exports.OrderedIterableBaseX = OrderedIterableBaseX;
function OrderedIterableBaseX_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    OrderedIterableBaseX.prototype._source;
    /**
     * @abstract
     * @param {!Array<TSource>} elements
     * @param {function(number, number): number=} next
     * @return {function(number, number): number}
     */
    OrderedIterableBaseX.prototype._getSorter = function (elements, next) { };
}
/**
 * @template TKey, TSource
 */
class OrderedIterableX extends OrderedIterableBaseX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): number} comparer
     * @param {boolean} descending
     * @param {!OrderedIterableBaseX<TSource>=} parent
     */
    constructor(source, keySelector, comparer, descending, parent) {
        super(source);
        this._keySelector = keySelector;
        this._comparer = comparer;
        this._descending = descending;
        this._parent = parent;
    }
    /**
     * @param {!Array<TSource>} elements
     * @param {function(number, number): number=} next
     * @return {function(number, number): number}
     */
    _getSorter(elements, next) {
        const /** @type {!Array<TKey>} */ keys = elements.map(this._keySelector);
        const /** @type {function(TKey, TKey): number} */ comparer = this._comparer;
        const /** @type {!OrderedIterableBaseX<TSource>} */ parent = this._parent;
        const /** @type {boolean} */ descending = this._descending;
        const /** @type {function(number, number): number} */ sorter = (x, y) => {
            const /** @type {number} */ result = comparer(keys[x], keys[y]);
            if (result === 0) {
                return next ? next(x, y) : x - y;
            }
            return descending ? -result : result;
        };
        return parent ? parent._getSorter(elements, sorter) : sorter;
    }
}
exports.OrderedIterableX = OrderedIterableX;
function OrderedIterableX_tsickle_Closure_declarations() {
    /** @type {function(TSource): TKey} */
    OrderedIterableX.prototype._keySelector;
    /** @type {function(TKey, TKey): number} */
    OrderedIterableX.prototype._comparer;
    /** @type {boolean} */
    OrderedIterableX.prototype._descending;
    /** @type {!OrderedIterableBaseX<TSource>} */
    OrderedIterableX.prototype._parent;
}
/**
 * @template TKey, TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
function orderBy(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedIterableX(source, keySelector, comparer, false);
}
exports.orderBy = orderBy;
/**
 * @template TKey, TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
function orderByDescending(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedIterableX(source, keySelector, comparer, true);
}
exports.orderByDescending = orderByDescending;
/**
 * @template TKey, TSource
 * @param {!OrderedIterableBaseX<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
function thenBy(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedIterableX(source._source, keySelector, comparer, false, source);
}
exports.thenBy = thenBy;
/**
 * @template TKey, TSource
 * @param {!OrderedIterableBaseX<TSource>} source
 * @param {function(TSource): TKey} keySelector
 * @param {function(TKey, TKey): number=} comparer
 * @return {!OrderedIterableX<TKey, TSource>}
 */
function thenByDescending(source, keySelector, comparer = sorter_1.sorter) {
    return new OrderedIterableX(source._source, keySelector, comparer, true, source);
}
exports.thenByDescending = thenByDescending;
//# sourceMappingURL=data:application/json;base64,