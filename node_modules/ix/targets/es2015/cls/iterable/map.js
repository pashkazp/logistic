goog.module('targets.es2015.cls.iterable.map'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/map.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var bindcallback_1 = goog.require('targets.es2015.cls.internal.bindcallback');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.bindcallback");
/**
 * @template TSource, TResult
 */
class MapIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource, number): TResult} selector
     */
    constructor(source, selector) {
        super();
        this._source = source;
        this._selector = selector;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    *[Symbol.iterator]() {
        let /** @type {number} */ i = 0;
        for (let /** @type {TSource} */ item of this._source) {
            yield this._selector(item, i++);
        }
    }
}
function MapIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    MapIterable.prototype._source;
    /** @type {function(TSource, number): TResult} */
    MapIterable.prototype._selector;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(TSource, number): TResult} selector
 * @param {?=} thisArg
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function map(source, selector, thisArg) {
    return new MapIterable(source, bindcallback_1.bindCallback(selector, thisArg, 2));
}
exports.map = map;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsMkRBTnFCO0FBT3JCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQUFDO0FBQzNHOztHQUVHO0FBUkgsaUJBQW1DLFNBQVEsb0JBQW1CO0lBWTlEOzs7T0FHRztJQVhELFlBQVksTUFBeUIsRUFBQyxRQUFxRDtRQWF6RixLQVpLLEVBQUUsQ0FBQztRQWFSLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxTQUFTLEdBQUUsUUFBUyxDQUFDO0lBYTVCLENBQUM7SUFDSDs7T0FFRztJQWJELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBZWhCLElBQUkscUJBZEQsQ0FBQSxDQUFFLEdBQUUsQ0FBRSxDQUFDO1FBZVYsR0FBRyxDQUFDLENBZEMsSUFBQSxzQkFBRyxDQUFBLElBQUssSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtZQWU5QixNQWRLLElBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUM7UUFlbEMsQ0FkQztJQWVILENBZEM7Q0FDSDtBQWdCQTtJQUNBLGlDQUFpQztJQUNqQyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUM5QixpREFBaUQ7SUFDakQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7QUFDaEMsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQTNCSCxhQTZCSSxNQTVCeUIsRUE2QnpCLFFBNUJvRCxFQTZCcEQsT0E1QmE7SUE2QmYsTUE1Qk0sQ0FBQSxJQUFJLFdBQVksQ0FBbUIsTUFBTSxFQUFDLDJCQUFhLENBQUMsUUFBUSxFQUFDLE9BQVEsRUFBQyxDQUFFLENBQUMsQ0FBQyxDQUFDO0FBNkJ2RixDQTVCQztBQUxELGtCQUtDIiwiZmlsZSI6Im1hcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuaW1wb3J0IHsgYmluZENhbGxiYWNrIH0gZnJvbSAnLi4vaW50ZXJuYWwvYmluZGNhbGxiYWNrJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmJpbmRjYWxsYmFja1wiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2UsIFRSZXN1bHRcbiAqL1xuY2xhc3MgTWFwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX3NlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IFRSZXN1bHQ7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogVFJlc3VsdH0gc2VsZWN0b3JcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gVFJlc3VsdCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX3NlbGVjdG9yID0gc2VsZWN0b3I7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFJlc3VsdD59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSAwO1xuICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIHlpZWxkIHRoaXMuX3NlbGVjdG9yKGl0ZW0sIGkrKyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIE1hcEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cbk1hcEl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBUUmVzdWx0fSAqL1xuTWFwSXRlcmFibGUucHJvdG90eXBlLl9zZWxlY3Rvcjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBUUmVzdWx0fSBzZWxlY3RvclxuICogQHBhcmFtIHs/PX0gdGhpc0FyZ1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRSZXN1bHQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWFwPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gVFJlc3VsdCxcbiAgICB0aGlzQXJnPzogYW55KTogSXRlcmFibGVYPFRSZXN1bHQ+IHtcbiAgcmV0dXJuIG5ldyBNYXBJdGVyYWJsZTxUU291cmNlLCBUUmVzdWx0Pihzb3VyY2UsIGJpbmRDYWxsYmFjayhzZWxlY3RvciwgdGhpc0FyZywgMikpO1xufVxuIl19