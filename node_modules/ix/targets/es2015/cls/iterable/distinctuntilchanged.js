goog.module('targets.es2015.cls.iterable.distinctuntilchanged'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/distinctuntilchanged.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource, TKey
 */
class DistinctUntilChangedIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): boolean} comparer
     */
    constructor(source, keySelector, comparer) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._comparer = comparer;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {TKey} */ currentKey = ({}), /** @type {boolean} */ hasCurrentKey = false;
        for (let /** @type {TSource} */ item of this._source) {
            let /** @type {TKey} */ key = this._keySelector(item);
            let /** @type {boolean} */ comparerEquals = false;
            if (hasCurrentKey) {
                comparerEquals = this._comparer(currentKey, key);
            }
            if (!hasCurrentKey || !comparerEquals) {
                hasCurrentKey = true;
                currentKey = key;
                yield item;
            }
        }
    }
}
function DistinctUntilChangedIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    DistinctUntilChangedIterable.prototype._source;
    /** @type {function(TSource): TKey} */
    DistinctUntilChangedIterable.prototype._keySelector;
    /** @type {function(TKey, TKey): boolean} */
    DistinctUntilChangedIterable.prototype._comparer;
}
/**
 * Returns consecutive distinct elements based on a key value by using the specified equality comparer to compare key values.
 * @template TSource, TKey
 * @param {!Iterable<TSource>} source
 * @param {function(TSource): TKey=} keySelector
 * @param {function(TKey, TKey): boolean=} comparer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function distinctUntilChanged(source, keySelector = identity_1.identity, comparer = comparer_1.comparer) {
    return new DistinctUntilChangedIterable(source, keySelector, comparer);
}
exports.distinctUntilChanged = distinctUntilChanged;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9kaXN0aW5jdHVudGlsY2hhbmdlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQU5yRDtBQU94QyxtREFOaUI7QUFPakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBUHREO0FBUWhELG1EQVBvQztBQVFwQyxNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FBQztBQUN2Rzs7R0FFRztBQVRILGtDQUFpRCxTQUFRLG9CQUFtQjtJQWM1RTs7OztPQUlHO0lBYkQsWUFlSSxNQWR5QixFQWV6QixXQWRxQyxFQWVyQyxRQWRnRDtRQWVsRCxLQWRLLEVBQUUsQ0FBQztRQWVSLElBZEksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBZXRCLElBZEksQ0FBQyxZQUFZLEdBQUUsV0FBWSxDQUFDO1FBZWhDLElBZEksQ0FBQyxTQUFTLEdBQUUsUUFBUyxDQUFDO0lBZTVCLENBQUM7SUFDSDs7T0FFRztJQWZELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBaUJoQixJQUFJLG1CQWhCRCxDQUFBLFVBQVcsR0FBQSxDQUFTLEVBQUEsQ0FBRSxFQUFBLHNCQUFDLENBQUEsYUFBYyxHQUFFLEtBQU0sQ0FBQztRQWlCakQsR0FBRyxDQUFDLENBaEJDLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFpQjlCLElBQUksbUJBaEJELENBQUEsR0FBSSxHQUFFLElBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFpQmxDLElBQUksc0JBaEJELENBQUEsY0FBZSxHQUFFLEtBQU0sQ0FBQztZQWlCM0IsRUFBRSxDQUFDLENBaEJDLGFBQWEsQ0FBQyxDQUFBLENBQUU7Z0JBQUEsY0FBZSxHQUFFLElBQUssQ0FBQyxTQUFTLENBQUMsVUFBVSxFQUFDLEdBQUksQ0FBQyxDQUFDO1lBQUEsQ0FBRTtZQWlCeEUsRUFBRSxDQUFDLENBaEJDLENBQUMsYUFBYSxJQUFHLENBQUUsY0FBYyxDQUFDLENBQUEsQ0FBRTtnQkFpQnRDLGFBaEJhLEdBQUUsSUFBSyxDQUFDO2dCQWlCckIsVUFoQlUsR0FBRSxHQUFJLENBQUM7Z0JBaUJqQixNQWhCSyxJQUFLLENBQUM7WUFpQmIsQ0FoQkM7UUFpQkgsQ0FoQkM7SUFpQkgsQ0FoQkM7Q0FDSDtBQWtCQTtJQUNBLGlDQUFpQztJQUNqQyw0QkFBNEIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQy9DLHNDQUFzQztJQUN0Qyw0QkFBNEIsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ3BELDRDQUE0QztJQUM1Qyw0QkFBNEIsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ2pELENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBekJILDhCQTJCSSxNQTFCeUIsRUEyQnpCLGNBMUJ1QyxtQkFBUyxFQTJCaEQsV0ExQmtELG1CQUFnQjtJQTJCcEUsTUExQk0sQ0FBQSxJQUFJLDRCQUE2QixDQUFnQixNQUFNLEVBQUMsV0FBWSxFQUFDLFFBQVMsQ0FBQyxDQUFDO0FBMkJ4RixDQTFCQztBQUxELG9EQUtDIiwiZmlsZSI6ImRpc3RpbmN0dW50aWxjaGFuZ2VkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuaW1wb3J0IHsgY29tcGFyZXIgYXMgZGVmYXVsdENvbXBhcmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMyA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuY29tcGFyZXJcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5XG4gKi9cbmNsYXNzIERpc3RpbmN0VW50aWxDaGFuZ2VkSXRlcmFibGU8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXk7XG5wcml2YXRlIF9jb21wYXJlcjogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW47XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSBzb3VyY2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBib29sZWFufSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihcbiAgICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5LFxuICAgICAgY29tcGFyZXI6IChmaXJzdDogVEtleSwgc2Vjb25kOiBUS2V5KSA9PiBib29sZWFuKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fa2V5U2VsZWN0b3IgPSBrZXlTZWxlY3RvcjtcbiAgICB0aGlzLl9jb21wYXJlciA9IGNvbXBhcmVyO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRTb3VyY2U+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgbGV0IC8qKiBAdHlwZSB7VEtleX0gKi8gY3VycmVudEtleSA9IC8qKiBAdHlwZSB7VEtleX0gKi8oKCA8VEtleT57fSkpLCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGhhc0N1cnJlbnRLZXkgPSBmYWxzZTtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyBrZXkgPSB0aGlzLl9rZXlTZWxlY3RvcihpdGVtKTtcbiAgICAgIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGNvbXBhcmVyRXF1YWxzID0gZmFsc2U7XG4gICAgICBpZiAoaGFzQ3VycmVudEtleSkgeyBjb21wYXJlckVxdWFscyA9IHRoaXMuX2NvbXBhcmVyKGN1cnJlbnRLZXksIGtleSk7IH1cbiAgICAgIGlmICghaGFzQ3VycmVudEtleSB8fCAhY29tcGFyZXJFcXVhbHMpIHtcbiAgICAgICAgaGFzQ3VycmVudEtleSA9IHRydWU7XG4gICAgICAgIGN1cnJlbnRLZXkgPSBrZXk7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIERpc3RpbmN0VW50aWxDaGFuZ2VkSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRGlzdGluY3RVbnRpbENoYW5nZWRJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9ICovXG5EaXN0aW5jdFVudGlsQ2hhbmdlZEl0ZXJhYmxlLnByb3RvdHlwZS5fa2V5U2VsZWN0b3I7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBib29sZWFufSAqL1xuRGlzdGluY3RVbnRpbENoYW5nZWRJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIFJldHVybnMgY29uc2VjdXRpdmUgZGlzdGluY3QgZWxlbWVudHMgYmFzZWQgb24gYSBrZXkgdmFsdWUgYnkgdXNpbmcgdGhlIHNwZWNpZmllZCBlcXVhbGl0eSBjb21wYXJlciB0byBjb21wYXJlIGtleSB2YWx1ZXMuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlKTogVEtleT19IGtleVNlbGVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBib29sZWFuPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0VW50aWxDaGFuZ2VkPFRTb3VyY2UsIFRLZXk+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAga2V5U2VsZWN0b3I6ICh2YWx1ZTogVFNvdXJjZSkgPT4gVEtleSA9IGlkZW50aXR5LFxuICAgIGNvbXBhcmVyOiAoZmlyc3Q6IFRLZXksIHNlY29uZDogVEtleSkgPT4gYm9vbGVhbiA9IGRlZmF1bHRDb21wYXJlcik6ICBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IERpc3RpbmN0VW50aWxDaGFuZ2VkSXRlcmFibGU8VFNvdXJjZSwgVEtleT4oc291cmNlLCBrZXlTZWxlY3RvciwgY29tcGFyZXIpO1xufVxuIl19