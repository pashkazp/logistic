goog.module('targets.es2015.cls.iterable.concat'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/concat.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class ConcatIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<!Iterable<TSource>>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        for (let /** @type {!Iterable<TSource>} */ outer of this._source) {
            yield* outer;
        }
    }
}
function ConcatIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!Iterable<TSource>>} */
    ConcatIterable.prototype._source;
}
/**
 * Concatenates the input sequences.
 * @template TSource
 * @param {!Iterable<!Iterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function concatAll(source) {
    return new ConcatIterable(source);
}
exports.concatAll = concatAll;
/**
 * Concatenates the input sequences.
 * @template T
 * @param {!Iterable<T>} source
 * @param {...!Iterable<T>} args
 * @return {!tsickle_forward_declare_1.IterableX<T>}
 */
function concat(source, ...args) {
    return new ConcatIterable([source, ...args]);
}
exports.concat = concat;
/**
 * Concatenates the input sequences.
 * @template T
 * @param {...!Iterable<T>} args
 * @return {!tsickle_forward_declare_1.IterableX<T>}
 */
function concatStatic(...args) {
    return new ConcatIterable(args);
}
exports.concatStatic = concatStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9jb25jYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBILG9CQUE2QixTQUFRLG9CQUFtQjtJQVV4RDs7T0FFRztJQVRELFlBQVksTUFBbUM7UUFXN0MsS0FWSyxFQUFFLENBQUM7UUFXUixJQVZJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztJQVd4QixDQUFDO0lBQ0g7O09BRUc7SUFYRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWFoQixHQUFHLENBQUMsQ0FaQyxJQUFBLGlDQUFHLENBQUEsS0FBTSxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO1lBQUEsT0FBTyxLQUFNLENBQUM7UUFBQSxDQUFFO0lBYW5ELENBWkM7Q0FDSDtBQWNBO0lBQ0EsNENBQTRDO0lBQzVDLGNBQWMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ2pDLENBQUM7QUFFRDs7Ozs7R0FLRztBQWpCSCxtQkFBbUMsTUFBbUM7SUFtQnBFLE1BbEJNLENBQUEsSUFBSSxjQUFlLENBQVUsTUFBTSxDQUFDLENBQUM7QUFtQjdDLENBQUM7QUFwQkQsOEJBb0JDO0FBQ0Q7Ozs7OztHQU1HO0FBakJILGdCQUEwQixNQUFtQixFQUFDLEdBQUksSUFBbUI7SUFtQm5FLE1BbEJNLENBQUEsSUFBSSxjQUFlLENBQUMsQ0FBQyxNQUFNLEVBQUMsR0FBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBbUIvQyxDQUFDO0FBcEJELHdCQW9CQztBQUNEOzs7OztHQUtHO0FBakJILHNCQUFnQyxHQUFHLElBQW1CO0lBbUJwRCxNQWxCTSxDQUFBLElBQUksY0FBZSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBbUJsQyxDQWxCQztBQUZELG9DQUVDIiwiZmlsZSI6ImNvbmNhdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBDb25jYXRJdGVyYWJsZTxUU291cmNlPiBleHRlbmRzIEl0ZXJhYmxlWDxUU291cmNlPiB7XG5wcml2YXRlIF9zb3VyY2U6IEl0ZXJhYmxlPEl0ZXJhYmxlPFRTb3VyY2U+Pjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8IUl0ZXJhYmxlPFRTb3VyY2U+Pn0gc291cmNlXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8SXRlcmFibGU8VFNvdXJjZT4+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi8gb3V0ZXIgb2YgdGhpcy5fc291cmNlKSB7IHlpZWxkKiBvdXRlcjsgfVxuICB9XG59XG5cbmZ1bmN0aW9uIENvbmNhdEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTwhSXRlcmFibGU8VFNvdXJjZT4+fSAqL1xuQ29uY2F0SXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQ29uY2F0ZW5hdGVzIHRoZSBpbnB1dCBzZXF1ZW5jZXMuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8IUl0ZXJhYmxlPFRTb3VyY2U+Pn0gc291cmNlXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXRBbGw8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj4pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENvbmNhdEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG4vKipcbiAqIENvbmNhdGVuYXRlcyB0aGUgaW5wdXQgc2VxdWVuY2VzLlxuICogQHRlbXBsYXRlIFRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFQ+fSBzb3VyY2VcbiAqIEBwYXJhbSB7Li4uIUl0ZXJhYmxlPFQ+fSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VD59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjb25jYXQ8VD4oc291cmNlOiBJdGVyYWJsZTxUPiwgLi4uYXJnczogSXRlcmFibGU8VD5bXSk6IEl0ZXJhYmxlWDxUPiB7XG4gIHJldHVybiBuZXcgQ29uY2F0SXRlcmFibGUoW3NvdXJjZSwgLi4uYXJnc10pO1xufVxuLyoqXG4gKiBDb25jYXRlbmF0ZXMgdGhlIGlucHV0IHNlcXVlbmNlcy5cbiAqIEB0ZW1wbGF0ZSBUXG4gKiBAcGFyYW0gey4uLiFJdGVyYWJsZTxUPn0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFQ+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gY29uY2F0U3RhdGljPFQ+KC4uLmFyZ3M6IEl0ZXJhYmxlPFQ+W10pOiBJdGVyYWJsZVg8VD4ge1xuICByZXR1cm4gbmV3IENvbmNhdEl0ZXJhYmxlKGFyZ3MpO1xufVxuIl19