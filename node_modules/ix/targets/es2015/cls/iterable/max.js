goog.module('targets.es2015.cls.iterable.max'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/max.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * @param {!Iterable<?>} source
 * @param {function(?): number=} fn
 * @return {number}
 */
function max(source, fn = identity_1.identity) {
    let /** @type {boolean} */ atleastOnce = false;
    let /** @type {number} */ value = -Infinity;
    for (let /** @type {?} */ item of source) {
        if (!atleastOnce) {
            atleastOnce = true;
        }
        let /** @type {number} */ x = fn(item);
        if (x > value) {
            value = x;
        }
    }
    if (!atleastOnce) {
        throw new Error('Sequence contains no elements');
    }
    return value;
}
exports.max = max;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9tYXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILG1EQUxpQjtBQU1qQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsK0NBQStDLENBQUMsQ0FOdEQ7QUFVaEQ7Ozs7R0FJRztBQVZILGFBQW9CLE1BQXFCLEVBQUMsS0FBeUIsbUJBQVM7SUFZMUUsSUFBSSxzQkFYRCxDQUFBLFdBQVksR0FBRSxLQUFNLENBQUM7SUFZeEIsSUFBSSxxQkFYRCxDQUFBLEtBQU0sR0FBRSxDQUFFLFFBQVEsQ0FBQztJQVl0QixHQUFHLENBQUMsQ0FYQyxJQUFBLGdCQUFHLENBQUEsSUFBSyxJQUFHLE1BQU8sQ0FBQyxDQUFBLENBQUU7UUFZeEIsRUFBRSxDQUFDLENBWEMsQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFFO1lBWWpCLFdBWFcsR0FBRSxJQUFLLENBQUM7UUFZckIsQ0FYQztRQVlELElBQUkscUJBWEQsQ0FBQSxDQUFFLEdBQUUsRUFBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBWWpCLEVBQUUsQ0FBQyxDQVhDLENBQUMsR0FBRSxLQUFNLENBQUMsQ0FBQSxDQUFFO1lBQUEsS0FBTSxHQUFFLENBQUUsQ0FBQztRQUFBLENBQUU7SUFZL0IsQ0FYQztJQVlELEVBQUUsQ0FBQyxDQVhDLENBQUMsV0FBVyxDQUFDLENBQUEsQ0FBRTtRQVlqQixNQVhLLElBQUksS0FBTSxDQUFDLCtCQUErQixDQUFDLENBQUM7SUFZbkQsQ0FYQztJQWFELE1BWE0sQ0FBQSxLQUFNLENBQUM7QUFZZixDQVhDO0FBZkQsa0JBZUMiLCJmaWxlIjoibWF4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi9pbnRlcm5hbC9pZGVudGl0eSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5pZGVudGl0eVwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIG1heChzb3VyY2U6IEl0ZXJhYmxlPG51bWJlcj4sIGZuPzogKHg6IG51bWJlcikgPT4gbnVtYmVyKTogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIG1heDxUPihzb3VyY2U6IEl0ZXJhYmxlPFQ+LCBmbjogKHg6IFQpID0+IG51bWJlcik6IG51bWJlcjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8Pz59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbig/KTogbnVtYmVyPX0gZm5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1heChzb3VyY2U6IEl0ZXJhYmxlPGFueT4sIGZuOiAoeDogYW55KSA9PiBudW1iZXIgPSBpZGVudGl0eSk6IG51bWJlciB7XG4gIGxldCAvKiogQHR5cGUge2Jvb2xlYW59ICovIGF0bGVhc3RPbmNlID0gZmFsc2U7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gdmFsdWUgPSAtSW5maW5pdHk7XG4gIGZvciAobGV0IC8qKiBAdHlwZSB7P30gKi8gaXRlbSBvZiBzb3VyY2UpIHtcbiAgICBpZiAoIWF0bGVhc3RPbmNlKSB7XG4gICAgICBhdGxlYXN0T25jZSA9IHRydWU7XG4gICAgfVxuICAgIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8geCA9IGZuKGl0ZW0pO1xuICAgIGlmICh4ID4gdmFsdWUpIHsgdmFsdWUgPSB4OyB9XG4gIH1cbiAgaWYgKCFhdGxlYXN0T25jZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2VxdWVuY2UgY29udGFpbnMgbm8gZWxlbWVudHMnKTtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cbiJdfQ==