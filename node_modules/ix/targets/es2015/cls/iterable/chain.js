goog.module('targets.es2015.cls.iterable.chain'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/chain.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TResult
 */
class ChainIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TResult>} result
     */
    constructor(result) {
        super();
        this._result = result;
    }
    /**
     * @return {!Iterator<TResult>}
     */
    [Symbol.iterator]() {
        return this._result[Symbol.iterator]();
    }
}
function ChainIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TResult>} */
    ChainIterable.prototype._result;
}
/**
 * Returns an iterable sequence that is the result of invoking the selector on the source sequence,
 * without sharing subscriptions.  This operator allows for a fluent style of writing queries that use
 * the same sequence multiple times.
 * the source sequence as many times as needed, without sharing subscriptions to the source sequence.
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(!Iterable<TSource>): !Iterable<TResult>} selector
 * @return {!tsickle_forward_declare_1.IterableX<TResult>} An iterable sequence that contains the elements of a sequence produced by multicasting the source
 * sequence within a selector function.
 */
function chain(source, selector) {
    return new ChainIterable(selector(source));
}
exports.chain = chain;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9jaGFpbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEgsbUJBQTRCLFNBQVEsb0JBQW1CO0lBVXZEOztPQUVHO0lBVEQsWUFBWSxNQUF5QjtRQVduQyxLQVZLLEVBQUUsQ0FBQztRQVdSLElBVkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO0lBV3hCLENBQUM7SUFDSDs7T0FFRztJQVhELENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWFmLE1BWk0sQ0FBQSxJQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO0lBYXpDLENBWkM7Q0FDSDtBQWNBO0lBQ0EsaUNBQWlDO0lBQ2pDLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7Ozs7OztHQVVHO0FBakJILGVBbUJJLE1BbEJ5QixFQW1CekIsUUFsQjBEO0lBbUI1RCxNQWxCTSxDQUFBLElBQUksYUFBYyxDQUFVLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0FBbUJ0RCxDQWxCQztBQUpELHNCQUlDIiwiZmlsZSI6ImNoYWluLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUUmVzdWx0XG4gKi9cbmNsYXNzIENoYWluSXRlcmFibGU8VFJlc3VsdD4gZXh0ZW5kcyBJdGVyYWJsZVg8VFJlc3VsdD4ge1xucHJpdmF0ZSBfcmVzdWx0OiBJdGVyYWJsZTxUUmVzdWx0Pjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFJlc3VsdD59IHJlc3VsdFxuICovXG5jb25zdHJ1Y3RvcihyZXN1bHQ6IEl0ZXJhYmxlPFRSZXN1bHQ+KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9yZXN1bHQgPSByZXN1bHQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG5bU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzdWx0W1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBDaGFpbkl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUUmVzdWx0Pn0gKi9cbkNoYWluSXRlcmFibGUucHJvdG90eXBlLl9yZXN1bHQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpdGVyYWJsZSBzZXF1ZW5jZSB0aGF0IGlzIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIHNlbGVjdG9yIG9uIHRoZSBzb3VyY2Ugc2VxdWVuY2UsXG4gKiB3aXRob3V0IHNoYXJpbmcgc3Vic2NyaXB0aW9ucy4gIFRoaXMgb3BlcmF0b3IgYWxsb3dzIGZvciBhIGZsdWVudCBzdHlsZSBvZiB3cml0aW5nIHF1ZXJpZXMgdGhhdCB1c2VcbiAqIHRoZSBzYW1lIHNlcXVlbmNlIG11bHRpcGxlIHRpbWVzLlxuICogdGhlIHNvdXJjZSBzZXF1ZW5jZSBhcyBtYW55IHRpbWVzIGFzIG5lZWRlZCwgd2l0aG91dCBzaGFyaW5nIHN1YnNjcmlwdGlvbnMgdG8gdGhlIHNvdXJjZSBzZXF1ZW5jZS5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCFJdGVyYWJsZTxUU291cmNlPik6ICFJdGVyYWJsZTxUUmVzdWx0Pn0gc2VsZWN0b3JcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUUmVzdWx0Pn0gQW4gaXRlcmFibGUgc2VxdWVuY2UgdGhhdCBjb250YWlucyB0aGUgZWxlbWVudHMgb2YgYSBzZXF1ZW5jZSBwcm9kdWNlZCBieSBtdWx0aWNhc3RpbmcgdGhlIHNvdXJjZVxuICogc2VxdWVuY2Ugd2l0aGluIGEgc2VsZWN0b3IgZnVuY3Rpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjaGFpbjxUU291cmNlLCBUUmVzdWx0PihcbiAgICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICAgIHNlbGVjdG9yOiAoc291cmNlOiBJdGVyYWJsZTxUU291cmNlPikgPT4gSXRlcmFibGU8VFJlc3VsdD4pOiBJdGVyYWJsZVg8VFJlc3VsdD4ge1xuICByZXR1cm4gbmV3IENoYWluSXRlcmFibGU8VFJlc3VsdD4oc2VsZWN0b3Ioc291cmNlKSk7XG59XG4iXX0=