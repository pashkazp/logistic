goog.module('targets.es2015.cls.iterable.takelast'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/takelast.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class TakeLastIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        if (this._count === 0) {
            return;
        }
        let /** @type {!Array<?>} */ q = [];
        for (let /** @type {TSource} */ item of this._source) {
            if (q.length >= this._count) {
                q.shift();
            }
            q.push(item);
        }
        while (q.length > 0) {
            yield ((q.shift()));
        }
    }
}
function TakeLastIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    TakeLastIterable.prototype._source;
    /** @type {number} */
    TakeLastIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function takeLast(source, count) {
    return new TakeLastIterable(source, count);
}
exports.takeLast = takeLast;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS90YWtlbGFzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO0FBQzlGOztHQUVHO0FBUEgsc0JBQStCLFNBQVEsb0JBQW1CO0lBVzFEOzs7T0FHRztJQVZELFlBQVksTUFBeUIsRUFBQyxLQUFjO1FBWWxELEtBWEssRUFBRSxDQUFDO1FBWVIsSUFYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFZdEIsSUFYSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7SUFZdEIsQ0FBQztJQUNIOztPQUVHO0lBWkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFjaEIsRUFBRSxDQUFDLENBYkMsSUFBSSxDQUFDLE1BQU0sS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO1lBQUEsTUFBQSxDQUFRO1FBQUEsQ0FBRTtRQWVsQyxJQUFJLHdCQWJELENBQUEsQ0FBRSxHQUFFLEVBQUcsQ0FBQztRQWNYLEdBQUcsQ0FBQyxDQWJDLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFjOUIsRUFBRSxDQUFDLENBYkMsQ0FBQyxDQUFDLE1BQU0sSUFBRyxJQUFLLENBQUMsTUFBTSxDQUFDLENBQUEsQ0FBRTtnQkFBQSxDQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7WUFBQSxDQUFFO1lBYzNDLENBYkMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFjZixDQWJDO1FBZUQsT0FiTyxDQUFDLENBQUMsTUFBTSxHQUFFLENBQUUsRUFBQyxDQUFFO1lBY3BCLE1BQTRCLENBQUMsQ0FieEIsQ0FBRSxDQUFDLEtBQUssRUFBQSxDQUFBLENBQUcsQ0FBQztRQWNuQixDQWJDO0lBY0gsQ0FiQztDQUNIO0FBZUE7SUFDQSxpQ0FBaUM7SUFDakMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNuQyxxQkFBcUI7SUFDckIsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUNsQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6Qkgsa0JBQWtDLE1BQXlCLEVBQUMsS0FBYztJQTJCeEUsTUExQk0sQ0FBQSxJQUFJLGdCQUFpQixDQUFVLE1BQU0sRUFBQyxLQUFNLENBQUMsQ0FBQztBQTJCdEQsQ0ExQkM7QUFGRCw0QkFFQyIsImZpbGUiOiJ0YWtlbGFzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBmaWxlb3ZlcnZpZXcgYWRkZWQgYnkgdHNpY2tsZVxuICogQHN1cHByZXNzIHtjaGVja1R5cGVzfSBjaGVja2VkIGJ5IHRzY1xuICovXG5cbmltcG9ydCB7IEl0ZXJhYmxlWCB9IGZyb20gJy4uL2l0ZXJhYmxlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBUYWtlTGFzdEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBpZiAodGhpcy5fY291bnQgPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgICBsZXQgLyoqIEB0eXBlIHshQXJyYXk8Pz59ICovIHEgPSBbXTtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBpZiAocS5sZW5ndGggPj0gdGhpcy5fY291bnQpIHsgcS5zaGlmdCgpOyB9XG4gICAgICBxLnB1c2goaXRlbSk7XG4gICAgfVxuXG4gICAgd2hpbGUgKHEubGVuZ3RoID4gMCkge1xuICAgICAgeWllbGQgLyoqIEB0eXBlIHtUU291cmNlfSAqLygoIHEuc2hpZnQoKSkpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYWtlTGFzdEl0ZXJhYmxlX3RzaWNrbGVfQ2xvc3VyZV9kZWNsYXJhdGlvbnMoKSB7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cblRha2VMYXN0SXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUge251bWJlcn0gKi9cblRha2VMYXN0SXRlcmFibGUucHJvdG90eXBlLl9jb3VudDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWtlTGFzdDxUU291cmNlPihzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LCBjb3VudDogbnVtYmVyKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBUYWtlTGFzdEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgY291bnQpO1xufVxuIl19