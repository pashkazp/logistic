goog.module('targets.es2015.cls.iterable.average'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/average.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
/**
 * Computes the average of a sequence of values from the sequence either from the sequence itself
 * or from the selector function.
 * \@example
 * // Using non chained version
 * const result = average([1, 2, 3]);
 * const result = Ix.Iterable.of(1, 2, 3).average();
 * console.log(result);
 * @param {!Iterable<?>} source
 * @param {function(?): number=} selector
 * @return {number}
 */
function average(source, selector = identity_1.identity) {
    let /** @type {number} */ sum = 0;
    let /** @type {number} */ count = 0;
    for (let /** @type {?} */ item of source) {
        sum += selector(item);
        count++;
    }
    if (count === 0) {
        throw new Error('Empty collection');
    }
    return sum / count;
}
exports.average = average;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9hdmVyYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCxtREFMaUI7QUFNakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBTnREO0FBVWhEOzs7Ozs7Ozs7OztHQVdHO0FBSkgsaUJBQXdCLE1BQXFCLEVBQUMsV0FBK0IsbUJBQVM7SUFNcEYsSUFBSSxxQkFMRCxDQUFBLEdBQUksR0FBRSxDQUFFLENBQUM7SUFNWixJQUFJLHFCQUxELENBQUEsS0FBTSxHQUFFLENBQUUsQ0FBQztJQU1kLEdBQUcsQ0FBQyxDQUxDLElBQUEsZ0JBQUcsQ0FBQSxJQUFLLElBQUcsTUFBTyxDQUFDLENBQUEsQ0FBRTtRQU14QixHQUxHLElBQUcsUUFBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBTXRCLEtBTEssRUFBRSxDQUFDO0lBTVYsQ0FMQztJQU9ELEVBQUUsQ0FBQyxDQUxDLEtBQUssS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO1FBTWhCLE1BTEssSUFBSSxLQUFNLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQU10QyxDQUxDO0lBT0QsTUFMTSxDQUFBLEdBQUksR0FBRSxLQUFNLENBQUM7QUFNckIsQ0FMQztBQWJELDBCQWFDIiwiZmlsZSI6ImF2ZXJhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4uL2ludGVybmFsL2lkZW50aXR5JztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLmlkZW50aXR5XCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZShzb3VyY2U6IEl0ZXJhYmxlPG51bWJlcj4sIHNlbGVjdG9yPzogKHg6IG51bWJlcikgPT4gbnVtYmVyKTogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2U8VD4oc291cmNlOiBJdGVyYWJsZTxUPiwgc2VsZWN0b3I/OiAoeDogVCkgPT4gbnVtYmVyKTogbnVtYmVyO1xuLyoqXG4gKiBDb21wdXRlcyB0aGUgYXZlcmFnZSBvZiBhIHNlcXVlbmNlIG9mIHZhbHVlcyBmcm9tIHRoZSBzZXF1ZW5jZSBlaXRoZXIgZnJvbSB0aGUgc2VxdWVuY2UgaXRzZWxmXG4gKiBvciBmcm9tIHRoZSBzZWxlY3RvciBmdW5jdGlvbi5cbiAqIFxcQGV4YW1wbGUgXG4gKiAvLyBVc2luZyBub24gY2hhaW5lZCB2ZXJzaW9uXG4gKiBjb25zdCByZXN1bHQgPSBhdmVyYWdlKFsxLCAyLCAzXSk7XG4gKiBjb25zdCByZXN1bHQgPSBJeC5JdGVyYWJsZS5vZigxLCAyLCAzKS5hdmVyYWdlKCk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQpO1xuICogQHBhcmFtIHshSXRlcmFibGU8Pz59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbig/KTogbnVtYmVyPX0gc2VsZWN0b3JcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2Uoc291cmNlOiBJdGVyYWJsZTxhbnk+LCBzZWxlY3RvcjogKHg6IGFueSkgPT4gbnVtYmVyID0gaWRlbnRpdHkpOiBudW1iZXIge1xuICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIHN1bSA9IDA7XG4gIGxldCAvKiogQHR5cGUge251bWJlcn0gKi8gY291bnQgPSAwO1xuICBmb3IgKGxldCAvKiogQHR5cGUgez99ICovIGl0ZW0gb2Ygc291cmNlKSB7XG4gICAgc3VtICs9IHNlbGVjdG9yKGl0ZW0pO1xuICAgIGNvdW50Kys7XG4gIH1cblxuICBpZiAoY291bnQgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0VtcHR5IGNvbGxlY3Rpb24nKTtcbiAgfVxuXG4gIHJldHVybiBzdW0gLyBjb3VudDtcbn1cbiJdfQ==