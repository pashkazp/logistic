goog.module('targets.es2015.cls.iterable.except'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/except.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var arrayindexof_1 = goog.require('targets.es2015.cls.internal.arrayindexof');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource
 */
class ExceptIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} first
     * @param {!Iterable<TSource>} second
     * @param {function(TSource, TSource): boolean} comparer
     */
    constructor(first, second, comparer) {
        super();
        this._first = first;
        this._second = second;
        this._comparer = comparer;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Array<?>} */ map = [];
        for (let /** @type {TSource} */ secondItem of this._second) {
            map.push(secondItem);
        }
        for (let /** @type {TSource} */ firstItem of this._first) {
            if (arrayindexof_1.arrayIndexOf(map, firstItem, this._comparer) === -1) {
                map.push(firstItem);
                yield firstItem;
            }
        }
    }
}
function ExceptIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    ExceptIterable.prototype._first;
    /** @type {!Iterable<TSource>} */
    ExceptIterable.prototype._second;
    /** @type {function(TSource, TSource): boolean} */
    ExceptIterable.prototype._comparer;
}
/**
 * Produces the set difference of two sequences by using the an equality comparer to compare values.
 * elements to be removed from the returned sequence.
 * @template TSource
 * @param {!Iterable<TSource>} first
 * @param {!Iterable<TSource>} second
 * @param {function(TSource, TSource): boolean=} comparer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function except(first, second, comparer = comparer_1.comparer) {
    return new ExceptIterable(first, second, comparer);
}
exports.except = except;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9leGNlcHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FOckQ7QUFPeEMsMkRBTnFCO0FBT3JCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxtREFBbUQsQ0FBQyxDQVBsRDtBQVF4RCxtREFQb0M7QUFRcEMsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBQUM7QUFDdkc7O0dBRUc7QUFUSCxvQkFBNkIsU0FBUSxvQkFBbUI7SUFjeEQ7Ozs7T0FJRztJQWJELFlBQVksS0FBd0IsRUFBQyxNQUEwQixFQUFDLFFBQThDO1FBZTVHLEtBZEssRUFBRSxDQUFDO1FBZVIsSUFkSSxDQUFDLE1BQU0sR0FBRSxLQUFNLENBQUM7UUFlcEIsSUFkSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFldEIsSUFkSSxDQUFDLFNBQVMsR0FBRSxRQUFTLENBQUM7SUFlNUIsQ0FBQztJQUNIOztPQUVHO0lBZkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFpQmhCLElBQUksd0JBaEJELENBQUEsR0FBSSxHQUFFLEVBQUcsQ0FBQztRQWlCYixHQUFHLENBQUMsQ0FoQkMsSUFBQSxzQkFBRyxDQUFBLFVBQVcsSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtZQWlCcEMsR0FoQkcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFpQnZCLENBaEJDO1FBa0JELEdBQUcsQ0FBQyxDQWhCQyxJQUFBLHNCQUFHLENBQUEsU0FBVSxJQUFHLElBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFFO1lBaUJsQyxFQUFFLENBQUMsQ0FoQkMsMkJBQVksQ0FBQyxHQUFHLEVBQUMsU0FBVSxFQUFDLElBQUssQ0FBQyxTQUFTLENBQUMsS0FBSSxDQUFFLENBQUMsQ0FBQyxDQUFBLENBQUU7Z0JBaUJ4RCxHQWhCRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztnQkFpQnBCLE1BaEJLLFNBQVUsQ0FBQztZQWlCbEIsQ0FoQkM7UUFpQkgsQ0FoQkM7SUFpQkgsQ0FoQkM7Q0FDSDtBQWtCQTtJQUNBLGlDQUFpQztJQUNqQyxjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUNoQyxpQ0FBaUM7SUFDakMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDakMsa0RBQWtEO0lBQ2xELGNBQWMsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0FBQ25DLENBQUM7QUFFRDs7Ozs7Ozs7R0FRRztBQXpCSCxnQkEyQkksS0ExQndCLEVBMkJ4QixNQTFCeUIsRUEyQnpCLFdBMUIrQyxtQkFBZ0I7SUEyQmpFLE1BMUJNLENBQUEsSUFBSSxjQUFlLENBQVUsS0FBSyxFQUFDLE1BQU8sRUFBQyxRQUFTLENBQUMsQ0FBQztBQTJCOUQsQ0ExQkM7QUFMRCx3QkFLQyIsImZpbGUiOiJleGNlcHQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGFycmF5SW5kZXhPZiB9IGZyb20gJy4uL2ludGVybmFsL2FycmF5aW5kZXhvZic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8yID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5hcnJheWluZGV4b2ZcIik7XG5pbXBvcnQgeyBjb21wYXJlciBhcyBkZWZhdWx0Q29tcGFyZXIgfSBmcm9tICcuLi9pbnRlcm5hbC9jb21wYXJlcic7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8zID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pbnRlcm5hbC5jb21wYXJlclwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgRXhjZXB0SXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfZmlyc3Q6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2NvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGZpcnN0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiBib29sZWFufSBjb21wYXJlclxuICovXG5jb25zdHJ1Y3RvcihmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sIHNlY29uZDogSXRlcmFibGU8VFNvdXJjZT4sIGNvbXBhcmVyOiAoeDogVFNvdXJjZSwgeTogVFNvdXJjZSkgPT4gYm9vbGVhbikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fZmlyc3QgPSBmaXJzdDtcbiAgICB0aGlzLl9zZWNvbmQgPSBzZWNvbmQ7XG4gICAgdGhpcy5fY29tcGFyZXIgPSBjb21wYXJlcjtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gbWFwID0gW107XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBzZWNvbmRJdGVtIG9mIHRoaXMuX3NlY29uZCkge1xuICAgICAgbWFwLnB1c2goc2Vjb25kSXRlbSk7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBmaXJzdEl0ZW0gb2YgdGhpcy5fZmlyc3QpIHtcbiAgICAgIGlmIChhcnJheUluZGV4T2YobWFwLCBmaXJzdEl0ZW0sIHRoaXMuX2NvbXBhcmVyKSA9PT0gLTEpIHtcbiAgICAgICAgbWFwLnB1c2goZmlyc3RJdGVtKTtcbiAgICAgICAgeWllbGQgZmlyc3RJdGVtO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBFeGNlcHRJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeGNlcHRJdGVyYWJsZS5wcm90b3R5cGUuX2ZpcnN0O1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5FeGNlcHRJdGVyYWJsZS5wcm90b3R5cGUuX3NlY29uZDtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgVFNvdXJjZSk6IGJvb2xlYW59ICovXG5FeGNlcHRJdGVyYWJsZS5wcm90b3R5cGUuX2NvbXBhcmVyO1xufVxuXG4vKipcbiAqIFByb2R1Y2VzIHRoZSBzZXQgZGlmZmVyZW5jZSBvZiB0d28gc2VxdWVuY2VzIGJ5IHVzaW5nIHRoZSBhbiBlcXVhbGl0eSBjb21wYXJlciB0byBjb21wYXJlIHZhbHVlcy5cbiAqIGVsZW1lbnRzIHRvIGJlIHJlbW92ZWQgZnJvbSB0aGUgcmV0dXJuZWQgc2VxdWVuY2UuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGZpcnN0XG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc2Vjb25kXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiBib29sZWFuPX0gY29tcGFyZXJcbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUU291cmNlPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGV4Y2VwdDxUU291cmNlPihcbiAgICBmaXJzdDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgc2Vjb25kOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBjb21wYXJlcjogKHg6IFRTb3VyY2UsIHk6IFRTb3VyY2UpID0+IGJvb2xlYW4gPSBkZWZhdWx0Q29tcGFyZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IEV4Y2VwdEl0ZXJhYmxlPFRTb3VyY2U+KGZpcnN0LCBzZWNvbmQsIGNvbXBhcmVyKTtcbn1cbiJdfQ==