goog.module('targets.es2015.cls.iterable.take'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/take.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class TakeIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {number} count
     */
    constructor(source, count) {
        super();
        this._source = source;
        this._count = count;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {number} */ i = this._count;
        if (i > 0) {
            for (let /** @type {TSource} */ item of this._source) {
                yield item;
                if (--i === 0) {
                    break;
                }
            }
        }
    }
}
function TakeIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    TakeIterable.prototype._source;
    /** @type {number} */
    TakeIterable.prototype._count;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {number} count
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function take(source, count) {
    return new TakeIterable(source, count);
}
exports.take = take;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS90YWtlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7QUFDOUY7O0dBRUc7QUFQSCxrQkFBMkIsU0FBUSxvQkFBbUI7SUFXdEQ7OztPQUdHO0lBVkQsWUFBWSxNQUF5QixFQUFDLEtBQWM7UUFZbEQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztJQVl0QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWNoQixJQUFJLHFCQWJELENBQUEsQ0FBRSxHQUFFLElBQUssQ0FBQyxNQUFNLENBQUM7UUFjcEIsRUFBRSxDQUFDLENBYkMsQ0FBQyxHQUFFLENBQUUsQ0FBQyxDQUFBLENBQUU7WUFjVixHQUFHLENBQUMsQ0FiQyxJQUFBLHNCQUFHLENBQUEsSUFBSyxJQUFHLElBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFFO2dCQWM5QixNQWJLLElBQUssQ0FBQztnQkFjWCxFQUFFLENBQUMsQ0FiQyxFQUFFLENBQUMsS0FBSSxDQUFFLENBQUMsQ0FBQSxDQUFFO29CQUFBLEtBQUEsQ0FBTztnQkFBQSxDQUFFO1lBYzNCLENBYkM7UUFjSCxDQWJDO0lBY0gsQ0FiQztDQUNIO0FBZUE7SUFDQSxpQ0FBaUM7SUFDakMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDL0IscUJBQXFCO0lBQ3JCLFlBQVksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0FBQzlCLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxjQUE4QixNQUF5QixFQUFDLEtBQWM7SUEyQnBFLE1BMUJNLENBQUEsSUFBSSxZQUFhLENBQVUsTUFBTSxFQUFDLEtBQU0sQ0FBQyxDQUFDO0FBMkJsRCxDQTFCQztBQUZELG9CQUVDIiwiZmlsZSI6InRha2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgVGFrZUl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9jb3VudDogbnVtYmVyO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgY291bnQ6IG51bWJlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2NvdW50ID0gY291bnQ7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtudW1iZXJ9ICovIGkgPSB0aGlzLl9jb3VudDtcbiAgICBpZiAoaSA+IDApIHtcbiAgICAgIGZvciAobGV0IC8qKiBAdHlwZSB7VFNvdXJjZX0gKi8gaXRlbSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgICAgeWllbGQgaXRlbTtcbiAgICAgICAgaWYgKC0taSA9PT0gMCkgeyBicmVhazsgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBUYWtlSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuVGFrZUl0ZXJhYmxlLnByb3RvdHlwZS5fc291cmNlO1xuLyoqIEB0eXBlIHtudW1iZXJ9ICovXG5UYWtlSXRlcmFibGUucHJvdG90eXBlLl9jb3VudDtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0YWtlPFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGNvdW50OiBudW1iZXIpOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFRha2VJdGVyYWJsZTxUU291cmNlPihzb3VyY2UsIGNvdW50KTtcbn1cbiJdfQ==