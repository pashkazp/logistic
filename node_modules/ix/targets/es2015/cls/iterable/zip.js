goog.module('targets.es2015.cls.iterable.zip'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/zip.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource, TResult
 */
class ZipIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} left
     * @param {!Iterable<TSource>} right
     * @param {function(TSource, TSource): TResult} fn
     */
    constructor(left, right, fn) {
        super();
        this._left = left;
        this._right = right;
        this._fn = fn;
    }
    /**
     * @return {!IterableIterator<TResult>}
     */
    *[Symbol.iterator]() {
        const /** @type {!Iterator<TSource>} */ it1 = this._left[Symbol.iterator](), /** @type {!Iterator<TSource>} */ it2 = this._right[Symbol.iterator]();
        let /** @type {?} */ next1, /** @type {?} */ next2;
        while (!(next1 = it1.next()).done && (!(next2 = it2.next()).done)) {
            yield this._fn(next1.value, next2.value);
        }
    }
}
function ZipIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    ZipIterable.prototype._left;
    /** @type {!Iterable<TSource>} */
    ZipIterable.prototype._right;
    /** @type {function(TSource, TSource): TResult} */
    ZipIterable.prototype._fn;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} left
 * @param {!Iterable<TSource>} right
 * @param {function(TSource, TSource): TResult} fn
 * @return {!tsickle_forward_declare_1.IterableX<TResult>}
 */
function zip(left, right, fn) {
    return new ZipIterable(left, right, fn);
}
exports.zip = zip;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS96aXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBILGlCQUFtQyxTQUFRLG9CQUFtQjtJQVk5RDs7OztPQUlHO0lBWEQsWUFBWSxJQUF1QixFQUFDLEtBQXlCLEVBQUMsRUFBK0M7UUFhM0csS0FaSyxFQUFFLENBQUM7UUFhUixJQVpJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztRQWFsQixJQVpJLENBQUMsTUFBTSxHQUFFLEtBQU0sQ0FBQztRQWFwQixJQVpJLENBQUMsR0FBRyxHQUFFLEVBQUcsQ0FBQztJQWFoQixDQUFDO0lBQ0g7O09BRUc7SUFiRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWVoQixNQUFNLGlDQWRELENBQUEsR0FBSSxHQUFFLElBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUEsaUNBQUMsQ0FBQSxHQUFJLEdBQUUsSUFBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQWVoRixJQUFJLGdCQWRELENBQUEsS0FBTSxFQUFBLGdCQUFDLENBQUEsS0FBTSxDQUFDO1FBZWpCLE9BZE8sQ0FBQyxDQUFDLEtBQUssR0FBRSxHQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUcsQ0FBRSxDQUFDLENBQUMsS0FBSyxHQUFFLEdBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUU7WUFlbEUsTUFkSyxJQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUMsS0FBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBZTNDLENBZEM7SUFlSCxDQWRDO0NBQ0g7QUFnQkE7SUFDQSxpQ0FBaUM7SUFDakMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUM7SUFDNUIsaUNBQWlDO0lBQ2pDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQzdCLGtEQUFrRDtJQUNsRCxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQztBQUMxQixDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBN0JILGFBK0JJLElBOUJ1QixFQStCdkIsS0E5QndCLEVBK0J4QixFQTlCOEM7SUErQmhELE1BOUJNLENBQUEsSUFBSSxXQUFZLENBQW1CLElBQUksRUFBQyxLQUFNLEVBQUMsRUFBRyxDQUFDLENBQUM7QUErQjVELENBOUJDO0FBTEQsa0JBS0MiLCJmaWxlIjoiemlwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUUmVzdWx0XG4gKi9cbmNsYXNzIFppcEl0ZXJhYmxlPFRTb3VyY2UsIFRSZXN1bHQ+IGV4dGVuZHMgSXRlcmFibGVYPFRSZXN1bHQ+IHtcbnByaXZhdGUgX2xlZnQ6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfcmlnaHQ6IEl0ZXJhYmxlPFRTb3VyY2U+O1xucHJpdmF0ZSBfZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdDtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGxlZnRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSByaWdodFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogVFJlc3VsdH0gZm5cbiAqL1xuY29uc3RydWN0b3IobGVmdDogSXRlcmFibGU8VFNvdXJjZT4sIHJpZ2h0OiBJdGVyYWJsZTxUU291cmNlPiwgZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fbGVmdCA9IGxlZnQ7XG4gICAgdGhpcy5fcmlnaHQgPSByaWdodDtcbiAgICB0aGlzLl9mbiA9IGZuO1xuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYWJsZUl0ZXJhdG9yPFRSZXN1bHQ+fVxuICovXG4qW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgY29uc3QgLyoqIEB0eXBlIHshSXRlcmF0b3I8VFNvdXJjZT59ICovIGl0MSA9IHRoaXMuX2xlZnRbU3ltYm9sLml0ZXJhdG9yXSgpLCAvKiogQHR5cGUgeyFJdGVyYXRvcjxUU291cmNlPn0gKi8gaXQyID0gdGhpcy5fcmlnaHRbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgIGxldCAvKiogQHR5cGUgez99ICovIG5leHQxLCAvKiogQHR5cGUgez99ICovIG5leHQyO1xuICAgIHdoaWxlICghKG5leHQxID0gaXQxLm5leHQoKSkuZG9uZSAmJiAoIShuZXh0MiA9IGl0Mi5uZXh0KCkpLmRvbmUpKSB7XG4gICAgICB5aWVsZCB0aGlzLl9mbihuZXh0MS52YWx1ZSwgbmV4dDIudmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBaaXBJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5aaXBJdGVyYWJsZS5wcm90b3R5cGUuX2xlZnQ7XG4vKiogQHR5cGUgeyFJdGVyYWJsZTxUU291cmNlPn0gKi9cblppcEl0ZXJhYmxlLnByb3RvdHlwZS5fcmlnaHQ7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRTb3VyY2UsIFRTb3VyY2UpOiBUUmVzdWx0fSAqL1xuWmlwSXRlcmFibGUucHJvdG90eXBlLl9mbjtcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IGxlZnRcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSByaWdodFxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBUU291cmNlKTogVFJlc3VsdH0gZm5cbiAqIEByZXR1cm4geyF0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xLkl0ZXJhYmxlWDxUUmVzdWx0Pn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHppcDxUU291cmNlLCBUUmVzdWx0PihcbiAgICBsZWZ0OiBJdGVyYWJsZTxUU291cmNlPixcbiAgICByaWdodDogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgZm46IChsZWZ0OiBUU291cmNlLCByaWdodDogVFNvdXJjZSkgPT4gVFJlc3VsdCk6IEl0ZXJhYmxlWDxUUmVzdWx0PiB7XG4gIHJldHVybiBuZXcgWmlwSXRlcmFibGU8VFNvdXJjZSwgVFJlc3VsdD4obGVmdCwgcmlnaHQsIGZuKTtcbn1cbiJdfQ==