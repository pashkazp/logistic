goog.module('targets.es2015.cls.iterable.publish'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/publish.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var _refcountlist_1 = goog.require('targets.es2015.cls.iterable._refcountlist');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable._refcountlist");
var create_1 = goog.require('targets.es2015.cls.iterable.create');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable.create");
/**
 * @template T
 */
class PublishedBuffer extends iterable_1.IterableX {
    /**
     * @param {!Iterator<T>} source
     */
    constructor(source) {
        super();
        this._stopped = false;
        this._source = source;
        this._buffer = new _refcountlist_1.RefCountList(0);
    }
    /**
     * @param {number} i
     * @return {!Iterable<T>}
     */
    *_getIterable(i) {
        try {
            while (1) {
                let /** @type {boolean} */ hasValue = false, /** @type {T} */ current = ({});
                if (i >= this._buffer.count) {
                    if (!this._stopped) {
                        try {
                            let /** @type {!IteratorResult<T>} */ next = this._source.next();
                            hasValue = !next.done;
                            if (hasValue) {
                                current = next.value;
                            }
                        }
                        catch (e) {
                            this._error = e;
                            this._stopped = true;
                        }
                    }
                    if (this._stopped) {
                        if (this._error) {
                            throw this._error;
                        }
                        else {
                            break;
                        }
                    }
                    if (hasValue) {
                        this._buffer.push(current);
                    }
                }
                else {
                    hasValue = true;
                }
                if (hasValue) {
                    yield this._buffer.get(i);
                }
                else {
                    break;
                }
                i++;
            }
        }
        finally {
            this._buffer.done();
        }
    }
    /**
     * @return {!Iterator<T>}
     */
    [Symbol.iterator]() {
        this._buffer.readerCount++;
        return this._getIterable(this._buffer.count)[Symbol.iterator]();
    }
}
function PublishedBuffer_tsickle_Closure_declarations() {
    /** @type {!tsickle_forward_declare_2.RefCountList<T>} */
    PublishedBuffer.prototype._buffer;
    /** @type {!Iterator<T>} */
    PublishedBuffer.prototype._source;
    /** @type {?} */
    PublishedBuffer.prototype._error;
    /** @type {boolean} */
    PublishedBuffer.prototype._stopped;
}
/**
 * @template TSource, TResult
 * @param {!Iterable<TSource>} source
 * @param {function(!Iterable<TSource>): !Iterable<TResult>=} selector
 * @return {!tsickle_forward_declare_1.IterableX<(TSource|TResult)>}
 */
function publish(source, selector) {
    return selector ?
        create_1.create(() => selector(publish(source))[Symbol.iterator]()) :
        new PublishedBuffer(source[Symbol.iterator]());
}
exports.publish = publish;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9wdWJsaXNoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRzs7QUFFSCwwQ0FMa0I7QUFNbEIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHNDQUFzQyxDQUFDLENBTnJEO0FBT3hDLG1EQU5xQjtBQU9yQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsb0RBQW9ELENBQUMsQ0FQNUQ7QUFRL0MscUNBUGU7QUFRZixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUNyRzs7R0FFRztBQVRILHFCQUF3QixTQUFRLG9CQUFhO0lBZTdDOztPQUVHO0lBWEQsWUFBWSxNQUFtQjtRQWE3QixLQVpLLEVBQUUsQ0FBQztRQUhILGFBQVMsR0FBVyxLQUFNLENBQUE7UUFnQi9CLElBWkksQ0FBQyxPQUFPLEdBQUUsTUFBTyxDQUFDO1FBYXRCLElBWkksQ0FBQyxPQUFPLEdBQUUsSUFBSSw0QkFBYSxDQUFJLENBQUMsQ0FBQyxDQUFDO0lBYXhDLENBQUM7SUFDSDs7O09BR0c7SUFkRCxDQUFTLFlBQVksQ0FBQyxDQUFTO1FBaUI3QixJQWhCRyxDQUFFO1lBaUJILE9BaEJPLENBQUMsRUFBQyxDQUFFO2dCQWlCVCxJQUFJLHNCQWhCRCxDQUFBLFFBQVMsR0FBRSxLQUFNLEVBQUEsZ0JBQUMsQ0FBQSxPQUFRLEdBQUEsQ0FBTSxFQUFBLENBQUUsQ0FBQztnQkFpQnRDLEVBQUUsQ0FBQyxDQWhCQyxDQUFDLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFFO29CQWlCNUIsRUFBRSxDQUFDLENBaEJDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUU7d0JBaUJuQixJQWhCRyxDQUFFOzRCQWlCSCxJQUFJLGlDQWhCRCxDQUFBLElBQUssR0FBRSxJQUFLLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDOzRCQWlCL0IsUUFoQlEsR0FBRSxDQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7NEJBaUJ0QixFQUFFLENBQUMsQ0FoQkMsUUFBUSxDQUFDLENBQUEsQ0FBRTtnQ0FBQSxPQUFRLEdBQUUsSUFBSyxDQUFDLEtBQUssQ0FBQzs0QkFBQSxDQUFFO3dCQWlCekMsQ0FoQkM7d0JBQUEsS0FBQSxDQUFBLENBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTs0QkFpQlgsSUFoQkksQ0FBQyxNQUFNLEdBQUUsQ0FBRSxDQUFDOzRCQWlCaEIsSUFoQkksQ0FBQyxRQUFRLEdBQUUsSUFBSyxDQUFDO3dCQWlCdkIsQ0FoQkM7b0JBaUJILENBaEJDO29CQWtCRCxFQUFFLENBQUMsQ0FoQkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUU7d0JBaUJsQixFQUFFLENBQUMsQ0FoQkMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBLENBQUU7NEJBaUJoQixNQWhCSyxJQUFLLENBQUMsTUFBTSxDQUFDO3dCQWlCcEIsQ0FoQkM7d0JBQUEsSUFBSyxDQUFBLENBQUU7NEJBaUJOLEtBQUssQ0FoQkM7d0JBaUJSLENBaEJDO29CQWlCSCxDQWhCQztvQkFrQkQsRUFBRSxDQUFDLENBaEJDLFFBQVEsQ0FBQyxDQUFBLENBQUU7d0JBQUEsSUFBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7b0JBQUEsQ0FBRTtnQkFpQi9DLENBaEJDO2dCQUFBLElBQUssQ0FBQSxDQUFFO29CQWlCTixRQWhCUSxHQUFFLElBQUssQ0FBQztnQkFpQmxCLENBaEJDO2dCQWtCRCxFQUFFLENBQUMsQ0FoQkMsUUFBUSxDQUFDLENBQUEsQ0FBRTtvQkFpQmIsTUFoQkssSUFBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBaUI1QixDQWhCQztnQkFBQSxJQUFLLENBQUEsQ0FBRTtvQkFpQk4sS0FBSyxDQWhCQztnQkFpQlIsQ0FoQkM7Z0JBa0JELENBaEJDLEVBQUUsQ0FBQztZQWlCTixDQWhCQztRQWlCSCxDQWhCQztnQkFBUSxDQUFFO1lBaUJULElBaEJJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO1FBaUJ0QixDQWhCQztJQWlCSCxDQUFDO0lBQ0g7O09BRUc7SUFqQkQsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBbUJmLElBbEJJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBbUIzQixNQWxCTSxDQUFBLElBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztJQW1CbEUsQ0FsQkM7Q0FDSDtBQW9CQTtJQUNBLHlEQUF5RDtJQUN6RCxlQUFlLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNsQywyQkFBMkI7SUFDM0IsZUFBZSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7SUFDbEMsZ0JBQWdCO0lBQ2hCLGVBQWUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDO0lBQ2pDLHNCQUFzQjtJQUN0QixlQUFlLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQztBQUNuQyxDQUFDO0FBT0Q7Ozs7O0dBS0c7QUFuQ0gsaUJBcUNJLE1BcEN5QixFQXFDekIsUUFwQzBEO0lBcUM1RCxNQXBDTSxDQUFBLFFBQVM7UUFxQ2IsZUFwQ00sQ0FBQyxNQUFLLFFBQVMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztRQXFDMUQsSUFwQ0csZUFBZ0IsQ0FBVSxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQXFDNUQsQ0FwQ0M7QUFORCwwQkFNQyIsImZpbGUiOiJwdWJsaXNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyBSZWZDb3VudExpc3QgfSBmcm9tICcuL19yZWZjb3VudGxpc3QnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGUuX3JlZmNvdW50bGlzdFwiKTtcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJy4vY3JlYXRlJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzMgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLml0ZXJhYmxlLmNyZWF0ZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqL1xuY2xhc3MgUHVibGlzaGVkQnVmZmVyPFQ+IGV4dGVuZHMgSXRlcmFibGVYPFQ+IHtcbnByaXZhdGUgX2J1ZmZlcjogUmVmQ291bnRMaXN0PFQ+O1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYXRvcjxUPjtcbnByaXZhdGUgX2Vycm9yOiBhbnk7XG5wcml2YXRlIF9zdG9wcGVkOiBib29sZWFuID0gZmFsc2U7XG4vKipcbiAqIEBwYXJhbSB7IUl0ZXJhdG9yPFQ+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYXRvcjxUPikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5fc291cmNlID0gc291cmNlO1xuICAgIHRoaXMuX2J1ZmZlciA9IG5ldyBSZWZDb3VudExpc3Q8VD4oMCk7XG4gIH1cbi8qKlxuICogQHBhcmFtIHtudW1iZXJ9IGlcbiAqIEByZXR1cm4geyFJdGVyYWJsZTxUPn1cbiAqL1xuXG5wcml2YXRlICpfZ2V0SXRlcmFibGUoaTogbnVtYmVyKTogSXRlcmFibGU8VD4ge1xuICAgIHRyeSB7XG4gICAgICB3aGlsZSAoMSkge1xuICAgICAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNWYWx1ZSA9IGZhbHNlLCAvKiogQHR5cGUge1R9ICovIGN1cnJlbnQgPSAvKiogQHR5cGUge1R9ICovKCggPFQ+e30pKTtcbiAgICAgICAgaWYgKGkgPj0gdGhpcy5fYnVmZmVyLmNvdW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLl9zdG9wcGVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBsZXQgLyoqIEB0eXBlIHshSXRlcmF0b3JSZXN1bHQ8VD59ICovIG5leHQgPSB0aGlzLl9zb3VyY2UubmV4dCgpO1xuICAgICAgICAgICAgICBoYXNWYWx1ZSA9ICFuZXh0LmRvbmU7XG4gICAgICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyBjdXJyZW50ID0gbmV4dC52YWx1ZTsgfVxuICAgICAgICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2Vycm9yID0gZTtcbiAgICAgICAgICAgICAgdGhpcy5fc3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuX3N0b3BwZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9lcnJvcikge1xuICAgICAgICAgICAgICB0aHJvdyB0aGlzLl9lcnJvcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChoYXNWYWx1ZSkgeyB0aGlzLl9idWZmZXIucHVzaChjdXJyZW50KTsgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGhhc1ZhbHVlID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAgIHlpZWxkIHRoaXMuX2J1ZmZlci5nZXQoaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpKys7XG4gICAgICB9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHRoaXMuX2J1ZmZlci5kb25lKCk7XG4gICAgfVxuICB9XG4vKipcbiAqIEByZXR1cm4geyFJdGVyYXRvcjxUPn1cbiAqL1xuW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmF0b3I8VD4ge1xuICAgIHRoaXMuX2J1ZmZlci5yZWFkZXJDb3VudCsrO1xuICAgIHJldHVybiB0aGlzLl9nZXRJdGVyYWJsZSh0aGlzLl9idWZmZXIuY291bnQpW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBQdWJsaXNoZWRCdWZmZXJfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIuUmVmQ291bnRMaXN0PFQ+fSAqL1xuUHVibGlzaGVkQnVmZmVyLnByb3RvdHlwZS5fYnVmZmVyO1xuLyoqIEB0eXBlIHshSXRlcmF0b3I8VD59ICovXG5QdWJsaXNoZWRCdWZmZXIucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUgez99ICovXG5QdWJsaXNoZWRCdWZmZXIucHJvdG90eXBlLl9lcnJvcjtcbi8qKiBAdHlwZSB7Ym9vbGVhbn0gKi9cblB1Ymxpc2hlZEJ1ZmZlci5wcm90b3R5cGUuX3N0b3BwZWQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZT4oc291cmNlOiBJdGVyYWJsZTxUU291cmNlPik6IEl0ZXJhYmxlWDxUU291cmNlPjtcbmV4cG9ydCBmdW5jdGlvbiBwdWJsaXNoPFRTb3VyY2UsIFRSZXN1bHQ+KFxuICBzb3VyY2U6IEl0ZXJhYmxlPFRTb3VyY2U+LFxuICBzZWxlY3Rvcj86ICh2YWx1ZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRSZXN1bHQ+O1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVFJlc3VsdFxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbighSXRlcmFibGU8VFNvdXJjZT4pOiAhSXRlcmFibGU8VFJlc3VsdD49fSBzZWxlY3RvclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPChUU291cmNlfFRSZXN1bHQpPn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHB1Ymxpc2g8VFNvdXJjZSwgVFJlc3VsdD4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBzZWxlY3Rvcj86ICh2YWx1ZTogSXRlcmFibGU8VFNvdXJjZT4pID0+IEl0ZXJhYmxlPFRSZXN1bHQ+KTogSXRlcmFibGVYPFRTb3VyY2UgfCBUUmVzdWx0PiB7XG4gIHJldHVybiBzZWxlY3RvciA/XG4gICAgY3JlYXRlKCgpID0+IHNlbGVjdG9yKHB1Ymxpc2goc291cmNlKSlbU3ltYm9sLml0ZXJhdG9yXSgpKSA6XG4gICAgbmV3IFB1Ymxpc2hlZEJ1ZmZlcjxUU291cmNlPihzb3VyY2VbU3ltYm9sLml0ZXJhdG9yXSgpKTtcbn1cbiJdfQ==