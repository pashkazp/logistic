goog.module('targets.es2015.cls.iterable.distinct'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/distinct.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var identity_1 = goog.require('targets.es2015.cls.internal.identity');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.identity");
var arrayindexof_1 = goog.require('targets.es2015.cls.internal.arrayindexof');
const tsickle_forward_declare_3 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.arrayindexof");
var comparer_1 = goog.require('targets.es2015.cls.internal.comparer');
const tsickle_forward_declare_4 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.comparer");
/**
 * @template TSource, TKey
 */
class DistinctIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource): TKey} keySelector
     * @param {function(TKey, TKey): boolean} cmp
     */
    constructor(source, keySelector, cmp) {
        super();
        this._source = source;
        this._keySelector = keySelector;
        this._cmp = cmp;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {!Array<?>} */ set = [];
        for (let /** @type {TSource} */ item of this._source) {
            let /** @type {TKey} */ key = this._keySelector(item);
            if (arrayindexof_1.arrayIndexOf(set, key, this._cmp) === -1) {
                set.push(key);
                yield item;
            }
        }
    }
}
function DistinctIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    DistinctIterable.prototype._source;
    /** @type {function(TSource): TKey} */
    DistinctIterable.prototype._keySelector;
    /** @type {function(TKey, TKey): boolean} */
    DistinctIterable.prototype._cmp;
}
/**
 * Returns elements with a distinct key value by using the specified comparer to compare key values.
 * @template TSource, TKey
 * @param {!Iterable<TSource>} source Source sequence.
 * @param {function(TSource): TKey=} keySelector
 * @param {function(TKey, TKey): boolean=} comparer
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function distinct(source, keySelector = identity_1.identity, comparer = comparer_1.comparer) {
    return new DistinctIterable(source, keySelector, comparer);
}
exports.distinct = distinct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9kaXN0aW5jdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQU5yRDtBQU94QyxtREFOaUI7QUFPakIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLCtDQUErQyxDQUFDLENBUHREO0FBUWhELDJEQVBxQjtBQVFyQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsbURBQW1ELENBQUMsQ0FSbEQ7QUFTeEQsbURBUm9DO0FBU3BDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQ3ZHOztHQUVHO0FBVkgsc0JBQXFDLFNBQVEsb0JBQW1CO0lBZWhFOzs7O09BSUc7SUFkRCxZQUFZLE1BQXlCLEVBQUMsV0FBc0MsRUFBQyxHQUFtQztRQWdCOUcsS0FmSyxFQUFFLENBQUM7UUFnQlIsSUFmSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7UUFnQnRCLElBZkksQ0FBQyxZQUFZLEdBQUUsV0FBWSxDQUFDO1FBZ0JoQyxJQWZJLENBQUMsSUFBSSxHQUFFLEdBQUksQ0FBQztJQWdCbEIsQ0FBQztJQUNIOztPQUVHO0lBaEJELENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO1FBa0JoQixJQUFJLHdCQWpCRCxDQUFBLEdBQUksR0FBRSxFQUFHLENBQUM7UUFtQmIsR0FBRyxDQUFDLENBakJDLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFrQjlCLElBQUksbUJBakJELENBQUEsR0FBSSxHQUFFLElBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUM7WUFrQmxDLEVBQUUsQ0FBQyxDQWpCQywyQkFBWSxDQUFDLEdBQUcsRUFBQyxHQUFJLEVBQUMsSUFBSyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUUsQ0FBQyxDQUFDLENBQUEsQ0FBRTtnQkFrQjdDLEdBakJHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQWtCZCxNQWpCSyxJQUFLLENBQUM7WUFrQmIsQ0FqQkM7UUFrQkgsQ0FqQkM7SUFrQkgsQ0FqQkM7Q0FDSDtBQW1CQTtJQUNBLGlDQUFpQztJQUNqQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ25DLHNDQUFzQztJQUN0QyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0lBQ3hDLDRDQUE0QztJQUM1QyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBMUJILGtCQTRCSSxNQTNCeUIsRUE0QnpCLGNBM0J1QyxtQkFBUyxFQTRCaEQsV0EzQnlDLG1CQUFnQjtJQTRCM0QsTUEzQk0sQ0FBQSxJQUFJLGdCQUFpQixDQUFDLE1BQU0sRUFBQyxXQUFZLEVBQUMsUUFBUyxDQUFDLENBQUM7QUE0QjdELENBM0JDO0FBTEQsNEJBS0MiLCJmaWxlIjoiZGlzdGluY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbmltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi4vaW50ZXJuYWwvaWRlbnRpdHknO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMiA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuaWRlbnRpdHlcIik7XG5pbXBvcnQgeyBhcnJheUluZGV4T2YgfSBmcm9tICcuLi9pbnRlcm5hbC9hcnJheWluZGV4b2YnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMyA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuYXJyYXlpbmRleG9mXCIpO1xuaW1wb3J0IHsgY29tcGFyZXIgYXMgZGVmYXVsdENvbXBhcmVyIH0gZnJvbSAnLi4vaW50ZXJuYWwvY29tcGFyZXInO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfNCA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaW50ZXJuYWwuY29tcGFyZXJcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlLCBUS2V5XG4gKi9cbmNsYXNzIERpc3RpbmN0SXRlcmFibGU8VFNvdXJjZSwgVEtleT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2tleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXk7XG5wcml2YXRlIF9jbXA6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuO1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5fSBrZXlTZWxlY3RvclxuICogQHBhcmFtIHtmdW5jdGlvbihUS2V5LCBUS2V5KTogYm9vbGVhbn0gY21wXG4gKi9cbmNvbnN0cnVjdG9yKHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIGtleVNlbGVjdG9yOiAodmFsdWU6IFRTb3VyY2UpID0+IFRLZXksIGNtcDogKHg6IFRLZXksIHk6IFRLZXkpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9rZXlTZWxlY3RvciA9IGtleVNlbGVjdG9yO1xuICAgIHRoaXMuX2NtcCA9IGNtcDtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgeyFBcnJheTw/Pn0gKi8gc2V0ID0gW107XG5cbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGl0ZW0gb2YgdGhpcy5fc291cmNlKSB7XG4gICAgICBsZXQgLyoqIEB0eXBlIHtUS2V5fSAqLyBrZXkgPSB0aGlzLl9rZXlTZWxlY3RvcihpdGVtKTtcbiAgICAgIGlmIChhcnJheUluZGV4T2Yoc2V0LCBrZXksIHRoaXMuX2NtcCkgPT09IC0xKSB7XG4gICAgICAgIHNldC5wdXNoKGtleSk7XG4gICAgICAgIHlpZWxkIGl0ZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIERpc3RpbmN0SXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuRGlzdGluY3RJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSk6IFRLZXl9ICovXG5EaXN0aW5jdEl0ZXJhYmxlLnByb3RvdHlwZS5fa2V5U2VsZWN0b3I7XG4vKiogQHR5cGUge2Z1bmN0aW9uKFRLZXksIFRLZXkpOiBib29sZWFufSAqL1xuRGlzdGluY3RJdGVyYWJsZS5wcm90b3R5cGUuX2NtcDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGVsZW1lbnRzIHdpdGggYSBkaXN0aW5jdCBrZXkgdmFsdWUgYnkgdXNpbmcgdGhlIHNwZWNpZmllZCBjb21wYXJlciB0byBjb21wYXJlIGtleSB2YWx1ZXMuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZSwgVEtleVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZSBTb3VyY2Ugc2VxdWVuY2UuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UpOiBUS2V5PX0ga2V5U2VsZWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb24oVEtleSwgVEtleSk6IGJvb2xlYW49fSBjb21wYXJlclxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3Q8VFNvdXJjZSwgVEtleT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICBrZXlTZWxlY3RvcjogKHZhbHVlOiBUU291cmNlKSA9PiBUS2V5ID0gaWRlbnRpdHksXG4gICAgY29tcGFyZXI6ICh4OiBUS2V5LCB5OiBUS2V5KSA9PiBib29sZWFuID0gZGVmYXVsdENvbXBhcmVyKTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBEaXN0aW5jdEl0ZXJhYmxlKHNvdXJjZSwga2V5U2VsZWN0b3IsIGNvbXBhcmVyKTtcbn1cbiJdfQ==