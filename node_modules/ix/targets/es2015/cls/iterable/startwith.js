goog.module('targets.es2015.cls.iterable.startwith'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/startwith.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class StartWithIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {!Array<TSource>} args
     */
    constructor(source, args) {
        super();
        this._source = source;
        this._args = args;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        for (let /** @type {TSource} */ x of this._args) {
            yield x;
        }
        for (let /** @type {TSource} */ item of this._source) {
            yield item;
        }
    }
}
function StartWithIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    StartWithIterable.prototype._source;
    /** @type {!Array<TSource>} */
    StartWithIterable.prototype._args;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {...TSource} args
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function startWith(source, ...args) {
    return new StartWithIterable(source, args);
}
exports.startWith = startWith;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9zdGFydHdpdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBILHVCQUFnQyxTQUFRLG9CQUFtQjtJQVczRDs7O09BR0c7SUFWRCxZQUFZLE1BQXlCLEVBQUMsSUFBZ0I7UUFZcEQsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsS0FBSyxHQUFFLElBQUssQ0FBQztJQVlwQixDQUFDO0lBQ0g7O09BRUc7SUFaRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWNoQixHQUFHLENBQUMsQ0FiQyxJQUFBLHNCQUFHLENBQUEsQ0FBRSxJQUFHLElBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQSxDQUFFO1lBQUEsTUFBTSxDQUFFLENBQUM7UUFBQSxDQUFFO1FBY3RDLEdBQUcsQ0FBQyxDQWJDLElBQUEsc0JBQUcsQ0FBQSxJQUFLLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFBQSxNQUFNLElBQUssQ0FBQztRQUFBLENBQUU7SUFjaEQsQ0FiQztDQUNIO0FBZUE7SUFDQSxpQ0FBaUM7SUFDakMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztJQUNwQyw4QkFBOEI7SUFDOUIsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztBQUNsQyxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUF6QkgsbUJBMkJJLE1BMUJ5QixFQTJCekIsR0ExQkcsSUFBZTtJQTJCcEIsTUExQk0sQ0FBQSxJQUFJLGlCQUFrQixDQUFVLE1BQU0sRUFBQyxJQUFLLENBQUMsQ0FBQztBQTJCdEQsQ0ExQkM7QUFKRCw4QkFJQyIsImZpbGUiOiJzdGFydHdpdGguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IGFkZGVkIGJ5IHRzaWNrbGVcbiAqIEBzdXBwcmVzcyB7Y2hlY2tUeXBlc30gY2hlY2tlZCBieSB0c2NcbiAqL1xuXG5pbXBvcnQgeyBJdGVyYWJsZVggfSBmcm9tICcuLi9pdGVyYWJsZSc7XG5jb25zdCB0c2lja2xlX2ZvcndhcmRfZGVjbGFyZV8xID0gZ29vZy5mb3J3YXJkRGVjbGFyZShcIl9Vc2Vycy5wdGF5bG9yLmRldi5peGpzLnNyYy5pdGVyYWJsZVwiKTtcbi8qKlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqL1xuY2xhc3MgU3RhcnRXaXRoSXRlcmFibGU8VFNvdXJjZT4gZXh0ZW5kcyBJdGVyYWJsZVg8VFNvdXJjZT4ge1xucHJpdmF0ZSBfc291cmNlOiBJdGVyYWJsZTxUU291cmNlPjtcbnByaXZhdGUgX2FyZ3M6IFRTb3VyY2VbXTtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHshQXJyYXk8VFNvdXJjZT59IGFyZ3NcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgYXJnczogVFNvdXJjZVtdKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLl9zb3VyY2UgPSBzb3VyY2U7XG4gICAgdGhpcy5fYXJncyA9IGFyZ3M7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBmb3IgKGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIHggb2YgdGhpcy5fYXJncykgeyB5aWVsZCB4OyB9XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBpdGVtIG9mIHRoaXMuX3NvdXJjZSkgeyB5aWVsZCBpdGVtOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gU3RhcnRXaXRoSXRlcmFibGVfdHNpY2tsZV9DbG9zdXJlX2RlY2xhcmF0aW9ucygpIHtcbi8qKiBAdHlwZSB7IUl0ZXJhYmxlPFRTb3VyY2U+fSAqL1xuU3RhcnRXaXRoSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG4vKiogQHR5cGUgeyFBcnJheTxUU291cmNlPn0gKi9cblN0YXJ0V2l0aEl0ZXJhYmxlLnByb3RvdHlwZS5fYXJncztcbn1cblxuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHsuLi5UU291cmNlfSBhcmdzXG4gKiBAcmV0dXJuIHshdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMS5JdGVyYWJsZVg8VFNvdXJjZT59XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdGFydFdpdGg8VFNvdXJjZT4oXG4gICAgc291cmNlOiBJdGVyYWJsZTxUU291cmNlPixcbiAgICAuLi5hcmdzOiBUU291cmNlW10pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFN0YXJ0V2l0aEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgYXJncyk7XG59XG4iXX0=