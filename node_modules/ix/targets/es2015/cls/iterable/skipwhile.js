goog.module('targets.es2015.cls.iterable.skipwhile'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/skipwhile.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
/**
 * @template TSource
 */
class SkipWhileIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<TSource>} source
     * @param {function(TSource, number): boolean} predicate
     */
    constructor(source, predicate) {
        super();
        this._source = source;
        this._predicate = predicate;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {boolean} */ yielding = false, /** @type {number} */ i = 0;
        for (let /** @type {TSource} */ element of this._source) {
            if (!yielding && !this._predicate(element, i++)) {
                yielding = true;
            }
            if (yielding) {
                yield element;
            }
        }
    }
}
function SkipWhileIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<TSource>} */
    SkipWhileIterable.prototype._source;
    /** @type {function(TSource, number): boolean} */
    SkipWhileIterable.prototype._predicate;
}
/**
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {function(TSource, number): boolean} predicate
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function skipWhile(source, predicate) {
    return new SkipWhileIterable(source, predicate);
}
exports.skipWhile = skipWhile;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9za2lwd2hpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHOztBQUVILDBDQUxrQjtBQU1sQixNQUFNLHlCQUF5QixHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsc0NBQXNDLENBQUMsQ0FBQztBQUM5Rjs7R0FFRztBQVBILHVCQUFnQyxTQUFRLG9CQUFtQjtJQVczRDs7O09BR0c7SUFWRCxZQUFZLE1BQXlCLEVBQUMsU0FBc0Q7UUFZMUYsS0FYSyxFQUFFLENBQUM7UUFZUixJQVhJLENBQUMsT0FBTyxHQUFFLE1BQU8sQ0FBQztRQVl0QixJQVhJLENBQUMsVUFBVSxHQUFFLFNBQVUsQ0FBQztJQVk5QixDQUFDO0lBQ0g7O09BRUc7SUFaRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQWNoQixJQUFJLHNCQWJELENBQUEsUUFBUyxHQUFFLEtBQU0sRUFBQSxxQkFBQyxDQUFBLENBQUUsR0FBRSxDQUFFLENBQUM7UUFjNUIsR0FBRyxDQUFDLENBYkMsSUFBQSxzQkFBRyxDQUFBLE9BQVEsSUFBRyxJQUFLLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBRTtZQWNqQyxFQUFFLENBQUMsQ0FiQyxDQUFDLFFBQVEsSUFBRyxDQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxFQUFDLENBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQSxDQUFFO2dCQUFBLFFBQVMsR0FBRSxJQUFLLENBQUM7WUFBQSxDQUFFO1lBY3JFLEVBQUUsQ0FBQyxDQWJDLFFBQVEsQ0FBQyxDQUFBLENBQUU7Z0JBQUEsTUFBTSxPQUFRLENBQUM7WUFBQSxDQUFFO1FBY2xDLENBYkM7SUFjSCxDQWJDO0NBQ0g7QUFlQTtJQUNBLGlDQUFpQztJQUNqQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0lBQ3BDLGlEQUFpRDtJQUNqRCxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDO0FBQ3ZDLENBQUM7QUFFRDs7Ozs7R0FLRztBQXpCSCxtQkEyQkksTUExQnlCLEVBMkJ6QixTQTFCcUQ7SUEyQnZELE1BMUJNLENBQUEsSUFBSSxpQkFBa0IsQ0FBVSxNQUFNLEVBQUMsU0FBVSxDQUFDLENBQUM7QUEyQjNELENBMUJDO0FBSkQsOEJBSUMiLCJmaWxlIjoic2tpcHdoaWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKi9cbmNsYXNzIFNraXBXaGlsZUl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8VFNvdXJjZT47XG5wcml2YXRlIF9wcmVkaWNhdGU6ICh2YWx1ZTogVFNvdXJjZSwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbjtcbi8qKlxuICogQHBhcmFtIHshSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHBhcmFtIHtmdW5jdGlvbihUU291cmNlLCBudW1iZXIpOiBib29sZWFufSBwcmVkaWNhdGVcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxUU291cmNlPiwgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgICB0aGlzLl9wcmVkaWNhdGUgPSBwcmVkaWNhdGU7XG4gIH1cbi8qKlxuICogQHJldHVybiB7IUl0ZXJhYmxlSXRlcmF0b3I8VFNvdXJjZT59XG4gKi9cbipbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICBsZXQgLyoqIEB0eXBlIHtib29sZWFufSAqLyB5aWVsZGluZyA9IGZhbHNlLCAvKiogQHR5cGUge251bWJlcn0gKi8gaSA9IDA7XG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHtUU291cmNlfSAqLyBlbGVtZW50IG9mIHRoaXMuX3NvdXJjZSkge1xuICAgICAgaWYgKCF5aWVsZGluZyAmJiAhdGhpcy5fcHJlZGljYXRlKGVsZW1lbnQsIGkrKykpIHsgeWllbGRpbmcgPSB0cnVlOyB9XG4gICAgICBpZiAoeWllbGRpbmcpIHsgeWllbGQgZWxlbWVudDsgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBTa2lwV2hpbGVJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovXG5Ta2lwV2hpbGVJdGVyYWJsZS5wcm90b3R5cGUuX3NvdXJjZTtcbi8qKiBAdHlwZSB7ZnVuY3Rpb24oVFNvdXJjZSwgbnVtYmVyKTogYm9vbGVhbn0gKi9cblNraXBXaGlsZUl0ZXJhYmxlLnByb3RvdHlwZS5fcHJlZGljYXRlO1xufVxuXG4vKipcbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKFRTb3VyY2UsIG51bWJlcik6IGJvb2xlYW59IHByZWRpY2F0ZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gc2tpcFdoaWxlPFRTb3VyY2U+KFxuICAgIHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sXG4gICAgcHJlZGljYXRlOiAodmFsdWU6IFRTb3VyY2UsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IFNraXBXaGlsZUl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSwgcHJlZGljYXRlKTtcbn1cbiJdfQ==