goog.module('targets.es2015.cls.iterable.catch'); exports = {}; var module = {id: 'targets/es2015/cls/iterable/catch.js'};/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

var iterable_1 = goog.require('targets.es2015.cls.iterable');
const tsickle_forward_declare_1 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.iterable");
var returniterator_1 = goog.require('targets.es2015.cls.internal.returniterator');
const tsickle_forward_declare_2 = goog.forwardDeclare("_Users.ptaylor.dev.ixjs.src.internal.returniterator");
/**
 * @template TSource
 */
class CatchIterable extends iterable_1.IterableX {
    /**
     * @param {!Iterable<!Iterable<TSource>>} source
     */
    constructor(source) {
        super();
        this._source = source;
    }
    /**
     * @return {!IterableIterator<TSource>}
     */
    *[Symbol.iterator]() {
        let /** @type {?} */ error = null, /** @type {boolean} */ hasError = false;
        for (let /** @type {!Iterable<TSource>} */ source of this._source) {
            const /** @type {!Iterator<TSource>} */ it = source[Symbol.iterator]();
            error = null;
            hasError = false;
            while (1) {
                let /** @type {TSource} */ c = ({});
                try {
                    const { done, value } = it.next();
                    if (done) {
                        returniterator_1.returnIterator(it);
                        break;
                    }
                    c = value;
                }
                catch (e) {
                    error = e;
                    hasError = true;
                    returniterator_1.returnIterator(it);
                    break;
                }
                yield c;
            }
            if (!hasError) {
                break;
            }
        }
        if (hasError) {
            throw error;
        }
    }
}
function CatchIterable_tsickle_Closure_declarations() {
    /** @type {!Iterable<!Iterable<TSource>>} */
    CatchIterable.prototype._source;
}
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {!Iterable<!Iterable<TSource>>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function _catchAll(source) {
    return new CatchIterable(source);
}
exports._catchAll = _catchAll;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {!Iterable<TSource>} source
 * @param {...!Iterable<TSource>} args
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function _catch(source, ...args) {
    return new CatchIterable([source, ...args]);
}
exports._catch = _catch;
/**
 * Creates a sequence by concatenating source sequences until a source sequence completes successfully.
 * @template TSource
 * @param {...!Iterable<TSource>} source
 * @return {!tsickle_forward_declare_1.IterableX<TSource>}
 */
function _catchStatic(...source) {
    return new CatchIterable(source);
}
exports._catchStatic = _catchStatic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9pdGVyYWJsZS9jYXRjaC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7O0FBRUgsMENBTGtCO0FBTWxCLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxzQ0FBc0MsQ0FBQyxDQU5yRDtBQU94QywrREFOdUI7QUFPdkIsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLHFEQUFxRCxDQUFDLENBQUM7QUFDN0c7O0dBRUc7QUFSSCxtQkFBNEIsU0FBUSxvQkFBbUI7SUFXdkQ7O09BRUc7SUFWRCxZQUFZLE1BQW1DO1FBWTdDLEtBWEssRUFBRSxDQUFDO1FBWVIsSUFYSSxDQUFDLE9BQU8sR0FBRSxNQUFPLENBQUM7SUFZeEIsQ0FBQztJQUNIOztPQUVHO0lBWkQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUM7UUFjaEIsSUFBSSxnQkFiRCxDQUFBLEtBQU0sR0FBRSxJQUFLLEVBQUEsc0JBQUMsQ0FBQSxRQUFTLEdBQUUsS0FBTSxDQUFDO1FBZW5DLEdBQUcsQ0FBQyxDQWJDLElBQUEsaUNBQUcsQ0FBQSxNQUFPLElBQUcsSUFBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUU7WUFjaEMsTUFBTSxpQ0FiRCxDQUFBLEVBQUcsR0FBRSxNQUFPLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUM7WUFlckMsS0FiSyxHQUFFLElBQUssQ0FBQztZQWNiLFFBYlEsR0FBRSxLQUFNLENBQUM7WUFlakIsT0FiTyxDQUFDLEVBQUMsQ0FBRTtnQkFjVCxJQUFJLHNCQWJELENBQUEsQ0FBRSxHQUFBLENBQVksRUFBQSxDQUFFLENBQUM7Z0JBZXBCLElBYkcsQ0FBRTtvQkFjSCxNQWJLLEVBQUUsSUFBSyxFQUFDLEtBQU0sRUFBRSxHQUFFLEVBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFjbEMsRUFBRSxDQUFDLENBYkMsSUFBSSxDQUFDLENBQUEsQ0FBRTt3QkFjVCwrQkFiYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO3dCQWNuQixLQUFLLENBYkM7b0JBY1IsQ0FiQztvQkFjRCxDQWJDLEdBQUUsS0FBTSxDQUFDO2dCQWNaLENBYkM7Z0JBQUEsS0FBQSxDQUFBLENBQVEsQ0FBQyxDQUFDLENBQUEsQ0FBRTtvQkFjWCxLQWJLLEdBQUUsQ0FBRSxDQUFDO29CQWNWLFFBYlEsR0FBRSxJQUFLLENBQUM7b0JBY2hCLCtCQWJjLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBY25CLEtBQUssQ0FiQztnQkFjUixDQWJDO2dCQWVELE1BYkssQ0FBRSxDQUFDO1lBY1YsQ0FiQztZQWVELEVBQUUsQ0FBQyxDQWJDLENBQUMsUUFBUSxDQUFDLENBQUEsQ0FBRTtnQkFBQSxLQUFBLENBQU87WUFBQSxDQUFFO1FBYzNCLENBYkM7UUFlRCxFQUFFLENBQUMsQ0FiQyxRQUFRLENBQUMsQ0FBQSxDQUFFO1lBQUEsTUFBTSxLQUFNLENBQUM7UUFBQSxDQUFFO0lBY2hDLENBYkM7Q0FDSDtBQWVBO0lBQ0EsNENBQTRDO0lBQzVDLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0FBQ2hDLENBQUM7QUFFRDs7Ozs7R0FLRztBQWxCSCxtQkFBbUMsTUFBbUM7SUFvQnBFLE1BbkJNLENBQUEsSUFBSSxhQUFjLENBQVUsTUFBTSxDQUFDLENBQUM7QUFvQjVDLENBQUM7QUFyQkQsOEJBcUJDO0FBQ0Q7Ozs7OztHQU1HO0FBbkJILGdCQUFnQyxNQUF5QixFQUFDLEdBQUksSUFBeUI7SUFxQnJGLE1BcEJNLENBQUEsSUFBSSxhQUFjLENBQVUsQ0FBQyxNQUFNLEVBQUMsR0FBSSxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBcUJ2RCxDQUFDO0FBdEJELHdCQXNCQztBQUNEOzs7OztHQUtHO0FBbkJILHNCQUFzQyxHQUFHLE1BQTJCO0lBcUJsRSxNQXBCTSxDQUFBLElBQUksYUFBYyxDQUFVLE1BQU0sQ0FBQyxDQUFDO0FBcUI1QyxDQXBCQztBQUZELG9DQUVDIiwiZmlsZSI6ImNhdGNoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGZpbGVvdmVydmlldyBhZGRlZCBieSB0c2lja2xlXG4gKiBAc3VwcHJlc3Mge2NoZWNrVHlwZXN9IGNoZWNrZWQgYnkgdHNjXG4gKi9cblxuaW1wb3J0IHsgSXRlcmFibGVYIH0gZnJvbSAnLi4vaXRlcmFibGUnO1xuY29uc3QgdHNpY2tsZV9mb3J3YXJkX2RlY2xhcmVfMSA9IGdvb2cuZm9yd2FyZERlY2xhcmUoXCJfVXNlcnMucHRheWxvci5kZXYuaXhqcy5zcmMuaXRlcmFibGVcIik7XG5pbXBvcnQgeyByZXR1cm5JdGVyYXRvciB9IGZyb20gJy4uL2ludGVybmFsL3JldHVybml0ZXJhdG9yJztcbmNvbnN0IHRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzIgPSBnb29nLmZvcndhcmREZWNsYXJlKFwiX1VzZXJzLnB0YXlsb3IuZGV2Lml4anMuc3JjLmludGVybmFsLnJldHVybml0ZXJhdG9yXCIpO1xuLyoqXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICovXG5jbGFzcyBDYXRjaEl0ZXJhYmxlPFRTb3VyY2U+IGV4dGVuZHMgSXRlcmFibGVYPFRTb3VyY2U+IHtcbnByaXZhdGUgX3NvdXJjZTogSXRlcmFibGU8SXRlcmFibGU8VFNvdXJjZT4+O1xuLyoqXG4gKiBAcGFyYW0geyFJdGVyYWJsZTwhSXRlcmFibGU8VFNvdXJjZT4+fSBzb3VyY2VcbiAqL1xuY29uc3RydWN0b3Ioc291cmNlOiBJdGVyYWJsZTxJdGVyYWJsZTxUU291cmNlPj4pIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuX3NvdXJjZSA9IHNvdXJjZTtcbiAgfVxuLyoqXG4gKiBAcmV0dXJuIHshSXRlcmFibGVJdGVyYXRvcjxUU291cmNlPn1cbiAqL1xuKltTeW1ib2wuaXRlcmF0b3JdKCkge1xuICAgIGxldCAvKiogQHR5cGUgez99ICovIGVycm9yID0gbnVsbCwgLyoqIEB0eXBlIHtib29sZWFufSAqLyBoYXNFcnJvciA9IGZhbHNlO1xuXG4gICAgZm9yIChsZXQgLyoqIEB0eXBlIHshSXRlcmFibGU8VFNvdXJjZT59ICovIHNvdXJjZSBvZiB0aGlzLl9zb3VyY2UpIHtcbiAgICAgIGNvbnN0IC8qKiBAdHlwZSB7IUl0ZXJhdG9yPFRTb3VyY2U+fSAqLyBpdCA9IHNvdXJjZVtTeW1ib2wuaXRlcmF0b3JdKCk7XG5cbiAgICAgIGVycm9yID0gbnVsbDtcbiAgICAgIGhhc0Vycm9yID0gZmFsc2U7XG5cbiAgICAgIHdoaWxlICgxKSB7XG4gICAgICAgIGxldCAvKiogQHR5cGUge1RTb3VyY2V9ICovIGMgPSAvKiogQHR5cGUge1RTb3VyY2V9ICovKCggPFRTb3VyY2U+e30pKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgZG9uZSwgdmFsdWUgfSA9IGl0Lm5leHQoKTtcbiAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgcmV0dXJuSXRlcmF0b3IoaXQpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGMgPSB2YWx1ZTtcbiAgICAgICAgfSBjYXRjaCAoIC8qKiBAdHlwZSB7P30gKi9lKSB7XG4gICAgICAgICAgZXJyb3IgPSBlO1xuICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm5JdGVyYXRvcihpdCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB5aWVsZCBjO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWhhc0Vycm9yKSB7IGJyZWFrOyB9XG4gICAgfVxuXG4gICAgaWYgKGhhc0Vycm9yKSB7IHRocm93IGVycm9yOyB9XG4gIH1cbn1cblxuZnVuY3Rpb24gQ2F0Y2hJdGVyYWJsZV90c2lja2xlX0Nsb3N1cmVfZGVjbGFyYXRpb25zKCkge1xuLyoqIEB0eXBlIHshSXRlcmFibGU8IUl0ZXJhYmxlPFRTb3VyY2U+Pn0gKi9cbkNhdGNoSXRlcmFibGUucHJvdG90eXBlLl9zb3VyY2U7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNlcXVlbmNlIGJ5IGNvbmNhdGVuYXRpbmcgc291cmNlIHNlcXVlbmNlcyB1bnRpbCBhIHNvdXJjZSBzZXF1ZW5jZSBjb21wbGV0ZXMgc3VjY2Vzc2Z1bGx5LlxuICogQHRlbXBsYXRlIFRTb3VyY2VcbiAqIEBwYXJhbSB7IUl0ZXJhYmxlPCFJdGVyYWJsZTxUU291cmNlPj59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoQWxsPFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8SXRlcmFibGU8VFNvdXJjZT4+KTogSXRlcmFibGVYPFRTb3VyY2U+IHtcbiAgcmV0dXJuIG5ldyBDYXRjaEl0ZXJhYmxlPFRTb3VyY2U+KHNvdXJjZSk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBzZXF1ZW5jZSBieSBjb25jYXRlbmF0aW5nIHNvdXJjZSBzZXF1ZW5jZXMgdW50aWwgYSBzb3VyY2Ugc2VxdWVuY2UgY29tcGxldGVzIHN1Y2Nlc3NmdWxseS5cbiAqIEB0ZW1wbGF0ZSBUU291cmNlXG4gKiBAcGFyYW0geyFJdGVyYWJsZTxUU291cmNlPn0gc291cmNlXG4gKiBAcGFyYW0gey4uLiFJdGVyYWJsZTxUU291cmNlPn0gYXJnc1xuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoPFRTb3VyY2U+KHNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT4sIC4uLmFyZ3M6IEl0ZXJhYmxlPFRTb3VyY2U+W10pOiBJdGVyYWJsZVg8VFNvdXJjZT4ge1xuICByZXR1cm4gbmV3IENhdGNoSXRlcmFibGU8VFNvdXJjZT4oW3NvdXJjZSwgLi4uYXJnc10pO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc2VxdWVuY2UgYnkgY29uY2F0ZW5hdGluZyBzb3VyY2Ugc2VxdWVuY2VzIHVudGlsIGEgc291cmNlIHNlcXVlbmNlIGNvbXBsZXRlcyBzdWNjZXNzZnVsbHkuXG4gKiBAdGVtcGxhdGUgVFNvdXJjZVxuICogQHBhcmFtIHsuLi4hSXRlcmFibGU8VFNvdXJjZT59IHNvdXJjZVxuICogQHJldHVybiB7IXRzaWNrbGVfZm9yd2FyZF9kZWNsYXJlXzEuSXRlcmFibGVYPFRTb3VyY2U+fVxuICovXG5leHBvcnQgZnVuY3Rpb24gX2NhdGNoU3RhdGljPFRTb3VyY2U+KC4uLnNvdXJjZTogSXRlcmFibGU8VFNvdXJjZT5bXSk6IEl0ZXJhYmxlWDxUU291cmNlPiB7XG4gIHJldHVybiBuZXcgQ2F0Y2hJdGVyYWJsZTxUU291cmNlPihzb3VyY2UpO1xufVxuIl19