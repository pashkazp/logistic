"use strict";
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const inquirer = require("inquirer");
const polymer_workspaces_1 = require("polymer-workspaces");
const util_1 = require("./util");
function run(reposToConvert) {
    return __awaiter(this, void 0, void 0, function* () {
        console.log(chalk_1.default.dim('[1/5] ') + chalk_1.default.magenta(`Setting up push to GitHub...`));
        const { commitMessage, branchName, forcePush } = (yield inquirer.prompt([
            {
                type: 'input',
                name: 'branchName',
                message: 'push to branch:',
                default: 'polymer-modulizer-auto-generated',
            },
            {
                type: 'confirm',
                name: 'forcePush',
                message: (args) => {
                    return `force push? (WARNING: This will overwrite any existing "${args.branchName}" branch on GitHub`;
                },
                default: false,
            },
            {
                type: 'input',
                name: 'commitMessage',
                message: 'with commit message:',
                default: `"auto-generated by polymer-modulizer"`,
            }
        ]));
        console.log(chalk_1.default.dim('[2/5] ') + chalk_1.default.magenta(`Preparing new branches...`));
        yield polymer_workspaces_1.startNewBranch(reposToConvert, 'polymer-modulizer-staging');
        console.log(chalk_1.default.dim('[3/5] ') + chalk_1.default.magenta(`Committing changes...`));
        yield polymer_workspaces_1.commitChanges(reposToConvert, commitMessage);
        console.log('');
        console.log('Ready to push:');
        for (const repo of reposToConvert) {
            console.log(`  - ${repo.github.fullName}  ${chalk_1.default.dim(repo.github.ref || repo.github.defaultBranch)} -> ${chalk_1.default.cyan(branchName)}`);
        }
        console.log('');
        const { confirmPush } = (yield inquirer.prompt([{
                type: 'confirm',
                name: 'confirmPush',
                message: 'start?',
                default: true,
            }]));
        if (!confirmPush) {
            return;
        }
        console.log(chalk_1.default.dim('[4/5] ') + chalk_1.default.magenta(`Pushing to GitHub...`));
        const publishResults = yield polymer_workspaces_1.pushChangesToGithub(reposToConvert, branchName, forcePush);
        publishResults.successes.forEach((_result, repo) => {
            console.log(`  - ${chalk_1.default.cyan(repo.dir)}: success!`);
        });
        publishResults.failures.forEach(util_1.logRepoError);
        console.log(chalk_1.default.dim('[5/5]') + ' ðŸŽ‰  ' + chalk_1.default.magenta(`Push Complete!`));
    });
}
exports.default = run;
//# sourceMappingURL=push-workspace.js.map